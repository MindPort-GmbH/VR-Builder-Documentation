{
  "api/VRBuilder.Animations.Behaviors.AnimateTransformBehavior.EntityData.html": {
    "href": "api/VRBuilder.Animations.Behaviors.AnimateTransformBehavior.EntityData.html",
    "title": "Class AnimateTransformBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class AnimateTransformBehavior.EntityData Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll The \"follow path\" behavior's data. [DisplayName(\"Animate Transform\")] [DataContract(IsReference = true)] public class AnimateTransformBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object AnimateTransformBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Duration Duration of the transition. If duration is equal or less than zero, the new transform will be applied immediately. [DataMember] [DisplayName(\"Duration (in seconds)\")] public float Duration { get; set; } Property Value float Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string PingPong If enabled, the animation will repeat in reverse, returning the object to the starting position. [DataMember] [DisplayName(\"Ping pong\")] public bool PingPong { get; set; } Property Value bool PositionCurve Determines the position of the object at a given time. The curve is normalized, the duration of the animation can be set in the Duration field. [DataMember] [DisplayName(\"Position curve\")] public AnimationCurve PositionCurve { get; set; } Property Value AnimationCurve Repeats Number of times the animation should be repeated. [DataMember] [DisplayName(\"Repeats\")] public int Repeats { get; set; } Property Value int RotationCurve Determines the rotation of the object at a given time. The curve is normalized, the duration of the animation can be set in the Duration field. [DataMember] [DisplayName(\"Rotation curve\")] public AnimationCurve RotationCurve { get; set; } Property Value AnimationCurve ScaleCurve Determines the scale of the object at a given time. The curve is normalized, the duration of the animation can be set in the Duration field. [DataMember] [DisplayName(\"Scale curve\")] public AnimationCurve ScaleCurve { get; set; } Property Value AnimationCurve Target [DataMember] [Obsolete(\"Use TargetObject instead.\")] [LegacyProperty(\"TargetObject\")] public SceneObjectReference Target { get; set; } Property Value SceneObjectReference TargetObject Target scene object to be transformed. [DataMember] [DisplayName(\"Object\")] public SingleSceneObjectReference TargetObject { get; set; } Property Value SingleSceneObjectReference TargetTransform [DataMember] [Obsolete(\"Use TargetTransformProvider instead.\")] [LegacyProperty(\"TargetTransformProvider\")] public SceneObjectReference TargetTransform { get; set; } Property Value SceneObjectReference TargetTransformProvider Object defining the target transform values. [DataMember] [DisplayName(\"Final transform provider\")] public SingleSceneObjectReference TargetTransformProvider { get; set; } Property Value SingleSceneObjectReference"
  },
  "api/VRBuilder.Animations.Behaviors.AnimateTransformBehavior.html": {
    "href": "api/VRBuilder.Animations.Behaviors.AnimateTransformBehavior.html",
    "title": "Class AnimateTransformBehavior | VR Builder Documentation",
    "keywords": "Class AnimateTransformBehavior Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll Animates an object's transform over time to a new position, rotation and/or scale. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/animations-add-on\")] public class AnimateTransformBehavior : Behavior<AnimateTransformBehavior.EntityData>, IDataOwner<AnimateTransformBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<AnimateTransformBehavior.EntityData> Behavior<AnimateTransformBehavior.EntityData> AnimateTransformBehavior Implements IDataOwner<AnimateTransformBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<AnimateTransformBehavior.EntityData>.Clone() Entity<AnimateTransformBehavior.EntityData>.Data Entity<AnimateTransformBehavior.EntityData>.LifeCycle Entity<AnimateTransformBehavior.EntityData>.Parent Entity<AnimateTransformBehavior.EntityData>.GetActiveProcess() Entity<AnimateTransformBehavior.EntityData>.GetDeactivatingProcess() Entity<AnimateTransformBehavior.EntityData>.GetConfigurator() Entity<AnimateTransformBehavior.EntityData>.Configure(IMode) Entity<AnimateTransformBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AnimateTransformBehavior() [JsonConstructor] [Preserve] public AnimateTransformBehavior() AnimateTransformBehavior(Guid, Guid, float, AnimationCurve, AnimationCurve, AnimationCurve, bool, int) public AnimateTransformBehavior(Guid targetGuid, Guid transformProviderGuid, float duration, AnimationCurve positionCurve, AnimationCurve rotationCurve, AnimationCurve scaleCurve, bool pingPong = false, int repeats = 1) Parameters targetGuid Guid transformProviderGuid Guid duration float positionCurve AnimationCurve rotationCurve AnimationCurve scaleCurve AnimationCurve pingPong bool repeats int AnimateTransformBehavior(ISceneObject, ISceneObject, float, AnimationCurve, AnimationCurve, AnimationCurve, bool, int) public AnimateTransformBehavior(ISceneObject target, ISceneObject transformProvider, float duration, AnimationCurve positionCurve, AnimationCurve rotationCurve, AnimationCurve scaleCurve, bool pingPong = false, int repeats = 1) Parameters target ISceneObject transformProvider ISceneObject duration float positionCurve AnimationCurve rotationCurve AnimationCurve scaleCurve AnimationCurve pingPong bool repeats int Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Animations.Behaviors.ChildExplosionViewBehavior.EntityData.html": {
    "href": "api/VRBuilder.Animations.Behaviors.ChildExplosionViewBehavior.EntityData.html",
    "title": "Class ChildExplosionViewBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class ChildExplosionViewBehavior.EntityData Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll The \"follow path\" behavior's data. [DisplayName(\"Child Explosion View\")] [DataContract(IsReference = true)] public class ChildExplosionViewBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object ChildExplosionViewBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Duration Duration of the transition. If duration is equal or less than zero, the new transform will be applied immediately. [DataMember] [DisplayName(\"Duration (in seconds)\")] public float Duration { get; set; } Property Value float ExplosionCurve Determines the position of the object at a given time. The curve is normalized, the duration of the animation can be set in the Duration field. [DataMember] [DisplayName(\"Explosion curve\")] public AnimationCurve ExplosionCurve { get; set; } Property Value AnimationCurve Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. public string Name { get; } Property Value string PingPong If enabled, the animation will repeat in reverse, returning the object to the starting position. [DataMember] [DisplayName(\"Ping pong\")] public bool PingPong { get; set; } Property Value bool Repeats Number of times the animation should be repeated. [DataMember] [DisplayName(\"Repeats\")] public int Repeats { get; set; } Property Value int Scale Scale of the explosion. A value of 1 resets the object to the initial state. [DataMember] [DisplayName(\"Scale\")] public float Scale { get; set; } Property Value float Target [DataMember] [Obsolete(\"Use TargetObject instead.\")] [LegacyProperty(\"TargetObject\")] public ScenePropertyReference<IExplodableProperty> Target { get; set; } Property Value ScenePropertyReference<IExplodableProperty> TargetObject Target scene object to be transformed. [DataMember] [DisplayName(\"Object\")] public SingleScenePropertyReference<IExplodableProperty> TargetObject { get; set; } Property Value SingleScenePropertyReference<IExplodableProperty>"
  },
  "api/VRBuilder.Animations.Behaviors.ChildExplosionViewBehavior.html": {
    "href": "api/VRBuilder.Animations.Behaviors.ChildExplosionViewBehavior.html",
    "title": "Class ChildExplosionViewBehavior | VR Builder Documentation",
    "keywords": "Class ChildExplosionViewBehavior Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll Animates an object's transform over time to a new position, rotation and/or scale. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/animations-add-on\")] public class ChildExplosionViewBehavior : Behavior<ChildExplosionViewBehavior.EntityData>, IDataOwner<ChildExplosionViewBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<ChildExplosionViewBehavior.EntityData> Behavior<ChildExplosionViewBehavior.EntityData> ChildExplosionViewBehavior Implements IDataOwner<ChildExplosionViewBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<ChildExplosionViewBehavior.EntityData>.Clone() Entity<ChildExplosionViewBehavior.EntityData>.Data Entity<ChildExplosionViewBehavior.EntityData>.LifeCycle Entity<ChildExplosionViewBehavior.EntityData>.Parent Entity<ChildExplosionViewBehavior.EntityData>.GetActiveProcess() Entity<ChildExplosionViewBehavior.EntityData>.GetDeactivatingProcess() Entity<ChildExplosionViewBehavior.EntityData>.GetConfigurator() Entity<ChildExplosionViewBehavior.EntityData>.Configure(IMode) Entity<ChildExplosionViewBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChildExplosionViewBehavior() [JsonConstructor] [Preserve] public ChildExplosionViewBehavior() ChildExplosionViewBehavior(Guid, float, float, AnimationCurve, bool, int) public ChildExplosionViewBehavior(Guid targetGuid, float scale, float duration, AnimationCurve explosionCurve, bool pingPong = false, int repeats = 1) Parameters targetGuid Guid scale float duration float explosionCurve AnimationCurve pingPong bool repeats int ChildExplosionViewBehavior(IExplodableProperty, float, float, AnimationCurve, bool, int) public ChildExplosionViewBehavior(IExplodableProperty target, float scale, float duration, AnimationCurve explosionCurve, bool pingPong = false, int repeats = 1) Parameters target IExplodableProperty scale float duration float explosionCurve AnimationCurve pingPong bool repeats int Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Animations.Behaviors.FollowPathBehavior.EntityData.html": {
    "href": "api/VRBuilder.Animations.Behaviors.FollowPathBehavior.EntityData.html",
    "title": "Class FollowPathBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class FollowPathBehavior.EntityData Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll The \"follow path\" behavior's data. [DisplayName(\"Follow Path\")] [DataContract(IsReference = true)] public class FollowPathBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object FollowPathBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisableRotation If enabled, the object will not rotate while following the path. Settings on KeepRelativeRotation will be ignored. [DataMember] [DisplayName(\"Disable Rotation\")] public bool DisableRotation { get; set; } Property Value bool Duration Duration of the transition. If duration is equal or less than zero, the object will be instantaneously moved at the end of the path. [DataMember] [DisplayName(\"Duration (in seconds)\")] public float Duration { get; set; } Property Value float KeepRelativePosition If enabled, the object will keep its relative position to the path instead of being teleported on it when the animation starts. [DataMember] [DisplayName(\"Keep relative position\")] public bool KeepRelativePosition { get; set; } Property Value bool KeepRelativeRotation If enabled, the object will keep its relative rotation to the path instead of having its forward vector pointing forward along the path. [DataMember] [DisplayName(\"Keep relative rotation\")] public bool KeepRelativeRotation { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Path [DataMember] [Obsolete(\"Use PathProperty instead.\")] [LegacyProperty(\"PathProperty\")] public ScenePropertyReference<IPathProperty> Path { get; set; } Property Value ScenePropertyReference<IPathProperty> PathProperty Path the target is meant to follow. [DataMember] [DisplayName(\"Path\")] public SingleScenePropertyReference<IPathProperty> PathProperty { get; set; } Property Value SingleScenePropertyReference<IPathProperty> PingPong If enabled, the animation will repeat in reverse, returning the object to the starting position. [DataMember] [DisplayName(\"Ping pong\")] public bool PingPong { get; set; } Property Value bool Repeats Number of times the animation should be repeated. [DataMember] [DisplayName(\"Repeats\")] public int Repeats { get; set; } Property Value int Reverse If enabled, the animation will play backwards. [DataMember] [DisplayName(\"Reverse\")] public bool Reverse { get; set; } Property Value bool Target [DataMember] [Obsolete(\"Use TargetObject instead.\")] [LegacyProperty(\"TargetObject\")] public SceneObjectReference Target { get; set; } Property Value SceneObjectReference TargetObject Target scene object to be moved. [DataMember] [DisplayName(\"Object\")] public SingleSceneObjectReference TargetObject { get; set; } Property Value SingleSceneObjectReference Velocity Determines how fast the object moves at a given time. The curve is normalized, the duration of the animation can be set in the Duration field. [DataMember] [DisplayName(\"Velocity curve\")] public AnimationCurve Velocity { get; set; } Property Value AnimationCurve"
  },
  "api/VRBuilder.Animations.Behaviors.FollowPathBehavior.html": {
    "href": "api/VRBuilder.Animations.Behaviors.FollowPathBehavior.html",
    "title": "Class FollowPathBehavior | VR Builder Documentation",
    "keywords": "Class FollowPathBehavior Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll Moves an object along a path. The object rotates to follow the path. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/animations-add-on\")] public class FollowPathBehavior : Behavior<FollowPathBehavior.EntityData>, IDataOwner<FollowPathBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<FollowPathBehavior.EntityData> Behavior<FollowPathBehavior.EntityData> FollowPathBehavior Implements IDataOwner<FollowPathBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<FollowPathBehavior.EntityData>.Clone() Entity<FollowPathBehavior.EntityData>.Data Entity<FollowPathBehavior.EntityData>.LifeCycle Entity<FollowPathBehavior.EntityData>.Parent Entity<FollowPathBehavior.EntityData>.GetActiveProcess() Entity<FollowPathBehavior.EntityData>.GetDeactivatingProcess() Entity<FollowPathBehavior.EntityData>.GetConfigurator() Entity<FollowPathBehavior.EntityData>.Configure(IMode) Entity<FollowPathBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FollowPathBehavior() [JsonConstructor] [Preserve] public FollowPathBehavior() FollowPathBehavior(Guid, Guid, float, AnimationCurve, bool, bool, bool, bool, int, bool) public FollowPathBehavior(Guid targetGuid, Guid pathGuid, float duration, AnimationCurve velocity, bool keepRelativePosition = false, bool keepRelativeRotation = false, bool reverse = false, bool pingPong = false, int repeats = 1, bool disableRotation = false) Parameters targetGuid Guid pathGuid Guid duration float velocity AnimationCurve keepRelativePosition bool keepRelativeRotation bool reverse bool pingPong bool repeats int disableRotation bool FollowPathBehavior(ISceneObject, IPathProperty, float, AnimationCurve, bool, bool, bool, bool, int, bool) public FollowPathBehavior(ISceneObject target, IPathProperty path, float duration, AnimationCurve velocity, bool keepRelativePosition = false, bool keepRelativeRotation = false, bool reverse = false, bool pingPong = false, int repeats = 1, bool disableRotation = false) Parameters target ISceneObject path IPathProperty duration float velocity AnimationCurve keepRelativePosition bool keepRelativeRotation bool reverse bool pingPong bool repeats int disableRotation bool Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Animations.Behaviors.RotateAroundAxisBehavior.EntityData.html": {
    "href": "api/VRBuilder.Animations.Behaviors.RotateAroundAxisBehavior.EntityData.html",
    "title": "Class RotateAroundAxisBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class RotateAroundAxisBehavior.EntityData Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll The \"follow path\" behavior's data. [DisplayName(\"Rotate Around Axis\")] [DataContract(IsReference = true)] public class RotateAroundAxisBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object RotateAroundAxisBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AnimationCurve Determines the position of the object at a given time. The curve is normalized, the duration of the animation can be set in the Duration field. [DataMember] [DisplayName(\"Animation curve\")] public AnimationCurve AnimationCurve { get; set; } Property Value AnimationCurve AxisProvider Transform representing the axis. If empty, the object's position will be used. [DataMember] [DisplayName(\"Rotation axis provider\")] public SingleSceneObjectReference AxisProvider { get; set; } Property Value SingleSceneObjectReference AxisTransform [DataMember] [Obsolete(\"Use AxisProvider instead.\")] [LegacyProperty(\"AxisProvider\")] public SceneObjectReference AxisTransform { get; set; } Property Value SceneObjectReference Degrees Amount of degrees the object will be rotated. [DataMember] [DisplayName(\"Degrees\")] public float Degrees { get; set; } Property Value float Duration Total duration of the animation. [DataMember] [DisplayName(\"Duration (in seconds)\")] public float Duration { get; set; } Property Value float Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string RotationAxis Choose whether the object will be rotated along the X, Y or Z axis. [DataMember] [DisplayName(\"Rotation axis\")] public RotateAroundAxisBehavior.RotationAxis RotationAxis { get; set; } Property Value RotateAroundAxisBehavior.RotationAxis Target [DataMember] [Obsolete(\"Use TargetObject instead.\")] [LegacyProperty(\"TargetObject\")] public SceneObjectReference Target { get; set; } Property Value SceneObjectReference TargetObject Target scene object to be rotated. [DataMember] [DisplayName(\"Object\")] public SingleSceneObjectReference TargetObject { get; set; } Property Value SingleSceneObjectReference"
  },
  "api/VRBuilder.Animations.Behaviors.RotateAroundAxisBehavior.RotationAxis.html": {
    "href": "api/VRBuilder.Animations.Behaviors.RotateAroundAxisBehavior.RotationAxis.html",
    "title": "Enum RotateAroundAxisBehavior.RotationAxis | VR Builder Documentation",
    "keywords": "Enum RotateAroundAxisBehavior.RotationAxis Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll public enum RotateAroundAxisBehavior.RotationAxis Fields X = 0 Y = 1 Z = 2"
  },
  "api/VRBuilder.Animations.Behaviors.RotateAroundAxisBehavior.html": {
    "href": "api/VRBuilder.Animations.Behaviors.RotateAroundAxisBehavior.html",
    "title": "Class RotateAroundAxisBehavior | VR Builder Documentation",
    "keywords": "Class RotateAroundAxisBehavior Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll Rotates an object around an axis, which can be represented by another transform. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/animations-add-on\")] public class RotateAroundAxisBehavior : Behavior<RotateAroundAxisBehavior.EntityData>, IDataOwner<RotateAroundAxisBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<RotateAroundAxisBehavior.EntityData> Behavior<RotateAroundAxisBehavior.EntityData> RotateAroundAxisBehavior Implements IDataOwner<RotateAroundAxisBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<RotateAroundAxisBehavior.EntityData>.Clone() Entity<RotateAroundAxisBehavior.EntityData>.Data Entity<RotateAroundAxisBehavior.EntityData>.LifeCycle Entity<RotateAroundAxisBehavior.EntityData>.Parent Entity<RotateAroundAxisBehavior.EntityData>.GetActiveProcess() Entity<RotateAroundAxisBehavior.EntityData>.GetDeactivatingProcess() Entity<RotateAroundAxisBehavior.EntityData>.GetConfigurator() Entity<RotateAroundAxisBehavior.EntityData>.Configure(IMode) Entity<RotateAroundAxisBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RotateAroundAxisBehavior() [JsonConstructor] [Preserve] public RotateAroundAxisBehavior() RotateAroundAxisBehavior(Guid, Guid, RotationAxis, float, float, AnimationCurve) public RotateAroundAxisBehavior(Guid targetGuid, Guid axisProviderGuid, RotateAroundAxisBehavior.RotationAxis rotationAxis, float duration, float degrees, AnimationCurve animationCurve) Parameters targetGuid Guid axisProviderGuid Guid rotationAxis RotateAroundAxisBehavior.RotationAxis duration float degrees float animationCurve AnimationCurve RotateAroundAxisBehavior(ISceneObject, ISceneObject, RotationAxis, float, float, AnimationCurve) public RotateAroundAxisBehavior(ISceneObject target, ISceneObject axisProvider, RotateAroundAxisBehavior.RotationAxis rotationAxis, float duration, float degrees, AnimationCurve animationCurve) Parameters target ISceneObject axisProvider ISceneObject rotationAxis RotateAroundAxisBehavior.RotationAxis duration float degrees float animationCurve AnimationCurve Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Animations.Behaviors.SetAnimatorBoolParameterBehavior.EntityData.html": {
    "href": "api/VRBuilder.Animations.Behaviors.SetAnimatorBoolParameterBehavior.EntityData.html",
    "title": "Class SetAnimatorBoolParameterBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class SetAnimatorBoolParameterBehavior.EntityData Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll The SetAnimatorBoolParameterBehavior behavior's data. [DisplayName(\"Set Animator Boolean\")] [DataContract(IsReference = true)] public class SetAnimatorBoolParameterBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object SetAnimatorBoolParameterBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AnimatorProperty [DataMember] [Obsolete(\"Use Animators instead.\")] [LegacyProperty(\"Animators\")] public ScenePropertyReference<IAnimatorProperty> AnimatorProperty { get; set; } Property Value ScenePropertyReference<IAnimatorProperty> Animators Object with the animator property. [DataMember] [DisplayName(\"Animators\")] public MultipleScenePropertyReference<IAnimatorProperty> Animators { get; set; } Property Value MultipleScenePropertyReference<IAnimatorProperty> Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string ParameterName Name of the parameter to be changed. [DataMember] [DisplayName(\"Parameter name\")] public string ParameterName { get; set; } Property Value string ParameterValue New value for the selected parameter. [DataMember] [DisplayName(\"Parameter value\")] public bool ParameterValue { get; set; } Property Value bool"
  },
  "api/VRBuilder.Animations.Behaviors.SetAnimatorBoolParameterBehavior.html": {
    "href": "api/VRBuilder.Animations.Behaviors.SetAnimatorBoolParameterBehavior.html",
    "title": "Class SetAnimatorBoolParameterBehavior | VR Builder Documentation",
    "keywords": "Class SetAnimatorBoolParameterBehavior Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll Sets a boolean parameter on an animator to the specified value. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/animations-add-on\")] public class SetAnimatorBoolParameterBehavior : Behavior<SetAnimatorBoolParameterBehavior.EntityData>, IDataOwner<SetAnimatorBoolParameterBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<SetAnimatorBoolParameterBehavior.EntityData> Behavior<SetAnimatorBoolParameterBehavior.EntityData> SetAnimatorBoolParameterBehavior Implements IDataOwner<SetAnimatorBoolParameterBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<SetAnimatorBoolParameterBehavior.EntityData>.Clone() Entity<SetAnimatorBoolParameterBehavior.EntityData>.Data Entity<SetAnimatorBoolParameterBehavior.EntityData>.LifeCycle Entity<SetAnimatorBoolParameterBehavior.EntityData>.Parent Entity<SetAnimatorBoolParameterBehavior.EntityData>.GetActiveProcess() Entity<SetAnimatorBoolParameterBehavior.EntityData>.GetDeactivatingProcess() Entity<SetAnimatorBoolParameterBehavior.EntityData>.GetConfigurator() Entity<SetAnimatorBoolParameterBehavior.EntityData>.Configure(IMode) Entity<SetAnimatorBoolParameterBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SetAnimatorBoolParameterBehavior() [JsonConstructor] [Preserve] public SetAnimatorBoolParameterBehavior() SetAnimatorBoolParameterBehavior(Guid, string, bool) public SetAnimatorBoolParameterBehavior(Guid animatorPropertyGuid, string parameterName, bool parameterValue) Parameters animatorPropertyGuid Guid parameterName string parameterValue bool SetAnimatorBoolParameterBehavior(IAnimatorProperty, string, bool) public SetAnimatorBoolParameterBehavior(IAnimatorProperty animatorProperty, string parameterName, bool parameterValue) Parameters animatorProperty IAnimatorProperty parameterName string parameterValue bool Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Animations.Behaviors.SetAnimatorFloatParameterBehavior.EntityData.html": {
    "href": "api/VRBuilder.Animations.Behaviors.SetAnimatorFloatParameterBehavior.EntityData.html",
    "title": "Class SetAnimatorFloatParameterBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class SetAnimatorFloatParameterBehavior.EntityData Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll The SetAnimatorFloatParameterBehavior behavior's data. [DisplayName(\"Set Animator Float\")] [DataContract(IsReference = true)] public class SetAnimatorFloatParameterBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object SetAnimatorFloatParameterBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AnimationCurve Determines how fast the value changes at a given time. The curve is normalized, the duration of the animation can be set in the Duration field. [DataMember] [DisplayName(\"Animation curve\")] public AnimationCurve AnimationCurve { get; set; } Property Value AnimationCurve AnimatorProperty [DataMember] [Obsolete(\"Use Animators instead.\")] [LegacyProperty(\"Animators\")] public ScenePropertyReference<IAnimatorProperty> AnimatorProperty { get; set; } Property Value ScenePropertyReference<IAnimatorProperty> Animators Object with the animator property. [DataMember] [DisplayName(\"Animators\")] public MultipleScenePropertyReference<IAnimatorProperty> Animators { get; set; } Property Value MultipleScenePropertyReference<IAnimatorProperty> Duration Timeframe during which the value is progressively changed. [DataMember] [DisplayName(\"Duration (in seconds)\")] public float Duration { get; set; } Property Value float Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string ParameterName Name of the parameter to be changed. [DataMember] [DisplayName(\"Parameter name\")] public string ParameterName { get; set; } Property Value string TargetValue New value for the selected parameter. [DataMember] [DisplayName(\"Target value\")] public float TargetValue { get; set; } Property Value float"
  },
  "api/VRBuilder.Animations.Behaviors.SetAnimatorFloatParameterBehavior.html": {
    "href": "api/VRBuilder.Animations.Behaviors.SetAnimatorFloatParameterBehavior.html",
    "title": "Class SetAnimatorFloatParameterBehavior | VR Builder Documentation",
    "keywords": "Class SetAnimatorFloatParameterBehavior Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll Sets a float parameter on an animator to the specified value. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/animations-add-on\")] public class SetAnimatorFloatParameterBehavior : Behavior<SetAnimatorFloatParameterBehavior.EntityData>, IDataOwner<SetAnimatorFloatParameterBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<SetAnimatorFloatParameterBehavior.EntityData> Behavior<SetAnimatorFloatParameterBehavior.EntityData> SetAnimatorFloatParameterBehavior Implements IDataOwner<SetAnimatorFloatParameterBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<SetAnimatorFloatParameterBehavior.EntityData>.Clone() Entity<SetAnimatorFloatParameterBehavior.EntityData>.Data Entity<SetAnimatorFloatParameterBehavior.EntityData>.LifeCycle Entity<SetAnimatorFloatParameterBehavior.EntityData>.Parent Entity<SetAnimatorFloatParameterBehavior.EntityData>.GetActiveProcess() Entity<SetAnimatorFloatParameterBehavior.EntityData>.GetDeactivatingProcess() Entity<SetAnimatorFloatParameterBehavior.EntityData>.GetConfigurator() Entity<SetAnimatorFloatParameterBehavior.EntityData>.Configure(IMode) Entity<SetAnimatorFloatParameterBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SetAnimatorFloatParameterBehavior() [JsonConstructor] [Preserve] public SetAnimatorFloatParameterBehavior() SetAnimatorFloatParameterBehavior(Guid, string, float, float, AnimationCurve) public SetAnimatorFloatParameterBehavior(Guid animatorPropertyGuid, string parameterName, float targetValue, float duration, AnimationCurve animationCurve) Parameters animatorPropertyGuid Guid parameterName string targetValue float duration float animationCurve AnimationCurve SetAnimatorFloatParameterBehavior(IAnimatorProperty, string, float, float, AnimationCurve) public SetAnimatorFloatParameterBehavior(IAnimatorProperty animatorProperty, string parameterName, float targetValue, float duration, AnimationCurve animationCurve) Parameters animatorProperty IAnimatorProperty parameterName string targetValue float duration float animationCurve AnimationCurve Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Animations.Behaviors.SetAnimatorIntParameterBehavior.EntityData.html": {
    "href": "api/VRBuilder.Animations.Behaviors.SetAnimatorIntParameterBehavior.EntityData.html",
    "title": "Class SetAnimatorIntParameterBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class SetAnimatorIntParameterBehavior.EntityData Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll The SetAnimatorIntParameterBehavior behavior's data. [DisplayName(\"Set Animator Integer\")] [DataContract(IsReference = true)] public class SetAnimatorIntParameterBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object SetAnimatorIntParameterBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AnimatorProperty [DataMember] [Obsolete(\"Use Animators instead.\")] [LegacyProperty(\"Animators\")] public ScenePropertyReference<IAnimatorProperty> AnimatorProperty { get; set; } Property Value ScenePropertyReference<IAnimatorProperty> Animators Object with the animator property. [DataMember] [DisplayName(\"Animators\")] public MultipleScenePropertyReference<IAnimatorProperty> Animators { get; set; } Property Value MultipleScenePropertyReference<IAnimatorProperty> Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string ParameterName Name of the parameter to be changed. [DataMember] [DisplayName(\"Parameter name\")] public string ParameterName { get; set; } Property Value string ParameterValue New value for the selected parameter. [DataMember] [DisplayName(\"Parameter value\")] public int ParameterValue { get; set; } Property Value int"
  },
  "api/VRBuilder.Animations.Behaviors.SetAnimatorIntParameterBehavior.html": {
    "href": "api/VRBuilder.Animations.Behaviors.SetAnimatorIntParameterBehavior.html",
    "title": "Class SetAnimatorIntParameterBehavior | VR Builder Documentation",
    "keywords": "Class SetAnimatorIntParameterBehavior Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll Sets an integer parameter on an animator to the specified value. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/animations-add-on\")] public class SetAnimatorIntParameterBehavior : Behavior<SetAnimatorIntParameterBehavior.EntityData>, IDataOwner<SetAnimatorIntParameterBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<SetAnimatorIntParameterBehavior.EntityData> Behavior<SetAnimatorIntParameterBehavior.EntityData> SetAnimatorIntParameterBehavior Implements IDataOwner<SetAnimatorIntParameterBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<SetAnimatorIntParameterBehavior.EntityData>.Clone() Entity<SetAnimatorIntParameterBehavior.EntityData>.Data Entity<SetAnimatorIntParameterBehavior.EntityData>.LifeCycle Entity<SetAnimatorIntParameterBehavior.EntityData>.Parent Entity<SetAnimatorIntParameterBehavior.EntityData>.GetActiveProcess() Entity<SetAnimatorIntParameterBehavior.EntityData>.GetDeactivatingProcess() Entity<SetAnimatorIntParameterBehavior.EntityData>.GetConfigurator() Entity<SetAnimatorIntParameterBehavior.EntityData>.Configure(IMode) Entity<SetAnimatorIntParameterBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SetAnimatorIntParameterBehavior() [JsonConstructor] [Preserve] public SetAnimatorIntParameterBehavior() SetAnimatorIntParameterBehavior(Guid, string, int) public SetAnimatorIntParameterBehavior(Guid animatorPropertyGuid, string parameterName, int parameterValue) Parameters animatorPropertyGuid Guid parameterName string parameterValue int SetAnimatorIntParameterBehavior(IAnimatorProperty, string, int) public SetAnimatorIntParameterBehavior(IAnimatorProperty animatorProperty, string parameterName, int parameterValue) Parameters animatorProperty IAnimatorProperty parameterName string parameterValue int Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Animations.Behaviors.SetAnimatorTriggerParameterBehavior.EntityData.html": {
    "href": "api/VRBuilder.Animations.Behaviors.SetAnimatorTriggerParameterBehavior.EntityData.html",
    "title": "Class SetAnimatorTriggerParameterBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class SetAnimatorTriggerParameterBehavior.EntityData Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll The SetAnimatorTriggerParameterBehavior behavior's data. [DisplayName(\"Set Animator Trigger\")] [DataContract(IsReference = true)] public class SetAnimatorTriggerParameterBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object SetAnimatorTriggerParameterBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AnimatorProperty [DataMember] [Obsolete(\"Use Animators instead.\")] [LegacyProperty(\"Animators\")] public ScenePropertyReference<IAnimatorProperty> AnimatorProperty { get; set; } Property Value ScenePropertyReference<IAnimatorProperty> Animators Object with the animator property. [DataMember] [DisplayName(\"Animators\")] public MultipleScenePropertyReference<IAnimatorProperty> Animators { get; set; } Property Value MultipleScenePropertyReference<IAnimatorProperty> Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string ParameterName Name of the parameter to be changed. [DataMember] [DisplayName(\"Parameter name\")] public string ParameterName { get; set; } Property Value string"
  },
  "api/VRBuilder.Animations.Behaviors.SetAnimatorTriggerParameterBehavior.html": {
    "href": "api/VRBuilder.Animations.Behaviors.SetAnimatorTriggerParameterBehavior.html",
    "title": "Class SetAnimatorTriggerParameterBehavior | VR Builder Documentation",
    "keywords": "Class SetAnimatorTriggerParameterBehavior Namespace VRBuilder.Animations.Behaviors Assembly VRBuilder.Animations.dll Sets a trigger parameter on an animator. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/animations-add-on\")] public class SetAnimatorTriggerParameterBehavior : Behavior<SetAnimatorTriggerParameterBehavior.EntityData>, IDataOwner<SetAnimatorTriggerParameterBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<SetAnimatorTriggerParameterBehavior.EntityData> Behavior<SetAnimatorTriggerParameterBehavior.EntityData> SetAnimatorTriggerParameterBehavior Implements IDataOwner<SetAnimatorTriggerParameterBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<SetAnimatorTriggerParameterBehavior.EntityData>.Clone() Entity<SetAnimatorTriggerParameterBehavior.EntityData>.Data Entity<SetAnimatorTriggerParameterBehavior.EntityData>.LifeCycle Entity<SetAnimatorTriggerParameterBehavior.EntityData>.Parent Entity<SetAnimatorTriggerParameterBehavior.EntityData>.GetActiveProcess() Entity<SetAnimatorTriggerParameterBehavior.EntityData>.GetDeactivatingProcess() Entity<SetAnimatorTriggerParameterBehavior.EntityData>.GetConfigurator() Entity<SetAnimatorTriggerParameterBehavior.EntityData>.Configure(IMode) Entity<SetAnimatorTriggerParameterBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SetAnimatorTriggerParameterBehavior() [JsonConstructor] [Preserve] public SetAnimatorTriggerParameterBehavior() SetAnimatorTriggerParameterBehavior(Guid, string) public SetAnimatorTriggerParameterBehavior(Guid animatorPropertyGuid, string parameterName) Parameters animatorPropertyGuid Guid parameterName string SetAnimatorTriggerParameterBehavior(IAnimatorProperty, string) public SetAnimatorTriggerParameterBehavior(IAnimatorProperty animatorProperty, string parameterName) Parameters animatorProperty IAnimatorProperty parameterName string Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Animations.Behaviors.html": {
    "href": "api/VRBuilder.Animations.Behaviors.html",
    "title": "Namespace VRBuilder.Animations.Behaviors | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Animations.Behaviors Classes AnimateTransformBehavior Animates an object's transform over time to a new position, rotation and/or scale. AnimateTransformBehavior.EntityData The \"follow path\" behavior's data. ChildExplosionViewBehavior Animates an object's transform over time to a new position, rotation and/or scale. ChildExplosionViewBehavior.EntityData The \"follow path\" behavior's data. FollowPathBehavior Moves an object along a path. The object rotates to follow the path. FollowPathBehavior.EntityData The \"follow path\" behavior's data. RotateAroundAxisBehavior Rotates an object around an axis, which can be represented by another transform. RotateAroundAxisBehavior.EntityData The \"follow path\" behavior's data. SetAnimatorBoolParameterBehavior Sets a boolean parameter on an animator to the specified value. SetAnimatorBoolParameterBehavior.EntityData The SetAnimatorBoolParameterBehavior behavior's data. SetAnimatorFloatParameterBehavior Sets a float parameter on an animator to the specified value. SetAnimatorFloatParameterBehavior.EntityData The SetAnimatorFloatParameterBehavior behavior's data. SetAnimatorIntParameterBehavior Sets an integer parameter on an animator to the specified value. SetAnimatorIntParameterBehavior.EntityData The SetAnimatorIntParameterBehavior behavior's data. SetAnimatorTriggerParameterBehavior Sets a trigger parameter on an animator. SetAnimatorTriggerParameterBehavior.EntityData The SetAnimatorTriggerParameterBehavior behavior's data. Enums RotateAroundAxisBehavior.RotationAxis"
  },
  "api/VRBuilder.Animations.Properties.AnimatorProperty.html": {
    "href": "api/VRBuilder.Animations.Properties.AnimatorProperty.html",
    "title": "Class AnimatorProperty | VR Builder Documentation",
    "keywords": "Class AnimatorProperty Namespace VRBuilder.Animations.Properties Assembly VRBuilder.Animations.dll Property that handles animations by changing parameters on an Animator component. public class AnimatorProperty : ProcessSceneObjectProperty, IAnimatorProperty, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty AnimatorProperty Implements IAnimatorProperty ISceneObjectProperty Inherited Members ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Animator The animator component on this game object. public Animator Animator { get; } Property Value Animator Methods GetBool(string) Gets a boolean parameter. public bool GetBool(string parameterName) Parameters parameterName string Returns bool GetFloat(string) Gets a float parameter. public float GetFloat(string parameterName) Parameters parameterName string Returns float GetInteger(string) Gets a integer parameter. public int GetInteger(string parameterName) Parameters parameterName string Returns int SetBool(string, bool) Sets a boolean parameter. public void SetBool(string parameterName, bool value) Parameters parameterName string value bool SetFloat(string, float) Sets a float parameter. public void SetFloat(string parameterName, float value) Parameters parameterName string value float SetInteger(string, int) Sets a integer parameter. public void SetInteger(string parameterName, int value) Parameters parameterName string value int SetTrigger(string) Triggers an animation. public void SetTrigger(string parameterName) Parameters parameterName string"
  },
  "api/VRBuilder.Animations.Properties.ExplodableProperty.html": {
    "href": "api/VRBuilder.Animations.Properties.ExplodableProperty.html",
    "title": "Class ExplodableProperty | VR Builder Documentation",
    "keywords": "Class ExplodableProperty Namespace VRBuilder.Animations.Properties Assembly VRBuilder.Animations.dll Property for a game object that has an exploded view. public class ExplodableProperty : ProcessSceneObjectProperty, IExplodableProperty, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty ExplodableProperty Implements IExplodableProperty ISceneObjectProperty Inherited Members ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ExplodedObjects Objects that will be animated. public IEnumerable<Transform> ExplodedObjects { get; } Property Value IEnumerable<Transform> Methods Explode(float, float) Explodes the view by the specified ratio. public void Explode(float progress, float scale) Parameters progress float scale float Positive is outwards, negative is inwards. Zero is the original state. InitializeAnimation() Initializes the property before a new animation. public void InitializeAnimation()"
  },
  "api/VRBuilder.Animations.Properties.IAnimatorProperty.html": {
    "href": "api/VRBuilder.Animations.Properties.IAnimatorProperty.html",
    "title": "Interface IAnimatorProperty | VR Builder Documentation",
    "keywords": "Interface IAnimatorProperty Namespace VRBuilder.Animations.Properties Assembly VRBuilder.Animations.dll Property for a game object that can be animated through parameters. public interface IAnimatorProperty : ISceneObjectProperty Inherited Members ISceneObjectProperty.SceneObject Properties Animator The animator controlled by this property. Animator Animator { get; } Property Value Animator Methods GetBool(string) Gets a boolean parameter. bool GetBool(string parameterName) Parameters parameterName string Returns bool GetFloat(string) Gets a float parameter. float GetFloat(string parameterName) Parameters parameterName string Returns float GetInteger(string) Gets a integer parameter. int GetInteger(string parameterName) Parameters parameterName string Returns int SetBool(string, bool) Sets a boolean parameter. void SetBool(string parameterName, bool value) Parameters parameterName string value bool SetFloat(string, float) Sets a float parameter. void SetFloat(string parameterName, float value) Parameters parameterName string value float SetInteger(string, int) Sets a integer parameter. void SetInteger(string parameterName, int value) Parameters parameterName string value int SetTrigger(string) Triggers an animation. void SetTrigger(string parameterName) Parameters parameterName string"
  },
  "api/VRBuilder.Animations.Properties.IExplodableProperty.html": {
    "href": "api/VRBuilder.Animations.Properties.IExplodableProperty.html",
    "title": "Interface IExplodableProperty | VR Builder Documentation",
    "keywords": "Interface IExplodableProperty Namespace VRBuilder.Animations.Properties Assembly VRBuilder.Animations.dll Property for a game object that has an exploded view. public interface IExplodableProperty : ISceneObjectProperty Inherited Members ISceneObjectProperty.SceneObject Properties ExplodedObjects Objects that will be animated. IEnumerable<Transform> ExplodedObjects { get; } Property Value IEnumerable<Transform> Methods Explode(float, float) Explodes the view by the specified ratio. void Explode(float progress, float scale) Parameters progress float scale float Positive is outwards, negative is inwards. Zero is the original state. InitializeAnimation() Initializes the property before a new animation. void InitializeAnimation()"
  },
  "api/VRBuilder.Animations.Properties.html": {
    "href": "api/VRBuilder.Animations.Properties.html",
    "title": "Namespace VRBuilder.Animations.Properties | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Animations.Properties Classes AnimatorProperty Property that handles animations by changing parameters on an Animator component. ExplodableProperty Property for a game object that has an exploded view. Interfaces IAnimatorProperty Property for a game object that can be animated through parameters. IExplodableProperty Property for a game object that has an exploded view."
  },
  "api/VRBuilder.BaseTemplate.FontSetter.html": {
    "href": "api/VRBuilder.BaseTemplate.FontSetter.html",
    "title": "Class FontSetter | VR Builder Documentation",
    "keywords": "Class FontSetter Namespace VRBuilder.BaseTemplate Assembly VRBuilder.Core.dll Utility component to style all child UI text elements. public class FontSetter : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour FontSetter Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields font [Tooltip(\"The font used in all child UI elements.\")] [SerializeField] protected Font font Field Value Font fontSize [Tooltip(\"Size of the font used.\")] [SerializeField] protected int fontSize Field Value int Methods Start() protected void Start()"
  },
  "api/VRBuilder.BaseTemplate.html": {
    "href": "api/VRBuilder.BaseTemplate.html",
    "title": "Namespace VRBuilder.BaseTemplate | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.BaseTemplate Classes FontSetter Utility component to style all child UI text elements."
  },
  "api/VRBuilder.BasicInteraction.AbstractHighlighter.html": {
    "href": "api/VRBuilder.BasicInteraction.AbstractHighlighter.html",
    "title": "Class AbstractHighlighter | VR Builder Documentation",
    "keywords": "Class AbstractHighlighter Namespace VRBuilder.BasicInteraction Assembly VRBuilder.BasicInteraction.dll Collects render information from a IHighlighter object and provides basic utilities for highlighting. public abstract class AbstractHighlighter : MonoBehaviour, IHighlighter Inheritance object Object Component Behaviour MonoBehaviour AbstractHighlighter Implements IHighlighter Derived DefaultHighlighter Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields highlightMeshFilter [SerializeField] [HideInInspector] protected MeshFilter highlightMeshFilter Field Value MeshFilter highlightMeshRenderer [SerializeField] [HideInInspector] protected MeshRenderer highlightMeshRenderer Field Value MeshRenderer renderers [SerializeField] [HideInInspector] protected Renderer[] renderers Field Value Renderer[] Properties IsHighlighting Returns true if there is this object is currently being highlighted. public abstract bool IsHighlighting { get; } Property Value bool Methods CanObjectBeHighlighted() protected virtual bool CanObjectBeHighlighted() Returns bool ClearCacheRenderers() protected void ClearCacheRenderers() CreateHighlightMaterial(Color) Creates a highlight material with given color. protected virtual Material CreateHighlightMaterial(Color highlightColor) Parameters highlightColor Color Returns Material CreateHighlightMaterial(Texture) Creates a highlight material with given texture. protected virtual Material CreateHighlightMaterial(Texture mainTexture) Parameters mainTexture Texture Returns Material GetHighlightMaterial() public abstract Material GetHighlightMaterial() Returns Material RefreshCachedRenderers() protected void RefreshCachedRenderers() StartHighlighting(Material) Starts highlighting this object. public abstract void StartHighlighting(Material highlightMaterial) Parameters highlightMaterial Material Material to be applied as highlight. StopHighlighting() Stops highlighting this object. public abstract void StopHighlighting()"
  },
  "api/VRBuilder.BasicInteraction.BaseInteractionSimulator.html": {
    "href": "api/VRBuilder.BasicInteraction.BaseInteractionSimulator.html",
    "title": "Class BaseInteractionSimulator | VR Builder Documentation",
    "keywords": "Class BaseInteractionSimulator Namespace VRBuilder.BasicInteraction Assembly VRBuilder.BasicInteraction.dll Base interaction simulator, only have one concrete simulator implementation in your project. If no concrete implementation is found a BaseInteractionSimulatorDummy will be used. public abstract class BaseInteractionSimulator Inheritance object BaseInteractionSimulator Derived BaseInteractionSimulatorDummy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance Current instance of the interaction simulator. public static BaseInteractionSimulator Instance { get; } Property Value BaseInteractionSimulator Methods GetTeleportationBaseType() Returns the base class used for teleportation in your VR framework. public abstract Type GetTeleportationBaseType() Returns Type Grab(IInteractableObject) Simulates grabbing the given object. public abstract void Grab(IInteractableObject interactable) Parameters interactable IInteractableObject HoverSnapZone(ISnapZone, IInteractableObject) Simulates a hover over a SnapZone. public abstract void HoverSnapZone(ISnapZone snapZone, IInteractableObject interactable) Parameters snapZone ISnapZone interactable IInteractableObject IsColliderValid(GameObject, Collider) True if the provided colliderToValidate is an active collider of the teleportationObject public abstract bool IsColliderValid(GameObject teleportationObject, Collider colliderToValidate) Parameters teleportationObject GameObject The object with the teleportation logic or used to teleport into. colliderToValidate Collider Collider to validate. Returns bool Release() Simulates releasing the given object. public abstract void Release() StopTouch() Simulates stop touching the given object. public abstract void StopTouch() StopUse(IInteractableObject) Simulates stop using the given object. public abstract void StopUse(IInteractableObject interactable) Parameters interactable IInteractableObject Teleport(GameObject, GameObject, Vector3, Quaternion) Executes a teleport action. public abstract void Teleport(GameObject rig, GameObject teleportationObject, Vector3 targetPosition, Quaternion targetRotation) Parameters rig GameObject The rig object. teleportationObject GameObject The object with the teleportation logic or used to teleport into. targetPosition Vector3 Desired position. targetRotation Quaternion Desired rotation Touch(IInteractableObject) Simulates touching the given object. Expected behavior is that the object stays touched until StopTouch is called. public abstract void Touch(IInteractableObject interactable) Parameters interactable IInteractableObject UnhoverSnapZone(ISnapZone, IInteractableObject) Simulates a unhover over a SnapZone. public abstract void UnhoverSnapZone(ISnapZone snapZone, IInteractableObject interactable) Parameters snapZone ISnapZone interactable IInteractableObject Use(IInteractableObject) Simulates usage of the object and keeps using the given object until StopUse is called. public abstract void Use(IInteractableObject interactable) Parameters interactable IInteractableObject"
  },
  "api/VRBuilder.BasicInteraction.BaseInteractionSimulatorDummy.html": {
    "href": "api/VRBuilder.BasicInteraction.BaseInteractionSimulatorDummy.html",
    "title": "Class BaseInteractionSimulatorDummy | VR Builder Documentation",
    "keywords": "Class BaseInteractionSimulatorDummy Namespace VRBuilder.BasicInteraction Assembly VRBuilder.BasicInteraction.dll Interaction simulator dummy, does nothing beside of warning to there is no concrete implementation of a simulator. public class BaseInteractionSimulatorDummy : BaseInteractionSimulator Inheritance object BaseInteractionSimulator BaseInteractionSimulatorDummy Inherited Members BaseInteractionSimulator.Instance object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetTeleportationBaseType() Returns the base class used for teleportation in your VR framework. public override Type GetTeleportationBaseType() Returns Type Grab(IInteractableObject) Simulates grabbing the given object. public override void Grab(IInteractableObject interactable) Parameters interactable IInteractableObject HoverSnapZone(ISnapZone, IInteractableObject) Simulates a hover over a SnapZone. public override void HoverSnapZone(ISnapZone snapZone, IInteractableObject interactable) Parameters snapZone ISnapZone interactable IInteractableObject IsColliderValid(GameObject, Collider) True if the provided colliderToValidate is an active collider of the teleportationObject public override bool IsColliderValid(GameObject teleportationObject, Collider colliderToValidate) Parameters teleportationObject GameObject The object with the teleportation logic or used to teleport into. colliderToValidate Collider Collider to validate. Returns bool Release() Simulates releasing the given object. public override void Release() StopTouch() Simulates stop touching the given object. public override void StopTouch() StopUse(IInteractableObject) Simulates stop using the given object. public override void StopUse(IInteractableObject interactable) Parameters interactable IInteractableObject Teleport(GameObject, GameObject, Vector3, Quaternion) Executes a teleport action. public override void Teleport(GameObject rig, GameObject teleportationObject, Vector3 targetPosition, Quaternion targetRotation) Parameters rig GameObject The rig object. teleportationObject GameObject The object with the teleportation logic or used to teleport into. targetPosition Vector3 Desired position. targetRotation Quaternion Desired rotation Touch(IInteractableObject) Simulates touching the given object. Expected behavior is that the object stays touched until StopTouch is called. public override void Touch(IInteractableObject interactable) Parameters interactable IInteractableObject UnhoverSnapZone(ISnapZone, IInteractableObject) Simulates a unhover over a SnapZone. public override void UnhoverSnapZone(ISnapZone snapZone, IInteractableObject interactable) Parameters snapZone ISnapZone interactable IInteractableObject Use(IInteractableObject) Simulates usage of the object and keeps using the given object until StopUse is called. public override void Use(IInteractableObject interactable) Parameters interactable IInteractableObject"
  },
  "api/VRBuilder.BasicInteraction.BaseLocomotionHandler.html": {
    "href": "api/VRBuilder.BasicInteraction.BaseLocomotionHandler.html",
    "title": "Class BaseLocomotionHandler | VR Builder Documentation",
    "keywords": "Class BaseLocomotionHandler Namespace VRBuilder.BasicInteraction Assembly VRBuilder.BasicInteraction.dll Handles basic locomotion for e.g. rigs and provides an abstract locomotion layer. public abstract class BaseLocomotionHandler : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour BaseLocomotionHandler Derived XRLocomotionHandler Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CurrentPosition Current position of the rig or camera. public abstract Vector3 CurrentPosition { get; } Property Value Vector3 CurrentRotation Current rotation of the rig or camera. public abstract Quaternion CurrentRotation { get; } Property Value Quaternion Methods SetPositionAndRotation(Vector3, Quaternion) Sets a new position and rotation for the rig or camera. public abstract void SetPositionAndRotation(Vector3 destinationPosition, Quaternion destinationRotation) Parameters destinationPosition Vector3 Target position. destinationRotation Quaternion Target rotation."
  },
  "api/VRBuilder.BasicInteraction.Behaviors.UnsnapBehavior.EntityData.html": {
    "href": "api/VRBuilder.BasicInteraction.Behaviors.UnsnapBehavior.EntityData.html",
    "title": "Class UnsnapBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class UnsnapBehavior.EntityData Namespace VRBuilder.BasicInteraction.Behaviors Assembly VRBuilder.BasicInteraction.dll [DisplayName(\"Unsnap\")] [DataContract(IsReference = true)] public class UnsnapBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object UnsnapBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string SnapZone [DataMember] [Obsolete(\"Use TargetSnapzone instead.\")] [LegacyProperty(\"TargetSnapZone\")] public ScenePropertyReference<ISnapZoneProperty> SnapZone { get; set; } Property Value ScenePropertyReference<ISnapZoneProperty> SnappedObject [DataMember] [Obsolete(\"Use TargetObject instead.\")] [LegacyProperty(\"TargetObject\")] public ScenePropertyReference<ISnappableProperty> SnappedObject { get; set; } Property Value ScenePropertyReference<ISnappableProperty> TargetObject [DataMember] [DisplayName(\"Object to unsnap\")] public SingleScenePropertyReference<ISnappableProperty> TargetObject { get; set; } Property Value SingleScenePropertyReference<ISnappableProperty> TargetSnapZone [DataMember] [DisplayName(\"Snap zone to unsnap\")] public SingleScenePropertyReference<ISnapZoneProperty> TargetSnapZone { get; set; } Property Value SingleScenePropertyReference<ISnapZoneProperty>"
  },
  "api/VRBuilder.BasicInteraction.Behaviors.UnsnapBehavior.html": {
    "href": "api/VRBuilder.BasicInteraction.Behaviors.UnsnapBehavior.html",
    "title": "Class UnsnapBehavior | VR Builder Documentation",
    "keywords": "Class UnsnapBehavior Namespace VRBuilder.BasicInteraction.Behaviors Assembly VRBuilder.BasicInteraction.dll This behavior unsnaps an object from a snapzone. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-behaviors/unsnap-object\")] public class UnsnapBehavior : Behavior<UnsnapBehavior.EntityData>, IDataOwner<UnsnapBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<UnsnapBehavior.EntityData> Behavior<UnsnapBehavior.EntityData> UnsnapBehavior Implements IDataOwner<UnsnapBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<UnsnapBehavior.EntityData>.Clone() Entity<UnsnapBehavior.EntityData>.Data Entity<UnsnapBehavior.EntityData>.LifeCycle Entity<UnsnapBehavior.EntityData>.Parent Entity<UnsnapBehavior.EntityData>.GetActiveProcess() Entity<UnsnapBehavior.EntityData>.GetDeactivatingProcess() Entity<UnsnapBehavior.EntityData>.GetConfigurator() Entity<UnsnapBehavior.EntityData>.Configure(IMode) Entity<UnsnapBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UnsnapBehavior() [JsonConstructor] [Preserve] public UnsnapBehavior() UnsnapBehavior(Guid, Guid) public UnsnapBehavior(Guid snappedObjectId, Guid snapZoneId) Parameters snappedObjectId Guid snapZoneId Guid UnsnapBehavior(ISnappableProperty, ISnapZoneProperty) public UnsnapBehavior(ISnappableProperty snappedObject, ISnapZoneProperty snapZone) Parameters snappedObject ISnappableProperty snapZone ISnapZoneProperty Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.BasicInteraction.Behaviors.html": {
    "href": "api/VRBuilder.BasicInteraction.Behaviors.html",
    "title": "Namespace VRBuilder.BasicInteraction.Behaviors | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.BasicInteraction.Behaviors Classes UnsnapBehavior This behavior unsnaps an object from a snapzone. UnsnapBehavior.EntityData"
  },
  "api/VRBuilder.BasicInteraction.Conditions.GrabbedCondition.EntityData.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.GrabbedCondition.EntityData.html",
    "title": "Class GrabbedCondition.EntityData | VR Builder Documentation",
    "keywords": "Class GrabbedCondition.EntityData Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll [DisplayName(\"Grab Object\")] public class GrabbedCondition.EntityData : IConditionData, ICompletableData, INamedData, IData Inheritance object GrabbedCondition.EntityData Implements IConditionData ICompletableData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields KeepUnlocked [DataMember] [DisplayName(\"Keep objects grabbable after step\")] public bool KeepUnlocked Field Value bool Properties GrabbableProperty [DataMember] [Obsolete(\"Use Targets instead.\")] [LegacyProperty(\"Targets\")] public ScenePropertyReference<IGrabbableProperty> GrabbableProperty { get; set; } Property Value ScenePropertyReference<IGrabbableProperty> IsCompleted public bool IsCompleted { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Targets [DataMember] [DisplayName(\"Grabbable objects\")] public MultipleScenePropertyReference<IGrabbableProperty> Targets { get; set; } Property Value MultipleScenePropertyReference<IGrabbableProperty>"
  },
  "api/VRBuilder.BasicInteraction.Conditions.GrabbedCondition.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.GrabbedCondition.html",
    "title": "Class GrabbedCondition | VR Builder Documentation",
    "keywords": "Class GrabbedCondition Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll Condition which is completed when a IGrabbableProperty is grabbed. [DataContract(IsReference = true)] public class GrabbedCondition : Condition<GrabbedCondition.EntityData>, IDataOwner<GrabbedCondition.EntityData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider Inheritance object Entity<GrabbedCondition.EntityData> CompletableEntity<GrabbedCondition.EntityData> Condition<GrabbedCondition.EntityData> GrabbedCondition Implements IDataOwner<GrabbedCondition.EntityData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Inherited Members Condition<GrabbedCondition.EntityData>.Clone() CompletableEntity<GrabbedCondition.EntityData>.IsCompleted CompletableEntity<GrabbedCondition.EntityData>.Autocomplete() Entity<GrabbedCondition.EntityData>.Data Entity<GrabbedCondition.EntityData>.LifeCycle Entity<GrabbedCondition.EntityData>.Parent Entity<GrabbedCondition.EntityData>.GetActivatingProcess() Entity<GrabbedCondition.EntityData>.GetDeactivatingProcess() Entity<GrabbedCondition.EntityData>.GetConfigurator() Entity<GrabbedCondition.EntityData>.Configure(IMode) Entity<GrabbedCondition.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GrabbedCondition() [JsonConstructor] [Preserve] public GrabbedCondition() GrabbedCondition(Guid) public GrabbedCondition(Guid guid) Parameters guid Guid Methods GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetAutocompleter() Override this method to return a custom Autocompleter<TData>. protected override IAutocompleter GetAutocompleter() Returns IAutocompleter By default, it returns and empty autocompleter which does nothing. GetLockableProperties() Returns all LockableProperties this provider requires. public override IEnumerable<LockablePropertyData> GetLockableProperties() Returns IEnumerable<LockablePropertyData>"
  },
  "api/VRBuilder.BasicInteraction.Conditions.GrabbedObjectWithTagCondition.EntityData.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.GrabbedObjectWithTagCondition.EntityData.html",
    "title": "Class GrabbedObjectWithTagCondition.EntityData | VR Builder Documentation",
    "keywords": "Class GrabbedObjectWithTagCondition.EntityData Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll [DisplayName(\"Grab Object with Tag\")] public class GrabbedObjectWithTagCondition.EntityData : IConditionData, ICompletableData, INamedData, IData Inheritance object GrabbedObjectWithTagCondition.EntityData Implements IConditionData ICompletableData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields KeepUnlocked [DataMember] [DisplayName(\"Keep objects grabbable after step\")] public bool KeepUnlocked Field Value bool Properties IsCompleted public bool IsCompleted { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Tag [DataMember] [Obsolete(\"Use Targets instead.\")] [LegacyProperty(\"Targets\")] public SceneObjectTag<IGrabbableProperty> Tag { get; set; } Property Value SceneObjectTag<IGrabbableProperty> Targets [DataMember] [DisplayName(\"Grabbable objects\")] public MultipleScenePropertyReference<IGrabbableProperty> Targets { get; set; } Property Value MultipleScenePropertyReference<IGrabbableProperty>"
  },
  "api/VRBuilder.BasicInteraction.Conditions.GrabbedObjectWithTagCondition.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.GrabbedObjectWithTagCondition.html",
    "title": "Class GrabbedObjectWithTagCondition | VR Builder Documentation",
    "keywords": "Class GrabbedObjectWithTagCondition Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll Condition which is completed when a IGrabbableProperty with the given tag is grabbed. [DataContract(IsReference = true)] [Obsolete(\"Use GrabbedCondition instead.\")] public class GrabbedObjectWithTagCondition : Condition<GrabbedObjectWithTagCondition.EntityData>, IDataOwner<GrabbedObjectWithTagCondition.EntityData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider Inheritance object Entity<GrabbedObjectWithTagCondition.EntityData> CompletableEntity<GrabbedObjectWithTagCondition.EntityData> Condition<GrabbedObjectWithTagCondition.EntityData> GrabbedObjectWithTagCondition Implements IDataOwner<GrabbedObjectWithTagCondition.EntityData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Inherited Members Condition<GrabbedObjectWithTagCondition.EntityData>.Clone() CompletableEntity<GrabbedObjectWithTagCondition.EntityData>.IsCompleted CompletableEntity<GrabbedObjectWithTagCondition.EntityData>.Autocomplete() Entity<GrabbedObjectWithTagCondition.EntityData>.Data Entity<GrabbedObjectWithTagCondition.EntityData>.LifeCycle Entity<GrabbedObjectWithTagCondition.EntityData>.Parent Entity<GrabbedObjectWithTagCondition.EntityData>.GetActivatingProcess() Entity<GrabbedObjectWithTagCondition.EntityData>.GetDeactivatingProcess() Entity<GrabbedObjectWithTagCondition.EntityData>.GetConfigurator() Entity<GrabbedObjectWithTagCondition.EntityData>.Configure(IMode) Entity<GrabbedObjectWithTagCondition.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GrabbedObjectWithTagCondition() [JsonConstructor] [Preserve] public GrabbedObjectWithTagCondition() GrabbedObjectWithTagCondition(Guid) public GrabbedObjectWithTagCondition(Guid guid) Parameters guid Guid Methods GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetAutocompleter() Override this method to return a custom Autocompleter<TData>. protected override IAutocompleter GetAutocompleter() Returns IAutocompleter By default, it returns and empty autocompleter which does nothing. GetLockableProperties() Returns all LockableProperties this provider requires. public override IEnumerable<LockablePropertyData> GetLockableProperties() Returns IEnumerable<LockablePropertyData>"
  },
  "api/VRBuilder.BasicInteraction.Conditions.ReleasedCondition.EntityData.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.ReleasedCondition.EntityData.html",
    "title": "Class ReleasedCondition.EntityData | VR Builder Documentation",
    "keywords": "Class ReleasedCondition.EntityData Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll [DisplayName(\"Release Object\")] public class ReleasedCondition.EntityData : IConditionData, ICompletableData, INamedData, IData Inheritance object ReleasedCondition.EntityData Implements IConditionData ICompletableData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GrabbableProperties [DataMember] [DisplayName(\"Grabbable objects\")] public MultipleScenePropertyReference<IGrabbableProperty> GrabbableProperties { get; set; } Property Value MultipleScenePropertyReference<IGrabbableProperty> GrabbableProperty [DataMember] [Obsolete(\"Use GrabbableProperties instead.\")] [LegacyProperty(\"GrabbableProperties\")] public ScenePropertyReference<IGrabbableProperty> GrabbableProperty { get; set; } Property Value ScenePropertyReference<IGrabbableProperty> IsCompleted public bool IsCompleted { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string"
  },
  "api/VRBuilder.BasicInteraction.Conditions.ReleasedCondition.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.ReleasedCondition.html",
    "title": "Class ReleasedCondition | VR Builder Documentation",
    "keywords": "Class ReleasedCondition Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll Condition which is completed when GrabbableProperty becomes ungrabbed. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-conditions/release-object\")] public class ReleasedCondition : Condition<ReleasedCondition.EntityData>, IDataOwner<ReleasedCondition.EntityData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider Inheritance object Entity<ReleasedCondition.EntityData> CompletableEntity<ReleasedCondition.EntityData> Condition<ReleasedCondition.EntityData> ReleasedCondition Implements IDataOwner<ReleasedCondition.EntityData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Inherited Members Condition<ReleasedCondition.EntityData>.Clone() Condition<ReleasedCondition.EntityData>.GetLockableProperties() CompletableEntity<ReleasedCondition.EntityData>.IsCompleted CompletableEntity<ReleasedCondition.EntityData>.Autocomplete() Entity<ReleasedCondition.EntityData>.Data Entity<ReleasedCondition.EntityData>.LifeCycle Entity<ReleasedCondition.EntityData>.Parent Entity<ReleasedCondition.EntityData>.GetActivatingProcess() Entity<ReleasedCondition.EntityData>.GetDeactivatingProcess() Entity<ReleasedCondition.EntityData>.GetConfigurator() Entity<ReleasedCondition.EntityData>.Configure(IMode) Entity<ReleasedCondition.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReleasedCondition() [JsonConstructor] [Preserve] public ReleasedCondition() ReleasedCondition(Guid) public ReleasedCondition(Guid uniqueId) Parameters uniqueId Guid ReleasedCondition(IGrabbableProperty) public ReleasedCondition(IGrabbableProperty target) Parameters target IGrabbableProperty Methods GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetAutocompleter() Override this method to return a custom Autocompleter<TData>. protected override IAutocompleter GetAutocompleter() Returns IAutocompleter By default, it returns and empty autocompleter which does nothing."
  },
  "api/VRBuilder.BasicInteraction.Conditions.SnappedCondition.EntityData.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.SnappedCondition.EntityData.html",
    "title": "Class SnappedCondition.EntityData | VR Builder Documentation",
    "keywords": "Class SnappedCondition.EntityData Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll [DisplayName(\"Snap Object\")] [DataContract(IsReference = true)] public class SnappedCondition.EntityData : IConditionData, ICompletableData, INamedData, IData Inheritance object SnappedCondition.EntityData Implements IConditionData ICompletableData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsCompleted public bool IsCompleted { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Target [DataMember] [Obsolete(\"Use TargetObjects instead.\")] [LegacyProperty(\"TargetObjects\")] public ScenePropertyReference<ISnappableProperty> Target { get; set; } Property Value ScenePropertyReference<ISnappableProperty> TargetObjects [DataMember] [DisplayName(\"Snappable Objects\")] public MultipleScenePropertyReference<ISnappableProperty> TargetObjects { get; set; } Property Value MultipleScenePropertyReference<ISnappableProperty> TargetSnapZone [DataMember] [DisplayName(\"Zone to snap into\")] public SingleScenePropertyReference<ISnapZoneProperty> TargetSnapZone { get; set; } Property Value SingleScenePropertyReference<ISnapZoneProperty> ZoneToSnapInto [DataMember] [Obsolete(\"Use TargetSnapZone instead.\")] [LegacyProperty(\"TargetSnapZone\")] public ScenePropertyReference<ISnapZoneProperty> ZoneToSnapInto { get; set; } Property Value ScenePropertyReference<ISnapZoneProperty>"
  },
  "api/VRBuilder.BasicInteraction.Conditions.SnappedCondition.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.SnappedCondition.html",
    "title": "Class SnappedCondition | VR Builder Documentation",
    "keywords": "Class SnappedCondition Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll Condition which is completed when an object from a given pool is snapped into a target snap zone. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-conditions/snap-object\")] public class SnappedCondition : Condition<SnappedCondition.EntityData>, IDataOwner<SnappedCondition.EntityData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider Inheritance object Entity<SnappedCondition.EntityData> CompletableEntity<SnappedCondition.EntityData> Condition<SnappedCondition.EntityData> SnappedCondition Implements IDataOwner<SnappedCondition.EntityData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Inherited Members Condition<SnappedCondition.EntityData>.Clone() Condition<SnappedCondition.EntityData>.GetLockableProperties() CompletableEntity<SnappedCondition.EntityData>.IsCompleted CompletableEntity<SnappedCondition.EntityData>.Autocomplete() Entity<SnappedCondition.EntityData>.Data Entity<SnappedCondition.EntityData>.LifeCycle Entity<SnappedCondition.EntityData>.Parent Entity<SnappedCondition.EntityData>.GetActivatingProcess() Entity<SnappedCondition.EntityData>.GetDeactivatingProcess() Entity<SnappedCondition.EntityData>.Configure(IMode) Entity<SnappedCondition.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SnappedCondition() [JsonConstructor] [Preserve] public SnappedCondition() SnappedCondition(Guid, Guid) public SnappedCondition(Guid targets, Guid snapZone) Parameters targets Guid snapZone Guid SnappedCondition(ISnappableProperty, ISnapZoneProperty) public SnappedCondition(ISnappableProperty target, ISnapZoneProperty snapZone) Parameters target ISnappableProperty snapZone ISnapZoneProperty Methods GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetAutocompleter() Override this method to return a custom Autocompleter<TData>. protected override IAutocompleter GetAutocompleter() Returns IAutocompleter By default, it returns and empty autocompleter which does nothing. GetConfigurator() Override this method if your behavior or condition supports changing between process modes (IMode). By default returns an empty configurator that does nothing. protected override IConfigurator GetConfigurator() Returns IConfigurator"
  },
  "api/VRBuilder.BasicInteraction.Conditions.SnappedObjectWithTagCondition.EntityData.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.SnappedObjectWithTagCondition.EntityData.html",
    "title": "Class SnappedObjectWithTagCondition.EntityData | VR Builder Documentation",
    "keywords": "Class SnappedObjectWithTagCondition.EntityData Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll [DisplayName(\"Snap Object (Tag)\")] [DataContract(IsReference = true)] public class SnappedObjectWithTagCondition.EntityData : IConditionData, ICompletableData, INamedData, IData Inheritance object SnappedObjectWithTagCondition.EntityData Implements IConditionData ICompletableData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsCompleted public bool IsCompleted { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Tag [DataMember] [Obsolete(\"Use TargetObjects instead.\")] [LegacyProperty(\"TargetObjects\")] public SceneObjectTag<ISnappableProperty> Tag { get; set; } Property Value SceneObjectTag<ISnappableProperty> TargetObjects [DataMember] [DisplayName(\"Snappable Objects\")] public MultipleScenePropertyReference<ISnappableProperty> TargetObjects { get; set; } Property Value MultipleScenePropertyReference<ISnappableProperty> TargetSnapZone [DataMember] [DisplayName(\"Zone to snap into\")] public SingleScenePropertyReference<ISnapZoneProperty> TargetSnapZone { get; set; } Property Value SingleScenePropertyReference<ISnapZoneProperty> ZoneToSnapInto [DataMember] [Obsolete(\"Use TargetSnapZone instead.\")] [LegacyProperty(\"TargetSnapZone\")] public ScenePropertyReference<ISnapZoneProperty> ZoneToSnapInto { get; set; } Property Value ScenePropertyReference<ISnapZoneProperty>"
  },
  "api/VRBuilder.BasicInteraction.Conditions.SnappedObjectWithTagCondition.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.SnappedObjectWithTagCondition.html",
    "title": "Class SnappedObjectWithTagCondition | VR Builder Documentation",
    "keywords": "Class SnappedObjectWithTagCondition Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll Condition which is completed when an object from a given pool is snapped into a target snap zone. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-conditions/snap-object\")] [Obsolete(\"Use SnappedCondition instead.\")] public class SnappedObjectWithTagCondition : Condition<SnappedObjectWithTagCondition.EntityData>, IDataOwner<SnappedObjectWithTagCondition.EntityData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider Inheritance object Entity<SnappedObjectWithTagCondition.EntityData> CompletableEntity<SnappedObjectWithTagCondition.EntityData> Condition<SnappedObjectWithTagCondition.EntityData> SnappedObjectWithTagCondition Implements IDataOwner<SnappedObjectWithTagCondition.EntityData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Inherited Members Condition<SnappedObjectWithTagCondition.EntityData>.Clone() Condition<SnappedObjectWithTagCondition.EntityData>.GetLockableProperties() CompletableEntity<SnappedObjectWithTagCondition.EntityData>.IsCompleted CompletableEntity<SnappedObjectWithTagCondition.EntityData>.Autocomplete() Entity<SnappedObjectWithTagCondition.EntityData>.Data Entity<SnappedObjectWithTagCondition.EntityData>.LifeCycle Entity<SnappedObjectWithTagCondition.EntityData>.Parent Entity<SnappedObjectWithTagCondition.EntityData>.GetActivatingProcess() Entity<SnappedObjectWithTagCondition.EntityData>.GetDeactivatingProcess() Entity<SnappedObjectWithTagCondition.EntityData>.Configure(IMode) Entity<SnappedObjectWithTagCondition.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SnappedObjectWithTagCondition() [JsonConstructor] [Preserve] public SnappedObjectWithTagCondition() SnappedObjectWithTagCondition(Guid, Guid) public SnappedObjectWithTagCondition(Guid targets, Guid snapZone) Parameters targets Guid snapZone Guid SnappedObjectWithTagCondition(ISnappableProperty, ISnapZoneProperty) public SnappedObjectWithTagCondition(ISnappableProperty target, ISnapZoneProperty snapZone) Parameters target ISnappableProperty snapZone ISnapZoneProperty Methods GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetAutocompleter() Override this method to return a custom Autocompleter<TData>. protected override IAutocompleter GetAutocompleter() Returns IAutocompleter By default, it returns and empty autocompleter which does nothing. GetConfigurator() Override this method if your behavior or condition supports changing between process modes (IMode). By default returns an empty configurator that does nothing. protected override IConfigurator GetConfigurator() Returns IConfigurator"
  },
  "api/VRBuilder.BasicInteraction.Conditions.TeleportCondition.EntityData.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.TeleportCondition.EntityData.html",
    "title": "Class TeleportCondition.EntityData | VR Builder Documentation",
    "keywords": "Class TeleportCondition.EntityData Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll [DisplayName(\"Teleport\")] [DataContract(IsReference = true)] public class TeleportCondition.EntityData : IConditionData, ICompletableData, INamedData, IData Inheritance object TeleportCondition.EntityData Implements IConditionData ICompletableData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsCompleted public bool IsCompleted { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string TeleportationPoint [DataMember] [Obsolete(\"Use TeleportationPoints instead.\")] [LegacyProperty(\"TeleportationPoints\")] public ScenePropertyReference<ITeleportationProperty> TeleportationPoint { get; set; } Property Value ScenePropertyReference<ITeleportationProperty> TeleportationPoints [DataMember] [DisplayName(\"Teleportation Points\")] public MultipleScenePropertyReference<ITeleportationProperty> TeleportationPoints { get; set; } Property Value MultipleScenePropertyReference<ITeleportationProperty>"
  },
  "api/VRBuilder.BasicInteraction.Conditions.TeleportCondition.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.TeleportCondition.html",
    "title": "Class TeleportCondition | VR Builder Documentation",
    "keywords": "Class TeleportCondition Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll Condition which is completed when a teleportation action was executed into the referenced ITeleportationProperty. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-conditions/teleport\")] public class TeleportCondition : Condition<TeleportCondition.EntityData>, IDataOwner<TeleportCondition.EntityData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider Inheritance object Entity<TeleportCondition.EntityData> CompletableEntity<TeleportCondition.EntityData> Condition<TeleportCondition.EntityData> TeleportCondition Implements IDataOwner<TeleportCondition.EntityData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Inherited Members Condition<TeleportCondition.EntityData>.Clone() Condition<TeleportCondition.EntityData>.GetLockableProperties() CompletableEntity<TeleportCondition.EntityData>.IsCompleted CompletableEntity<TeleportCondition.EntityData>.Autocomplete() Entity<TeleportCondition.EntityData>.Data Entity<TeleportCondition.EntityData>.LifeCycle Entity<TeleportCondition.EntityData>.Parent Entity<TeleportCondition.EntityData>.GetActivatingProcess() Entity<TeleportCondition.EntityData>.GetDeactivatingProcess() Entity<TeleportCondition.EntityData>.GetConfigurator() Entity<TeleportCondition.EntityData>.Configure(IMode) Entity<TeleportCondition.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TeleportCondition() [JsonConstructor] [Preserve] public TeleportCondition() TeleportCondition(Guid) public TeleportCondition(Guid teleportationPoint) Parameters teleportationPoint Guid TeleportCondition(ITeleportationProperty) public TeleportCondition(ITeleportationProperty teleportationPoint) Parameters teleportationPoint ITeleportationProperty Methods GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetAutocompleter() Override this method to return a custom Autocompleter<TData>. protected override IAutocompleter GetAutocompleter() Returns IAutocompleter By default, it returns and empty autocompleter which does nothing."
  },
  "api/VRBuilder.BasicInteraction.Conditions.TouchedCondition.EntityData.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.TouchedCondition.EntityData.html",
    "title": "Class TouchedCondition.EntityData | VR Builder Documentation",
    "keywords": "Class TouchedCondition.EntityData Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll [DisplayName(\"Touch Object\")] public class TouchedCondition.EntityData : IConditionData, ICompletableData, INamedData, IData Inheritance object TouchedCondition.EntityData Implements IConditionData ICompletableData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsCompleted public bool IsCompleted { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string TouchableProperties [DataMember] [DisplayName(\"Touchable objects\")] public MultipleScenePropertyReference<ITouchableProperty> TouchableProperties { get; set; } Property Value MultipleScenePropertyReference<ITouchableProperty> TouchableProperty [DataMember] [Obsolete(\"Use TouchableProperties instead.\")] [LegacyProperty(\"TouchableProperties\")] public ScenePropertyReference<ITouchableProperty> TouchableProperty { get; set; } Property Value ScenePropertyReference<ITouchableProperty>"
  },
  "api/VRBuilder.BasicInteraction.Conditions.TouchedCondition.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.TouchedCondition.html",
    "title": "Class TouchedCondition | VR Builder Documentation",
    "keywords": "Class TouchedCondition Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll Condition which is completed when TouchableProperty is touched. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-conditions/touch-object\")] public class TouchedCondition : Condition<TouchedCondition.EntityData>, IDataOwner<TouchedCondition.EntityData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider Inheritance object Entity<TouchedCondition.EntityData> CompletableEntity<TouchedCondition.EntityData> Condition<TouchedCondition.EntityData> TouchedCondition Implements IDataOwner<TouchedCondition.EntityData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Inherited Members Condition<TouchedCondition.EntityData>.Clone() Condition<TouchedCondition.EntityData>.GetLockableProperties() CompletableEntity<TouchedCondition.EntityData>.IsCompleted CompletableEntity<TouchedCondition.EntityData>.Autocomplete() Entity<TouchedCondition.EntityData>.Data Entity<TouchedCondition.EntityData>.LifeCycle Entity<TouchedCondition.EntityData>.Parent Entity<TouchedCondition.EntityData>.GetActivatingProcess() Entity<TouchedCondition.EntityData>.GetDeactivatingProcess() Entity<TouchedCondition.EntityData>.GetConfigurator() Entity<TouchedCondition.EntityData>.Configure(IMode) Entity<TouchedCondition.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TouchedCondition() [JsonConstructor] [Preserve] public TouchedCondition() TouchedCondition(Guid) public TouchedCondition(Guid uniqueId) Parameters uniqueId Guid TouchedCondition(string) [Obsolete(\"This constructor only supports guids and will be removed in the next major version.\")] public TouchedCondition(string uniqueId) Parameters uniqueId string TouchedCondition(ITouchableProperty) public TouchedCondition(ITouchableProperty target) Parameters target ITouchableProperty Methods GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetAutocompleter() Override this method to return a custom Autocompleter<TData>. protected override IAutocompleter GetAutocompleter() Returns IAutocompleter By default, it returns and empty autocompleter which does nothing."
  },
  "api/VRBuilder.BasicInteraction.Conditions.UsedCondition.EntityData.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.UsedCondition.EntityData.html",
    "title": "Class UsedCondition.EntityData | VR Builder Documentation",
    "keywords": "Class UsedCondition.EntityData Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll [DisplayName(\"Use Object\")] public class UsedCondition.EntityData : IConditionData, ICompletableData, INamedData, IData Inheritance object UsedCondition.EntityData Implements IConditionData ICompletableData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsCompleted public bool IsCompleted { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string UsableObjects [DataMember] [DisplayName(\"Objects\")] public MultipleScenePropertyReference<IUsableProperty> UsableObjects { get; set; } Property Value MultipleScenePropertyReference<IUsableProperty> UsableProperty [DataMember] [Obsolete(\"Use UsableObjects instead.\")] [LegacyProperty(\"UsableObjects\")] public ScenePropertyReference<IUsableProperty> UsableProperty { get; set; } Property Value ScenePropertyReference<IUsableProperty>"
  },
  "api/VRBuilder.BasicInteraction.Conditions.UsedCondition.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.UsedCondition.html",
    "title": "Class UsedCondition | VR Builder Documentation",
    "keywords": "Class UsedCondition Namespace VRBuilder.BasicInteraction.Conditions Assembly VRBuilder.BasicInteraction.dll Condition which becomes completed when UsableProperty is used. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-conditions/use-object\")] public class UsedCondition : Condition<UsedCondition.EntityData>, IDataOwner<UsedCondition.EntityData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider Inheritance object Entity<UsedCondition.EntityData> CompletableEntity<UsedCondition.EntityData> Condition<UsedCondition.EntityData> UsedCondition Implements IDataOwner<UsedCondition.EntityData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Inherited Members Condition<UsedCondition.EntityData>.Clone() CompletableEntity<UsedCondition.EntityData>.IsCompleted CompletableEntity<UsedCondition.EntityData>.Autocomplete() Entity<UsedCondition.EntityData>.Data Entity<UsedCondition.EntityData>.LifeCycle Entity<UsedCondition.EntityData>.Parent Entity<UsedCondition.EntityData>.GetActivatingProcess() Entity<UsedCondition.EntityData>.GetDeactivatingProcess() Entity<UsedCondition.EntityData>.GetConfigurator() Entity<UsedCondition.EntityData>.Configure(IMode) Entity<UsedCondition.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UsedCondition() [JsonConstructor] [Preserve] public UsedCondition() UsedCondition(Guid) public UsedCondition(Guid target) Parameters target Guid UsedCondition(string) [Obsolete(\"This constructor will be removed in the next major version.\")] public UsedCondition(string target) Parameters target string UsedCondition(IUsableProperty) public UsedCondition(IUsableProperty target) Parameters target IUsableProperty Methods GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetAutocompleter() Override this method to return a custom Autocompleter<TData>. protected override IAutocompleter GetAutocompleter() Returns IAutocompleter By default, it returns and empty autocompleter which does nothing. GetLockableProperties() Returns all LockableProperties this provider requires. public override IEnumerable<LockablePropertyData> GetLockableProperties() Returns IEnumerable<LockablePropertyData>"
  },
  "api/VRBuilder.BasicInteraction.Conditions.html": {
    "href": "api/VRBuilder.BasicInteraction.Conditions.html",
    "title": "Namespace VRBuilder.BasicInteraction.Conditions | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.BasicInteraction.Conditions Classes GrabbedCondition Condition which is completed when a IGrabbableProperty is grabbed. GrabbedCondition.EntityData GrabbedObjectWithTagCondition Condition which is completed when a IGrabbableProperty with the given tag is grabbed. GrabbedObjectWithTagCondition.EntityData ReleasedCondition Condition which is completed when GrabbableProperty becomes ungrabbed. ReleasedCondition.EntityData SnappedCondition Condition which is completed when an object from a given pool is snapped into a target snap zone. SnappedCondition.EntityData SnappedObjectWithTagCondition Condition which is completed when an object from a given pool is snapped into a target snap zone. SnappedObjectWithTagCondition.EntityData TeleportCondition Condition which is completed when a teleportation action was executed into the referenced ITeleportationProperty. TeleportCondition.EntityData TouchedCondition Condition which is completed when TouchableProperty is touched. TouchedCondition.EntityData UsedCondition Condition which becomes completed when UsableProperty is used. UsedCondition.EntityData"
  },
  "api/VRBuilder.BasicInteraction.DefaultHighlighter.html": {
    "href": "api/VRBuilder.BasicInteraction.DefaultHighlighter.html",
    "title": "Class DefaultHighlighter | VR Builder Documentation",
    "keywords": "Class DefaultHighlighter Namespace VRBuilder.BasicInteraction Assembly VRBuilder.BasicInteraction.dll Adds highlighting functionality to a GameObject with Renderers. [DisallowMultipleComponent] public class DefaultHighlighter : AbstractHighlighter, IHighlighter Inheritance object Object Component Behaviour MonoBehaviour AbstractHighlighter DefaultHighlighter Implements IHighlighter Derived InteractableHighlighter Inherited Members AbstractHighlighter.renderers AbstractHighlighter.highlightMeshRenderer AbstractHighlighter.highlightMeshFilter AbstractHighlighter.ClearCacheRenderers() AbstractHighlighter.RefreshCachedRenderers() AbstractHighlighter.CreateHighlightMaterial(Color) AbstractHighlighter.CreateHighlightMaterial(Texture) AbstractHighlighter.CanObjectBeHighlighted() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Highlights are always queued following a LIFO (Last In First Out) scheme. Properties IsHighlighting Returns true if there is this object is currently being highlighted. public override bool IsHighlighting { get; } Property Value bool Methods DisableRenders() protected void DisableRenders() ForceRefreshCachedRenderers() Regenerates the cached renderers. public void ForceRefreshCachedRenderers() GetHighlightMaterial() public override Material GetHighlightMaterial() Returns Material OnDisable() protected virtual void OnDisable() ReenableRenderers() protected void ReenableRenderers() Reset() protected virtual void Reset() StartHighlighting(Color, string) Highlights this object with given highlightColor. public string StartHighlighting(Color highlightColor, string highlightID) Parameters highlightColor Color highlightID string Returns string An ID corresponding to the highlight, should be used in StopHighlighting(). Remarks Every highlight requires an ID to avoid duplications. StartHighlighting(Material) Starts highlighting this object. public override void StartHighlighting(Material highlightMaterial) Parameters highlightMaterial Material Material to be applied as highlight. StartHighlighting(Material, string) Highlights this object with given highlightMaterial. public string StartHighlighting(Material highlightMaterial, string highlightID) Parameters highlightMaterial Material highlightID string Returns string An ID corresponding to the highlight, should be used in StopHighlighting(). Remarks Every highlight requires an ID to avoid duplications. StartHighlighting(Texture, string) Highlights this object with given highlightTexture. public string StartHighlighting(Texture highlightTexture, string highlightID) Parameters highlightTexture Texture highlightID string Returns string An ID corresponding to the highlight, should be used in StopHighlighting(). Remarks Every highlight requires an ID to avoid duplications. StopHighlighting() Stops highlighting this object. public override void StopHighlighting() StopHighlighting(string) Stops a highlight of given highlightID. public void StopHighlighting(string highlightID) Parameters highlightID string"
  },
  "api/VRBuilder.BasicInteraction.ExcludeFromHighlightMesh.html": {
    "href": "api/VRBuilder.BasicInteraction.ExcludeFromHighlightMesh.html",
    "title": "Class ExcludeFromHighlightMesh | VR Builder Documentation",
    "keywords": "Class ExcludeFromHighlightMesh Namespace VRBuilder.BasicInteraction Assembly VRBuilder.BasicInteraction.dll Can be added to GameObjects to exclude them from automatically generated highlights. If you want to add this to your MonoBehaviour, use IExcludeFromHighlightMesh public sealed class ExcludeFromHighlightMesh : MonoBehaviour, IExcludeFromHighlightMesh Inheritance object Object Component Behaviour MonoBehaviour ExcludeFromHighlightMesh Implements IExcludeFromHighlightMesh Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.BasicInteraction.IExcludeFromHighlightMesh.html": {
    "href": "api/VRBuilder.BasicInteraction.IExcludeFromHighlightMesh.html",
    "title": "Interface IExcludeFromHighlightMesh | VR Builder Documentation",
    "keywords": "Interface IExcludeFromHighlightMesh Namespace VRBuilder.BasicInteraction Assembly VRBuilder.BasicInteraction.dll Objects inheriting this interface will be excluded from automatically generated highlights. public interface IExcludeFromHighlightMesh"
  },
  "api/VRBuilder.BasicInteraction.IHighlighter.html": {
    "href": "api/VRBuilder.BasicInteraction.IHighlighter.html",
    "title": "Interface IHighlighter | VR Builder Documentation",
    "keywords": "Interface IHighlighter Namespace VRBuilder.BasicInteraction Assembly VRBuilder.BasicInteraction.dll Adds highlighting functionality to a GameObject with Renderers. public interface IHighlighter Properties IsHighlighting Returns true if there is this object is currently being highlighted. bool IsHighlighting { get; } Property Value bool Methods GetHighlightMaterial() Material GetHighlightMaterial() Returns Material StartHighlighting(Material) Starts highlighting this object. void StartHighlighting(Material highlightMaterial) Parameters highlightMaterial Material Material to be applied as highlight. StopHighlighting() Stops highlighting this object. void StopHighlighting()"
  },
  "api/VRBuilder.BasicInteraction.IInteractableObject.html": {
    "href": "api/VRBuilder.BasicInteraction.IInteractableObject.html",
    "title": "Interface IInteractableObject | VR Builder Documentation",
    "keywords": "Interface IInteractableObject Namespace VRBuilder.BasicInteraction Assembly VRBuilder.BasicInteraction.dll Base interface to determine that the given class is an interactable object. public interface IInteractableObject Properties GameObject GameObject this interactable object is attached to. GameObject GameObject { get; } Property Value GameObject IsGrabbable Determines if this interactable object can be grabbed. bool IsGrabbable { set; } Property Value bool IsTouchable Determines if this interactable object can be touched. bool IsTouchable { set; } Property Value bool IsUsable Determines if this interactable object can be used. bool IsUsable { set; } Property Value bool"
  },
  "api/VRBuilder.BasicInteraction.ISnapZone.html": {
    "href": "api/VRBuilder.BasicInteraction.ISnapZone.html",
    "title": "Interface ISnapZone | VR Builder Documentation",
    "keywords": "Interface ISnapZone Namespace VRBuilder.BasicInteraction Assembly VRBuilder.BasicInteraction.dll Base interface for SnapZone, if you add an custom interaction framework add this interface to your SnapZone implementation. public interface ISnapZone Properties Anchor Position where the object is snapped. Transform Anchor { get; } Property Value Transform IsEmpty Returns if the SnapZone is empty. bool IsEmpty { get; } Property Value bool SnappedObject Returns the snapped object, can be null. ISnappableProperty SnappedObject { get; } Property Value ISnappableProperty Methods CanSnap(ISnappableProperty) Returns if the object can be snapped at all. bool CanSnap(ISnappableProperty target) Parameters target ISnappableProperty Returns bool ForceRelease() Forces release the snapped object, will return false when there is no object. bool ForceRelease() Returns bool ForceSnap(ISnappableProperty) Forces the object to be snapped, returns true when it was snapped successfully. bool ForceSnap(ISnappableProperty target) Parameters target ISnappableProperty Returns bool"
  },
  "api/VRBuilder.BasicInteraction.Properties.GrabbablePropertyEventArgs.html": {
    "href": "api/VRBuilder.BasicInteraction.Properties.GrabbablePropertyEventArgs.html",
    "title": "Class GrabbablePropertyEventArgs | VR Builder Documentation",
    "keywords": "Class GrabbablePropertyEventArgs Namespace VRBuilder.BasicInteraction.Properties Assembly VRBuilder.BasicInteraction.dll Event args for IGrabbableProperty events. public class GrabbablePropertyEventArgs : EventArgs Inheritance object EventArgs GrabbablePropertyEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.BasicInteraction.Properties.IGrabbableProperty.html": {
    "href": "api/VRBuilder.BasicInteraction.Properties.IGrabbableProperty.html",
    "title": "Interface IGrabbableProperty | VR Builder Documentation",
    "keywords": "Interface IGrabbableProperty Namespace VRBuilder.BasicInteraction.Properties Assembly VRBuilder.BasicInteraction.dll public interface IGrabbableProperty : ISceneObjectProperty, ILockable Inherited Members ISceneObjectProperty.SceneObject ILockable.Locked ILockable.Unlocked ILockable.IsLocked ILockable.SetLocked(bool) ILockable.RequestLocked(bool, IStepData) ILockable.RemoveUnlocker(IStepData) Properties GrabEnded Called when ungrabbed. UnityEvent<GrabbablePropertyEventArgs> GrabEnded { get; } Property Value UnityEvent<GrabbablePropertyEventArgs> GrabStarted Called when grabbed. UnityEvent<GrabbablePropertyEventArgs> GrabStarted { get; } Property Value UnityEvent<GrabbablePropertyEventArgs> IsGrabbed Is object currently grabbed. bool IsGrabbed { get; } Property Value bool Methods FastForwardGrab() Instantaneously simulate that the object was grabbed. void FastForwardGrab() FastForwardUngrab() Instantaneously simulate that the object was ungrabbed. void FastForwardUngrab() ForceSetGrabbed(bool) Force this property to a specified grabbed state. void ForceSetGrabbed(bool isGrabbed) Parameters isGrabbed bool"
  },
  "api/VRBuilder.BasicInteraction.Properties.ISnapZoneProperty.html": {
    "href": "api/VRBuilder.BasicInteraction.Properties.ISnapZoneProperty.html",
    "title": "Interface ISnapZoneProperty | VR Builder Documentation",
    "keywords": "Interface ISnapZoneProperty Namespace VRBuilder.BasicInteraction.Properties Assembly VRBuilder.BasicInteraction.dll public interface ISnapZoneProperty : ISceneObjectProperty, ILockable Inherited Members ISceneObjectProperty.SceneObject ILockable.Locked ILockable.Unlocked ILockable.IsLocked ILockable.SetLocked(bool) ILockable.RequestLocked(bool, IStepData) ILockable.RemoveUnlocker(IStepData) Properties IsObjectSnapped Currently has an object snapped into this snap zone. bool IsObjectSnapped { get; } Property Value bool ObjectAttached Called when an object is snapped to the snap zone. UnityEvent<SnapZonePropertyEventArgs> ObjectAttached { get; } Property Value UnityEvent<SnapZonePropertyEventArgs> ObjectDetached Called when an object is unsnapped from the snap zone. UnityEvent<SnapZonePropertyEventArgs> ObjectDetached { get; } Property Value UnityEvent<SnapZonePropertyEventArgs> SnapZoneObject Snap zone object. GameObject SnapZoneObject { get; } Property Value GameObject SnappedObject Object which is snapped into this snap zone. ISnappableProperty SnappedObject { get; set; } Property Value ISnappableProperty Methods Configure(IMode) void Configure(IMode mode) Parameters mode IMode"
  },
  "api/VRBuilder.BasicInteraction.Properties.ISnappableProperty.html": {
    "href": "api/VRBuilder.BasicInteraction.Properties.ISnappableProperty.html",
    "title": "Interface ISnappableProperty | VR Builder Documentation",
    "keywords": "Interface ISnappableProperty Namespace VRBuilder.BasicInteraction.Properties Assembly VRBuilder.BasicInteraction.dll public interface ISnappableProperty : ISceneObjectProperty, ILockable Inherited Members ISceneObjectProperty.SceneObject ILockable.Locked ILockable.Unlocked ILockable.IsLocked ILockable.SetLocked(bool) ILockable.RequestLocked(bool, IStepData) ILockable.RemoveUnlocker(IStepData) Properties AttachedToSnapZone Called when the object is snapped to a snap zone. UnityEvent<SnappablePropertyEventArgs> AttachedToSnapZone { get; } Property Value UnityEvent<SnappablePropertyEventArgs> DetachedFromSnapZone Called when the object is unsnapped from a snap zone. UnityEvent<SnappablePropertyEventArgs> DetachedFromSnapZone { get; } Property Value UnityEvent<SnappablePropertyEventArgs> IsSnapped Is object currently snapped. bool IsSnapped { get; } Property Value bool LockObjectOnSnap Will object be locked when it has been snapped. bool LockObjectOnSnap { get; } Property Value bool SnappedZone Zone to snap into. ISnapZoneProperty SnappedZone { get; set; } Property Value ISnapZoneProperty Methods FastForwardSnapInto(ISnapZoneProperty) Instantaneously simulate that the object was snapped into given snapZone. void FastForwardSnapInto(ISnapZoneProperty snapZone) Parameters snapZone ISnapZoneProperty Snap zone to snap into."
  },
  "api/VRBuilder.BasicInteraction.Properties.ITeleportationProperty.html": {
    "href": "api/VRBuilder.BasicInteraction.Properties.ITeleportationProperty.html",
    "title": "Interface ITeleportationProperty | VR Builder Documentation",
    "keywords": "Interface ITeleportationProperty Namespace VRBuilder.BasicInteraction.Properties Assembly VRBuilder.BasicInteraction.dll Interface for ISceneObjectPropertys that can be used for teleport into. public interface ITeleportationProperty : ISceneObjectProperty, ILockable Inherited Members ISceneObjectProperty.SceneObject ILockable.Locked ILockable.Unlocked ILockable.IsLocked ILockable.SetLocked(bool) ILockable.RequestLocked(bool, IStepData) ILockable.RemoveUnlocker(IStepData) Properties IsActive True if the teleportation property is ready to be teleported to. bool IsActive { get; } Property Value bool OnInitialized Emitted when the teleportation property is initialized. UnityEvent OnInitialized { get; } Property Value UnityEvent TeleportEnded Emitted when a teleportation action into this ISceneObject was done. UnityEvent<TeleportationPropertyEventArgs> TeleportEnded { get; } Property Value UnityEvent<TeleportationPropertyEventArgs> WasUsedToTeleport True if a teleportation action into this ITeleportationProperty was done. bool WasUsedToTeleport { get; } Property Value bool Methods FastForwardTeleport() Instantaneously simulate that the object was used. void FastForwardTeleport() ForceSetTeleported() Forces the property to the teleported state. void ForceSetTeleported() Initialize() Sets WasUsedToTeleport to true. void Initialize() Remarks This method is called every time a TeleportCondition is activate."
  },
  "api/VRBuilder.BasicInteraction.Properties.ITouchableProperty.html": {
    "href": "api/VRBuilder.BasicInteraction.Properties.ITouchableProperty.html",
    "title": "Interface ITouchableProperty | VR Builder Documentation",
    "keywords": "Interface ITouchableProperty Namespace VRBuilder.BasicInteraction.Properties Assembly VRBuilder.BasicInteraction.dll public interface ITouchableProperty : ISceneObjectProperty, ILockable Inherited Members ISceneObjectProperty.SceneObject ILockable.Locked ILockable.Unlocked ILockable.IsLocked ILockable.SetLocked(bool) ILockable.RequestLocked(bool, IStepData) ILockable.RemoveUnlocker(IStepData) Properties IsBeingTouched Is object currently touched. bool IsBeingTouched { get; } Property Value bool TouchEnded Called when stopped touching. UnityEvent<TouchablePropertyEventArgs> TouchEnded { get; } Property Value UnityEvent<TouchablePropertyEventArgs> TouchStarted Called when touched. UnityEvent<TouchablePropertyEventArgs> TouchStarted { get; } Property Value UnityEvent<TouchablePropertyEventArgs> Methods FastForwardTouch() Instantaneously simulate that the object was touched. void FastForwardTouch() ForceSetTouched(bool) Force this property to a specified touched state. void ForceSetTouched(bool isTouched) Parameters isTouched bool"
  },
  "api/VRBuilder.BasicInteraction.Properties.IUsableProperty.html": {
    "href": "api/VRBuilder.BasicInteraction.Properties.IUsableProperty.html",
    "title": "Interface IUsableProperty | VR Builder Documentation",
    "keywords": "Interface IUsableProperty Namespace VRBuilder.BasicInteraction.Properties Assembly VRBuilder.BasicInteraction.dll public interface IUsableProperty : ISceneObjectProperty, ILockable Inherited Members ISceneObjectProperty.SceneObject ILockable.Locked ILockable.Unlocked ILockable.IsLocked ILockable.SetLocked(bool) ILockable.RequestLocked(bool, IStepData) ILockable.RemoveUnlocker(IStepData) Properties IsBeingUsed Is object currently used. bool IsBeingUsed { get; } Property Value bool UseEnded Called when object use has ended. UnityEvent<UsablePropertyEventArgs> UseEnded { get; } Property Value UnityEvent<UsablePropertyEventArgs> UseStarted Called when the object is used. UnityEvent<UsablePropertyEventArgs> UseStarted { get; } Property Value UnityEvent<UsablePropertyEventArgs> Methods FastForwardUse() Instantaneously simulate that the object was used. void FastForwardUse() ForceSetUsed(bool) Force this property to a specified use state. void ForceSetUsed(bool isUsed) Parameters isUsed bool"
  },
  "api/VRBuilder.BasicInteraction.Properties.SnapZonePropertyEventArgs.html": {
    "href": "api/VRBuilder.BasicInteraction.Properties.SnapZonePropertyEventArgs.html",
    "title": "Class SnapZonePropertyEventArgs | VR Builder Documentation",
    "keywords": "Class SnapZonePropertyEventArgs Namespace VRBuilder.BasicInteraction.Properties Assembly VRBuilder.BasicInteraction.dll public class SnapZonePropertyEventArgs : EventArgs Inheritance object EventArgs SnapZonePropertyEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.BasicInteraction.Properties.SnappablePropertyEventArgs.html": {
    "href": "api/VRBuilder.BasicInteraction.Properties.SnappablePropertyEventArgs.html",
    "title": "Class SnappablePropertyEventArgs | VR Builder Documentation",
    "keywords": "Class SnappablePropertyEventArgs Namespace VRBuilder.BasicInteraction.Properties Assembly VRBuilder.BasicInteraction.dll Event args for ISnappableProperty events. public class SnappablePropertyEventArgs : EventArgs Inheritance object EventArgs SnappablePropertyEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SnappablePropertyEventArgs(ISnappableProperty, ISnapZoneProperty) public SnappablePropertyEventArgs(ISnappableProperty snappedObject, ISnapZoneProperty snappedZone) Parameters snappedObject ISnappableProperty snappedZone ISnapZoneProperty Fields SnappedObject public readonly ISnappableProperty SnappedObject Field Value ISnappableProperty SnappedZone public readonly ISnapZoneProperty SnappedZone Field Value ISnapZoneProperty"
  },
  "api/VRBuilder.BasicInteraction.Properties.TeleportationPropertyEventArgs.html": {
    "href": "api/VRBuilder.BasicInteraction.Properties.TeleportationPropertyEventArgs.html",
    "title": "Class TeleportationPropertyEventArgs | VR Builder Documentation",
    "keywords": "Class TeleportationPropertyEventArgs Namespace VRBuilder.BasicInteraction.Properties Assembly VRBuilder.BasicInteraction.dll Event args for ITeleportationProperty events. public class TeleportationPropertyEventArgs : EventArgs Inheritance object EventArgs TeleportationPropertyEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.BasicInteraction.Properties.TouchablePropertyEventArgs.html": {
    "href": "api/VRBuilder.BasicInteraction.Properties.TouchablePropertyEventArgs.html",
    "title": "Class TouchablePropertyEventArgs | VR Builder Documentation",
    "keywords": "Class TouchablePropertyEventArgs Namespace VRBuilder.BasicInteraction.Properties Assembly VRBuilder.BasicInteraction.dll Event args for ITouchableProperty events. public class TouchablePropertyEventArgs : EventArgs Inheritance object EventArgs TouchablePropertyEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.BasicInteraction.Properties.UsablePropertyEventArgs.html": {
    "href": "api/VRBuilder.BasicInteraction.Properties.UsablePropertyEventArgs.html",
    "title": "Class UsablePropertyEventArgs | VR Builder Documentation",
    "keywords": "Class UsablePropertyEventArgs Namespace VRBuilder.BasicInteraction.Properties Assembly VRBuilder.BasicInteraction.dll public class UsablePropertyEventArgs : EventArgs Inheritance object EventArgs UsablePropertyEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.BasicInteraction.Properties.html": {
    "href": "api/VRBuilder.BasicInteraction.Properties.html",
    "title": "Namespace VRBuilder.BasicInteraction.Properties | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.BasicInteraction.Properties Classes GrabbablePropertyEventArgs Event args for IGrabbableProperty events. SnapZonePropertyEventArgs SnappablePropertyEventArgs Event args for ISnappableProperty events. TeleportationPropertyEventArgs Event args for ITeleportationProperty events. TouchablePropertyEventArgs Event args for ITouchableProperty events. UsablePropertyEventArgs Interfaces IGrabbableProperty ISnapZoneProperty ISnappableProperty ITeleportationProperty Interface for ISceneObjectPropertys that can be used for teleport into. ITouchableProperty IUsableProperty"
  },
  "api/VRBuilder.BasicInteraction.RigSetup.InteractionRigProvider.html": {
    "href": "api/VRBuilder.BasicInteraction.RigSetup.InteractionRigProvider.html",
    "title": "Class InteractionRigProvider | VR Builder Documentation",
    "keywords": "Class InteractionRigProvider Namespace VRBuilder.BasicInteraction.RigSetup Assembly VRBuilder.BasicInteraction.dll Provides all information and methods to setup a scene with a fitting and working rig. public abstract class InteractionRigProvider Inheritance object InteractionRigProvider Derived NoRigSetup XRSetupBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name The name for this rig, has to be unique. public abstract string Name { get; } Property Value string PrefabName Name of the prefab which should be loaded. public abstract string PrefabName { get; } Property Value string Methods CanBeUsed() Decides if this rig is useable at this moment. Can be overwritten to be more sophisticated. public virtual bool CanBeUsed() Returns bool FindPrefab(string) Searches the given prefab name and returns it. protected GameObject FindPrefab(string prefab) Parameters prefab string Returns GameObject GetPrefab() Returns the found Prefab object. public virtual GameObject GetPrefab() Returns GameObject GetSetupTooltip() Returns the tooltip which should be shown when this rig cannot be used. public virtual string GetSetupTooltip() Returns string OnSetup() Will be called when the scene is done setting up this rig to allow additional changes. public virtual void OnSetup() PreSetup() Will be called before the rig is instantiated. public virtual void PreSetup()"
  },
  "api/VRBuilder.BasicInteraction.RigSetup.InteractionRigSetup.RigInfo.html": {
    "href": "api/VRBuilder.BasicInteraction.RigSetup.InteractionRigSetup.RigInfo.html",
    "title": "Struct InteractionRigSetup.RigInfo | VR Builder Documentation",
    "keywords": "Struct InteractionRigSetup.RigInfo Namespace VRBuilder.BasicInteraction.RigSetup Assembly VRBuilder.BasicInteraction.dll Info struct about one rig. [Serializable] public struct InteractionRigSetup.RigInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Enabled public bool Enabled Field Value bool Name public string Name Field Value string"
  },
  "api/VRBuilder.BasicInteraction.RigSetup.InteractionRigSetup.html": {
    "href": "api/VRBuilder.BasicInteraction.RigSetup.InteractionRigSetup.html",
    "title": "Class InteractionRigSetup | VR Builder Documentation",
    "keywords": "Class InteractionRigSetup Namespace VRBuilder.BasicInteraction.RigSetup Assembly VRBuilder.BasicInteraction.dll Will setup the interaction rig on awake. Priority is from top to bottom of the list, only rigs which full fill all RigUsabilityChecker will be initialized. [DefaultExecutionOrder(-1000)] public class InteractionRigSetup : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour InteractionRigSetup Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields DummyUser [Tooltip(\"Dummy user object\")] public GameObject DummyUser Field Value GameObject PossibleInteractionRigs Information about possible interaction rigs, serializable. [SerializeField] public InteractionRigSetup.RigInfo[] PossibleInteractionRigs Field Value RigInfo[] enforcedProvider Enforced provider will be use. protected static InteractionRigProvider enforcedProvider Field Value InteractionRigProvider Methods SetEnforcedInteractionRig(InteractionRigProvider) Enforces the giving Rig to be used, if possible. public static void SetEnforcedInteractionRig(InteractionRigProvider provider) Parameters provider InteractionRigProvider UpdateRigList() Updates the current list of all rigs available. public List<InteractionRigProvider> UpdateRigList() Returns List<InteractionRigProvider>"
  },
  "api/VRBuilder.BasicInteraction.RigSetup.NoRigSetup.html": {
    "href": "api/VRBuilder.BasicInteraction.RigSetup.NoRigSetup.html",
    "title": "Class NoRigSetup | VR Builder Documentation",
    "keywords": "Class NoRigSetup Namespace VRBuilder.BasicInteraction.RigSetup Assembly VRBuilder.BasicInteraction.dll Does not initialize any rig. public class NoRigSetup : InteractionRigProvider Inheritance object InteractionRigProvider NoRigSetup Inherited Members InteractionRigProvider.CanBeUsed() InteractionRigProvider.GetSetupTooltip() InteractionRigProvider.GetPrefab() InteractionRigProvider.OnSetup() InteractionRigProvider.PreSetup() InteractionRigProvider.FindPrefab(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name The name for this rig, has to be unique. public override string Name { get; } Property Value string PrefabName Name of the prefab which should be loaded. public override string PrefabName { get; } Property Value string"
  },
  "api/VRBuilder.BasicInteraction.RigSetup.html": {
    "href": "api/VRBuilder.BasicInteraction.RigSetup.html",
    "title": "Namespace VRBuilder.BasicInteraction.RigSetup | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.BasicInteraction.RigSetup Classes InteractionRigProvider Provides all information and methods to setup a scene with a fitting and working rig. InteractionRigSetup Will setup the interaction rig on awake. Priority is from top to bottom of the list, only rigs which full fill all RigUsabilityChecker will be initialized. NoRigSetup Does not initialize any rig. Structs InteractionRigSetup.RigInfo Info struct about one rig."
  },
  "api/VRBuilder.BasicInteraction.Validation.HasGuidValidation.html": {
    "href": "api/VRBuilder.BasicInteraction.Validation.HasGuidValidation.html",
    "title": "Class HasGuidValidation | VR Builder Documentation",
    "keywords": "Class HasGuidValidation Namespace VRBuilder.BasicInteraction.Validation Assembly VRBuilder.BasicInteraction.dll Validator that checks if the object has one of the required guids either as its object ID or as a group. public class HasGuidValidation : Validator, IGuidContainer Inheritance object Object Component Behaviour MonoBehaviour Validator HasGuidValidation Implements IGuidContainer Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Guids All guids on the object. public IEnumerable<Guid> Guids { get; } Property Value IEnumerable<Guid> Methods AddGuid(Guid) Add the specified guid. public void AddGuid(Guid guid) Parameters guid Guid HasGuid(Guid) True if the object has the specified guid. public bool HasGuid(Guid guid) Parameters guid Guid Returns bool RemoveGuid(Guid) Remove the specified guid. public bool RemoveGuid(Guid guid) Parameters guid Guid Returns bool Validate(GameObject) When this returns true, the given object is allowed to be snapped. public override bool Validate(GameObject obj) Parameters obj GameObject Returns bool Events GuidAdded Raised when a guid is added. public event EventHandler<GuidContainerEventArgs> GuidAdded Event Type EventHandler<GuidContainerEventArgs> GuidRemoved Raised when a guid is removed. public event EventHandler<GuidContainerEventArgs> GuidRemoved Event Type EventHandler<GuidContainerEventArgs>"
  },
  "api/VRBuilder.BasicInteraction.Validation.IsObjectWithTagValidation.html": {
    "href": "api/VRBuilder.BasicInteraction.Validation.IsObjectWithTagValidation.html",
    "title": "Class IsObjectWithTagValidation | VR Builder Documentation",
    "keywords": "Class IsObjectWithTagValidation Namespace VRBuilder.BasicInteraction.Validation Assembly VRBuilder.BasicInteraction.dll public class IsObjectWithTagValidation : Validator, IGuidContainer Inheritance object Object Component Behaviour MonoBehaviour Validator IsObjectWithTagValidation Implements IGuidContainer Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Guids All guids on the object. public IEnumerable<Guid> Guids { get; } Property Value IEnumerable<Guid> Methods AddGuid(Guid) Add the specified guid. public void AddGuid(Guid tag) Parameters tag Guid HasGuid(Guid) True if the object has the specified guid. public bool HasGuid(Guid tag) Parameters tag Guid Returns bool RemoveGuid(Guid) Remove the specified guid. public bool RemoveGuid(Guid tag) Parameters tag Guid Returns bool Validate(GameObject) When this returns true, the given object is allowed to be snapped. public override bool Validate(GameObject obj) Parameters obj GameObject Returns bool Events GuidAdded Raised when a guid is added. public event EventHandler<GuidContainerEventArgs> GuidAdded Event Type EventHandler<GuidContainerEventArgs> GuidRemoved Raised when a guid is removed. public event EventHandler<GuidContainerEventArgs> GuidRemoved Event Type EventHandler<GuidContainerEventArgs>"
  },
  "api/VRBuilder.BasicInteraction.Validation.IsProcessSceneObjectValidation.html": {
    "href": "api/VRBuilder.BasicInteraction.Validation.IsProcessSceneObjectValidation.html",
    "title": "Class IsProcessSceneObjectValidation | VR Builder Documentation",
    "keywords": "Class IsProcessSceneObjectValidation Namespace VRBuilder.BasicInteraction.Validation Assembly VRBuilder.BasicInteraction.dll Checks if the process object attached to the given GameObject is listed as accepted trainin scene object. public class IsProcessSceneObjectValidation : Validator Inheritance object Object Component Behaviour MonoBehaviour Validator IsProcessSceneObjectValidation Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods AddProcessSceneObject(ProcessSceneObject) Adds a new ProcessSceneObject to the list. public void AddProcessSceneObject(ProcessSceneObject target) Parameters target ProcessSceneObject RemoveProcessSceneObject(ProcessSceneObject) Removes an existing process object from the list. public void RemoveProcessSceneObject(ProcessSceneObject target) Parameters target ProcessSceneObject Validate(GameObject) When this returns true, the given object is allowed to be snapped. public override bool Validate(GameObject obj) Parameters obj GameObject Returns bool"
  },
  "api/VRBuilder.BasicInteraction.Validation.Validator.html": {
    "href": "api/VRBuilder.BasicInteraction.Validation.Validator.html",
    "title": "Class Validator | VR Builder Documentation",
    "keywords": "Class Validator Namespace VRBuilder.BasicInteraction.Validation Assembly VRBuilder.BasicInteraction.dll Base validator used to implement concrete validators. public abstract class Validator : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Validator Derived HasGuidValidation IsObjectWithTagValidation IsProcessSceneObjectValidation Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Validate(GameObject) When this returns true, the given object is allowed to be snapped. public abstract bool Validate(GameObject obj) Parameters obj GameObject Returns bool"
  },
  "api/VRBuilder.BasicInteraction.Validation.html": {
    "href": "api/VRBuilder.BasicInteraction.Validation.html",
    "title": "Namespace VRBuilder.BasicInteraction.Validation | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.BasicInteraction.Validation Classes HasGuidValidation Validator that checks if the object has one of the required guids either as its object ID or as a group. IsObjectWithTagValidation IsProcessSceneObjectValidation Checks if the process object attached to the given GameObject is listed as accepted trainin scene object. Validator Base validator used to implement concrete validators."
  },
  "api/VRBuilder.BasicInteraction.html": {
    "href": "api/VRBuilder.BasicInteraction.html",
    "title": "Namespace VRBuilder.BasicInteraction | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.BasicInteraction Classes AbstractHighlighter Collects render information from a IHighlighter object and provides basic utilities for highlighting. BaseInteractionSimulator Base interaction simulator, only have one concrete simulator implementation in your project. If no concrete implementation is found a BaseInteractionSimulatorDummy will be used. BaseInteractionSimulatorDummy Interaction simulator dummy, does nothing beside of warning to there is no concrete implementation of a simulator. BaseLocomotionHandler Handles basic locomotion for e.g. rigs and provides an abstract locomotion layer. DefaultHighlighter Adds highlighting functionality to a GameObject with Renderers. ExcludeFromHighlightMesh Can be added to GameObjects to exclude them from automatically generated highlights. If you want to add this to your MonoBehaviour, use IExcludeFromHighlightMesh Interfaces IExcludeFromHighlightMesh Objects inheriting this interface will be excluded from automatically generated highlights. IHighlighter Adds highlighting functionality to a GameObject with Renderers. IInteractableObject Base interface to determine that the given class is an interactable object. ISnapZone Base interface for SnapZone, if you add an custom interaction framework add this interface to your SnapZone implementation."
  },
  "api/VRBuilder.Components.Runtime.Rigs.XRLegacySetup.html": {
    "href": "api/VRBuilder.Components.Runtime.Rigs.XRLegacySetup.html",
    "title": "Class XRLegacySetup | VR Builder Documentation",
    "keywords": "Class XRLegacySetup Namespace VRBuilder.Components.Runtime.Rigs Assembly VRBuilder.XRInteraction.dll Setup for XR with the old input system. public class XRLegacySetup : XRSetupBase Inheritance object InteractionRigProvider XRSetupBase XRLegacySetup Inherited Members XRSetupBase.IsPrefabMissing XRSetupBase.IsEventManagerInScene() InteractionRigProvider.GetPrefab() InteractionRigProvider.OnSetup() InteractionRigProvider.PreSetup() InteractionRigProvider.FindPrefab(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name The name for this rig, has to be unique. public override string Name { get; } Property Value string PrefabName Name of the prefab which should be loaded. public override string PrefabName { get; } Property Value string Methods CanBeUsed() Decides if this rig is useable at this moment. Can be overwritten to be more sophisticated. public override bool CanBeUsed() Returns bool GetSetupTooltip() Returns the tooltip which should be shown when this rig cannot be used. public override string GetSetupTooltip() Returns string"
  },
  "api/VRBuilder.Components.Runtime.Rigs.XRSetup.html": {
    "href": "api/VRBuilder.Components.Runtime.Rigs.XRSetup.html",
    "title": "Class XRSetup | VR Builder Documentation",
    "keywords": "Class XRSetup Namespace VRBuilder.Components.Runtime.Rigs Assembly VRBuilder.XRInteraction.dll Setup for the standard XR rig. public class XRSetup : XRSetupBase Inheritance object InteractionRigProvider XRSetupBase XRSetup Inherited Members XRSetupBase.IsPrefabMissing XRSetupBase.IsEventManagerInScene() InteractionRigProvider.GetPrefab() InteractionRigProvider.OnSetup() InteractionRigProvider.PreSetup() InteractionRigProvider.FindPrefab(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name The name for this rig, has to be unique. public override string Name { get; } Property Value string PrefabName Name of the prefab which should be loaded. public override string PrefabName { get; } Property Value string Methods CanBeUsed() Decides if this rig is useable at this moment. Can be overwritten to be more sophisticated. public override bool CanBeUsed() Returns bool GetSetupTooltip() Returns the tooltip which should be shown when this rig cannot be used. public override string GetSetupTooltip() Returns string"
  },
  "api/VRBuilder.Components.Runtime.Rigs.XRSetupBase.html": {
    "href": "api/VRBuilder.Components.Runtime.Rigs.XRSetupBase.html",
    "title": "Class XRSetupBase | VR Builder Documentation",
    "keywords": "Class XRSetupBase Namespace VRBuilder.Components.Runtime.Rigs Assembly VRBuilder.XRInteraction.dll public abstract class XRSetupBase : InteractionRigProvider Inheritance object InteractionRigProvider XRSetupBase Derived XRLegacySetup XRSetup XRSimulatorSetup Inherited Members InteractionRigProvider.Name InteractionRigProvider.PrefabName InteractionRigProvider.CanBeUsed() InteractionRigProvider.GetSetupTooltip() InteractionRigProvider.GetPrefab() InteractionRigProvider.OnSetup() InteractionRigProvider.PreSetup() InteractionRigProvider.FindPrefab(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors XRSetupBase() public XRSetupBase() Fields IsPrefabMissing protected readonly bool IsPrefabMissing Field Value bool Methods IsEventManagerInScene() protected bool IsEventManagerInScene() Returns bool"
  },
  "api/VRBuilder.Components.Runtime.Rigs.XRSimulatorSetup.html": {
    "href": "api/VRBuilder.Components.Runtime.Rigs.XRSimulatorSetup.html",
    "title": "Class XRSimulatorSetup | VR Builder Documentation",
    "keywords": "Class XRSimulatorSetup Namespace VRBuilder.Components.Runtime.Rigs Assembly VRBuilder.XRInteraction.dll Setup for XR Device Simulator. public class XRSimulatorSetup : XRSetupBase Inheritance object InteractionRigProvider XRSetupBase XRSimulatorSetup Inherited Members XRSetupBase.IsPrefabMissing XRSetupBase.IsEventManagerInScene() InteractionRigProvider.GetPrefab() InteractionRigProvider.OnSetup() InteractionRigProvider.PreSetup() InteractionRigProvider.FindPrefab(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name The name for this rig, has to be unique. public override string Name { get; } Property Value string PrefabName Name of the prefab which should be loaded. public override string PrefabName { get; } Property Value string Methods CanBeUsed() Decides if this rig is useable at this moment. Can be overwritten to be more sophisticated. public override bool CanBeUsed() Returns bool GetSetupTooltip() Returns the tooltip which should be shown when this rig cannot be used. public override string GetSetupTooltip() Returns string"
  },
  "api/VRBuilder.Components.Runtime.Rigs.html": {
    "href": "api/VRBuilder.Components.Runtime.Rigs.html",
    "title": "Namespace VRBuilder.Components.Runtime.Rigs | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Components.Runtime.Rigs Classes XRLegacySetup Setup for XR with the old input system. XRSetup Setup for the standard XR rig. XRSetupBase XRSimulatorSetup Setup for XR Device Simulator."
  },
  "api/VRBuilder.Core.ActivationStateChangedEventArgs.html": {
    "href": "api/VRBuilder.Core.ActivationStateChangedEventArgs.html",
    "title": "Class ActivationStateChangedEventArgs | VR Builder Documentation",
    "keywords": "Class ActivationStateChangedEventArgs Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Event that is fired when the current stage changes. public class ActivationStateChangedEventArgs : EventArgs Inheritance object EventArgs ActivationStateChangedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ActivationStateChangedEventArgs(Stage) public ActivationStateChangedEventArgs(Stage stage) Parameters stage Stage Fields Stage New stage. public readonly Stage Stage Field Value Stage"
  },
  "api/VRBuilder.Core.Attributes.DeletableAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.DeletableAttribute.html",
    "title": "Class DeletableAttribute | VR Builder Documentation",
    "keywords": "Class DeletableAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Declares that \"Delete\" button has to be drawn. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class DeletableAttribute : MetadataAttribute, _Attribute Inheritance object Attribute MetadataAttribute DeletableAttribute Implements _Attribute Inherited Members MetadataAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDefaultMetadata(MemberInfo) Return default metadata for owner. public override object GetDefaultMetadata(MemberInfo owner) Parameters owner MemberInfo Returns object IsMetadataValid(object) Check if metadata is still valid. public override bool IsMetadataValid(object metadata) Parameters metadata object Returns bool"
  },
  "api/VRBuilder.Core.Attributes.DisplayNameAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.DisplayNameAttribute.html",
    "title": "Class DisplayNameAttribute | VR Builder Documentation",
    "keywords": "Class DisplayNameAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Displayed name of process entity's property or field. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Property|AttributeTargets.Field)] public class DisplayNameAttribute : Attribute, _Attribute Inheritance object Attribute DisplayNameAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DisplayNameAttribute(string) public DisplayNameAttribute(string name) Parameters name string Properties Name Name of the process entity's property or field. public string Name { get; } Property Value string"
  },
  "api/VRBuilder.Core.Attributes.DisplayTooltipAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.DisplayTooltipAttribute.html",
    "title": "Class DisplayTooltipAttribute | VR Builder Documentation",
    "keywords": "Class DisplayTooltipAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Tooltip of process entity's property or field. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Property|AttributeTargets.Field)] public class DisplayTooltipAttribute : Attribute, _Attribute Inheritance object Attribute DisplayTooltipAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DisplayTooltipAttribute(string) public DisplayTooltipAttribute(string tooltip) Parameters tooltip string Properties Tooltip Tooltip of the process entity's property or field. public string Tooltip { get; } Property Value string"
  },
  "api/VRBuilder.Core.Attributes.DrawIsBlockingToggleAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.DrawIsBlockingToggleAttribute.html",
    "title": "Class DrawIsBlockingToggleAttribute | VR Builder Documentation",
    "keywords": "Class DrawIsBlockingToggleAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Declares that the \"Is Blocking\" toggle has to be drawn, if the behavior implements IBackgroundBehaviorData. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class DrawIsBlockingToggleAttribute : MetadataAttribute, _Attribute Inheritance object Attribute MetadataAttribute DrawIsBlockingToggleAttribute Implements _Attribute Inherited Members MetadataAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDefaultMetadata(MemberInfo) Return default metadata for owner. public override object GetDefaultMetadata(MemberInfo owner) Parameters owner MemberInfo Returns object IsMetadataValid(object) Check if metadata is still valid. public override bool IsMetadataValid(object metadata) Parameters metadata object Returns bool"
  },
  "api/VRBuilder.Core.Attributes.DrawingPriorityAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.DrawingPriorityAttribute.html",
    "title": "Class DrawingPriorityAttribute | VR Builder Documentation",
    "keywords": "Class DrawingPriorityAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Declares the drawing order for this element. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class DrawingPriorityAttribute : Attribute, _Attribute Inheritance object Attribute DrawingPriorityAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DrawingPriorityAttribute(int) public DrawingPriorityAttribute(int priority) Parameters priority int Properties Priority Lower goes first. public int Priority { get; } Property Value int"
  },
  "api/VRBuilder.Core.Attributes.ExtendableListAttribute.SerializedTypeWrapper.html": {
    "href": "api/VRBuilder.Core.Attributes.ExtendableListAttribute.SerializedTypeWrapper.html",
    "title": "Class ExtendableListAttribute.SerializedTypeWrapper | VR Builder Documentation",
    "keywords": "Class ExtendableListAttribute.SerializedTypeWrapper Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Holds a serialized reference to the metadata object's type. [DataContract(IsReference = true)] public class ExtendableListAttribute.SerializedTypeWrapper Inheritance object ExtendableListAttribute.SerializedTypeWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Type Metadata object's type. [DataMember] public Type Type { get; set; } Property Value Type"
  },
  "api/VRBuilder.Core.Attributes.ExtendableListAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.ExtendableListAttribute.html",
    "title": "Class ExtendableListAttribute | VR Builder Documentation",
    "keywords": "Class ExtendableListAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Declares that new elements can be added to this list. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class ExtendableListAttribute : MetadataAttribute, _Attribute Inheritance object Attribute MetadataAttribute ExtendableListAttribute Implements _Attribute Inherited Members MetadataAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DeclaredElementType Defines the type of an element to create. public Type DeclaredElementType { get; set; } Property Value Type Methods GetDefaultMetadata(MemberInfo) Return default metadata for owner. public override object GetDefaultMetadata(MemberInfo owner) Parameters owner MemberInfo Returns object IsMetadataValid(object) Check if metadata is still valid. public override bool IsMetadataValid(object metadata) Parameters metadata object Returns bool"
  },
  "api/VRBuilder.Core.Attributes.FoldableAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.FoldableAttribute.html",
    "title": "Class FoldableAttribute | VR Builder Documentation",
    "keywords": "Class FoldableAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Declares that this element's view has to be foldable. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class FoldableAttribute : MetadataAttribute, _Attribute Inheritance object Attribute MetadataAttribute FoldableAttribute Implements _Attribute Inherited Members MetadataAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDefaultMetadata(MemberInfo) Return default metadata for owner. public override object GetDefaultMetadata(MemberInfo owner) Parameters owner MemberInfo Returns object IsMetadataValid(object) Check if metadata is still valid. public override bool IsMetadataValid(object metadata) Parameters metadata object Returns bool"
  },
  "api/VRBuilder.Core.Attributes.HelpAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.HelpAttribute.html",
    "title": "Class HelpAttribute | VR Builder Documentation",
    "keywords": "Class HelpAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Declares that \"Help\" button has to be drawn. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class HelpAttribute : MetadataAttribute, _Attribute Inheritance object Attribute MetadataAttribute HelpAttribute Implements _Attribute Inherited Members MetadataAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDefaultMetadata(MemberInfo) Return default metadata for owner. public override object GetDefaultMetadata(MemberInfo owner) Parameters owner MemberInfo Returns object IsMetadataValid(object) Check if metadata is still valid. public override bool IsMetadataValid(object metadata) Parameters metadata object Returns bool"
  },
  "api/VRBuilder.Core.Attributes.HelpLinkAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.HelpLinkAttribute.html",
    "title": "Class HelpLinkAttribute | VR Builder Documentation",
    "keywords": "Class HelpLinkAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Adds a link to a documentation that explains a behavior or condition. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Property|AttributeTargets.Field)] public class HelpLinkAttribute : Attribute, _Attribute Inheritance object Attribute HelpLinkAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HelpLinkAttribute(string) public HelpLinkAttribute(string helpLink) Parameters helpLink string Properties HelpLink An HTML link to the documentation explaining the behavior or condition. public string HelpLink { get; } Property Value string"
  },
  "api/VRBuilder.Core.Attributes.HideInProcessInspectorAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.HideInProcessInspectorAttribute.html",
    "title": "Class HideInProcessInspectorAttribute | VR Builder Documentation",
    "keywords": "Class HideInProcessInspectorAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Use this attribute to hide serializeable members in the process inspector. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class HideInProcessInspectorAttribute : Attribute, _Attribute Inheritance object Attribute HideInProcessInspectorAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Core.Attributes.IgnoreInStepInspectorAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.IgnoreInStepInspectorAttribute.html",
    "title": "Class IgnoreInStepInspectorAttribute | VR Builder Documentation",
    "keywords": "Class IgnoreInStepInspectorAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class IgnoreInStepInspectorAttribute : Attribute, _Attribute Inheritance object Attribute IgnoreInStepInspectorAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Core.Attributes.KeepPopulatedAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.KeepPopulatedAttribute.html",
    "title": "Class KeepPopulatedAttribute | VR Builder Documentation",
    "keywords": "Class KeepPopulatedAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Declares that \"Delete\" button has to be drawn. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class KeepPopulatedAttribute : MetadataAttribute, _Attribute Inheritance object Attribute MetadataAttribute KeepPopulatedAttribute Implements _Attribute Inherited Members MetadataAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors KeepPopulatedAttribute(Type) public KeepPopulatedAttribute(Type type) Parameters type Type Methods GetDefaultMetadata(MemberInfo) Return default metadata for owner. public override object GetDefaultMetadata(MemberInfo owner) Parameters owner MemberInfo Returns object IsMetadataValid(object) Check if metadata is still valid. public override bool IsMetadataValid(object metadata) Parameters metadata object Returns bool"
  },
  "api/VRBuilder.Core.Attributes.LegacyPropertyAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.LegacyPropertyAttribute.html",
    "title": "Class LegacyPropertyAttribute | VR Builder Documentation",
    "keywords": "Class LegacyPropertyAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Attribute for an obsolete property which has been replaced by a different property. public class LegacyPropertyAttribute : Attribute, _Attribute Inheritance object Attribute LegacyPropertyAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LegacyPropertyAttribute(string) public LegacyPropertyAttribute(string newPropertyName) Parameters newPropertyName string Properties NewPropertyName Name of the property replacing this obsolete property. public string NewPropertyName { get; } Property Value string"
  },
  "api/VRBuilder.Core.Attributes.ListOfAttribute.Metadata.html": {
    "href": "api/VRBuilder.Core.Attributes.ListOfAttribute.Metadata.html",
    "title": "Class ListOfAttribute.Metadata | VR Builder Documentation",
    "keywords": "Class ListOfAttribute.Metadata Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Reference to the child's attributes and metadata. [DataContract(IsReference = true)] public class ListOfAttribute.Metadata Inheritance object ListOfAttribute.Metadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChildAttributes Reference to the child's attributes. [DataMember] public List<MetadataAttribute> ChildAttributes { get; set; } Property Value List<MetadataAttribute> ChildMetadata Reference to the child metadata. [DataMember] public List<Dictionary<string, object>> ChildMetadata { get; set; } Property Value List<Dictionary<string, object>>"
  },
  "api/VRBuilder.Core.Attributes.ListOfAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.ListOfAttribute.html",
    "title": "Class ListOfAttribute | VR Builder Documentation",
    "keywords": "Class ListOfAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Declares that children of this list have metadata attributes. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class ListOfAttribute : MetadataAttribute, _Attribute Inheritance object Attribute MetadataAttribute ListOfAttribute Implements _Attribute Derived ReorderableListOfAttribute Inherited Members MetadataAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ListOfAttribute(params Type[]) public ListOfAttribute(params Type[] childAttributes) Parameters childAttributes Type[] Methods GetDefaultMetadata(MemberInfo) Return default metadata for owner. public override object GetDefaultMetadata(MemberInfo owner) Parameters owner MemberInfo Returns object IsMetadataValid(object) Check if metadata is still valid. ListOf attribute checks that metadata of all children is valid, too. public override bool IsMetadataValid(object metadata) Parameters metadata object Returns bool"
  },
  "api/VRBuilder.Core.Attributes.MenuAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.MenuAttribute.html",
    "title": "Class MenuAttribute | VR Builder Documentation",
    "keywords": "Class MenuAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Declares that \"Menu\" button has to be drawn. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class MenuAttribute : MetadataAttribute, _Attribute Inheritance object Attribute MetadataAttribute MenuAttribute Implements _Attribute Inherited Members MetadataAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDefaultMetadata(MemberInfo) Return default metadata for owner. public override object GetDefaultMetadata(MemberInfo owner) Parameters owner MemberInfo Returns object IsMetadataValid(object) Check if metadata is still valid. public override bool IsMetadataValid(object metadata) Parameters metadata object Returns bool"
  },
  "api/VRBuilder.Core.Attributes.MetadataAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.MetadataAttribute.html",
    "title": "Class MetadataAttribute | VR Builder Documentation",
    "keywords": "Class MetadataAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Base class for metadata attributes which define special rules for drawing the element. public abstract class MetadataAttribute : Attribute, _Attribute Inheritance object Attribute MetadataAttribute Implements _Attribute Derived DeletableAttribute DrawIsBlockingToggleAttribute ExtendableListAttribute FoldableAttribute HelpAttribute KeepPopulatedAttribute ListOfAttribute MenuAttribute SeparatedAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Name of attribute. public string Name { get; } Property Value string Methods GetDefaultMetadata(MemberInfo) Return default metadata for owner. public abstract object GetDefaultMetadata(MemberInfo owner) Parameters owner MemberInfo Returns object IsMetadataValid(object) Check if metadata is still valid. public abstract bool IsMetadataValid(object metadata) Parameters metadata object Returns bool"
  },
  "api/VRBuilder.Core.Attributes.ReorderableListOfAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.ReorderableListOfAttribute.html",
    "title": "Class ReorderableListOfAttribute | VR Builder Documentation",
    "keywords": "Class ReorderableListOfAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Declares that children of this list have metadata attributes and can be reordered. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class ReorderableListOfAttribute : ListOfAttribute, _Attribute Inheritance object Attribute MetadataAttribute ListOfAttribute ReorderableListOfAttribute Implements _Attribute Inherited Members ListOfAttribute.GetDefaultMetadata(MemberInfo) ListOfAttribute.IsMetadataValid(object) MetadataAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReorderableListOfAttribute(params Type[]) public ReorderableListOfAttribute(params Type[] childAttributes) Parameters childAttributes Type[]"
  },
  "api/VRBuilder.Core.Attributes.SeparatedAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.SeparatedAttribute.html",
    "title": "Class SeparatedAttribute | VR Builder Documentation",
    "keywords": "Class SeparatedAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Declare that this element has to be separated with thin gray lines. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class SeparatedAttribute : MetadataAttribute, _Attribute Inheritance object Attribute MetadataAttribute SeparatedAttribute Implements _Attribute Inherited Members MetadataAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDefaultMetadata(MemberInfo) Return default metadata for owner. public override object GetDefaultMetadata(MemberInfo owner) Parameters owner MemberInfo Returns object IsMetadataValid(object) Check if metadata is still valid. public override bool IsMetadataValid(object metadata) Parameters metadata object Returns bool"
  },
  "api/VRBuilder.Core.Attributes.UsesSpecificProcessDrawerAttribute.html": {
    "href": "api/VRBuilder.Core.Attributes.UsesSpecificProcessDrawerAttribute.html",
    "title": "Class UsesSpecificProcessDrawerAttribute | VR Builder Documentation",
    "keywords": "Class UsesSpecificProcessDrawerAttribute Namespace VRBuilder.Core.Attributes Assembly VRBuilder.Core.dll Use this attribute to explicitly specify an implementation of IProcessDrawer that should be used. The drawer type is passed as string because you can't reference editor definitions in runtime classes. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class UsesSpecificProcessDrawerAttribute : Attribute, _Attribute Inheritance object Attribute UsesSpecificProcessDrawerAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UsesSpecificProcessDrawerAttribute(string) public UsesSpecificProcessDrawerAttribute(string drawerType) Parameters drawerType string Properties DrawerType The drawer's type. public string DrawerType { get; } Property Value string"
  },
  "api/VRBuilder.Core.Attributes.html": {
    "href": "api/VRBuilder.Core.Attributes.html",
    "title": "Namespace VRBuilder.Core.Attributes | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Attributes Classes DeletableAttribute Declares that \"Delete\" button has to be drawn. DisplayNameAttribute Displayed name of process entity's property or field. DisplayTooltipAttribute Tooltip of process entity's property or field. DrawIsBlockingToggleAttribute Declares that the \"Is Blocking\" toggle has to be drawn, if the behavior implements IBackgroundBehaviorData. DrawingPriorityAttribute Declares the drawing order for this element. ExtendableListAttribute Declares that new elements can be added to this list. ExtendableListAttribute.SerializedTypeWrapper Holds a serialized reference to the metadata object's type. FoldableAttribute Declares that this element's view has to be foldable. HelpAttribute Declares that \"Help\" button has to be drawn. HelpLinkAttribute Adds a link to a documentation that explains a behavior or condition. HideInProcessInspectorAttribute Use this attribute to hide serializeable members in the process inspector. IgnoreInStepInspectorAttribute KeepPopulatedAttribute Declares that \"Delete\" button has to be drawn. LegacyPropertyAttribute Attribute for an obsolete property which has been replaced by a different property. ListOfAttribute Declares that children of this list have metadata attributes. ListOfAttribute.Metadata Reference to the child's attributes and metadata. MenuAttribute Declares that \"Menu\" button has to be drawn. MetadataAttribute Base class for metadata attributes which define special rules for drawing the element. ReorderableListOfAttribute Declares that children of this list have metadata attributes and can be reordered. SeparatedAttribute Declare that this element has to be separated with thin gray lines. UsesSpecificProcessDrawerAttribute Use this attribute to explicitly specify an implementation of IProcessDrawer that should be used. The drawer type is passed as string because you can't reference editor definitions in runtime classes."
  },
  "api/VRBuilder.Core.Audio.IAudioData.html": {
    "href": "api/VRBuilder.Core.Audio.IAudioData.html",
    "title": "Interface IAudioData | VR Builder Documentation",
    "keywords": "Interface IAudioData Namespace VRBuilder.Core.Audio Assembly VRBuilder.Core.dll This class provides audio data in form of an AudioClip. Which also might not be loaded at the time needed, check first if there can be one provided. public interface IAudioData : ICanBeEmpty Inherited Members ICanBeEmpty.IsEmpty() Properties AudioClip The AudioClip of this source, can be null. Best check first with HasAudio. AudioClip AudioClip { get; } Property Value AudioClip ClipData Data used to retrieve the audio clip. string ClipData { get; set; } Property Value string HasAudioClip Determs if the AudioSource has an AudioClip which can be played. bool HasAudioClip { get; } Property Value bool Methods InitializeAudioClip() Initializes the audio clip from the given data. void InitializeAudioClip()"
  },
  "api/VRBuilder.Core.Audio.ResourceAudio.html": {
    "href": "api/VRBuilder.Core.Audio.ResourceAudio.html",
    "title": "Class ResourceAudio | VR Builder Documentation",
    "keywords": "Class ResourceAudio Namespace VRBuilder.Core.Audio Assembly VRBuilder.Core.dll Unity resource based audio data. [DataContract(IsReference = true)] [DisplayName(\"Play Audio File\")] public class ResourceAudio : IAudioData, ICanBeEmpty, ILocalizedContent Inheritance object ResourceAudio Implements IAudioData ICanBeEmpty ILocalizedContent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResourceAudio() protected ResourceAudio() ResourceAudio(string) public ResourceAudio(string path) Parameters path string Properties AudioClip The AudioClip of this source, can be null. Best check first with HasAudio. public AudioClip AudioClip { get; } Property Value AudioClip ClipData Data used to retrieve the audio clip. public string ClipData { get; set; } Property Value string HasAudioClip Determs if the AudioSource has an AudioClip which can be played. public bool HasAudioClip { get; } Property Value bool ResourcesPath File path relative to the Resources folder. [DataMember] [DisplayName(\"Resources path / Key\")] [DisplayTooltip(\"The audio clip needs to be in a folder called Resources or one of its subfolders. The path to enter here is the relative path to the Resources folder, without extension. So, if the path is 'Assets/Resources/Audio/MyFile.wav', you would need to enter 'Audio/MyFile'.\")] public string ResourcesPath { get; set; } Property Value string Methods GetLocalizedContent() Returns localized content according to the localization and process configuration. public string GetLocalizedContent() Returns string InitializeAudioClip() Initializes the audio clip from the given data. public void InitializeAudioClip() IsEmpty() Returns true when this object is not properly filled. public bool IsEmpty() Returns bool"
  },
  "api/VRBuilder.Core.Audio.html": {
    "href": "api/VRBuilder.Core.Audio.html",
    "title": "Namespace VRBuilder.Core.Audio | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Audio Classes ResourceAudio Unity resource based audio data. Interfaces IAudioData This class provides audio data in form of an AudioClip. Which also might not be loaded at the time needed, check first if there can be one provided."
  },
  "api/VRBuilder.Core.Autocompleter-1.html": {
    "href": "api/VRBuilder.Core.Autocompleter-1.html",
    "title": "Class Autocompleter<TData> | VR Builder Documentation",
    "keywords": "Class Autocompleter<TData> Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A base class for autocompleters which provides access to the entity's data. public abstract class Autocompleter<TData> : IAutocompleter where TData : IData Type Parameters TData Inheritance object Autocompleter<TData> Implements IAutocompleter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Autocompleter(TData) protected Autocompleter(TData data) Parameters data TData Properties Data The entity's data. protected TData Data { get; } Property Value TData Methods Complete() A custom logic to \"fake\" natural completion of an entity. public abstract void Complete()"
  },
  "api/VRBuilder.Core.BehaviorCollection.EntityData.html": {
    "href": "api/VRBuilder.Core.BehaviorCollection.EntityData.html",
    "title": "Class BehaviorCollection.EntityData | VR Builder Documentation",
    "keywords": "Class BehaviorCollection.EntityData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll The data class for IBehavior collections. [DataContract(IsReference = true)] public class BehaviorCollection.EntityData : EntityCollectionData<IBehavior>, IBehaviorCollectionData, IEntityCollectionDataWithMode<IBehavior>, IEntityCollectionData<IBehavior>, IEntityCollectionDataWithMode, IEntityCollectionData, IModeData, IData Inheritance object EntityCollectionData<IBehavior> BehaviorCollection.EntityData Implements IBehaviorCollectionData IEntityCollectionDataWithMode<IBehavior> IEntityCollectionData<IBehavior> IEntityCollectionDataWithMode IEntityCollectionData IModeData IData Inherited Members EntityCollectionData<IBehavior>.Metadata object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Behaviors List of all IBehaviors added. [DataMember] [DisplayName(\"\")] [ReorderableListOf(new Type[] { typeof(FoldableAttribute), typeof(DrawIsBlockingToggleAttribute), typeof(HelpAttribute), typeof(MenuAttribute) })] public virtual IList<IBehavior> Behaviors { get; set; } Property Value IList<IBehavior> Mode Reference to IBehavior's current mode. public IMode Mode { get; set; } Property Value IMode Methods GetChildren() Returns a list of all IBehaviors added. public override IEnumerable<IBehavior> GetChildren() Returns IEnumerable<IBehavior>"
  },
  "api/VRBuilder.Core.BehaviorCollection.html": {
    "href": "api/VRBuilder.Core.BehaviorCollection.html",
    "title": "Class BehaviorCollection | VR Builder Documentation",
    "keywords": "Class BehaviorCollection Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A collection of IBehaviors of a IStep. [DataContract(IsReference = true)] public class BehaviorCollection : Entity<BehaviorCollection.EntityData>, IDataOwner<BehaviorCollection.EntityData>, IBehaviorCollection, IStepChild, IEntity, IDataOwner<IBehaviorCollectionData>, IDataOwner, IClonable<IBehaviorCollection> Inheritance object Entity<BehaviorCollection.EntityData> BehaviorCollection Implements IDataOwner<BehaviorCollection.EntityData> IBehaviorCollection IStepChild IEntity IDataOwner<IBehaviorCollectionData> IDataOwner IClonable<IBehaviorCollection> Inherited Members Entity<BehaviorCollection.EntityData>.Data Entity<BehaviorCollection.EntityData>.LifeCycle Entity<BehaviorCollection.EntityData>.Parent Entity<BehaviorCollection.EntityData>.Configure(IMode) Entity<BehaviorCollection.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BehaviorCollection() public BehaviorCollection() Methods Clone() Returns a deep copy of the object. public IBehaviorCollection Clone() Returns IBehaviorCollection GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetConfigurator() Override this method if your behavior or condition supports changing between process modes (IMode). By default returns an empty configurator that does nothing. protected override IConfigurator GetConfigurator() Returns IConfigurator GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.Behavior-1.html": {
    "href": "api/VRBuilder.Core.Behaviors.Behavior-1.html",
    "title": "Class Behavior<TData> | VR Builder Documentation",
    "keywords": "Class Behavior<TData> Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Inherit from this abstract class when creating your own behaviors. [DataContract(IsReference = true)] public abstract class Behavior<TData> : Entity<TData>, IDataOwner<TData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> where TData : class, IBehaviorData, new() Type Parameters TData The type of the behavior's data. Inheritance object Entity<TData> Behavior<TData> Implements IDataOwner<TData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Derived AnimateTransformBehavior ChildExplosionViewBehavior FollowPathBehavior RotateAroundAxisBehavior SetAnimatorBoolParameterBehavior SetAnimatorFloatParameterBehavior SetAnimatorIntParameterBehavior SetAnimatorTriggerParameterBehavior UnsnapBehavior BehaviorSequence ConfettiBehavior ControlParticleEmissionBehavior DelayBehavior DisableGameObjectBehavior EnableGameObjectBehavior ExecuteChapterBehavior ExecuteChaptersBehavior GoToChapterBehavior HighlightObjectBehavior LoadSceneBehavior MoveObjectBehavior PlayAudioBehavior ResetValueBehavior ScalingBehavior SetComponentEnabledBehavior SetComponentEnabledByTagBehavior SetObjectsEnabledBehavior SetObjectsWithTagEnabledBehavior SetParentBehavior SetValueBehavior<T> SelectRandomTransitionBehavior SetRandomBooleanBehavior SetRandomNumberBehavior MathOperationBehavior SetStateBehavior TriggerEventBehavior TriggerEventByRefBehavior TriggerEventByTagBehavior TriggerGenericEventBehavior<T> TriggerGenericEventByRefBehavior<T> TriggerGenericEventByTagBehavior<T> StartTimerBehavior StopTimerBehavior UpdateScoreBehavior PlayVideoBehavior Inherited Members Entity<TData>.Data Entity<TData>.LifeCycle Entity<TData>.Parent Entity<TData>.GetActivatingProcess() Entity<TData>.GetActiveProcess() Entity<TData>.GetDeactivatingProcess() Entity<TData>.GetConfigurator() Entity<TData>.Configure(IMode) Entity<TData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Behavior() protected Behavior() Methods Clone() Returns a deep copy of the object. public virtual IBehavior Clone() Returns IBehavior"
  },
  "api/VRBuilder.Core.Behaviors.BehaviorCollectionChangedEventArgs.html": {
    "href": "api/VRBuilder.Core.Behaviors.BehaviorCollectionChangedEventArgs.html",
    "title": "Class BehaviorCollectionChangedEventArgs | VR Builder Documentation",
    "keywords": "Class BehaviorCollectionChangedEventArgs Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll public class BehaviorCollectionChangedEventArgs : EventArgs Inheritance object EventArgs BehaviorCollectionChangedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Core.Behaviors.BehaviorExecutionStages.html": {
    "href": "api/VRBuilder.Core.Behaviors.BehaviorExecutionStages.html",
    "title": "Enum BehaviorExecutionStages | VR Builder Documentation",
    "keywords": "Enum BehaviorExecutionStages Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll [Flags] public enum BehaviorExecutionStages Fields Activation = 1 ActivationAndDeactivation = -1 Deactivation = 2 None = 0"
  },
  "api/VRBuilder.Core.Behaviors.BehaviorMetadata.html": {
    "href": "api/VRBuilder.Core.Behaviors.BehaviorMetadata.html",
    "title": "Class BehaviorMetadata | VR Builder Documentation",
    "keywords": "Class BehaviorMetadata Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll [DataContract(IsReference = true)] public class BehaviorMetadata : IMetadata Inheritance object BehaviorMetadata Implements IMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFoldedOut [DataMember] public bool IsFoldedOut { get; set; } Property Value bool"
  },
  "api/VRBuilder.Core.Behaviors.BehaviorSequence.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.BehaviorSequence.EntityData.html",
    "title": "Class BehaviorSequence.EntityData | VR Builder Documentation",
    "keywords": "Class BehaviorSequence.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Behavior sequence's data. [DisplayName(\"Behavior Sequence\")] [DataContract(IsReference = true)] public class BehaviorSequence.EntityData : EntityCollectionData<IBehavior>, IEntitySequenceDataWithMode<IBehavior>, IEntitySequenceData<IBehavior>, IEntityCollectionData<IBehavior>, IEntityCollectionData, IEntitySequenceData, IModeData, IBackgroundBehaviorData, IBehaviorData, INamedData, IData Inheritance object EntityCollectionData<IBehavior> BehaviorSequence.EntityData Implements IEntitySequenceDataWithMode<IBehavior> IEntitySequenceData<IBehavior> IEntityCollectionData<IBehavior> IEntityCollectionData IEntitySequenceData IModeData IBackgroundBehaviorData IBehaviorData INamedData IData Inherited Members EntityCollectionData<IBehavior>.Metadata object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Behaviors List of child behaviors. [DataMember] [DisplayName(\"Child behaviors\")] [ReorderableListOf(new Type[] { typeof(FoldableAttribute), typeof(HelpAttribute), typeof(MenuAttribute) })] public List<IBehavior> Behaviors { get; set; } Property Value List<IBehavior> Current Current entity in the sequence. [IgnoreDataMember] public IBehavior Current { get; set; } Property Value IBehavior IsBlocking If true, the behavior prevents the completion of a step until it is completed itself. If false, the behavior does not hinder the completion of a step. public bool IsBlocking { get; set; } Property Value bool Mode public IMode Mode { get; set; } Property Value IMode Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string PlaysOnRepeat Are child behaviors activated only once or the collection is cycled. [DisplayName(\"Repeat\")] [DataMember] public bool PlaysOnRepeat { get; set; } Property Value bool Methods GetChildren() public override IEnumerable<IBehavior> GetChildren() Returns IEnumerable<IBehavior>"
  },
  "api/VRBuilder.Core.Behaviors.BehaviorSequence.html": {
    "href": "api/VRBuilder.Core.Behaviors.BehaviorSequence.html",
    "title": "Class BehaviorSequence | VR Builder Documentation",
    "keywords": "Class BehaviorSequence Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll A collection of behaviors that are activated and deactivated after each other. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-behaviors/behavior-sequence\")] public class BehaviorSequence : Behavior<BehaviorSequence.EntityData>, IDataOwner<BehaviorSequence.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<BehaviorSequence.EntityData> Behavior<BehaviorSequence.EntityData> BehaviorSequence Implements IDataOwner<BehaviorSequence.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<BehaviorSequence.EntityData>.Clone() Entity<BehaviorSequence.EntityData>.Data Entity<BehaviorSequence.EntityData>.LifeCycle Entity<BehaviorSequence.EntityData>.Parent Entity<BehaviorSequence.EntityData>.Configure(IMode) Entity<BehaviorSequence.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BehaviorSequence() [JsonConstructor] [Preserve] public BehaviorSequence() BehaviorSequence(bool, IList<IBehavior>) public BehaviorSequence(bool playsOnRepeat, IList<IBehavior> behaviors) Parameters playsOnRepeat bool behaviors IList<IBehavior> BehaviorSequence(bool, IList<IBehavior>, bool) public BehaviorSequence(bool playsOnRepeat, IList<IBehavior> behaviors, bool isBlocking) Parameters playsOnRepeat bool behaviors IList<IBehavior> isBlocking bool Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetConfigurator() Override this method if your behavior or condition supports changing between process modes (IMode). By default returns an empty configurator that does nothing. protected override IConfigurator GetConfigurator() Returns IConfigurator GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.ConfettiBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.ConfettiBehavior.EntityData.html",
    "title": "Class ConfettiBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class ConfettiBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll [DisplayName(\"Spawn Confetti\")] [DataContract(IsReference = true)] public class ConfettiBehavior.EntityData : IBehaviorData, INamedData, IData, IBehaviorExecutionStages Inheritance object ConfettiBehavior.EntityData Implements IBehaviorData INamedData IData IBehaviorExecutionStages Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AreaRadius Radius of the spawning area. [DataMember] [DisplayName(\"Area Radius\")] public float AreaRadius { get; set; } Property Value float ConfettiMachine public GameObject ConfettiMachine { get; set; } Property Value GameObject ConfettiMachinePrefabPath Path to the desired confetti machine prefab. [DataMember] [DisplayName(\"Confetti Machine Path\")] public string ConfettiMachinePrefabPath { get; set; } Property Value string ConfettiPosition Name of the process object where to spawn the confetti machine. Only needed if \"Spawn Above User\" is not checked. [DataMember] [DisplayName(\"Position Provider\")] public SingleSceneObjectReference ConfettiPosition { get; set; } Property Value SingleSceneObjectReference Duration Duration of the animation in seconds. [DataMember] [DisplayName(\"Duration\")] public float Duration { get; set; } Property Value float ExecutionStages A property that determines if the Behavior should be run at activation or deactivation (or both). [DataMember] public BehaviorExecutionStages ExecutionStages { get; set; } Property Value BehaviorExecutionStages IsAboveUser Bool to check whether the confetti machine should spawn above the user or at the position of the position provider. [DataMember] [DisplayName(\"Spawn Above User\")] public bool IsAboveUser { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string PositionProvider [DataMember] [Obsolete(\"Use ConfettiPosition instead.\")] [LegacyProperty(\"ConfettiPosition\")] public SceneObjectReference PositionProvider { get; set; } Property Value SceneObjectReference"
  },
  "api/VRBuilder.Core.Behaviors.ConfettiBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.ConfettiBehavior.html",
    "title": "Class ConfettiBehavior | VR Builder Documentation",
    "keywords": "Class ConfettiBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll This behavior causes confetti to rain. [DataContract(IsReference = true)] public class ConfettiBehavior : Behavior<ConfettiBehavior.EntityData>, IDataOwner<ConfettiBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<ConfettiBehavior.EntityData> Behavior<ConfettiBehavior.EntityData> ConfettiBehavior Implements IDataOwner<ConfettiBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<ConfettiBehavior.EntityData>.Clone() Entity<ConfettiBehavior.EntityData>.Data Entity<ConfettiBehavior.EntityData>.LifeCycle Entity<ConfettiBehavior.EntityData>.Parent Entity<ConfettiBehavior.EntityData>.GetActiveProcess() Entity<ConfettiBehavior.EntityData>.GetConfigurator() Entity<ConfettiBehavior.EntityData>.Configure(IMode) Entity<ConfettiBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConfettiBehavior() [JsonConstructor] [Preserve] public ConfettiBehavior() ConfettiBehavior(bool, Guid, string, float, float, BehaviorExecutionStages) public ConfettiBehavior(bool isAboveUser, Guid positionProviderId, string confettiMachinePrefabPath, float radius, float duration, BehaviorExecutionStages executionStages) Parameters isAboveUser bool positionProviderId Guid confettiMachinePrefabPath string radius float duration float executionStages BehaviorExecutionStages ConfettiBehavior(bool, string, string, float, float, BehaviorExecutionStages) [Obsolete(\"This constructor is obsolete and will be removed in the next major version.\")] public ConfettiBehavior(bool isAboveUser, string positionProviderSceneObjectName, string confettiMachinePrefabPath, float radius, float duration, BehaviorExecutionStages executionStages) Parameters isAboveUser bool positionProviderSceneObjectName string confettiMachinePrefabPath string radius float duration float executionStages BehaviorExecutionStages ConfettiBehavior(bool, ISceneObject, string, float, float, BehaviorExecutionStages) public ConfettiBehavior(bool isAboveUser, ISceneObject positionProvider, string confettiMachinePrefabPath, float radius, float duration, BehaviorExecutionStages executionStages) Parameters isAboveUser bool positionProvider ISceneObject confettiMachinePrefabPath string radius float duration float executionStages BehaviorExecutionStages Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.ControlParticleEmissionBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.ControlParticleEmissionBehavior.EntityData.html",
    "title": "Class ControlParticleEmissionBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class ControlParticleEmissionBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll The ControlParticleEmissionBehavior behavior data. [DataContract(IsReference = true)] public class ControlParticleEmissionBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object ControlParticleEmissionBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EmitParticles If true, particle emission starts, else it stops. [DataMember] public bool EmitParticles { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Target [DataMember] [Obsolete(\"Use Targets instead.\")] [LegacyProperty(\"Targets\")] public PropertyReferenceOrTagSelectableValue<IParticleSystemProperty> Target { get; set; } Property Value PropertyReferenceOrTagSelectableValue<IParticleSystemProperty> Targets Identifies the particle system property to control. [DataMember] public MultipleScenePropertyReference<IParticleSystemProperty> Targets { get; set; } Property Value MultipleScenePropertyReference<IParticleSystemProperty>"
  },
  "api/VRBuilder.Core.Behaviors.ControlParticleEmissionBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.ControlParticleEmissionBehavior.html",
    "title": "Class ControlParticleEmissionBehavior | VR Builder Documentation",
    "keywords": "Class ControlParticleEmissionBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Behavior that start/stops a particle system property. [DataContract(IsReference = true)] public class ControlParticleEmissionBehavior : Behavior<ControlParticleEmissionBehavior.EntityData>, IDataOwner<ControlParticleEmissionBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<ControlParticleEmissionBehavior.EntityData> Behavior<ControlParticleEmissionBehavior.EntityData> ControlParticleEmissionBehavior Implements IDataOwner<ControlParticleEmissionBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<ControlParticleEmissionBehavior.EntityData>.Clone() Entity<ControlParticleEmissionBehavior.EntityData>.Data Entity<ControlParticleEmissionBehavior.EntityData>.LifeCycle Entity<ControlParticleEmissionBehavior.EntityData>.Parent Entity<ControlParticleEmissionBehavior.EntityData>.GetActiveProcess() Entity<ControlParticleEmissionBehavior.EntityData>.GetDeactivatingProcess() Entity<ControlParticleEmissionBehavior.EntityData>.GetConfigurator() Entity<ControlParticleEmissionBehavior.EntityData>.Configure(IMode) Entity<ControlParticleEmissionBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ControlParticleEmissionBehavior() [JsonConstructor] [Preserve] public ControlParticleEmissionBehavior() ControlParticleEmissionBehavior(bool) public ControlParticleEmissionBehavior(bool emitParticles) Parameters emitParticles bool Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.DelayBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.DelayBehavior.EntityData.html",
    "title": "Class DelayBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class DelayBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll The data class for a delay behavior. [DisplayName(\"Delay\")] [DataContract(IsReference = true)] public class DelayBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object DelayBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DelayTime [DataMember] [DisplayName(\"Delay (in seconds)\")] public float DelayTime { get; set; } Property Value float Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string"
  },
  "api/VRBuilder.Core.Behaviors.DelayBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.DelayBehavior.html",
    "title": "Class DelayBehavior | VR Builder Documentation",
    "keywords": "Class DelayBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Behavior that waits for DelayTime seconds before finishing its activation. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-behaviors/delay\")] public class DelayBehavior : Behavior<DelayBehavior.EntityData>, IDataOwner<DelayBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<DelayBehavior.EntityData> Behavior<DelayBehavior.EntityData> DelayBehavior Implements IDataOwner<DelayBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<DelayBehavior.EntityData>.Clone() Entity<DelayBehavior.EntityData>.Data Entity<DelayBehavior.EntityData>.LifeCycle Entity<DelayBehavior.EntityData>.Parent Entity<DelayBehavior.EntityData>.GetActiveProcess() Entity<DelayBehavior.EntityData>.GetDeactivatingProcess() Entity<DelayBehavior.EntityData>.GetConfigurator() Entity<DelayBehavior.EntityData>.Configure(IMode) Entity<DelayBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DelayBehavior() [JsonConstructor] [Preserve] public DelayBehavior() DelayBehavior(float) public DelayBehavior(float delayTime) Parameters delayTime float Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.DisableGameObjectBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.DisableGameObjectBehavior.EntityData.html",
    "title": "Class DisableGameObjectBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class DisableGameObjectBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll \"Disable game object\" behavior's data. [DisplayName(\"Disable Object\")] [DataContract(IsReference = true)] public class DisableGameObjectBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object DisableGameObjectBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Target Object to disable. [DataMember] [DisplayName(\"Object\")] public SceneObjectReference Target { get; set; } Property Value SceneObjectReference"
  },
  "api/VRBuilder.Core.Behaviors.DisableGameObjectBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.DisableGameObjectBehavior.html",
    "title": "Class DisableGameObjectBehavior | VR Builder Documentation",
    "keywords": "Class DisableGameObjectBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Disables gameObject of target ISceneObject. [Obsolete(\"Use SetObjectsEnabledBehavior instead. This behavior is obsolete and will be removed in the next major version.\")] [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-behaviors/disable-object\")] public class DisableGameObjectBehavior : Behavior<DisableGameObjectBehavior.EntityData>, IDataOwner<DisableGameObjectBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<DisableGameObjectBehavior.EntityData> Behavior<DisableGameObjectBehavior.EntityData> DisableGameObjectBehavior Implements IDataOwner<DisableGameObjectBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<DisableGameObjectBehavior.EntityData>.Clone() Entity<DisableGameObjectBehavior.EntityData>.Data Entity<DisableGameObjectBehavior.EntityData>.LifeCycle Entity<DisableGameObjectBehavior.EntityData>.Parent Entity<DisableGameObjectBehavior.EntityData>.GetActiveProcess() Entity<DisableGameObjectBehavior.EntityData>.GetDeactivatingProcess() Entity<DisableGameObjectBehavior.EntityData>.GetConfigurator() Entity<DisableGameObjectBehavior.EntityData>.Configure(IMode) Entity<DisableGameObjectBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DisableGameObjectBehavior() [JsonConstructor] [Preserve] public DisableGameObjectBehavior() DisableGameObjectBehavior(string) public DisableGameObjectBehavior(string targetObject) Parameters targetObject string Unique name of target scene object. DisableGameObjectBehavior(ISceneObject) public DisableGameObjectBehavior(ISceneObject targetObject) Parameters targetObject ISceneObject scene object to disable. Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.EnableGameObjectBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.EnableGameObjectBehavior.EntityData.html",
    "title": "Class EnableGameObjectBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class EnableGameObjectBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll \"Enable game object\" behavior's data. [DisplayName(\"Enable Object\")] [DataContract(IsReference = true)] public class EnableGameObjectBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object EnableGameObjectBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisableOnDeactivating [DataMember] [DisplayName(\"Disable Object after step is complete\")] public bool DisableOnDeactivating { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Target The object to enable. [DataMember] [DisplayName(\"Object\")] public SceneObjectReference Target { get; set; } Property Value SceneObjectReference"
  },
  "api/VRBuilder.Core.Behaviors.EnableGameObjectBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.EnableGameObjectBehavior.html",
    "title": "Class EnableGameObjectBehavior | VR Builder Documentation",
    "keywords": "Class EnableGameObjectBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Enables gameObject of target ISceneObject. [Obsolete(\"Use SetObjectsEnabledBehavior instead. This behavior is obsolete and will be removed in the next major version.\")] [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-behaviors/enable-object\")] public class EnableGameObjectBehavior : Behavior<EnableGameObjectBehavior.EntityData>, IDataOwner<EnableGameObjectBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<EnableGameObjectBehavior.EntityData> Behavior<EnableGameObjectBehavior.EntityData> EnableGameObjectBehavior Implements IDataOwner<EnableGameObjectBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<EnableGameObjectBehavior.EntityData>.Clone() Entity<EnableGameObjectBehavior.EntityData>.Data Entity<EnableGameObjectBehavior.EntityData>.LifeCycle Entity<EnableGameObjectBehavior.EntityData>.Parent Entity<EnableGameObjectBehavior.EntityData>.GetActiveProcess() Entity<EnableGameObjectBehavior.EntityData>.GetConfigurator() Entity<EnableGameObjectBehavior.EntityData>.Configure(IMode) Entity<EnableGameObjectBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EnableGameObjectBehavior() [JsonConstructor] [Preserve] public EnableGameObjectBehavior() EnableGameObjectBehavior(string) public EnableGameObjectBehavior(string targetObject) Parameters targetObject string Name of the object to enable. EnableGameObjectBehavior(ISceneObject) public EnableGameObjectBehavior(ISceneObject targetObject) Parameters targetObject ISceneObject Object to enable. Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.ExecuteChapterBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.ExecuteChapterBehavior.EntityData.html",
    "title": "Class ExecuteChapterBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class ExecuteChapterBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Execute chapter behavior data. [DisplayName(\"Step Group\")] [DataContract(IsReference = true)] public class ExecuteChapterBehavior.EntityData : EntityCollectionData<IChapter>, IEntityCollectionData<IChapter>, IEntityCollectionData, IBehaviorData, INamedData, IData Inheritance object EntityCollectionData<IChapter> ExecuteChapterBehavior.EntityData Implements IEntityCollectionData<IChapter> IEntityCollectionData IBehaviorData INamedData IData Inherited Members EntityCollectionData<IChapter>.Metadata object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Chapter [DataMember] public IChapter Chapter { get; set; } Property Value IChapter Name Name of the entity. public string Name { get; set; } Property Value string Methods GetChildren() public override IEnumerable<IChapter> GetChildren() Returns IEnumerable<IChapter>"
  },
  "api/VRBuilder.Core.Behaviors.ExecuteChapterBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.ExecuteChapterBehavior.html",
    "title": "Class ExecuteChapterBehavior | VR Builder Documentation",
    "keywords": "Class ExecuteChapterBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Behavior that executes a stored chapter and completes when the chapter ends. [DataContract(IsReference = true)] public class ExecuteChapterBehavior : Behavior<ExecuteChapterBehavior.EntityData>, IDataOwner<ExecuteChapterBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<ExecuteChapterBehavior.EntityData> Behavior<ExecuteChapterBehavior.EntityData> ExecuteChapterBehavior Implements IDataOwner<ExecuteChapterBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Entity<ExecuteChapterBehavior.EntityData>.Data Entity<ExecuteChapterBehavior.EntityData>.LifeCycle Entity<ExecuteChapterBehavior.EntityData>.Parent Entity<ExecuteChapterBehavior.EntityData>.GetActiveProcess() Entity<ExecuteChapterBehavior.EntityData>.GetConfigurator() Entity<ExecuteChapterBehavior.EntityData>.Configure(IMode) Entity<ExecuteChapterBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteChapterBehavior() [JsonConstructor] [Preserve] public ExecuteChapterBehavior() ExecuteChapterBehavior(IChapter) public ExecuteChapterBehavior(IChapter chapter) Parameters chapter IChapter Methods Clone() Returns a deep copy of the object. public override IBehavior Clone() Returns IBehavior GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.ExecuteChaptersBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.ExecuteChaptersBehavior.EntityData.html",
    "title": "Class ExecuteChaptersBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class ExecuteChaptersBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Execute chapters behavior data. [DisplayName(\"Execute Chapters\")] [DataContract(IsReference = true)] public class ExecuteChaptersBehavior.EntityData : EntityCollectionData<IChapter>, IEntityCollectionData<IChapter>, IEntityCollectionData, IBehaviorData, INamedData, IData Inheritance object EntityCollectionData<IChapter> ExecuteChaptersBehavior.EntityData Implements IEntityCollectionData<IChapter> IEntityCollectionData IBehaviorData INamedData IData Inherited Members EntityCollectionData<IChapter>.Metadata object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Chapters [DataMember] public List<IChapter> Chapters { get; set; } Property Value List<IChapter> Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Methods GetChildren() public override IEnumerable<IChapter> GetChildren() Returns IEnumerable<IChapter>"
  },
  "api/VRBuilder.Core.Behaviors.ExecuteChaptersBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.ExecuteChaptersBehavior.html",
    "title": "Class ExecuteChaptersBehavior | VR Builder Documentation",
    "keywords": "Class ExecuteChaptersBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Behavior that executes a number of chapters at the same time and completes when the chapters ends. [DataContract(IsReference = true)] public class ExecuteChaptersBehavior : Behavior<ExecuteChaptersBehavior.EntityData>, IDataOwner<ExecuteChaptersBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<ExecuteChaptersBehavior.EntityData> Behavior<ExecuteChaptersBehavior.EntityData> ExecuteChaptersBehavior Implements IDataOwner<ExecuteChaptersBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Entity<ExecuteChaptersBehavior.EntityData>.Data Entity<ExecuteChaptersBehavior.EntityData>.LifeCycle Entity<ExecuteChaptersBehavior.EntityData>.Parent Entity<ExecuteChaptersBehavior.EntityData>.GetActiveProcess() Entity<ExecuteChaptersBehavior.EntityData>.GetConfigurator() Entity<ExecuteChaptersBehavior.EntityData>.Configure(IMode) Entity<ExecuteChaptersBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteChaptersBehavior() [JsonConstructor] [Preserve] public ExecuteChaptersBehavior() ExecuteChaptersBehavior(IEnumerable<IChapter>) public ExecuteChaptersBehavior(IEnumerable<IChapter> chapters) Parameters chapters IEnumerable<IChapter> ExecuteChaptersBehavior(IChapter) public ExecuteChaptersBehavior(IChapter chapter) Parameters chapter IChapter Methods Clone() Returns a deep copy of the object. public override IBehavior Clone() Returns IBehavior GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.GoToChapterBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.GoToChapterBehavior.EntityData.html",
    "title": "Class GoToChapterBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class GoToChapterBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Behavior data. [DisplayName(\"Start Chapter\")] [DataContract(IsReference = true)] public class GoToChapterBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object GoToChapterBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChapterGuid [DataMember] public Guid ChapterGuid { get; set; } Property Value Guid Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. public string Name { get; set; } Property Value string"
  },
  "api/VRBuilder.Core.Behaviors.GoToChapterBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.GoToChapterBehavior.html",
    "title": "Class GoToChapterBehavior | VR Builder Documentation",
    "keywords": "Class GoToChapterBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll This behavior sets the next chapter to an arbitrary chapter and fast forwards to the end of the current chapter. [DataContract(IsReference = true)] public class GoToChapterBehavior : Behavior<GoToChapterBehavior.EntityData>, IDataOwner<GoToChapterBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<GoToChapterBehavior.EntityData> Behavior<GoToChapterBehavior.EntityData> GoToChapterBehavior Implements IDataOwner<GoToChapterBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<GoToChapterBehavior.EntityData>.Clone() Entity<GoToChapterBehavior.EntityData>.Data Entity<GoToChapterBehavior.EntityData>.LifeCycle Entity<GoToChapterBehavior.EntityData>.Parent Entity<GoToChapterBehavior.EntityData>.GetActiveProcess() Entity<GoToChapterBehavior.EntityData>.GetDeactivatingProcess() Entity<GoToChapterBehavior.EntityData>.GetConfigurator() Entity<GoToChapterBehavior.EntityData>.Configure(IMode) Entity<GoToChapterBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GoToChapterBehavior() [JsonConstructor] [Preserve] public GoToChapterBehavior() GoToChapterBehavior(Guid, string) public GoToChapterBehavior(Guid chapterGuid, string name = \"Go to Chapter\") Parameters chapterGuid Guid name string Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.HighlightObjectBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.HighlightObjectBehavior.EntityData.html",
    "title": "Class HighlightObjectBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class HighlightObjectBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll \"Highlight object\" behavior's data. [DisplayName(\"Highlight Object\")] [DataContract(IsReference = true)] public class HighlightObjectBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object HighlightObjectBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CustomHighlightColor ModeParameter<T> of the highlight color. Process modes can change the highlight color. public ModeParameter<Color> CustomHighlightColor { get; set; } Property Value ModeParameter<Color> HighlightColor Highlight color set in the Step Inspector. [DataMember] [DisplayName(\"Color\")] public Color HighlightColor { get; set; } Property Value Color Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string ObjectToHighlight [DataMember] [Obsolete(\"Use TargetObjects instead.\")] [LegacyProperty(\"TargetObjects\")] public ScenePropertyReference<IHighlightProperty> ObjectToHighlight { get; set; } Property Value ScenePropertyReference<IHighlightProperty> TargetObjects Target scene object to be highlighted. [DataMember] [DisplayName(\"Objects\")] public MultipleScenePropertyReference<IHighlightProperty> TargetObjects { get; set; } Property Value MultipleScenePropertyReference<IHighlightProperty>"
  },
  "api/VRBuilder.Core.Behaviors.HighlightObjectBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.HighlightObjectBehavior.html",
    "title": "Class HighlightObjectBehavior | VR Builder Documentation",
    "keywords": "Class HighlightObjectBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Behavior that highlights the target ISceneObject with the specified color until the behavior is being deactivated. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-behaviors/highlight-object\")] public class HighlightObjectBehavior : Behavior<HighlightObjectBehavior.EntityData>, IDataOwner<HighlightObjectBehavior.EntityData>, IBehavior, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior>, IOptional, IEntity Inheritance object Entity<HighlightObjectBehavior.EntityData> Behavior<HighlightObjectBehavior.EntityData> HighlightObjectBehavior Implements IDataOwner<HighlightObjectBehavior.EntityData> IBehavior IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> IOptional IEntity Inherited Members Behavior<HighlightObjectBehavior.EntityData>.Clone() Entity<HighlightObjectBehavior.EntityData>.Data Entity<HighlightObjectBehavior.EntityData>.LifeCycle Entity<HighlightObjectBehavior.EntityData>.Parent Entity<HighlightObjectBehavior.EntityData>.GetActiveProcess() Entity<HighlightObjectBehavior.EntityData>.Configure(IMode) Entity<HighlightObjectBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HighlightObjectBehavior() [JsonConstructor] [Preserve] public HighlightObjectBehavior() HighlightObjectBehavior(Guid, Color) public HighlightObjectBehavior(Guid objectId, Color highlightColor) Parameters objectId Guid highlightColor Color HighlightObjectBehavior(IHighlightProperty) public HighlightObjectBehavior(IHighlightProperty target) Parameters target IHighlightProperty HighlightObjectBehavior(IHighlightProperty, Color) public HighlightObjectBehavior(IHighlightProperty target, Color highlightColor) Parameters target IHighlightProperty highlightColor Color Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetConfigurator() Override this method if your behavior or condition supports changing between process modes (IMode). By default returns an empty configurator that does nothing. protected override IConfigurator GetConfigurator() Returns IConfigurator GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.IBackgroundBehaviorData.html": {
    "href": "api/VRBuilder.Core.Behaviors.IBackgroundBehaviorData.html",
    "title": "Interface IBackgroundBehaviorData | VR Builder Documentation",
    "keywords": "Interface IBackgroundBehaviorData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Interface that enables non-blocking background behaviors. If the IsBlocking property returns false, the behavior will not hinder the completion of a step. public interface IBackgroundBehaviorData : IBehaviorData, INamedData, IData Inherited Members INamedData.Name IData.Metadata Properties IsBlocking If true, the behavior prevents the completion of a step until it is completed itself. If false, the behavior does not hinder the completion of a step. [DataMember] bool IsBlocking { get; set; } Property Value bool"
  },
  "api/VRBuilder.Core.Behaviors.IBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.IBehavior.html",
    "title": "Interface IBehavior | VR Builder Documentation",
    "keywords": "Interface IBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll public interface IBehavior : IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inherited Members IEntity.LifeCycle IEntity.GetActivatingProcess() IEntity.GetActiveProcess() IEntity.GetDeactivatingProcess() IEntity.Configure(IMode) IEntity.Update() IEntity.Parent IDataOwner<IBehaviorData>.Data IClonable<IBehavior>.Clone()"
  },
  "api/VRBuilder.Core.Behaviors.IBehaviorData.html": {
    "href": "api/VRBuilder.Core.Behaviors.IBehaviorData.html",
    "title": "Interface IBehaviorData | VR Builder Documentation",
    "keywords": "Interface IBehaviorData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll public interface IBehaviorData : INamedData, IData Inherited Members INamedData.Name IData.Metadata"
  },
  "api/VRBuilder.Core.Behaviors.IBehaviorExecutionStages.html": {
    "href": "api/VRBuilder.Core.Behaviors.IBehaviorExecutionStages.html",
    "title": "Interface IBehaviorExecutionStages | VR Builder Documentation",
    "keywords": "Interface IBehaviorExecutionStages Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Data structure to add the possibility to run at specific execution stages public interface IBehaviorExecutionStages Properties ExecutionStages A property that determines if the Behavior should be run at activation or deactivation (or both). [DataMember] BehaviorExecutionStages ExecutionStages { get; set; } Property Value BehaviorExecutionStages"
  },
  "api/VRBuilder.Core.Behaviors.IBehaviorParent.html": {
    "href": "api/VRBuilder.Core.Behaviors.IBehaviorParent.html",
    "title": "Interface IBehaviorParent | VR Builder Documentation",
    "keywords": "Interface IBehaviorParent Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll public interface IBehaviorParent Properties Behaviors List of behaviors associated with this object. ReadOnlyCollection<IBehavior> Behaviors { get; } Property Value ReadOnlyCollection<IBehavior> Methods AddBehavior(IBehavior) Add behavior to this object. Implementation of this method should invoke BehaviorCollectionChanged event. void AddBehavior(IBehavior behavior) Parameters behavior IBehavior Behavior to be added. CheckHasBehavior(IBehavior) Returns true if this object has given behavior. bool CheckHasBehavior(IBehavior behavior) Parameters behavior IBehavior Returns bool InsertBehavior(int, IBehavior) Insert the behavior into the collection of behaviors at index. void InsertBehavior(int index, IBehavior behavior) Parameters index int behavior IBehavior RemoveBehavior(IBehavior) Remove behavior from this object. Implementation of this method should invoke BehaviorCollectionChanged event. bool RemoveBehavior(IBehavior behavior) Parameters behavior IBehavior Returns bool Events BehaviorCollectionChanged Invoked when behavior is added or removed from this object. event EventHandler<BehaviorCollectionChangedEventArgs> BehaviorCollectionChanged Event Type EventHandler<BehaviorCollectionChangedEventArgs>"
  },
  "api/VRBuilder.Core.Behaviors.LoadSceneBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.LoadSceneBehavior.EntityData.html",
    "title": "Class LoadSceneBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class LoadSceneBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll The data class for a load scene behavior. [DataContract(IsReference = true)] public class LoadSceneBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object LoadSceneBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LoadAdditively If true, the scene will be loaded additively. [DataMember] [DisplayName(\"Load additively\")] public bool LoadAdditively { get; set; } Property Value bool LoadAsynchronously If true, the scene will be loaded asynchronously during the update cycle of the stage process. [DataMember] [DisplayName(\"Load asynchronously\")] public bool LoadAsynchronously { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string ScenePath Asset path of the scene to load. [DataMember] [UsesSpecificProcessDrawer(\"SceneDropdownDrawer\")] [DisplayName(\"Scene to load\")] public string ScenePath { get; set; } Property Value string"
  },
  "api/VRBuilder.Core.Behaviors.LoadSceneBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.LoadSceneBehavior.html",
    "title": "Class LoadSceneBehavior | VR Builder Documentation",
    "keywords": "Class LoadSceneBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Behavior that loads the specified scene, either additively or not. Loading a scene not additively interrupts the current process. [DataContract(IsReference = true)] public class LoadSceneBehavior : Behavior<LoadSceneBehavior.EntityData>, IDataOwner<LoadSceneBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<LoadSceneBehavior.EntityData> Behavior<LoadSceneBehavior.EntityData> LoadSceneBehavior Implements IDataOwner<LoadSceneBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<LoadSceneBehavior.EntityData>.Clone() Entity<LoadSceneBehavior.EntityData>.Data Entity<LoadSceneBehavior.EntityData>.LifeCycle Entity<LoadSceneBehavior.EntityData>.Parent Entity<LoadSceneBehavior.EntityData>.GetActiveProcess() Entity<LoadSceneBehavior.EntityData>.GetDeactivatingProcess() Entity<LoadSceneBehavior.EntityData>.GetConfigurator() Entity<LoadSceneBehavior.EntityData>.Configure(IMode) Entity<LoadSceneBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LoadSceneBehavior() [JsonConstructor] [Preserve] public LoadSceneBehavior() Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.LoadSceneBehaviorException.html": {
    "href": "api/VRBuilder.Core.Behaviors.LoadSceneBehaviorException.html",
    "title": "Class LoadSceneBehaviorException | VR Builder Documentation",
    "keywords": "Class LoadSceneBehaviorException Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Exception related to load scene behavior. public class LoadSceneBehaviorException : Exception, _Exception, ISerializable Inheritance object Exception LoadSceneBehaviorException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors LoadSceneBehaviorException(string) public LoadSceneBehaviorException(string message) Parameters message string"
  },
  "api/VRBuilder.Core.Behaviors.LockablePropertyReference.html": {
    "href": "api/VRBuilder.Core.Behaviors.LockablePropertyReference.html",
    "title": "Class LockablePropertyReference | VR Builder Documentation",
    "keywords": "Class LockablePropertyReference Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Serializable reference to a LockableProperty [DataContract(IsReference = true)] public class LockablePropertyReference Inheritance object LockablePropertyReference Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LockablePropertyReference() public LockablePropertyReference() LockablePropertyReference(LockableProperty) public LockablePropertyReference(LockableProperty property) Parameters property LockableProperty Fields Target Reference to the scene object the LockableProperty is attached to. [DataMember] [Obsolete(\"Use TargetObject instead.\")] [LegacyProperty(\"TargetObject\")] public SceneObjectReference Target Field Value SceneObjectReference TargetObject Reference to the scene object the LockableProperty is attached to. [DataMember] public SingleSceneObjectReference TargetObject Field Value SingleSceneObjectReference Type Type name of the LockableProperty. [DataMember] public string Type Field Value string Methods GetProperty() Returns the referenced LockableProperty. public LockableProperty GetProperty() Returns LockableProperty"
  },
  "api/VRBuilder.Core.Behaviors.MoveObjectBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.MoveObjectBehavior.EntityData.html",
    "title": "Class MoveObjectBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class MoveObjectBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll The \"move object\" behavior's data. [DisplayName(\"Move Object\")] [DataContract(IsReference = true)] public class MoveObjectBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object MoveObjectBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AnimationCurve [DataMember] [DisplayName(\"Animation curve\")] public AnimationCurve AnimationCurve { get; set; } Property Value AnimationCurve Duration Duration of the transition. If duration is equal or less than zero, target object movement is instantaneous. [DataMember] [DisplayName(\"Animation (in seconds)\")] public float Duration { get; set; } Property Value float FinalPosition Target's position and rotation is linearly interpolated to match PositionProvider's position and rotation at the end of transition. [DataMember] [DisplayName(\"Final position provider\")] public SingleSceneObjectReference FinalPosition { get; set; } Property Value SingleSceneObjectReference Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string PositionProvider [DataMember] [Obsolete(\"Use FinalPosition instead.\")] [LegacyProperty(\"FinalPosition\")] public SceneObjectReference PositionProvider { get; set; } Property Value SceneObjectReference Target [DataMember] [Obsolete(\"Use TargetObject instead.\")] [LegacyProperty(\"TargetObject\")] public SceneObjectReference Target { get; set; } Property Value SceneObjectReference TargetObject Target scene object to be moved. [DataMember] [DisplayName(\"Object\")] public SingleSceneObjectReference TargetObject { get; set; } Property Value SingleSceneObjectReference"
  },
  "api/VRBuilder.Core.Behaviors.MoveObjectBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.MoveObjectBehavior.html",
    "title": "Class MoveObjectBehavior | VR Builder Documentation",
    "keywords": "Class MoveObjectBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Behavior that moves target SceneObject to the position and rotation of another TargetObject. It takes Duration seconds, even if the target was in the place already. If Duration is equal or less than 0, transition is instantaneous. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-behaviors/move-object\")] public class MoveObjectBehavior : Behavior<MoveObjectBehavior.EntityData>, IDataOwner<MoveObjectBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<MoveObjectBehavior.EntityData> Behavior<MoveObjectBehavior.EntityData> MoveObjectBehavior Implements IDataOwner<MoveObjectBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<MoveObjectBehavior.EntityData>.Clone() Entity<MoveObjectBehavior.EntityData>.Data Entity<MoveObjectBehavior.EntityData>.LifeCycle Entity<MoveObjectBehavior.EntityData>.Parent Entity<MoveObjectBehavior.EntityData>.GetActiveProcess() Entity<MoveObjectBehavior.EntityData>.GetDeactivatingProcess() Entity<MoveObjectBehavior.EntityData>.GetConfigurator() Entity<MoveObjectBehavior.EntityData>.Configure(IMode) Entity<MoveObjectBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MoveObjectBehavior() [JsonConstructor] [Preserve] public MoveObjectBehavior() MoveObjectBehavior(Guid, Guid, float) public MoveObjectBehavior(Guid targetObjectId, Guid finalPositionId, float duration) Parameters targetObjectId Guid finalPositionId Guid duration float MoveObjectBehavior(ISceneObject, ISceneObject, float) public MoveObjectBehavior(ISceneObject target, ISceneObject positionProvider, float duration) Parameters target ISceneObject positionProvider ISceneObject duration float Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.PlayAudioBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.PlayAudioBehavior.EntityData.html",
    "title": "Class PlayAudioBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class PlayAudioBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll The \"play audio\" behavior's data. [DataContract(IsReference = true)] public class PlayAudioBehavior.EntityData : IBackgroundBehaviorData, IBehaviorData, INamedData, IData, IBehaviorExecutionStages Inheritance object PlayAudioBehavior.EntityData Implements IBackgroundBehaviorData IBehaviorData INamedData IData IBehaviorExecutionStages Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AudioData An audio data that contains an audio clip to play. [DataMember] public IAudioData AudioData { get; set; } Property Value IAudioData AudioPlayer The Unity's audio source to play the sound. If not set, it will use RuntimeConfigurator.Configuration.InstructionPlayer. public AudioSource AudioPlayer { get; set; } Property Value AudioSource ExecutionStages A property that determines if the Behavior should be run at activation or deactivation (or both). [DataMember] public BehaviorExecutionStages ExecutionStages { get; set; } Property Value BehaviorExecutionStages IsBlocking If true, the behavior prevents the completion of a step until it is completed itself. If false, the behavior does not hinder the completion of a step. public bool IsBlocking { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Volume Audio volume this audio file should be played with. [DataMember] [DisplayName(\"Audio Volume (from 0 to 1)\")] [UsesSpecificProcessDrawer(\"NormalizedFloatDrawer\")] public float Volume { get; set; } Property Value float"
  },
  "api/VRBuilder.Core.Behaviors.PlayAudioBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.PlayAudioBehavior.html",
    "title": "Class PlayAudioBehavior | VR Builder Documentation",
    "keywords": "Class PlayAudioBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll A behavior that plays audio. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-behaviors/play-audio-file\")] public class PlayAudioBehavior : Behavior<PlayAudioBehavior.EntityData>, IDataOwner<PlayAudioBehavior.EntityData>, IBehavior, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior>, IOptional, IEntity Inheritance object Entity<PlayAudioBehavior.EntityData> Behavior<PlayAudioBehavior.EntityData> PlayAudioBehavior Implements IDataOwner<PlayAudioBehavior.EntityData> IBehavior IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> IOptional IEntity Inherited Members Behavior<PlayAudioBehavior.EntityData>.Clone() Entity<PlayAudioBehavior.EntityData>.Data Entity<PlayAudioBehavior.EntityData>.LifeCycle Entity<PlayAudioBehavior.EntityData>.Parent Entity<PlayAudioBehavior.EntityData>.GetActiveProcess() Entity<PlayAudioBehavior.EntityData>.GetConfigurator() Entity<PlayAudioBehavior.EntityData>.Configure(IMode) Entity<PlayAudioBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayAudioBehavior() [JsonConstructor] [Preserve] protected PlayAudioBehavior() PlayAudioBehavior(IAudioData, BehaviorExecutionStages, bool, AudioSource) public PlayAudioBehavior(IAudioData audioData, BehaviorExecutionStages executionStages, bool isBlocking, AudioSource audioPlayer = null) Parameters audioData IAudioData executionStages BehaviorExecutionStages isBlocking bool audioPlayer AudioSource PlayAudioBehavior(IAudioData, BehaviorExecutionStages, AudioSource) public PlayAudioBehavior(IAudioData audioData, BehaviorExecutionStages executionStages, AudioSource audioPlayer = null) Parameters audioData IAudioData executionStages BehaviorExecutionStages audioPlayer AudioSource Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.ResetValueBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.ResetValueBehavior.EntityData.html",
    "title": "Class ResetValueBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class ResetValueBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll The ResetValueBehavior<T> behavior data. [DisplayName(\"Reset Value\")] [DataContract(IsReference = true)] public class ResetValueBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object ResetValueBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Properties [DataMember] [DisplayName(\"Data Properties\")] public MultipleScenePropertyReference<IDataPropertyBase> Properties Field Value MultipleScenePropertyReference<IDataPropertyBase> Properties DataProperty [DataMember] [Obsolete(\"Use Properties instead.\")] [LegacyProperty(\"Properties\")] public ScenePropertyReference<IDataPropertyBase> DataProperty { get; set; } Property Value ScenePropertyReference<IDataPropertyBase> Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string"
  },
  "api/VRBuilder.Core.Behaviors.ResetValueBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.ResetValueBehavior.html",
    "title": "Class ResetValueBehavior | VR Builder Documentation",
    "keywords": "Class ResetValueBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll A behavior that reset a data property to its default value specified in the inspector. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/states-data-add-on\")] public class ResetValueBehavior : Behavior<ResetValueBehavior.EntityData>, IDataOwner<ResetValueBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<ResetValueBehavior.EntityData> Behavior<ResetValueBehavior.EntityData> ResetValueBehavior Implements IDataOwner<ResetValueBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<ResetValueBehavior.EntityData>.Clone() Entity<ResetValueBehavior.EntityData>.Data Entity<ResetValueBehavior.EntityData>.LifeCycle Entity<ResetValueBehavior.EntityData>.Parent Entity<ResetValueBehavior.EntityData>.GetActiveProcess() Entity<ResetValueBehavior.EntityData>.GetDeactivatingProcess() Entity<ResetValueBehavior.EntityData>.GetConfigurator() Entity<ResetValueBehavior.EntityData>.Configure(IMode) Entity<ResetValueBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResetValueBehavior() [JsonConstructor] [Preserve] public ResetValueBehavior() ResetValueBehavior(Guid) public ResetValueBehavior(Guid propertyId) Parameters propertyId Guid ResetValueBehavior(IDataPropertyBase) public ResetValueBehavior(IDataPropertyBase property) Parameters property IDataPropertyBase Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.ScalingBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.ScalingBehavior.EntityData.html",
    "title": "Class ScalingBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class ScalingBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll [DisplayName(\"Scale Object\")] [DataContract(IsReference = true)] public class ScalingBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object ScalingBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AnimationCurve [DataMember] [DisplayName(\"Animation curve\")] public AnimationCurve AnimationCurve { get; set; } Property Value AnimationCurve Duration [DataMember] [DisplayName(\"Animation Duration (in seconds)\")] public float Duration { get; set; } Property Value float Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Target [DataMember] [Obsolete(\"Use Targets instead.\")] [LegacyProperty(\"Targets\")] public SceneObjectReference Target { get; set; } Property Value SceneObjectReference TargetScale [DataMember] [DisplayName(\"Target Scale\")] public Vector3 TargetScale { get; set; } Property Value Vector3 Targets [DataMember] [DisplayName(\"Target Objects\")] public MultipleSceneObjectReference Targets { get; set; } Property Value MultipleSceneObjectReference"
  },
  "api/VRBuilder.Core.Behaviors.ScalingBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.ScalingBehavior.html",
    "title": "Class ScalingBehavior | VR Builder Documentation",
    "keywords": "Class ScalingBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll [DataContract(IsReference = true)] public class ScalingBehavior : Behavior<ScalingBehavior.EntityData>, IDataOwner<ScalingBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<ScalingBehavior.EntityData> Behavior<ScalingBehavior.EntityData> ScalingBehavior Implements IDataOwner<ScalingBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<ScalingBehavior.EntityData>.Clone() Entity<ScalingBehavior.EntityData>.Data Entity<ScalingBehavior.EntityData>.LifeCycle Entity<ScalingBehavior.EntityData>.Parent Entity<ScalingBehavior.EntityData>.GetActiveProcess() Entity<ScalingBehavior.EntityData>.GetDeactivatingProcess() Entity<ScalingBehavior.EntityData>.GetConfigurator() Entity<ScalingBehavior.EntityData>.Configure(IMode) Entity<ScalingBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ScalingBehavior() [JsonConstructor] [Preserve] public ScalingBehavior() ScalingBehavior(IEnumerable<ISceneObject>, Vector3, float) public ScalingBehavior(IEnumerable<ISceneObject> targets, Vector3 targetScale, float duration) Parameters targets IEnumerable<ISceneObject> targetScale Vector3 duration float Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.SetComponentEnabledBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.SetComponentEnabledBehavior.EntityData.html",
    "title": "Class SetComponentEnabledBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class SetComponentEnabledBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll The behavior's data. [DisplayName(\"Set Component Enabled\")] [DataContract(IsReference = true)] public class SetComponentEnabledBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object SetComponentEnabledBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ComponentType Type of components to interact with. [DataMember] public string ComponentType { get; set; } Property Value string Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string RevertOnDeactivation If true, the component will revert to its original state when the behavior deactivates. [DataMember] public bool RevertOnDeactivation { get; set; } Property Value bool SetEnabled If true, the component will be enabled, otherwise it will disabled. [DataMember] public bool SetEnabled { get; set; } Property Value bool Target [DataMember] [Obsolete(\"Use TargetObjects instead.\")] [LegacyProperty(\"TargetObjects\")] public SceneObjectReference Target { get; set; } Property Value SceneObjectReference TargetObjects Object the target component is on. [DataMember] public MultipleSceneObjectReference TargetObjects { get; set; } Property Value MultipleSceneObjectReference"
  },
  "api/VRBuilder.Core.Behaviors.SetComponentEnabledBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.SetComponentEnabledBehavior.html",
    "title": "Class SetComponentEnabledBehavior | VR Builder Documentation",
    "keywords": "Class SetComponentEnabledBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Enables/disables all components of a given type on a given game object. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-behaviors/enable-object\")] public class SetComponentEnabledBehavior : Behavior<SetComponentEnabledBehavior.EntityData>, IDataOwner<SetComponentEnabledBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<SetComponentEnabledBehavior.EntityData> Behavior<SetComponentEnabledBehavior.EntityData> SetComponentEnabledBehavior Implements IDataOwner<SetComponentEnabledBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<SetComponentEnabledBehavior.EntityData>.Clone() Entity<SetComponentEnabledBehavior.EntityData>.Data Entity<SetComponentEnabledBehavior.EntityData>.LifeCycle Entity<SetComponentEnabledBehavior.EntityData>.Parent Entity<SetComponentEnabledBehavior.EntityData>.GetActiveProcess() Entity<SetComponentEnabledBehavior.EntityData>.GetConfigurator() Entity<SetComponentEnabledBehavior.EntityData>.Configure(IMode) Entity<SetComponentEnabledBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SetComponentEnabledBehavior() [JsonConstructor] [Preserve] public SetComponentEnabledBehavior() SetComponentEnabledBehavior(bool, string) public SetComponentEnabledBehavior(bool setEnabled, string name = \"Set Component Enabled\") Parameters setEnabled bool name string SetComponentEnabledBehavior(Guid, string, bool, bool) public SetComponentEnabledBehavior(Guid objectId, string componentType, bool setEnabled, bool revertOnDeactivate) Parameters objectId Guid componentType string setEnabled bool revertOnDeactivate bool Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.SetComponentEnabledByTagBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.SetComponentEnabledByTagBehavior.EntityData.html",
    "title": "Class SetComponentEnabledByTagBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class SetComponentEnabledByTagBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll The behavior's data. [DisplayName(\"Set Component Enabled (Tag)\")] [DataContract(IsReference = true)] public class SetComponentEnabledByTagBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object SetComponentEnabledByTagBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ComponentType Type of components to interact with. [DataMember] public string ComponentType { get; set; } Property Value string Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string RevertOnDeactivation If true, the component will revert to its original state when the behavior deactivates. [DataMember] public bool RevertOnDeactivation { get; set; } Property Value bool SetEnabled If true, the component will be enabled, otherwise it will disabled. [DataMember] public bool SetEnabled { get; set; } Property Value bool TargetObjects Object the target component is on. [DataMember] public MultipleSceneObjectReference TargetObjects { get; set; } Property Value MultipleSceneObjectReference TargetTag [DataMember] [Obsolete(\"Use TargetObjects instead.\")] [LegacyProperty(\"TargetObjects\")] public SceneObjectTag<ISceneObject> TargetTag { get; set; } Property Value SceneObjectTag<ISceneObject>"
  },
  "api/VRBuilder.Core.Behaviors.SetComponentEnabledByTagBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.SetComponentEnabledByTagBehavior.html",
    "title": "Class SetComponentEnabledByTagBehavior | VR Builder Documentation",
    "keywords": "Class SetComponentEnabledByTagBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Enables/disables all components of a given type on a given game object. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-behaviors/enable-object\")] [Obsolete(\"Use SetComponentEnabledBehavior instead.\")] public class SetComponentEnabledByTagBehavior : Behavior<SetComponentEnabledByTagBehavior.EntityData>, IDataOwner<SetComponentEnabledByTagBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<SetComponentEnabledByTagBehavior.EntityData> Behavior<SetComponentEnabledByTagBehavior.EntityData> SetComponentEnabledByTagBehavior Implements IDataOwner<SetComponentEnabledByTagBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<SetComponentEnabledByTagBehavior.EntityData>.Clone() Entity<SetComponentEnabledByTagBehavior.EntityData>.Data Entity<SetComponentEnabledByTagBehavior.EntityData>.LifeCycle Entity<SetComponentEnabledByTagBehavior.EntityData>.Parent Entity<SetComponentEnabledByTagBehavior.EntityData>.GetActiveProcess() Entity<SetComponentEnabledByTagBehavior.EntityData>.GetConfigurator() Entity<SetComponentEnabledByTagBehavior.EntityData>.Configure(IMode) Entity<SetComponentEnabledByTagBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SetComponentEnabledByTagBehavior() [JsonConstructor] [Preserve] public SetComponentEnabledByTagBehavior() SetComponentEnabledByTagBehavior(bool, string) public SetComponentEnabledByTagBehavior(bool setEnabled, string name = \"Set Component Enabled\") Parameters setEnabled bool name string SetComponentEnabledByTagBehavior(Guid, string, bool, bool) public SetComponentEnabledByTagBehavior(Guid objectId, string componentType, bool setEnabled, bool revertOnDeactivate) Parameters objectId Guid componentType string setEnabled bool revertOnDeactivate bool Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.SetObjectsEnabledBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.SetObjectsEnabledBehavior.EntityData.html",
    "title": "Class SetObjectsEnabledBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class SetObjectsEnabledBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Behavior data for SetObjectsEnabledBehavior. [DisplayName(\"Set Objects Enabled\")] [DataContract(IsReference = true)] public class SetObjectsEnabledBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object SetObjectsEnabledBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string RevertOnDeactivation [DataMember] [DisplayName(\"Revert after step is complete\")] public bool RevertOnDeactivation { get; set; } Property Value bool SetEnabled [DataMember] public bool SetEnabled { get; set; } Property Value bool TargetObjects The objects to enable or disable. [DataMember] [DisplayName(\"Objects\")] public MultipleSceneObjectReference TargetObjects { get; set; } Property Value MultipleSceneObjectReference"
  },
  "api/VRBuilder.Core.Behaviors.SetObjectsEnabledBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.SetObjectsEnabledBehavior.html",
    "title": "Class SetObjectsEnabledBehavior | VR Builder Documentation",
    "keywords": "Class SetObjectsEnabledBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Sets enabled or disabled all specified objects. [DataContract(IsReference = true)] public class SetObjectsEnabledBehavior : Behavior<SetObjectsEnabledBehavior.EntityData>, IDataOwner<SetObjectsEnabledBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<SetObjectsEnabledBehavior.EntityData> Behavior<SetObjectsEnabledBehavior.EntityData> SetObjectsEnabledBehavior Implements IDataOwner<SetObjectsEnabledBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<SetObjectsEnabledBehavior.EntityData>.Clone() Entity<SetObjectsEnabledBehavior.EntityData>.Data Entity<SetObjectsEnabledBehavior.EntityData>.LifeCycle Entity<SetObjectsEnabledBehavior.EntityData>.Parent Entity<SetObjectsEnabledBehavior.EntityData>.GetActiveProcess() Entity<SetObjectsEnabledBehavior.EntityData>.GetConfigurator() Entity<SetObjectsEnabledBehavior.EntityData>.Configure(IMode) Entity<SetObjectsEnabledBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SetObjectsEnabledBehavior() [JsonConstructor] [Preserve] public SetObjectsEnabledBehavior() SetObjectsEnabledBehavior(bool) public SetObjectsEnabledBehavior(bool setEnabled) Parameters setEnabled bool SetObjectsEnabledBehavior(Guid, bool, bool) public SetObjectsEnabledBehavior(Guid objectId, bool setEnabled, bool revertOnDeactivate = false) Parameters objectId Guid setEnabled bool revertOnDeactivate bool Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.SetObjectsWithTagEnabledBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.SetObjectsWithTagEnabledBehavior.EntityData.html",
    "title": "Class SetObjectsWithTagEnabledBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class SetObjectsWithTagEnabledBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Behavior data for SetObjectsWithTagEnabledBehavior. [DisplayName(\"Enable Objects by Tag\")] [DataContract(IsReference = true)] public class SetObjectsWithTagEnabledBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object SetObjectsWithTagEnabledBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string RevertOnDeactivation [DataMember] [DisplayName(\"Revert after step is complete\")] public bool RevertOnDeactivation { get; set; } Property Value bool SetEnabled [DataMember] public bool SetEnabled { get; set; } Property Value bool Tag [DataMember] [Obsolete(\"Use TargetObjects instead.\")] [LegacyProperty(\"TargetObjects\")] public SceneObjectTag<ISceneObject> Tag { get; set; } Property Value SceneObjectTag<ISceneObject> TargetObjects The objects to enable or disable. [DataMember] [DisplayName(\"Objects\")] public MultipleSceneObjectReference TargetObjects { get; set; } Property Value MultipleSceneObjectReference"
  },
  "api/VRBuilder.Core.Behaviors.SetObjectsWithTagEnabledBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.SetObjectsWithTagEnabledBehavior.html",
    "title": "Class SetObjectsWithTagEnabledBehavior | VR Builder Documentation",
    "keywords": "Class SetObjectsWithTagEnabledBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll Sets enabled or disabled all objects with a given tag. [DataContract(IsReference = true)] [Obsolete(\"Use SetObjectsEnabledBehavior instead.\")] public class SetObjectsWithTagEnabledBehavior : Behavior<SetObjectsWithTagEnabledBehavior.EntityData>, IDataOwner<SetObjectsWithTagEnabledBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<SetObjectsWithTagEnabledBehavior.EntityData> Behavior<SetObjectsWithTagEnabledBehavior.EntityData> SetObjectsWithTagEnabledBehavior Implements IDataOwner<SetObjectsWithTagEnabledBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<SetObjectsWithTagEnabledBehavior.EntityData>.Clone() Entity<SetObjectsWithTagEnabledBehavior.EntityData>.Data Entity<SetObjectsWithTagEnabledBehavior.EntityData>.LifeCycle Entity<SetObjectsWithTagEnabledBehavior.EntityData>.Parent Entity<SetObjectsWithTagEnabledBehavior.EntityData>.GetActiveProcess() Entity<SetObjectsWithTagEnabledBehavior.EntityData>.GetConfigurator() Entity<SetObjectsWithTagEnabledBehavior.EntityData>.Configure(IMode) Entity<SetObjectsWithTagEnabledBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SetObjectsWithTagEnabledBehavior() [JsonConstructor] [Preserve] public SetObjectsWithTagEnabledBehavior() SetObjectsWithTagEnabledBehavior(bool) public SetObjectsWithTagEnabledBehavior(bool setEnabled) Parameters setEnabled bool SetObjectsWithTagEnabledBehavior(Guid, bool, bool) public SetObjectsWithTagEnabledBehavior(Guid objectId, bool setEnabled, bool revertOnDeactivate = false) Parameters objectId Guid setEnabled bool revertOnDeactivate bool Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.SetParentBehavior.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.SetParentBehavior.EntityData.html",
    "title": "Class SetParentBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class SetParentBehavior.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll [DisplayName(\"Set Parent\")] [DataContract(IsReference = true)] public class SetParentBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object SetParentBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Parent [DataMember] [Obsolete(\"Use ParentObject instead.\")] [LegacyProperty(\"ParentObject\")] public SceneObjectReference Parent { get; set; } Property Value SceneObjectReference ParentObject New parent game object. [DataMember] public SingleSceneObjectReference ParentObject { get; set; } Property Value SingleSceneObjectReference SnapToParentTransform If true, the object will be moved to the parent's transform. [DataMember] [DisplayName(\"Snap to parent transform\")] public bool SnapToParentTransform { get; set; } Property Value bool Target [DataMember] [Obsolete(\"Use TargetObject instead.\")] [LegacyProperty(\"TargetObject\")] public SceneObjectReference Target { get; set; } Property Value SceneObjectReference TargetObject Process object to reparent. [DataMember] public SingleSceneObjectReference TargetObject { get; set; } Property Value SingleSceneObjectReference"
  },
  "api/VRBuilder.Core.Behaviors.SetParentBehavior.html": {
    "href": "api/VRBuilder.Core.Behaviors.SetParentBehavior.html",
    "title": "Class SetParentBehavior | VR Builder Documentation",
    "keywords": "Class SetParentBehavior Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll This behavior changes the parent of a game object in the scene hierarchy. It can accept a null parent, in which case the object will be unparented. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-behaviors/set-parent\")] public class SetParentBehavior : Behavior<SetParentBehavior.EntityData>, IDataOwner<SetParentBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<SetParentBehavior.EntityData> Behavior<SetParentBehavior.EntityData> SetParentBehavior Implements IDataOwner<SetParentBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<SetParentBehavior.EntityData>.Clone() Entity<SetParentBehavior.EntityData>.Data Entity<SetParentBehavior.EntityData>.LifeCycle Entity<SetParentBehavior.EntityData>.Parent Entity<SetParentBehavior.EntityData>.GetActiveProcess() Entity<SetParentBehavior.EntityData>.GetDeactivatingProcess() Entity<SetParentBehavior.EntityData>.GetConfigurator() Entity<SetParentBehavior.EntityData>.Configure(IMode) Entity<SetParentBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SetParentBehavior() [JsonConstructor] [Preserve] public SetParentBehavior() SetParentBehavior(Guid, Guid, bool) public SetParentBehavior(Guid target, Guid parent, bool snapToParentTransform = false) Parameters target Guid parent Guid snapToParentTransform bool SetParentBehavior(ISceneObject, ISceneObject, bool) public SetParentBehavior(ISceneObject target, ISceneObject parent, bool snapToParentTransform = false) Parameters target ISceneObject parent ISceneObject snapToParentTransform bool Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.SetValueBehavior-1.EntityData.html": {
    "href": "api/VRBuilder.Core.Behaviors.SetValueBehavior-1.EntityData.html",
    "title": "Class SetValueBehavior<T>.EntityData | VR Builder Documentation",
    "keywords": "Class SetValueBehavior<T>.EntityData Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll The SetValueBehavior<T> behavior data. [DisplayName(\"Set Value\")] [DataContract(IsReference = true)] public class SetValueBehavior<T>.EntityData : IBehaviorData, INamedData, IData Inheritance object SetValueBehavior<T>.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DataProperties [DataMember] [DisplayName(\"Data Property\")] public MultipleScenePropertyReference<IDataProperty<T>> DataProperties { get; set; } Property Value MultipleScenePropertyReference<IDataProperty<T>> DataProperty [DataMember] [Obsolete(\"Use DataProperties instead.\")] [LegacyProperty(\"DataProperties\")] public ScenePropertyReference<IDataProperty<T>> DataProperty { get; set; } Property Value ScenePropertyReference<IDataProperty<T>> Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string NewValue [DataMember] [DisplayName(\"Value\")] public T NewValue { get; set; } Property Value T"
  },
  "api/VRBuilder.Core.Behaviors.SetValueBehavior-1.html": {
    "href": "api/VRBuilder.Core.Behaviors.SetValueBehavior-1.html",
    "title": "Class SetValueBehavior<T> | VR Builder Documentation",
    "keywords": "Class SetValueBehavior<T> Namespace VRBuilder.Core.Behaviors Assembly VRBuilder.Core.dll A behavior that sets a data property to a specified value. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/states-data-add-on\")] public class SetValueBehavior<T> : Behavior<SetValueBehavior<T>.EntityData>, IDataOwner<SetValueBehavior<T>.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Type Parameters T Inheritance object Entity<SetValueBehavior<T>.EntityData> Behavior<SetValueBehavior<T>.EntityData> SetValueBehavior<T> Implements IDataOwner<SetValueBehavior<T>.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<SetValueBehavior<T>.EntityData>.Clone() Entity<SetValueBehavior<T>.EntityData>.Data Entity<SetValueBehavior<T>.EntityData>.LifeCycle Entity<SetValueBehavior<T>.EntityData>.Parent Entity<SetValueBehavior<T>.EntityData>.GetActiveProcess() Entity<SetValueBehavior<T>.EntityData>.GetDeactivatingProcess() Entity<SetValueBehavior<T>.EntityData>.GetConfigurator() Entity<SetValueBehavior<T>.EntityData>.Configure(IMode) Entity<SetValueBehavior<T>.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SetValueBehavior() [JsonConstructor] [Preserve] public SetValueBehavior() SetValueBehavior(Guid, T) public SetValueBehavior(Guid propertyId, T value) Parameters propertyId Guid value T SetValueBehavior(IDataProperty<T>, T) public SetValueBehavior(IDataProperty<T> property, T value) Parameters property IDataProperty<T> value T Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Behaviors.html": {
    "href": "api/VRBuilder.Core.Behaviors.html",
    "title": "Namespace VRBuilder.Core.Behaviors | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Behaviors Classes BehaviorCollectionChangedEventArgs BehaviorMetadata BehaviorSequence A collection of behaviors that are activated and deactivated after each other. BehaviorSequence.EntityData Behavior sequence's data. Behavior<TData> Inherit from this abstract class when creating your own behaviors. ConfettiBehavior This behavior causes confetti to rain. ConfettiBehavior.EntityData ControlParticleEmissionBehavior Behavior that start/stops a particle system property. ControlParticleEmissionBehavior.EntityData The ControlParticleEmissionBehavior behavior data. DelayBehavior Behavior that waits for DelayTime seconds before finishing its activation. DelayBehavior.EntityData The data class for a delay behavior. DisableGameObjectBehavior Disables gameObject of target ISceneObject. DisableGameObjectBehavior.EntityData \"Disable game object\" behavior's data. EnableGameObjectBehavior Enables gameObject of target ISceneObject. EnableGameObjectBehavior.EntityData \"Enable game object\" behavior's data. ExecuteChapterBehavior Behavior that executes a stored chapter and completes when the chapter ends. ExecuteChapterBehavior.EntityData Execute chapter behavior data. ExecuteChaptersBehavior Behavior that executes a number of chapters at the same time and completes when the chapters ends. ExecuteChaptersBehavior.EntityData Execute chapters behavior data. GoToChapterBehavior This behavior sets the next chapter to an arbitrary chapter and fast forwards to the end of the current chapter. GoToChapterBehavior.EntityData Behavior data. HighlightObjectBehavior Behavior that highlights the target ISceneObject with the specified color until the behavior is being deactivated. HighlightObjectBehavior.EntityData \"Highlight object\" behavior's data. LoadSceneBehavior Behavior that loads the specified scene, either additively or not. Loading a scene not additively interrupts the current process. LoadSceneBehavior.EntityData The data class for a load scene behavior. LoadSceneBehaviorException Exception related to load scene behavior. LockablePropertyReference Serializable reference to a LockableProperty MoveObjectBehavior Behavior that moves target SceneObject to the position and rotation of another TargetObject. It takes Duration seconds, even if the target was in the place already. If Duration is equal or less than 0, transition is instantaneous. MoveObjectBehavior.EntityData The \"move object\" behavior's data. PlayAudioBehavior A behavior that plays audio. PlayAudioBehavior.EntityData The \"play audio\" behavior's data. ResetValueBehavior A behavior that reset a data property to its default value specified in the inspector. ResetValueBehavior.EntityData The ResetValueBehavior<T> behavior data. ScalingBehavior ScalingBehavior.EntityData SetComponentEnabledBehavior Enables/disables all components of a given type on a given game object. SetComponentEnabledBehavior.EntityData The behavior's data. SetComponentEnabledByTagBehavior Enables/disables all components of a given type on a given game object. SetComponentEnabledByTagBehavior.EntityData The behavior's data. SetObjectsEnabledBehavior Sets enabled or disabled all specified objects. SetObjectsEnabledBehavior.EntityData Behavior data for SetObjectsEnabledBehavior. SetObjectsWithTagEnabledBehavior Sets enabled or disabled all objects with a given tag. SetObjectsWithTagEnabledBehavior.EntityData Behavior data for SetObjectsWithTagEnabledBehavior. SetParentBehavior This behavior changes the parent of a game object in the scene hierarchy. It can accept a null parent, in which case the object will be unparented. SetParentBehavior.EntityData SetValueBehavior<T> A behavior that sets a data property to a specified value. SetValueBehavior<T>.EntityData The SetValueBehavior<T> behavior data. Interfaces IBackgroundBehaviorData Interface that enables non-blocking background behaviors. If the IsBlocking property returns false, the behavior will not hinder the completion of a step. IBehavior IBehaviorData IBehaviorExecutionStages Data structure to add the possibility to run at specific execution stages IBehaviorParent Enums BehaviorExecutionStages"
  },
  "api/VRBuilder.Core.Chapter.EntityData.html": {
    "href": "api/VRBuilder.Core.Chapter.EntityData.html",
    "title": "Class Chapter.EntityData | VR Builder Documentation",
    "keywords": "Class Chapter.EntityData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll The chapter's data class. [DataContract(IsReference = true)] public class Chapter.EntityData : EntityCollectionData<IStep>, IChapterData, IEntitySequenceDataWithMode<IStep>, IEntitySequenceData<IStep>, IEntityCollectionData<IStep>, IEntityCollectionData, IEntitySequenceData, IModeData, IRenameableData, INamedData, IData Inheritance object EntityCollectionData<IStep> Chapter.EntityData Implements IChapterData IEntitySequenceDataWithMode<IStep> IEntitySequenceData<IStep> IEntityCollectionData<IStep> IEntityCollectionData IEntitySequenceData IModeData IRenameableData INamedData IData Inherited Members EntityCollectionData<IStep>.Metadata object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Current Current entity in the sequence. [IgnoreDataMember] public IStep Current { get; set; } Property Value IStep FirstStep The first step of the chapter. [DataMember] public IStep FirstStep { get; set; } Property Value IStep Mode public IMode Mode { get; set; } Property Value IMode Name Name of the entity. [DataMember] public string Name { get; set; } Property Value string Steps All steps of the chapter. [DataMember] public IList<IStep> Steps { get; set; } Property Value IList<IStep> Methods GetChildren() public override IEnumerable<IStep> GetChildren() Returns IEnumerable<IStep> SetName(string) Set the new name. public void SetName(string name) Parameters name string"
  },
  "api/VRBuilder.Core.Chapter.html": {
    "href": "api/VRBuilder.Core.Chapter.html",
    "title": "Class Chapter | VR Builder Documentation",
    "keywords": "Class Chapter Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A chapter of a process Process. [DataContract(IsReference = true)] public class Chapter : Entity<Chapter.EntityData>, IDataOwner<Chapter.EntityData>, IChapter, IEntity, IDataOwner<IChapterData>, IDataOwner, IClonable<IChapter> Inheritance object Entity<Chapter.EntityData> Chapter Implements IDataOwner<Chapter.EntityData> IChapter IEntity IDataOwner<IChapterData> IDataOwner IClonable<IChapter> Inherited Members Entity<Chapter.EntityData>.Data Entity<Chapter.EntityData>.LifeCycle Entity<Chapter.EntityData>.Parent Entity<Chapter.EntityData>.GetActiveProcess() Entity<Chapter.EntityData>.Configure(IMode) Entity<Chapter.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Chapter() protected Chapter() Chapter(string, IStep) public Chapter(string name, IStep firstStep) Parameters name string firstStep IStep Properties ChapterMetadata Utility data which is used by VR Builder custom editors. [DataMember] public ChapterMetadata ChapterMetadata { get; set; } Property Value ChapterMetadata Methods Clone() Returns a deep copy of the object. public IChapter Clone() Returns IChapter GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetConfigurator() Override this method if your behavior or condition supports changing between process modes (IMode). By default returns an empty configurator that does nothing. protected override IConfigurator GetConfigurator() Returns IConfigurator GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.ChapterMetadata.html": {
    "href": "api/VRBuilder.Core.ChapterMetadata.html",
    "title": "Class ChapterMetadata | VR Builder Documentation",
    "keywords": "Class ChapterMetadata Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Implementation of IMetadata adapted for IChapter data. [DataContract(IsReference = true)] public class ChapterMetadata : IMetadata Inheritance object ChapterMetadata Implements IMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChapterMetadata() public ChapterMetadata() Properties EntryNodePosition Reference to the entry node's position in the Workflow window. [DataMember] public Vector2 EntryNodePosition { get; set; } Property Value Vector2 Guid Unique identifier for chapter. [DataMember] public Guid Guid { get; set; } Property Value Guid LastSelectedStep Reference to last selected IStep. [DataMember] public IStep LastSelectedStep { get; set; } Property Value IStep ViewTransform Stored position of the view in the graph. [DataMember] public ViewTransform ViewTransform { get; set; } Property Value ViewTransform"
  },
  "api/VRBuilder.Core.CompletableEntity-1.html": {
    "href": "api/VRBuilder.Core.CompletableEntity-1.html",
    "title": "Class CompletableEntity<TData> | VR Builder Documentation",
    "keywords": "Class CompletableEntity<TData> Namespace VRBuilder.Core Assembly VRBuilder.Core.dll An Entity<TData> which can be completed. Entities can be completed only during their Active Stage. public abstract class CompletableEntity<TData> : Entity<TData>, IDataOwner<TData>, IDataOwner, ICompletableEntity, ICompletable, IEntity where TData : class, ICompletableData, new() Type Parameters TData Inheritance object Entity<TData> CompletableEntity<TData> Implements IDataOwner<TData> IDataOwner ICompletableEntity ICompletable IEntity Derived Condition<TData> Transition Inherited Members Entity<TData>.Data Entity<TData>.LifeCycle Entity<TData>.Parent Entity<TData>.GetActivatingProcess() Entity<TData>.GetActiveProcess() Entity<TData>.GetDeactivatingProcess() Entity<TData>.GetConfigurator() Entity<TData>.Configure(IMode) Entity<TData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsCompleted Returns true if entity is completed. public bool IsCompleted { get; } Property Value bool Methods Autocomplete() If the entity is in the Active Stage, it will invoke its Autocompleter and set IsCompleted to true. public void Autocomplete() GetAutocompleter() Override this method to return a custom Autocompleter<TData>. protected virtual IAutocompleter GetAutocompleter() Returns IAutocompleter By default, it returns and empty autocompleter which does nothing."
  },
  "api/VRBuilder.Core.CompositeProcess.html": {
    "href": "api/VRBuilder.Core.CompositeProcess.html",
    "title": "Class CompositeProcess | VR Builder Documentation",
    "keywords": "Class CompositeProcess Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A process which consists of multiple processes which execute at the same time. It ends when all its child processes end. public class CompositeProcess : IStageProcess Inheritance object CompositeProcess Implements IStageProcess Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CompositeProcess(params IStageProcess[]) public CompositeProcess(params IStageProcess[] processes) Parameters processes IStageProcess[] Child processes which are united into this composite process. Methods End() This method is invoked immediately after the Update() was iterated over completely, or after the FastForward() was called. The invocation is guaranteed. Use it for deinitialization. public void End() FastForward() This method is called when the process was not completed yet. It must \"fake\" normal execution of the process and handle the cases when the Update() is not iterated over completely. public void FastForward() Start() This method is invoked immediately when entity enters the stage. The invocation is guaranteed. Use it for initialization. public void Start() Update() This method will be iterated over while the entity is in this stage, one iteration step per frame, starting from the second frame. public IEnumerator Update() Returns IEnumerator"
  },
  "api/VRBuilder.Core.Conditions.BaseActiveProcessOverCompletable-1.html": {
    "href": "api/VRBuilder.Core.Conditions.BaseActiveProcessOverCompletable-1.html",
    "title": "Class BaseActiveProcessOverCompletable<TData> | VR Builder Documentation",
    "keywords": "Class BaseActiveProcessOverCompletable<TData> Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll An abstract class for processes for Active Stage of ICompletableEntity. public abstract class BaseActiveProcessOverCompletable<TData> : StageProcess<TData>, IStageProcess where TData : class, ICompletableData Type Parameters TData Inheritance object StageProcess<TData> BaseActiveProcessOverCompletable<TData> Implements IStageProcess Inherited Members StageProcess<TData>.Data StageProcess<TData>.Outer object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseActiveProcessOverCompletable(TData, IEntity) protected BaseActiveProcessOverCompletable(TData data, IEntity outer = null) Parameters data TData outer IEntity Methods CheckIfCompleted() Implement your custom check in this method. The process will not complete until this method returns true. protected abstract bool CheckIfCompleted() Returns bool End() This method is invoked immediately after the Update() was iterated over completely, or after the FastForward() was called. The invocation is guaranteed. Use it for deinitialization. public override void End() FastForward() This method is called when the process was not completed yet. It must \"fake\" normal execution of the process and handle the cases when the Update() is not iterated over completely. public override void FastForward() Start() This method is invoked immediately when entity enters the stage. The invocation is guaranteed. Use it for initialization. public override void Start() Update() This method will be iterated over while the entity is in this stage, one iteration step per frame, starting from the second frame. public override IEnumerator Update() Returns IEnumerator"
  },
  "api/VRBuilder.Core.Conditions.CompareValuesCondition-1.EntityData.html": {
    "href": "api/VRBuilder.Core.Conditions.CompareValuesCondition-1.EntityData.html",
    "title": "Class CompareValuesCondition<T>.EntityData | VR Builder Documentation",
    "keywords": "Class CompareValuesCondition<T>.EntityData Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll The data for a CompareValuesCondition<T> [DisplayName(\"Compare Values\")] public class CompareValuesCondition<T>.EntityData : IConditionData, ICompletableData, INamedData, IData Inheritance object CompareValuesCondition<T>.EntityData Implements IConditionData ICompletableData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsCompleted public bool IsCompleted { get; set; } Property Value bool IsLeftConst [DataMember] public bool IsLeftConst { get; set; } Property Value bool IsRightConst [DataMember] public bool IsRightConst { get; set; } Property Value bool LeftProperty [DataMember] public SingleScenePropertyReference<IDataProperty<T>> LeftProperty { get; set; } Property Value SingleScenePropertyReference<IDataProperty<T>> LeftValue [DataMember] public T LeftValue { get; set; } Property Value T LeftValueProperty [DataMember] [Obsolete(\"Use LeftProperty instead.\")] [LegacyProperty(\"LeftProperty\")] public ScenePropertyReference<IDataProperty<T>> LeftValueProperty { get; set; } Property Value ScenePropertyReference<IDataProperty<T>> Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Operation [DataMember] public IOperationCommand<T, bool> Operation { get; set; } Property Value IOperationCommand<T, bool> RightProperty [DataMember] public SingleScenePropertyReference<IDataProperty<T>> RightProperty { get; set; } Property Value SingleScenePropertyReference<IDataProperty<T>> RightValue [DataMember] public T RightValue { get; set; } Property Value T RightValueProperty [DataMember] [Obsolete(\"Use RightProperty instead.\")] [LegacyProperty(\"RightProperty\")] public ScenePropertyReference<IDataProperty<T>> RightValueProperty { get; set; } Property Value ScenePropertyReference<IDataProperty<T>>"
  },
  "api/VRBuilder.Core.Conditions.CompareValuesCondition-1.html": {
    "href": "api/VRBuilder.Core.Conditions.CompareValuesCondition-1.html",
    "title": "Class CompareValuesCondition<T> | VR Builder Documentation",
    "keywords": "Class CompareValuesCondition<T> Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll A condition that compares two IDataProperty<T>s and completes when the comparison returns true. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/states-data-add-on\")] public class CompareValuesCondition<T> : Condition<CompareValuesCondition<T>.EntityData>, IDataOwner<CompareValuesCondition<T>.EntityData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider where T : IEquatable<T>, IComparable<T> Type Parameters T Inheritance object Entity<CompareValuesCondition<T>.EntityData> CompletableEntity<CompareValuesCondition<T>.EntityData> Condition<CompareValuesCondition<T>.EntityData> CompareValuesCondition<T> Implements IDataOwner<CompareValuesCondition<T>.EntityData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Inherited Members Condition<CompareValuesCondition<T>.EntityData>.Clone() Condition<CompareValuesCondition<T>.EntityData>.GetLockableProperties() CompletableEntity<CompareValuesCondition<T>.EntityData>.GetAutocompleter() CompletableEntity<CompareValuesCondition<T>.EntityData>.IsCompleted CompletableEntity<CompareValuesCondition<T>.EntityData>.Autocomplete() Entity<CompareValuesCondition<T>.EntityData>.Data Entity<CompareValuesCondition<T>.EntityData>.LifeCycle Entity<CompareValuesCondition<T>.EntityData>.Parent Entity<CompareValuesCondition<T>.EntityData>.GetActivatingProcess() Entity<CompareValuesCondition<T>.EntityData>.GetDeactivatingProcess() Entity<CompareValuesCondition<T>.EntityData>.GetConfigurator() Entity<CompareValuesCondition<T>.EntityData>.Configure(IMode) Entity<CompareValuesCondition<T>.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CompareValuesCondition() [JsonConstructor] [Preserve] public CompareValuesCondition() CompareValuesCondition(Guid, Guid, T, T, bool, bool, IOperationCommand<T, bool>) public CompareValuesCondition(Guid leftPropertyId, Guid rightPropertyId, T leftValue, T rightValue, bool isLeftConst, bool isRightConst, IOperationCommand<T, bool> operation) Parameters leftPropertyId Guid rightPropertyId Guid leftValue T rightValue T isLeftConst bool isRightConst bool operation IOperationCommand<T, bool> CompareValuesCondition(IDataProperty<T>, IDataProperty<T>, T, T, bool, bool, IOperationCommand<T, bool>) public CompareValuesCondition(IDataProperty<T> leftProperty, IDataProperty<T> rightProperty, T leftValue, T rightValue, bool isLeftConst, bool isRightConst, IOperationCommand<T, bool> operation) Parameters leftProperty IDataProperty<T> rightProperty IDataProperty<T> leftValue T rightValue T isLeftConst bool isRightConst bool operation IOperationCommand<T, bool> Methods GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Conditions.Condition-1.html": {
    "href": "api/VRBuilder.Core.Conditions.Condition-1.html",
    "title": "Class Condition<TData> | VR Builder Documentation",
    "keywords": "Class Condition<TData> Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll An implementation of ICondition. Use it as the base class for your custom conditions. [DataContract(IsReference = true)] public abstract class Condition<TData> : CompletableEntity<TData>, IDataOwner<TData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider where TData : class, IConditionData, new() Type Parameters TData Inheritance object Entity<TData> CompletableEntity<TData> Condition<TData> Implements IDataOwner<TData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Derived GrabbedCondition GrabbedObjectWithTagCondition ReleasedCondition SnappedCondition SnappedObjectWithTagCondition TeleportCondition TouchedCondition UsedCondition CompareValuesCondition<T> ObjectInColliderCondition ObjectInRangeCondition TimeoutCondition RandomlySelectedCondition CheckStateCondition Inherited Members CompletableEntity<TData>.GetAutocompleter() CompletableEntity<TData>.IsCompleted CompletableEntity<TData>.Autocomplete() Entity<TData>.Data Entity<TData>.LifeCycle Entity<TData>.Parent Entity<TData>.GetActivatingProcess() Entity<TData>.GetActiveProcess() Entity<TData>.GetDeactivatingProcess() Entity<TData>.GetConfigurator() Entity<TData>.Configure(IMode) Entity<TData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Condition() protected Condition() Methods Clone() Returns a deep copy of the object. public virtual ICondition Clone() Returns ICondition GetLockableProperties() Returns all LockableProperties this provider requires. public virtual IEnumerable<LockablePropertyData> GetLockableProperties() Returns IEnumerable<LockablePropertyData>"
  },
  "api/VRBuilder.Core.Conditions.ICompletableData.html": {
    "href": "api/VRBuilder.Core.Conditions.ICompletableData.html",
    "title": "Interface ICompletableData | VR Builder Documentation",
    "keywords": "Interface ICompletableData Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll public interface ICompletableData : IData Inherited Members IData.Metadata Properties IsCompleted bool IsCompleted { get; set; } Property Value bool"
  },
  "api/VRBuilder.Core.Conditions.ICondition.html": {
    "href": "api/VRBuilder.Core.Conditions.ICondition.html",
    "title": "Interface ICondition | VR Builder Documentation",
    "keywords": "Interface ICondition Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll public interface ICondition : ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition> Inherited Members ICompletable.IsCompleted ICompletable.Autocomplete() IEntity.LifeCycle IEntity.GetActivatingProcess() IEntity.GetActiveProcess() IEntity.GetDeactivatingProcess() IEntity.Configure(IMode) IEntity.Update() IEntity.Parent IDataOwner<IConditionData>.Data IClonable<ICondition>.Clone()"
  },
  "api/VRBuilder.Core.Conditions.IConditionData.html": {
    "href": "api/VRBuilder.Core.Conditions.IConditionData.html",
    "title": "Interface IConditionData | VR Builder Documentation",
    "keywords": "Interface IConditionData Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll The base interface for any condition's data class. public interface IConditionData : ICompletableData, INamedData, IData Inherited Members ICompletableData.IsCompleted INamedData.Name IData.Metadata"
  },
  "api/VRBuilder.Core.Conditions.IObjectInTargetData.html": {
    "href": "api/VRBuilder.Core.Conditions.IObjectInTargetData.html",
    "title": "Interface IObjectInTargetData | VR Builder Documentation",
    "keywords": "Interface IObjectInTargetData Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll The data interface for \"object inside target\" conditions. public interface IObjectInTargetData : IConditionData, ICompletableData, INamedData, IData Inherited Members ICompletableData.IsCompleted INamedData.Name IData.Metadata Properties RequiredTimeInside The delay before the condition will trigger. [DataMember] float RequiredTimeInside { get; set; } Property Value float"
  },
  "api/VRBuilder.Core.Conditions.ObjectInColliderCondition.EntityData.html": {
    "href": "api/VRBuilder.Core.Conditions.ObjectInColliderCondition.EntityData.html",
    "title": "Class ObjectInColliderCondition.EntityData | VR Builder Documentation",
    "keywords": "Class ObjectInColliderCondition.EntityData Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll The \"object in collider\" condition's data. [DisplayName(\"Move Object into Collider\")] [DataContract(IsReference = true)] public class ObjectInColliderCondition.EntityData : IObjectInTargetData, IConditionData, ICompletableData, INamedData, IData Inheritance object ObjectInColliderCondition.EntityData Implements IObjectInTargetData IConditionData ICompletableData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsCompleted public bool IsCompleted { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string RequiredTimeInside The delay before the condition will trigger. [DataMember] [DisplayName(\"Required seconds inside\")] public float RequiredTimeInside { get; set; } Property Value float TargetObject [DataMember] [Obsolete(\"Use TargetObjects instead.\")] [LegacyProperty(\"TargetObjects\")] public SceneObjectReference TargetObject { get; set; } Property Value SceneObjectReference TargetObjects The object that has to enter the collider. [DataMember] [DisplayName(\"Object\")] public MultipleSceneObjectReference TargetObjects { get; set; } Property Value MultipleSceneObjectReference TriggerObject The collider with trigger to enter. [DataMember] [DisplayName(\"Collider\")] public SingleScenePropertyReference<ColliderWithTriggerProperty> TriggerObject { get; set; } Property Value SingleScenePropertyReference<ColliderWithTriggerProperty> TriggerProperty [DataMember] [Obsolete(\"Use TriggerObject instead.\")] [LegacyProperty(\"TriggerObject\")] public ScenePropertyReference<ColliderWithTriggerProperty> TriggerProperty { get; set; } Property Value ScenePropertyReference<ColliderWithTriggerProperty>"
  },
  "api/VRBuilder.Core.Conditions.ObjectInColliderCondition.html": {
    "href": "api/VRBuilder.Core.Conditions.ObjectInColliderCondition.html",
    "title": "Class ObjectInColliderCondition | VR Builder Documentation",
    "keywords": "Class ObjectInColliderCondition Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll Condition which is completed when TargetObject gets inside TriggerProperty's collider. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-conditions/move-object-in-collider\")] public class ObjectInColliderCondition : Condition<ObjectInColliderCondition.EntityData>, IDataOwner<ObjectInColliderCondition.EntityData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider Inheritance object Entity<ObjectInColliderCondition.EntityData> CompletableEntity<ObjectInColliderCondition.EntityData> Condition<ObjectInColliderCondition.EntityData> ObjectInColliderCondition Implements IDataOwner<ObjectInColliderCondition.EntityData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Inherited Members Condition<ObjectInColliderCondition.EntityData>.Clone() Condition<ObjectInColliderCondition.EntityData>.GetLockableProperties() CompletableEntity<ObjectInColliderCondition.EntityData>.IsCompleted CompletableEntity<ObjectInColliderCondition.EntityData>.Autocomplete() Entity<ObjectInColliderCondition.EntityData>.Data Entity<ObjectInColliderCondition.EntityData>.LifeCycle Entity<ObjectInColliderCondition.EntityData>.Parent Entity<ObjectInColliderCondition.EntityData>.GetActivatingProcess() Entity<ObjectInColliderCondition.EntityData>.GetDeactivatingProcess() Entity<ObjectInColliderCondition.EntityData>.GetConfigurator() Entity<ObjectInColliderCondition.EntityData>.Configure(IMode) Entity<ObjectInColliderCondition.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ObjectInColliderCondition() [JsonConstructor] [Preserve] public ObjectInColliderCondition() ObjectInColliderCondition(Guid, Guid, float) public ObjectInColliderCondition(Guid targetPosition, Guid targetObject, float requiredTimeInTarget = 0) Parameters targetPosition Guid targetObject Guid requiredTimeInTarget float ObjectInColliderCondition(string, string, float) [Obsolete(\"This constructor will be removed in the next major version.\")] public ObjectInColliderCondition(string targetPosition, string targetObject, float requiredTimeInTarget = 0) Parameters targetPosition string targetObject string requiredTimeInTarget float ObjectInColliderCondition(ColliderWithTriggerProperty, ISceneObject, float) public ObjectInColliderCondition(ColliderWithTriggerProperty targetPosition, ISceneObject targetObject, float requiredTimeInTarget = 0) Parameters targetPosition ColliderWithTriggerProperty targetObject ISceneObject requiredTimeInTarget float Methods GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetAutocompleter() Override this method to return a custom Autocompleter<TData>. protected override IAutocompleter GetAutocompleter() Returns IAutocompleter By default, it returns and empty autocompleter which does nothing."
  },
  "api/VRBuilder.Core.Conditions.ObjectInRangeCondition.EntityData.html": {
    "href": "api/VRBuilder.Core.Conditions.ObjectInRangeCondition.EntityData.html",
    "title": "Class ObjectInRangeCondition.EntityData | VR Builder Documentation",
    "keywords": "Class ObjectInRangeCondition.EntityData Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll The data of \"object in range\" condition. [DisplayName(\"Object Nearby\")] public class ObjectInRangeCondition.EntityData : IObjectInTargetData, IConditionData, ICompletableData, INamedData, IData Inheritance object ObjectInRangeCondition.EntityData Implements IObjectInTargetData IConditionData ICompletableData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsCompleted public bool IsCompleted { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Range The required distance between two objects to trigger the condition. [DataMember] public float Range { get; set; } Property Value float ReferenceObject The object to measure distance from. [DataMember] [DisplayName(\"Reference object\")] public SingleScenePropertyReference<TransformInRangeDetectorProperty> ReferenceObject { get; set; } Property Value SingleScenePropertyReference<TransformInRangeDetectorProperty> ReferenceProperty [DataMember] [Obsolete(\"Use ReferenceObject instead.\")] [LegacyProperty(\"ReferenceObject\")] public ScenePropertyReference<TransformInRangeDetectorProperty> ReferenceProperty { get; set; } Property Value ScenePropertyReference<TransformInRangeDetectorProperty> RequiredTimeInside The delay before the condition will trigger. [DataMember] [DisplayName(\"Required seconds inside\")] public float RequiredTimeInside { get; set; } Property Value float Target [DataMember] [Obsolete(\"Use TargetObject instead.\")] [LegacyProperty(\"TargetObject\")] public SceneObjectReference Target { get; set; } Property Value SceneObjectReference TargetObject The tracked objects. [DataMember] [DisplayName(\"Tracked object\")] public SingleSceneObjectReference TargetObject { get; set; } Property Value SingleSceneObjectReference"
  },
  "api/VRBuilder.Core.Conditions.ObjectInRangeCondition.html": {
    "href": "api/VRBuilder.Core.Conditions.ObjectInRangeCondition.html",
    "title": "Class ObjectInRangeCondition | VR Builder Documentation",
    "keywords": "Class ObjectInRangeCondition Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll Condition that is completed when distance between Target and TransformInRangeDetector is closer than range units. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-conditions/object-nearby\")] public class ObjectInRangeCondition : Condition<ObjectInRangeCondition.EntityData>, IDataOwner<ObjectInRangeCondition.EntityData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider Inheritance object Entity<ObjectInRangeCondition.EntityData> CompletableEntity<ObjectInRangeCondition.EntityData> Condition<ObjectInRangeCondition.EntityData> ObjectInRangeCondition Implements IDataOwner<ObjectInRangeCondition.EntityData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Inherited Members Condition<ObjectInRangeCondition.EntityData>.Clone() Condition<ObjectInRangeCondition.EntityData>.GetLockableProperties() CompletableEntity<ObjectInRangeCondition.EntityData>.IsCompleted CompletableEntity<ObjectInRangeCondition.EntityData>.Autocomplete() Entity<ObjectInRangeCondition.EntityData>.Data Entity<ObjectInRangeCondition.EntityData>.LifeCycle Entity<ObjectInRangeCondition.EntityData>.Parent Entity<ObjectInRangeCondition.EntityData>.GetActivatingProcess() Entity<ObjectInRangeCondition.EntityData>.GetDeactivatingProcess() Entity<ObjectInRangeCondition.EntityData>.GetConfigurator() Entity<ObjectInRangeCondition.EntityData>.Configure(IMode) Entity<ObjectInRangeCondition.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ObjectInRangeCondition() [JsonConstructor] [Preserve] public ObjectInRangeCondition() ObjectInRangeCondition(Guid, Guid, float, float) public ObjectInRangeCondition(Guid targetId, Guid detector, float range, float requiredTimeInTarget = 0) Parameters targetId Guid detector Guid range float requiredTimeInTarget float ObjectInRangeCondition(ISceneObject, TransformInRangeDetectorProperty, float, float) public ObjectInRangeCondition(ISceneObject target, TransformInRangeDetectorProperty detector, float range, float requiredTimeInTarget = 0) Parameters target ISceneObject detector TransformInRangeDetectorProperty range float requiredTimeInTarget float Methods GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetAutocompleter() Override this method to return a custom Autocompleter<TData>. protected override IAutocompleter GetAutocompleter() Returns IAutocompleter By default, it returns and empty autocompleter which does nothing."
  },
  "api/VRBuilder.Core.Conditions.ObjectInTargetActiveProcess-1.html": {
    "href": "api/VRBuilder.Core.Conditions.ObjectInTargetActiveProcess-1.html",
    "title": "Class ObjectInTargetActiveProcess<TData> | VR Builder Documentation",
    "keywords": "Class ObjectInTargetActiveProcess<TData> Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll An active process for \"object in target\" conditions. public abstract class ObjectInTargetActiveProcess<TData> : StageProcess<TData>, IStageProcess where TData : class, IObjectInTargetData Type Parameters TData Inheritance object StageProcess<TData> ObjectInTargetActiveProcess<TData> Implements IStageProcess Inherited Members StageProcess<TData>.Data StageProcess<TData>.Outer object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ObjectInTargetActiveProcess(TData) protected ObjectInTargetActiveProcess(TData data) Parameters data TData Methods End() This method is invoked immediately after the Update() was iterated over completely, or after the FastForward() was called. The invocation is guaranteed. Use it for deinitialization. public override void End() FastForward() This method is called when the process was not completed yet. It must \"fake\" normal execution of the process and handle the cases when the Update() is not iterated over completely. public override void FastForward() IsInside() Returns true if the object is inside target. protected abstract bool IsInside() Returns bool Start() This method is invoked immediately when entity enters the stage. The invocation is guaranteed. Use it for initialization. public override void Start() Update() This method will be iterated over while the entity is in this stage, one iteration step per frame, starting from the second frame. public override IEnumerator Update() Returns IEnumerator"
  },
  "api/VRBuilder.Core.Conditions.TimeoutCondition.EntityData.html": {
    "href": "api/VRBuilder.Core.Conditions.TimeoutCondition.EntityData.html",
    "title": "Class TimeoutCondition.EntityData | VR Builder Documentation",
    "keywords": "Class TimeoutCondition.EntityData Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll The data for timeout condition. [DisplayName(\"Timeout\")] public class TimeoutCondition.EntityData : IConditionData, ICompletableData, INamedData, IData Inheritance object TimeoutCondition.EntityData Implements IConditionData ICompletableData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsCompleted public bool IsCompleted { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Timeout The delay before the condition completes. [DataMember] [DisplayName(\"Wait (in seconds)\")] public float Timeout { get; set; } Property Value float"
  },
  "api/VRBuilder.Core.Conditions.TimeoutCondition.html": {
    "href": "api/VRBuilder.Core.Conditions.TimeoutCondition.html",
    "title": "Class TimeoutCondition | VR Builder Documentation",
    "keywords": "Class TimeoutCondition Namespace VRBuilder.Core.Conditions Assembly VRBuilder.Core.dll A condition that completes when a certain amount of time has passed. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder/manual/default-conditions/timeout-condition\")] public class TimeoutCondition : Condition<TimeoutCondition.EntityData>, IDataOwner<TimeoutCondition.EntityData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider Inheritance object Entity<TimeoutCondition.EntityData> CompletableEntity<TimeoutCondition.EntityData> Condition<TimeoutCondition.EntityData> TimeoutCondition Implements IDataOwner<TimeoutCondition.EntityData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Inherited Members Condition<TimeoutCondition.EntityData>.Clone() Condition<TimeoutCondition.EntityData>.GetLockableProperties() CompletableEntity<TimeoutCondition.EntityData>.GetAutocompleter() CompletableEntity<TimeoutCondition.EntityData>.IsCompleted CompletableEntity<TimeoutCondition.EntityData>.Autocomplete() Entity<TimeoutCondition.EntityData>.Data Entity<TimeoutCondition.EntityData>.LifeCycle Entity<TimeoutCondition.EntityData>.Parent Entity<TimeoutCondition.EntityData>.GetActivatingProcess() Entity<TimeoutCondition.EntityData>.GetDeactivatingProcess() Entity<TimeoutCondition.EntityData>.GetConfigurator() Entity<TimeoutCondition.EntityData>.Configure(IMode) Entity<TimeoutCondition.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TimeoutCondition() [JsonConstructor] [Preserve] public TimeoutCondition() TimeoutCondition(float) public TimeoutCondition(float timeout) Parameters timeout float Methods GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.Conditions.html": {
    "href": "api/VRBuilder.Core.Conditions.html",
    "title": "Namespace VRBuilder.Core.Conditions | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Conditions Classes BaseActiveProcessOverCompletable<TData> An abstract class for processes for Active Stage of ICompletableEntity. CompareValuesCondition<T> A condition that compares two IDataProperty<T>s and completes when the comparison returns true. CompareValuesCondition<T>.EntityData The data for a CompareValuesCondition<T> Condition<TData> An implementation of ICondition. Use it as the base class for your custom conditions. ObjectInColliderCondition Condition which is completed when TargetObject gets inside TriggerProperty's collider. ObjectInColliderCondition.EntityData The \"object in collider\" condition's data. ObjectInRangeCondition Condition that is completed when distance between Target and TransformInRangeDetector is closer than range units. ObjectInRangeCondition.EntityData The data of \"object in range\" condition. ObjectInTargetActiveProcess<TData> An active process for \"object in target\" conditions. TimeoutCondition A condition that completes when a certain amount of time has passed. TimeoutCondition.EntityData The data for timeout condition. Interfaces ICompletableData ICondition IConditionData The base interface for any condition's data class. IObjectInTargetData The data interface for \"object inside target\" conditions."
  },
  "api/VRBuilder.Core.Configuration.BaseRuntimeConfiguration.html": {
    "href": "api/VRBuilder.Core.Configuration.BaseRuntimeConfiguration.html",
    "title": "Class BaseRuntimeConfiguration | VR Builder Documentation",
    "keywords": "Class BaseRuntimeConfiguration Namespace VRBuilder.Core.Configuration Assembly VRBuilder.Core.dll Base class for your runtime process configuration. Extend it to create your own. public abstract class BaseRuntimeConfiguration Inheritance object BaseRuntimeConfiguration Derived DefaultRuntimeConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseRuntimeConfiguration() protected BaseRuntimeConfiguration() BaseRuntimeConfiguration(StepLockHandlingStrategy) protected BaseRuntimeConfiguration(StepLockHandlingStrategy lockHandling) Parameters lockHandling StepLockHandlingStrategy Properties CustomInputActionAssetPath Custom InputActionAsset path which is used when key bindings are modified. Should be stored in project path. public virtual string CustomInputActionAssetPath { get; } Property Value string DefaultInputActionAssetPath Default input action asset which is used when no customization of key bindings are done. Should be stored inside the VR Builder package. public virtual string DefaultInputActionAssetPath { get; } Property Value string InstructionPlayer public abstract AudioSource InstructionPlayer { get; } Property Value AudioSource LocalUser public abstract UserSceneObject LocalUser { get; } Property Value UserSceneObject ManifestFileName Name of the manifest file that could be used to save process asset information. public static string ManifestFileName { get; } Property Value string Modes public IModeHandler Modes { get; protected set; } Property Value IModeHandler ProcessAudioPlayer public abstract IProcessAudioPlayer ProcessAudioPlayer { get; } Property Value IProcessAudioPlayer SceneConfiguration public virtual ISceneConfiguration SceneConfiguration { get; } Property Value ISceneConfiguration SceneObjectManager public abstract ISceneObjectManager SceneObjectManager { get; } Property Value ISceneObjectManager SceneObjectRegistry public virtual ISceneObjectRegistry SceneObjectRegistry { get; } Property Value ISceneObjectRegistry Serializer public IProcessSerializer Serializer { get; set; } Property Value IProcessSerializer StepLockHandling Determines the property locking strategy used for this runtime configuration. public StepLockHandlingStrategy StepLockHandling { get; set; } Property Value StepLockHandlingStrategy User [Obsolete(\"This property is obsolete and no longer returns a valid value. Use LocalUser instead.\", true)] public abstract ProcessSceneObject User { get; } Property Value ProcessSceneObject Users public abstract IEnumerable<UserSceneObject> Users { get; } Property Value IEnumerable<UserSceneObject> Methods LoadProcess(string) public virtual Task<IProcess> LoadProcess(string path) Parameters path string Returns Task<IProcess>"
  },
  "api/VRBuilder.Core.Configuration.DefaultAudioPlayer.html": {
    "href": "api/VRBuilder.Core.Configuration.DefaultAudioPlayer.html",
    "title": "Class DefaultAudioPlayer | VR Builder Documentation",
    "keywords": "Class DefaultAudioPlayer Namespace VRBuilder.Core.Configuration Assembly VRBuilder.Core.dll Default process audio player. public class DefaultAudioPlayer : IProcessAudioPlayer Inheritance object DefaultAudioPlayer Implements IProcessAudioPlayer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultAudioPlayer() public DefaultAudioPlayer() DefaultAudioPlayer(AudioSource) public DefaultAudioPlayer(AudioSource audioSource) Parameters audioSource AudioSource Properties FallbackAudioSource Gets a fallback audio source. Used only for backwards compatibility. public AudioSource FallbackAudioSource { get; } Property Value AudioSource IsPlaying True if currently playing audio. public bool IsPlaying { get; } Property Value bool Methods PlayAudio(IAudioData, float, float) Play the specified audio immediately with the set parameters. public void PlayAudio(IAudioData audioData, float volume = 1, float pitch = 1) Parameters audioData IAudioData volume float pitch float Reset() Resets the player to its default settings. public void Reset() Stop() Stops playing audio. public void Stop()"
  },
  "api/VRBuilder.Core.Configuration.DefaultRuntimeConfiguration.html": {
    "href": "api/VRBuilder.Core.Configuration.DefaultRuntimeConfiguration.html",
    "title": "Class DefaultRuntimeConfiguration | VR Builder Documentation",
    "keywords": "Class DefaultRuntimeConfiguration Namespace VRBuilder.Core.Configuration Assembly VRBuilder.Core.dll Process runtime configuration which is used if no other was implemented. public class DefaultRuntimeConfiguration : BaseRuntimeConfiguration Inheritance object BaseRuntimeConfiguration DefaultRuntimeConfiguration Inherited Members BaseRuntimeConfiguration.ManifestFileName BaseRuntimeConfiguration.SceneObjectRegistry BaseRuntimeConfiguration.Serializer BaseRuntimeConfiguration.DefaultInputActionAssetPath BaseRuntimeConfiguration.CustomInputActionAssetPath BaseRuntimeConfiguration.Modes BaseRuntimeConfiguration.StepLockHandling BaseRuntimeConfiguration.SceneConfiguration BaseRuntimeConfiguration.LoadProcess(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultRuntimeConfiguration() public DefaultRuntimeConfiguration() Fields DefaultMode Default mode which white lists everything. public static readonly IMode DefaultMode Field Value IMode Properties InstructionPlayer public override AudioSource InstructionPlayer { get; } Property Value AudioSource LocalUser public override UserSceneObject LocalUser { get; } Property Value UserSceneObject ProcessAudioPlayer public override IProcessAudioPlayer ProcessAudioPlayer { get; } Property Value IProcessAudioPlayer SceneObjectManager public override ISceneObjectManager SceneObjectManager { get; } Property Value ISceneObjectManager User public override ProcessSceneObject User { get; } Property Value ProcessSceneObject Users public override IEnumerable<UserSceneObject> Users { get; } Property Value IEnumerable<UserSceneObject>"
  },
  "api/VRBuilder.Core.Configuration.DefaultSceneObjectManager.html": {
    "href": "api/VRBuilder.Core.Configuration.DefaultSceneObjectManager.html",
    "title": "Class DefaultSceneObjectManager | VR Builder Documentation",
    "keywords": "Class DefaultSceneObjectManager Namespace VRBuilder.Core.Configuration Assembly VRBuilder.Core.dll Default single-user implementation of ISceneObjectManager. public class DefaultSceneObjectManager : ISceneObjectManager Inheritance object DefaultSceneObjectManager Implements ISceneObjectManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods InstantiatePrefab(GameObject, Vector3, Quaternion) Instantiates the specified prefab. public GameObject InstantiatePrefab(GameObject prefab, Vector3 position, Quaternion rotation) Parameters prefab GameObject position Vector3 rotation Quaternion Returns GameObject RequestAuthority(ISceneObject) Requests authority on the specified scene object. public void RequestAuthority(ISceneObject sceneObject) Parameters sceneObject ISceneObject SetComponentActive(ISceneObject, string, bool) Sets all components of a given type on a specified scene object enabled or disabled. public void SetComponentActive(ISceneObject sceneObject, string componentTypeName, bool isActive) Parameters sceneObject ISceneObject componentTypeName string isActive bool SetSceneObjectActive(ISceneObject, bool) Set the specified scene object enabled or disabled. public void SetSceneObjectActive(ISceneObject sceneObject, bool isActive) Parameters sceneObject ISceneObject isActive bool"
  },
  "api/VRBuilder.Core.Configuration.IInteractionComponentConfiguration.html": {
    "href": "api/VRBuilder.Core.Configuration.IInteractionComponentConfiguration.html",
    "title": "Interface IInteractionComponentConfiguration | VR Builder Documentation",
    "keywords": "Interface IInteractionComponentConfiguration Namespace VRBuilder.Core.Configuration Assembly VRBuilder.Core.dll Should be implemented by every interaction component in order to qualify as such. public interface IInteractionComponentConfiguration Properties DefaultRigPrefab Name of the prefab to be spawned as user rig. string DefaultRigPrefab { get; } Property Value string DisplayName Display name of the interaction component. string DisplayName { get; } Property Value string IsXRInteractionComponent True if the interaction component is meant to work with XR. bool IsXRInteractionComponent { get; } Property Value bool"
  },
  "api/VRBuilder.Core.Configuration.IProcessAudioPlayer.html": {
    "href": "api/VRBuilder.Core.Configuration.IProcessAudioPlayer.html",
    "title": "Interface IProcessAudioPlayer | VR Builder Documentation",
    "keywords": "Interface IProcessAudioPlayer Namespace VRBuilder.Core.Configuration Assembly VRBuilder.Core.dll Interface for the class playing sounds for the process, i.e. tts and play audio behaviors. public interface IProcessAudioPlayer Properties FallbackAudioSource Gets a fallback audio source. Used only for backwards compatibility. AudioSource FallbackAudioSource { get; } Property Value AudioSource IsPlaying True if currently playing audio. bool IsPlaying { get; } Property Value bool Methods PlayAudio(IAudioData, float, float) Play the specified audio immediately with the set parameters. void PlayAudio(IAudioData audioData, float volume = 1, float pitch = 1) Parameters audioData IAudioData volume float pitch float Reset() Resets the player to its default settings. void Reset() Stop() Stops playing audio. void Stop()"
  },
  "api/VRBuilder.Core.Configuration.ISceneConfiguration.html": {
    "href": "api/VRBuilder.Core.Configuration.ISceneConfiguration.html",
    "title": "Interface ISceneConfiguration | VR Builder Documentation",
    "keywords": "Interface ISceneConfiguration Namespace VRBuilder.Core.Configuration Assembly VRBuilder.Core.dll Handles configuration specific to this scene. public interface ISceneConfiguration Properties DefaultConfettiPrefab Default resources prefab to use for Confetti behavior. string DefaultConfettiPrefab { get; } Property Value string ExtensionAssembliesWhitelist Lists all assemblies whose property extensions will be used in the current scene. IEnumerable<string> ExtensionAssembliesWhitelist { get; } Property Value IEnumerable<string> Methods IsAllowedInAssembly(Type, string) True if the specified type is not in an exclusion list for the specified assembly. bool IsAllowedInAssembly(Type extensionType, string assemblyName) Parameters extensionType Type assemblyName string Returns bool"
  },
  "api/VRBuilder.Core.Configuration.ISceneObjectManager.html": {
    "href": "api/VRBuilder.Core.Configuration.ISceneObjectManager.html",
    "title": "Interface ISceneObjectManager | VR Builder Documentation",
    "keywords": "Interface ISceneObjectManager Namespace VRBuilder.Core.Configuration Assembly VRBuilder.Core.dll Object that handles scene object operations, e.g. enabling/disabling them. public interface ISceneObjectManager Methods InstantiatePrefab(GameObject, Vector3, Quaternion) Instantiates the specified prefab. GameObject InstantiatePrefab(GameObject prefab, Vector3 position, Quaternion rotation) Parameters prefab GameObject position Vector3 rotation Quaternion Returns GameObject RequestAuthority(ISceneObject) Requests authority on the specified scene object. void RequestAuthority(ISceneObject sceneObject) Parameters sceneObject ISceneObject SetComponentActive(ISceneObject, string, bool) Sets all components of a given type on a specified scene object enabled or disabled. void SetComponentActive(ISceneObject sceneObject, string componentTypeName, bool isActive) Parameters sceneObject ISceneObject componentTypeName string isActive bool SetSceneObjectActive(ISceneObject, bool) Set the specified scene object enabled or disabled. void SetSceneObjectActive(ISceneObject sceneObject, bool isActive) Parameters sceneObject ISceneObject isActive bool"
  },
  "api/VRBuilder.Core.Configuration.Modes.BaseModeHandler.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.BaseModeHandler.html",
    "title": "Class BaseModeHandler | VR Builder Documentation",
    "keywords": "Class BaseModeHandler Namespace VRBuilder.Core.Configuration.Modes Assembly VRBuilder.Core.dll Simple ModeHandler. public sealed class BaseModeHandler : IModeHandler Inheritance object BaseModeHandler Implements IModeHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BaseModeHandler(List<IMode>, int) public BaseModeHandler(List<IMode> modes, int defaultMode = 0) Parameters modes List<IMode> defaultMode int Properties AvailableModes The ordered collection of all available process modes. public ReadOnlyCollection<IMode> AvailableModes { get; } Property Value ReadOnlyCollection<IMode> CurrentMode The current process mode. public IMode CurrentMode { get; } Property Value IMode CurrentModeIndex The index of the current process mode. public int CurrentModeIndex { get; } Property Value int Methods SetMode(int) Set the current process mode. public void SetMode(int index) Parameters index int The index of the desired process mode. SetMode(IMode) Set the current process mode, this process mode has to be one of the available modes. public void SetMode(IMode mode) Parameters mode IMode The desired process mode which should be set. Events ModeChanged The event that has to be invoked when the current mode changes, for example in SetMode(int) method. public event EventHandler<ModeChangedEventArgs> ModeChanged Event Type EventHandler<ModeChangedEventArgs>"
  },
  "api/VRBuilder.Core.Configuration.Modes.BlacklistTypeRule-1.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.BlacklistTypeRule-1.html",
    "title": "Class BlacklistTypeRule<TBase> | VR Builder Documentation",
    "keywords": "Class BlacklistTypeRule<TBase> Namespace VRBuilder.Core.Configuration.Modes Assembly VRBuilder.Core.dll All listed types will be invalid. public class BlacklistTypeRule<TBase> : ListTypeRule<BlacklistTypeRule<TBase>, TBase>, IRule<Type> Type Parameters TBase Type which can be filtered. Inheritance object TypeRule<TBase> ListTypeRule<BlacklistTypeRule<TBase>, TBase> BlacklistTypeRule<TBase> Implements IRule<Type> Inherited Members ListTypeRule<BlacklistTypeRule<TBase>, TBase>.StoredTypes ListTypeRule<BlacklistTypeRule<TBase>, TBase>.Add<T>() ListTypeRule<BlacklistTypeRule<TBase>, TBase>.Clone() TypeRule<TBase>.IsQualifiedBy<T>() TypeRule<TBase>.IsQualifiedBy(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsQualifiedByPredicate(Type) Actual check of a given type. It is guaranteed that type inherits the protected override bool IsQualifiedByPredicate(Type type) Parameters type Type Returns bool"
  },
  "api/VRBuilder.Core.Configuration.Modes.IConfigurator.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.IConfigurator.html",
    "title": "Interface IConfigurator | VR Builder Documentation",
    "keywords": "Interface IConfigurator Namespace VRBuilder.Core.Configuration.Modes Assembly VRBuilder.Core.dll An interface for entities' configurators. public interface IConfigurator Methods Configure(IMode, Stage) void Configure(IMode mode, Stage stage) Parameters mode IMode stage Stage"
  },
  "api/VRBuilder.Core.Configuration.Modes.IMode.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.IMode.html",
    "title": "Interface IMode | VR Builder Documentation",
    "keywords": "Interface IMode Namespace VRBuilder.Core.Configuration.Modes Assembly VRBuilder.Core.dll The interface of a process mode. A process mode determines if an entity has to be skipped and provides configurable entities with parameters. public interface IMode Properties Name The name of this process mode. string Name { get; } Property Value string Methods CheckIfSkipped(Type) Returns whether the given type should be skipped in this process mode. bool CheckIfSkipped(Type type) Parameters type Type The type to check. Returns bool CheckIfSkipped<TOptional>() Returns whether the given IOptional type should be skipped in this process mode. bool CheckIfSkipped<TOptional>() where TOptional : IOptional Returns bool Type Parameters TOptional ContainsParameter<T>(string) Checks if given key exists. bool ContainsParameter<T>(string key) Parameters key string Name of the key Returns bool Type Parameters T GetParameter<T>(string) Provides a specific parameter for this mode. T GetParameter<T>(string key) Parameters key string Name of the parameter. Returns T The value for the given key Type Parameters T Type this parameter should be."
  },
  "api/VRBuilder.Core.Configuration.Modes.IModeData.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.IModeData.html",
    "title": "Interface IModeData | VR Builder Documentation",
    "keywords": "Interface IModeData Namespace VRBuilder.Core.Configuration.Modes Assembly VRBuilder.Core.dll public interface IModeData : IData Inherited Members IData.Metadata Properties Mode IMode Mode { get; set; } Property Value IMode"
  },
  "api/VRBuilder.Core.Configuration.Modes.IModeHandler.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.IModeHandler.html",
    "title": "Interface IModeHandler | VR Builder Documentation",
    "keywords": "Interface IModeHandler Namespace VRBuilder.Core.Configuration.Modes Assembly VRBuilder.Core.dll Interface for the ModeHandler used to configure modes during runtime. public interface IModeHandler Properties AvailableModes The ordered collection of all available process modes. ReadOnlyCollection<IMode> AvailableModes { get; } Property Value ReadOnlyCollection<IMode> CurrentMode The current process mode. IMode CurrentMode { get; } Property Value IMode CurrentModeIndex The index of the current process mode. int CurrentModeIndex { get; } Property Value int Methods SetMode(int) Set the current process mode. void SetMode(int index) Parameters index int The index of the desired process mode. SetMode(IMode) Set the current process mode, this process mode has to be one of the available modes. void SetMode(IMode mode) Parameters mode IMode The desired process mode which should be set. Events ModeChanged The event that has to be invoked when the current mode changes, for example in SetMode(int) method. event EventHandler<ModeChangedEventArgs> ModeChanged Event Type EventHandler<ModeChangedEventArgs>"
  },
  "api/VRBuilder.Core.Configuration.Modes.IOptional.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.IOptional.html",
    "title": "Interface IOptional | VR Builder Documentation",
    "keywords": "Interface IOptional Namespace VRBuilder.Core.Configuration.Modes Assembly VRBuilder.Core.dll An interface that indicates that it would make sense to skip this IEntity via IMode. Makes it possible to include it to a list of entities to skip that is defined in a IMode. public interface IOptional : IEntity Inherited Members IEntity.LifeCycle IEntity.GetActivatingProcess() IEntity.GetActiveProcess() IEntity.GetDeactivatingProcess() IEntity.Configure(IMode) IEntity.Update() IEntity.Parent"
  },
  "api/VRBuilder.Core.Configuration.Modes.IRule-1.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.IRule-1.html",
    "title": "Interface IRule<T> | VR Builder Documentation",
    "keywords": "Interface IRule<T> Namespace VRBuilder.Core.Configuration.Modes Assembly VRBuilder.Core.dll Very generic interface which allows to implement a rule similar to Linq.Where or SQL Filter. public interface IRule<T> Type Parameters T Methods IsQualifiedBy(T) Checks a given value and returns true if this value qualifies the rule. bool IsQualifiedBy(T value) Parameters value T The type which is checked. Returns bool"
  },
  "api/VRBuilder.Core.Configuration.Modes.ListTypeRule-2.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.ListTypeRule-2.html",
    "title": "Class ListTypeRule<TRecursive, TValueBase> | VR Builder Documentation",
    "keywords": "Class ListTypeRule<TRecursive, TValueBase> Namespace VRBuilder.Core.Configuration.Modes Assembly VRBuilder.Core.dll Base class for list-based implementations of the TypeRule<TValueBase> class. public abstract class ListTypeRule<TRecursive, TValueBase> : TypeRule<TValueBase>, IRule<Type> where TRecursive : ListTypeRule<TRecursive, TValueBase>, new() Type Parameters TRecursive TValueBase Inheritance object TypeRule<TValueBase> ListTypeRule<TRecursive, TValueBase> Implements IRule<Type> Derived BlacklistTypeRule<TBase> WhitelistTypeRule<TBase> Inherited Members TypeRule<TValueBase>.IsQualifiedBy<T>() TypeRule<TValueBase>.IsQualifiedBy(Type) TypeRule<TValueBase>.IsQualifiedByPredicate(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties StoredTypes protected HashSet<Type> StoredTypes { get; } Property Value HashSet<Type> Methods Add<T>() Adds an additional Type to the list and returns a changed instance of this rule. public TRecursive Add<T>() where T : TValueBase Returns TRecursive Type Parameters T Type which is added. Clone() protected virtual TRecursive Clone() Returns TRecursive"
  },
  "api/VRBuilder.Core.Configuration.Modes.Mode.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.Mode.html",
    "title": "Class Mode | VR Builder Documentation",
    "keywords": "Class Mode Namespace VRBuilder.Core.Configuration.Modes Assembly VRBuilder.Core.dll A process mode that is defined by its name, IConfigurables activation policy and a collection of parameters. Immutable. public sealed class Mode : IMode Inheritance object Mode Implements IMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Mode(string, TypeRule<IOptional>, Dictionary<string, object>) public Mode(string name, TypeRule<IOptional> entitiesToSkip, Dictionary<string, object> parameters = null) Parameters name string Name of the process mode. entitiesToSkip TypeRule<IOptional> A type rule which determines if an IOptional has to be skipped, depending on its type. parameters Dictionary<string, object> A string-to-object dictionary of process mode parameters. Properties Name The name of this process mode. public string Name { get; } Property Value string Methods CheckIfSkipped(Type) Returns whether the given type should be skipped in this process mode. public bool CheckIfSkipped(Type type) Parameters type Type The type to check. Returns bool CheckIfSkipped<TSkippable>() Returns whether the given IOptional type should be skipped in this process mode. public bool CheckIfSkipped<TSkippable>() where TSkippable : IOptional Returns bool Type Parameters TSkippable ContainsParameter<TValue>(string) Checks if given key exists. public bool ContainsParameter<TValue>(string key) Parameters key string Name of the key Returns bool Type Parameters TValue GetParameter<TValue>(string) Provides a specific parameter for this mode. public TValue GetParameter<TValue>(string key) Parameters key string Name of the parameter. Returns TValue The value for the given key Type Parameters TValue"
  },
  "api/VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs.html",
    "title": "Class ModeChangedEventArgs | VR Builder Documentation",
    "keywords": "Class ModeChangedEventArgs Namespace VRBuilder.Core.Configuration.Modes Assembly VRBuilder.Core.dll This is a EventArgs used for IMode changes. If you want so see more about EventArgs, please visit: https://docs.microsoft.com/en-us/dotnet/standard/events/ public class ModeChangedEventArgs : EventArgs Inheritance object EventArgs ModeChangedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModeChangedEventArgs(IMode) public ModeChangedEventArgs(IMode mode) Parameters mode IMode Properties Mode The newly activated IMode. public IMode Mode { get; } Property Value IMode"
  },
  "api/VRBuilder.Core.Configuration.Modes.ModeParameter-1.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.ModeParameter-1.html",
    "title": "Class ModeParameter<T> | VR Builder Documentation",
    "keywords": "Class ModeParameter<T> Namespace VRBuilder.Core.Configuration.Modes Assembly VRBuilder.Core.dll ModeParameter is responsible for fetching its parameter value from a IMode. If the value changes while being configured, an event will be triggered. public class ModeParameter<T> Type Parameters T Inheritance object ModeParameter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModeParameter(string, T) public ModeParameter(string key, T defaultValue = default) Parameters key string defaultValue T Fields ParameterModified public EventHandler<EventArgs> ParameterModified Field Value EventHandler<EventArgs> Properties IsModified Is true when the current value is different to the default value. public bool IsModified { get; } Property Value bool Value Returns the current value, if set and different to the default value it will invoke a ParameterModified event. public T Value { get; set; } Property Value T Methods Configure(IMode) Configures this parameter with the given mode. public void Configure(IMode mode) Parameters mode IMode Reset() Resets the parameter, will triggered modified if the value changes. public void Reset()"
  },
  "api/VRBuilder.Core.Configuration.Modes.TypeRule-1.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.TypeRule-1.html",
    "title": "Class TypeRule<TValueBase> | VR Builder Documentation",
    "keywords": "Class TypeRule<TValueBase> Namespace VRBuilder.Core.Configuration.Modes Assembly VRBuilder.Core.dll An IRule<T> for types. public abstract class TypeRule<TValueBase> : IRule<Type> Type Parameters TValueBase A type from which all input types have to be inherited from. Inheritance object TypeRule<TValueBase> Implements IRule<Type> Derived ListTypeRule<TRecursive, TValueBase> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsQualifiedBy(Type) Checks a given value and returns true if this value qualifies the rule. public bool IsQualifiedBy(Type type) Parameters type Type Returns bool IsQualifiedByPredicate(Type) Actual check of a given type. It is guaranteed that type inherits the protected abstract bool IsQualifiedByPredicate(Type type) Parameters type Type Returns bool IsQualifiedBy<T>() Generic version of IsQualifiedBy(Type). public bool IsQualifiedBy<T>() where T : TValueBase Returns bool Type Parameters T"
  },
  "api/VRBuilder.Core.Configuration.Modes.WhitelistTypeRule-1.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.WhitelistTypeRule-1.html",
    "title": "Class WhitelistTypeRule<TBase> | VR Builder Documentation",
    "keywords": "Class WhitelistTypeRule<TBase> Namespace VRBuilder.Core.Configuration.Modes Assembly VRBuilder.Core.dll All listed types will be valid. public class WhitelistTypeRule<TBase> : ListTypeRule<WhitelistTypeRule<TBase>, TBase>, IRule<Type> Type Parameters TBase Type which can be filtered. Inheritance object TypeRule<TBase> ListTypeRule<WhitelistTypeRule<TBase>, TBase> WhitelistTypeRule<TBase> Implements IRule<Type> Inherited Members ListTypeRule<WhitelistTypeRule<TBase>, TBase>.StoredTypes ListTypeRule<WhitelistTypeRule<TBase>, TBase>.Add<T>() ListTypeRule<WhitelistTypeRule<TBase>, TBase>.Clone() TypeRule<TBase>.IsQualifiedBy<T>() TypeRule<TBase>.IsQualifiedBy(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsQualifiedByPredicate(Type) Actual check of a given type. It is guaranteed that type inherits the protected override bool IsQualifiedByPredicate(Type type) Parameters type Type Returns bool"
  },
  "api/VRBuilder.Core.Configuration.Modes.html": {
    "href": "api/VRBuilder.Core.Configuration.Modes.html",
    "title": "Namespace VRBuilder.Core.Configuration.Modes | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Configuration.Modes Classes BaseModeHandler Simple ModeHandler. BlacklistTypeRule<TBase> All listed types will be invalid. ListTypeRule<TRecursive, TValueBase> Base class for list-based implementations of the TypeRule<TValueBase> class. Mode A process mode that is defined by its name, IConfigurables activation policy and a collection of parameters. Immutable. ModeChangedEventArgs This is a EventArgs used for IMode changes. If you want so see more about EventArgs, please visit: https://docs.microsoft.com/en-us/dotnet/standard/events/ ModeParameter<T> ModeParameter is responsible for fetching its parameter value from a IMode. If the value changes while being configured, an event will be triggered. TypeRule<TValueBase> An IRule<T> for types. WhitelistTypeRule<TBase> All listed types will be valid. Interfaces IConfigurator An interface for entities' configurators. IMode The interface of a process mode. A process mode determines if an entity has to be skipped and provides configurable entities with parameters. IModeData IModeHandler Interface for the ModeHandler used to configure modes during runtime. IOptional An interface that indicates that it would make sense to skip this IEntity via IMode. Makes it possible to include it to a list of entities to skip that is defined in a IMode. IRule<T> Very generic interface which allows to implement a rule similar to Linq.Where or SQL Filter."
  },
  "api/VRBuilder.Core.Configuration.PropertyExtensionExclusionList.html": {
    "href": "api/VRBuilder.Core.Configuration.PropertyExtensionExclusionList.html",
    "title": "Class PropertyExtensionExclusionList | VR Builder Documentation",
    "keywords": "Class PropertyExtensionExclusionList Namespace VRBuilder.Core.Configuration Assembly VRBuilder.Core.dll public class PropertyExtensionExclusionList : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour PropertyExtensionExclusionList Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties AssemblyFullName Full name of the assembly we want to exclude the types from. public string AssemblyFullName { get; } Property Value string DisallowedExtensionTypes List of excluded extension types. public IEnumerable<Type> DisallowedExtensionTypes { get; } Property Value IEnumerable<Type>"
  },
  "api/VRBuilder.Core.Configuration.RuntimeConfigurator.html": {
    "href": "api/VRBuilder.Core.Configuration.RuntimeConfigurator.html",
    "title": "Class RuntimeConfigurator | VR Builder Documentation",
    "keywords": "Class RuntimeConfigurator Namespace VRBuilder.Core.Configuration Assembly VRBuilder.Core.dll Configurator to set the process runtime configuration which is used by a process during its execution. There has to be one and only one process runtime configurator game object per scene. public sealed class RuntimeConfigurator : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour RuntimeConfigurator Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Configuration Shortcut to get the IRuntimeConfiguration of the instance. public static BaseRuntimeConfiguration Configuration { get; set; } Property Value BaseRuntimeConfiguration Exists Checks if a process runtime configurator exists in the scene. public static bool Exists { get; } Property Value bool true if an instance of the runtime configurator exists; otherwise, false. Instance Gets the current instance of the RuntimeConfigurator. public static RuntimeConfigurator Instance { get; } Property Value RuntimeConfigurator Exceptions NullReferenceException Thrown if there is no RuntimeConfigurator added to the scene. Methods GetProcessStringLocalizationTable() Returns the string localization table for the selected process. public string GetProcessStringLocalizationTable() Returns string The string localization table for the selected process. GetRuntimeConfigurationName() Returns the assembly qualified name of the runtime configuration. public string GetRuntimeConfigurationName() Returns string The assembly qualified name of the runtime configuration. GetSelectedProcess() Returns the path to the selected process. public string GetSelectedProcess() Returns string The path to the selected process. IsExisting(bool) Checks if an instance of the runtime configurator exists. If instance is not set it tries to set it by calling LookUpRuntimeConfiguratorGameObject. public static bool IsExisting(bool forceNewLookup = false) Parameters forceNewLookup bool If set to true, forces a new lookup for the instance. Returns bool true if an instance of the runtime configurator exists; otherwise, false. SetRuntimeConfigurationName(string) Sets the runtime configuration name, expects an assembly qualified name. public void SetRuntimeConfigurationName(string configurationName) Parameters configurationName string The assembly qualified name of the runtime configuration. SetSelectedProcess(string) Sets the path to the selected process. public void SetSelectedProcess(string path) Parameters path string The path to the selected process. Events ModeChanged The event that fires when a process mode or runtime configuration changes. public static event EventHandler<ModeChangedEventArgs> ModeChanged Event Type EventHandler<ModeChangedEventArgs> RuntimeConfigurationChanged The event that fires when a process runtime configuration changes. public static event EventHandler<EventArgs> RuntimeConfigurationChanged Event Type EventHandler<EventArgs>"
  },
  "api/VRBuilder.Core.Configuration.SceneConfiguration.html": {
    "href": "api/VRBuilder.Core.Configuration.SceneConfiguration.html",
    "title": "Class SceneConfiguration | VR Builder Documentation",
    "keywords": "Class SceneConfiguration Namespace VRBuilder.Core.Configuration Assembly VRBuilder.Core.dll Handles configuration specific to this scene. public class SceneConfiguration : MonoBehaviour, ISceneConfiguration Inheritance object Object Component Behaviour MonoBehaviour SceneConfiguration Implements ISceneConfiguration Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties DefaultConfettiPrefab Default resources prefab to use for Confetti behavior. public string DefaultConfettiPrefab { get; set; } Property Value string ExtensionAssembliesWhitelist Lists all assemblies whose property extensions will be used in the current scene. public IEnumerable<string> ExtensionAssembliesWhitelist { get; } Property Value IEnumerable<string> Methods AddWhitelistAssemblies(IEnumerable<string>) Adds the specified assembly names to the extension whitelist. public void AddWhitelistAssemblies(IEnumerable<string> assemblyNames) Parameters assemblyNames IEnumerable<string> IsAllowedInAssembly(Type, string) True if the specified type is not in an exclusion list for the specified assembly. public bool IsAllowedInAssembly(Type extensionType, string assemblyName) Parameters extensionType Type assemblyName string Returns bool"
  },
  "api/VRBuilder.Core.Configuration.html": {
    "href": "api/VRBuilder.Core.Configuration.html",
    "title": "Namespace VRBuilder.Core.Configuration | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Configuration Classes BaseRuntimeConfiguration Base class for your runtime process configuration. Extend it to create your own. DefaultAudioPlayer Default process audio player. DefaultRuntimeConfiguration Process runtime configuration which is used if no other was implemented. DefaultSceneObjectManager Default single-user implementation of ISceneObjectManager. PropertyExtensionExclusionList RuntimeConfigurator Configurator to set the process runtime configuration which is used by a process during its execution. There has to be one and only one process runtime configurator game object per scene. SceneConfiguration Handles configuration specific to this scene. Interfaces IInteractionComponentConfiguration Should be implemented by every interaction component in order to qualify as such. IProcessAudioPlayer Interface for the class playing sounds for the process, i.e. tts and play audio behaviors. ISceneConfiguration Handles configuration specific to this scene. ISceneObjectManager Object that handles scene object operations, e.g. enabling/disabling them."
  },
  "api/VRBuilder.Core.Configurator-1.html": {
    "href": "api/VRBuilder.Core.Configurator-1.html",
    "title": "Class Configurator<TData> | VR Builder Documentation",
    "keywords": "Class Configurator<TData> Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A base class for entities' configurators which have access to their entities' data. public abstract class Configurator<TData> : IConfigurator where TData : IData Type Parameters TData Inheritance object Configurator<TData> Implements IConfigurator Derived FoldedLifeCycleConfigurator<TEntity> ParallelConfigurator<TEntity> SequenceConfigurator<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Configurator(TData) protected Configurator(TData data) Parameters data TData Properties Data The data to configure. protected TData Data { get; } Property Value TData Methods Configure(IMode, Stage) public abstract void Configure(IMode mode, Stage stage) Parameters mode IMode stage Stage"
  },
  "api/VRBuilder.Core.EmptyAutocompleter.html": {
    "href": "api/VRBuilder.Core.EmptyAutocompleter.html",
    "title": "Class EmptyAutocompleter | VR Builder Documentation",
    "keywords": "Class EmptyAutocompleter Namespace VRBuilder.Core Assembly VRBuilder.Core.dll An autocompleter that does nothing. public class EmptyAutocompleter : IAutocompleter Inheritance object EmptyAutocompleter Implements IAutocompleter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Complete() A custom logic to \"fake\" natural completion of an entity. public void Complete()"
  },
  "api/VRBuilder.Core.EmptyConfigurator.html": {
    "href": "api/VRBuilder.Core.EmptyConfigurator.html",
    "title": "Class EmptyConfigurator | VR Builder Documentation",
    "keywords": "Class EmptyConfigurator Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A configurator that does nothing. public class EmptyConfigurator : IConfigurator Inheritance object EmptyConfigurator Implements IConfigurator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(IMode, Stage) public void Configure(IMode mode, Stage stage) Parameters mode IMode stage Stage"
  },
  "api/VRBuilder.Core.EmptyProcess.html": {
    "href": "api/VRBuilder.Core.EmptyProcess.html",
    "title": "Class EmptyProcess | VR Builder Documentation",
    "keywords": "Class EmptyProcess Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A stage process that does nothing. public sealed class EmptyProcess : IStageProcess Inheritance object EmptyProcess Implements IStageProcess Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods End() This method is invoked immediately after the Update() was iterated over completely, or after the FastForward() was called. The invocation is guaranteed. Use it for deinitialization. public void End() FastForward() This method is called when the process was not completed yet. It must \"fake\" normal execution of the process and handle the cases when the Update() is not iterated over completely. public void FastForward() Start() This method is invoked immediately when entity enters the stage. The invocation is guaranteed. Use it for initialization. public void Start() Update() This method will be iterated over while the entity is in this stage, one iteration step per frame, starting from the second frame. public IEnumerator Update() Returns IEnumerator"
  },
  "api/VRBuilder.Core.EndChapterPostProcessing.html": {
    "href": "api/VRBuilder.Core.EndChapterPostProcessing.html",
    "title": "Class EndChapterPostProcessing | VR Builder Documentation",
    "keywords": "Class EndChapterPostProcessing Namespace VRBuilder.Core Assembly VRBuilder.Editor.dll IStep implementation of EntityPostProcessing<T> specific for \"endChapter\" steps. public class EndChapterPostProcessing : EntityPostProcessing<IStep> Inheritance object EntityPostProcessing<IStep> EndChapterPostProcessing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(IStep) Executes post processing. public override void Execute(IStep entity) Parameters entity IStep IEntity reference for post processing."
  },
  "api/VRBuilder.Core.Entity-1.html": {
    "href": "api/VRBuilder.Core.Entity-1.html",
    "title": "Class Entity<TData> | VR Builder Documentation",
    "keywords": "Class Entity<TData> Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Abstract helper class that can be used for instances that implement IEntity. Provides implementation of the events and properties, and also offers member functions to trigger state changes. [DataContract(IsReference = true)] public abstract class Entity<TData> : IEntity, IDataOwner<TData>, IDataOwner where TData : class, IData, new() Type Parameters TData Inheritance object Entity<TData> Implements IEntity IDataOwner<TData> IDataOwner Derived BehaviorCollection Behavior<TData> Chapter CompletableEntity<TData> Process Step TransitionCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Entity() protected Entity() Properties Data Abstract data. [DataMember] public TData Data { get; } Property Value TData LifeCycle The entity's life cycle. [IgnoreDataMember] public ILifeCycle LifeCycle { get; } Property Value ILifeCycle Parent Entity parent to this entity. [IgnoreDataMember] public IEntity Parent { get; set; } Property Value IEntity Methods Configure(IMode) Configures the entity according to the given mode. public virtual void Configure(IMode mode) Parameters mode IMode GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public virtual IStageProcess GetActivatingProcess() Returns IStageProcess GetActiveProcess() Returns a new instance of a process for the Active Stage. public virtual IStageProcess GetActiveProcess() Returns IStageProcess GetConfigurator() Override this method if your behavior or condition supports changing between process modes (IMode). By default returns an empty configurator that does nothing. protected virtual IConfigurator GetConfigurator() Returns IConfigurator GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public virtual IStageProcess GetDeactivatingProcess() Returns IStageProcess Update() Called every frame during the Unity's update. public void Update()"
  },
  "api/VRBuilder.Core.EntityFactory.html": {
    "href": "api/VRBuilder.Core.EntityFactory.html",
    "title": "Class EntityFactory | VR Builder Documentation",
    "keywords": "Class EntityFactory Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Base factory interface for IEntity objects. public static class EntityFactory Inheritance object EntityFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateChapter(string) Creates a new IChapter with given name and, if there is any valid PostProcessEntity<T>(IEntity), executes corresponding post processing. public static IChapter CreateChapter(string name) Parameters name string Returns IChapter CreateProcess(string) Creates a new IProcess with given name and, if there is any valid PostProcessEntity<T>(IEntity), executes corresponding post processing. public static IProcess CreateProcess(string name) Parameters name string Returns IProcess CreateStep(string, Vector2, string) Creates a new IStep with given name, position and, if there is any valid PostProcessEntity<T>(IEntity), executes corresponding post processing. public static IStep CreateStep(string name, Vector2 position = default, string stepType = \"default\") Parameters name string position Vector2 stepType string Returns IStep CreateTransition() Creates a new ITransition and, if there is any valid PostProcessEntity<T>(IEntity), executes corresponding post processing. public static ITransition CreateTransition() Returns ITransition"
  },
  "api/VRBuilder.Core.EntityOwners.EntityCollectionData-1.html": {
    "href": "api/VRBuilder.Core.EntityOwners.EntityCollectionData-1.html",
    "title": "Class EntityCollectionData<TEntity> | VR Builder Documentation",
    "keywords": "Class EntityCollectionData<TEntity> Namespace VRBuilder.Core.EntityOwners Assembly VRBuilder.Core.dll A base class for data classes that are collections of other entities. public abstract class EntityCollectionData<TEntity> : IEntityCollectionData<TEntity>, IEntityCollectionData, IData where TEntity : IEntity Type Parameters TEntity Inheritance object EntityCollectionData<TEntity> Implements IEntityCollectionData<TEntity> IEntityCollectionData IData Derived BehaviorCollection.EntityData BehaviorSequence.EntityData ExecuteChapterBehavior.EntityData ExecuteChaptersBehavior.EntityData Chapter.EntityData Process.EntityData Step.EntityData Transition.EntityData TransitionCollection.EntityData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Methods GetChildren() public abstract IEnumerable<TEntity> GetChildren() Returns IEnumerable<TEntity>"
  },
  "api/VRBuilder.Core.EntityOwners.EntityIteratingProcess-2.html": {
    "href": "api/VRBuilder.Core.EntityOwners.EntityIteratingProcess-2.html",
    "title": "Class EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity> | VR Builder Documentation",
    "keywords": "Class EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity> Namespace VRBuilder.Core.EntityOwners Assembly VRBuilder.Core.dll A process that activates and deactivates entities one after another. public abstract class EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity> : StageProcess<TEntitySequenceDataWithMode>, IStageProcess where TEntitySequenceDataWithMode : class, IEntitySequenceDataWithMode<TEntity> where TEntity : IEntity Type Parameters TEntitySequenceDataWithMode TEntity Inheritance object StageProcess<TEntitySequenceDataWithMode> EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity> Implements IStageProcess Inherited Members StageProcess<TEntitySequenceDataWithMode>.Data StageProcess<TEntitySequenceDataWithMode>.Outer object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntityIteratingProcess(TEntitySequenceDataWithMode) protected EntityIteratingProcess(TEntitySequenceDataWithMode data) Parameters data TEntitySequenceDataWithMode Methods End() This method is invoked immediately after the Update() was iterated over completely, or after the FastForward() was called. The invocation is guaranteed. Use it for deinitialization. public override void End() FastForward() This method is called when the process was not completed yet. It must \"fake\" normal execution of the process and handle the cases when the Update() is not iterated over completely. public override void FastForward() ShouldActivateCurrent() Returns true if the current entity has to be activated. protected abstract bool ShouldActivateCurrent() Returns bool ShouldDeactivateCurrent() Returns true if the current entity has to be deactivated. protected abstract bool ShouldDeactivateCurrent() Returns bool Start() This method is invoked immediately when entity enters the stage. The invocation is guaranteed. Use it for initialization. public override void Start() TryNext(out TEntity) Try to get next child entity. protected abstract bool TryNext(out TEntity entity) Parameters entity TEntity Returns bool Update() This method will be iterated over while the entity is in this stage, one iteration step per frame, starting from the second frame. public override IEnumerator Update() Returns IEnumerator"
  },
  "api/VRBuilder.Core.EntityOwners.FoldedLifeCycleConfigurator-1.html": {
    "href": "api/VRBuilder.Core.EntityOwners.FoldedLifeCycleConfigurator-1.html",
    "title": "Class FoldedLifeCycleConfigurator<TEntity> | VR Builder Documentation",
    "keywords": "Class FoldedLifeCycleConfigurator<TEntity> Namespace VRBuilder.Core.EntityOwners Assembly VRBuilder.Core.dll A configurator for a sequence of entities. public class FoldedLifeCycleConfigurator<TEntity> : Configurator<IEntitySequenceData<TEntity>>, IConfigurator where TEntity : IEntity Type Parameters TEntity Inheritance object Configurator<IEntitySequenceData<TEntity>> FoldedLifeCycleConfigurator<TEntity> Implements IConfigurator Inherited Members Configurator<IEntitySequenceData<TEntity>>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FoldedLifeCycleConfigurator(IEntitySequenceData<TEntity>) public FoldedLifeCycleConfigurator(IEntitySequenceData<TEntity> data) Parameters data IEntitySequenceData<TEntity> Methods Configure(IMode, Stage) public override void Configure(IMode mode, Stage stage) Parameters mode IMode stage Stage"
  },
  "api/VRBuilder.Core.EntityOwners.IEntityCollectionData-1.html": {
    "href": "api/VRBuilder.Core.EntityOwners.IEntityCollectionData-1.html",
    "title": "Interface IEntityCollectionData<TEntity> | VR Builder Documentation",
    "keywords": "Interface IEntityCollectionData<TEntity> Namespace VRBuilder.Core.EntityOwners Assembly VRBuilder.Core.dll A generic version of IEntityCollectionData public interface IEntityCollectionData<out TEntity> : IEntityCollectionData, IData where TEntity : IEntity Type Parameters TEntity Inherited Members IData.Metadata Methods GetChildren() IEnumerable<out TEntity> GetChildren() Returns IEnumerable<TEntity>"
  },
  "api/VRBuilder.Core.EntityOwners.IEntityCollectionData.html": {
    "href": "api/VRBuilder.Core.EntityOwners.IEntityCollectionData.html",
    "title": "Interface IEntityCollectionData | VR Builder Documentation",
    "keywords": "Interface IEntityCollectionData Namespace VRBuilder.Core.EntityOwners Assembly VRBuilder.Core.dll An entity's data which represents a collection of other entities. public interface IEntityCollectionData : IData Inherited Members IData.Metadata Methods GetChildren() IEnumerable<IEntity> GetChildren() Returns IEnumerable<IEntity>"
  },
  "api/VRBuilder.Core.EntityOwners.IEntityCollectionDataWithMode-1.html": {
    "href": "api/VRBuilder.Core.EntityOwners.IEntityCollectionDataWithMode-1.html",
    "title": "Interface IEntityCollectionDataWithMode<TEntity> | VR Builder Documentation",
    "keywords": "Interface IEntityCollectionDataWithMode<TEntity> Namespace VRBuilder.Core.EntityOwners Assembly VRBuilder.Core.dll A generic version of IEntityCollectionDataWithMode public interface IEntityCollectionDataWithMode<out TEntity> : IEntityCollectionData<TEntity>, IEntityCollectionDataWithMode, IEntityCollectionData, IModeData, IData where TEntity : IEntity Type Parameters TEntity Inherited Members IEntityCollectionData<TEntity>.GetChildren() IModeData.Mode IData.Metadata"
  },
  "api/VRBuilder.Core.EntityOwners.IEntityCollectionDataWithMode.html": {
    "href": "api/VRBuilder.Core.EntityOwners.IEntityCollectionDataWithMode.html",
    "title": "Interface IEntityCollectionDataWithMode | VR Builder Documentation",
    "keywords": "Interface IEntityCollectionDataWithMode Namespace VRBuilder.Core.EntityOwners Assembly VRBuilder.Core.dll A composition interface of IEntityCollectionData and IModeData. public interface IEntityCollectionDataWithMode : IEntityCollectionData, IModeData, IData Inherited Members IEntityCollectionData.GetChildren() IModeData.Mode IData.Metadata"
  },
  "api/VRBuilder.Core.EntityOwners.IEntityNonLinearSequenceDataWithMode-1.html": {
    "href": "api/VRBuilder.Core.EntityOwners.IEntityNonLinearSequenceDataWithMode-1.html",
    "title": "Interface IEntityNonLinearSequenceDataWithMode<TEntity> | VR Builder Documentation",
    "keywords": "Interface IEntityNonLinearSequenceDataWithMode<TEntity> Namespace VRBuilder.Core.EntityOwners Assembly VRBuilder.Core.dll Sequence data which allow specifying the next element in the sequence. public interface IEntityNonLinearSequenceDataWithMode<TEntity> : IEntitySequenceDataWithMode<TEntity>, IEntitySequenceData<TEntity>, IEntityCollectionData<TEntity>, IEntityCollectionData, IEntitySequenceData, IModeData, IData where TEntity : IEntity Type Parameters TEntity Inherited Members IEntitySequenceData<TEntity>.Current IEntityCollectionData<TEntity>.GetChildren() IModeData.Mode IData.Metadata Properties OverrideNext If not null, overrides the next entity in the sequence. TEntity OverrideNext { get; set; } Property Value TEntity"
  },
  "api/VRBuilder.Core.EntityOwners.IEntitySequenceData-1.html": {
    "href": "api/VRBuilder.Core.EntityOwners.IEntitySequenceData-1.html",
    "title": "Interface IEntitySequenceData<TEntity> | VR Builder Documentation",
    "keywords": "Interface IEntitySequenceData<TEntity> Namespace VRBuilder.Core.EntityOwners Assembly VRBuilder.Core.dll public interface IEntitySequenceData<TEntity> : IEntityCollectionData<TEntity>, IEntityCollectionData, IEntitySequenceData, IData where TEntity : IEntity Type Parameters TEntity Inherited Members IEntityCollectionData<TEntity>.GetChildren() IData.Metadata Properties Current Current entity in the sequence. TEntity Current { get; set; } Property Value TEntity"
  },
  "api/VRBuilder.Core.EntityOwners.IEntitySequenceData.html": {
    "href": "api/VRBuilder.Core.EntityOwners.IEntitySequenceData.html",
    "title": "Interface IEntitySequenceData | VR Builder Documentation",
    "keywords": "Interface IEntitySequenceData Namespace VRBuilder.Core.EntityOwners Assembly VRBuilder.Core.dll public interface IEntitySequenceData : IData Inherited Members IData.Metadata Properties Current Current entity in the sequence. IEntity Current { get; } Property Value IEntity"
  },
  "api/VRBuilder.Core.EntityOwners.IEntitySequenceDataWithMode-1.html": {
    "href": "api/VRBuilder.Core.EntityOwners.IEntitySequenceDataWithMode-1.html",
    "title": "Interface IEntitySequenceDataWithMode<TEntity> | VR Builder Documentation",
    "keywords": "Interface IEntitySequenceDataWithMode<TEntity> Namespace VRBuilder.Core.EntityOwners Assembly VRBuilder.Core.dll An IEntitySequenceData<TEntity> with IModeData. public interface IEntitySequenceDataWithMode<TEntity> : IEntitySequenceData<TEntity>, IEntityCollectionData<TEntity>, IEntityCollectionData, IEntitySequenceData, IModeData, IData where TEntity : IEntity Type Parameters TEntity Inherited Members IEntitySequenceData<TEntity>.Current IEntityCollectionData<TEntity>.GetChildren() IModeData.Mode IData.Metadata"
  },
  "api/VRBuilder.Core.EntityOwners.ParallelConfigurator-1.html": {
    "href": "api/VRBuilder.Core.EntityOwners.ParallelConfigurator-1.html",
    "title": "Class ParallelConfigurator<TEntity> | VR Builder Documentation",
    "keywords": "Class ParallelConfigurator<TEntity> Namespace VRBuilder.Core.EntityOwners Assembly VRBuilder.Core.dll A configurator for a collection of entities. public class ParallelConfigurator<TEntity> : Configurator<IEntityCollectionDataWithMode<TEntity>>, IConfigurator where TEntity : IEntity Type Parameters TEntity Inheritance object Configurator<IEntityCollectionDataWithMode<TEntity>> ParallelConfigurator<TEntity> Implements IConfigurator Inherited Members Configurator<IEntityCollectionDataWithMode<TEntity>>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ParallelConfigurator(IEntityCollectionDataWithMode<TEntity>) public ParallelConfigurator(IEntityCollectionDataWithMode<TEntity> data) Parameters data IEntityCollectionDataWithMode<TEntity> Methods Configure(IMode, Stage) public override void Configure(IMode mode, Stage stage) Parameters mode IMode stage Stage"
  },
  "api/VRBuilder.Core.EntityOwners.SequenceConfigurator-1.html": {
    "href": "api/VRBuilder.Core.EntityOwners.SequenceConfigurator-1.html",
    "title": "Class SequenceConfigurator<TEntity> | VR Builder Documentation",
    "keywords": "Class SequenceConfigurator<TEntity> Namespace VRBuilder.Core.EntityOwners Assembly VRBuilder.Core.dll A configurator for a sequence of entities. public class SequenceConfigurator<TEntity> : Configurator<IEntitySequenceData<TEntity>>, IConfigurator where TEntity : IEntity Type Parameters TEntity Inheritance object Configurator<IEntitySequenceData<TEntity>> SequenceConfigurator<TEntity> Implements IConfigurator Inherited Members Configurator<IEntitySequenceData<TEntity>>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SequenceConfigurator(IEntitySequenceData<TEntity>) public SequenceConfigurator(IEntitySequenceData<TEntity> data) Parameters data IEntitySequenceData<TEntity> Methods Configure(IMode, Stage) public override void Configure(IMode mode, Stage stage) Parameters mode IMode stage Stage"
  },
  "api/VRBuilder.Core.EntityOwners.StopEntityIteratingProcess-1.html": {
    "href": "api/VRBuilder.Core.EntityOwners.StopEntityIteratingProcess-1.html",
    "title": "Class StopEntityIteratingProcess<TEntity> | VR Builder Documentation",
    "keywords": "Class StopEntityIteratingProcess<TEntity> Namespace VRBuilder.Core.EntityOwners Assembly VRBuilder.Core.dll A process that stops activation of a current entity in the entity sequence. public class StopEntityIteratingProcess<TEntity> : StageProcess<IEntitySequenceData<TEntity>>, IStageProcess where TEntity : IEntity Type Parameters TEntity Inheritance object StageProcess<IEntitySequenceData<TEntity>> StopEntityIteratingProcess<TEntity> Implements IStageProcess Inherited Members StageProcess<IEntitySequenceData<TEntity>>.Data StageProcess<IEntitySequenceData<TEntity>>.Outer object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StopEntityIteratingProcess(IEntitySequenceData<TEntity>) public StopEntityIteratingProcess(IEntitySequenceData<TEntity> data) Parameters data IEntitySequenceData<TEntity> Methods End() This method is invoked immediately after the Update() was iterated over completely, or after the FastForward() was called. The invocation is guaranteed. Use it for deinitialization. public override void End() FastForward() This method is called when the process was not completed yet. It must \"fake\" normal execution of the process and handle the cases when the Update() is not iterated over completely. public override void FastForward() Start() This method is invoked immediately when entity enters the stage. The invocation is guaranteed. Use it for initialization. public override void Start() Update() This method will be iterated over while the entity is in this stage, one iteration step per frame, starting from the second frame. public override IEnumerator Update() Returns IEnumerator"
  },
  "api/VRBuilder.Core.EntityOwners.html": {
    "href": "api/VRBuilder.Core.EntityOwners.html",
    "title": "Namespace VRBuilder.Core.EntityOwners | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.EntityOwners Classes EntityCollectionData<TEntity> A base class for data classes that are collections of other entities. EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity> A process that activates and deactivates entities one after another. FoldedLifeCycleConfigurator<TEntity> A configurator for a sequence of entities. ParallelConfigurator<TEntity> A configurator for a collection of entities. SequenceConfigurator<TEntity> A configurator for a sequence of entities. StopEntityIteratingProcess<TEntity> A process that stops activation of a current entity in the entity sequence. Interfaces IEntityCollectionData An entity's data which represents a collection of other entities. IEntityCollectionDataWithMode A composition interface of IEntityCollectionData and IModeData. IEntityCollectionDataWithMode<TEntity> A generic version of IEntityCollectionDataWithMode IEntityCollectionData<TEntity> A generic version of IEntityCollectionData IEntityNonLinearSequenceDataWithMode<TEntity> Sequence data which allow specifying the next element in the sequence. IEntitySequenceData IEntitySequenceDataWithMode<TEntity> An IEntitySequenceData<TEntity> with IModeData. IEntitySequenceData<TEntity>"
  },
  "api/VRBuilder.Core.EntityPostProcessing-1.html": {
    "href": "api/VRBuilder.Core.EntityPostProcessing-1.html",
    "title": "Class EntityPostProcessing<T> | VR Builder Documentation",
    "keywords": "Class EntityPostProcessing<T> Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Base class for implementing post processing after a IEntity creation. public abstract class EntityPostProcessing<T> where T : IEntity Type Parameters T Type of IEntity. Inheritance object EntityPostProcessing<T> Derived EndChapterPostProcessing ParallelExecutionPostProcessing RandomBranchPostProcessing StepGroupPostProcessing StepPostProcessing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(T) Executes post processing. public abstract void Execute(T entity) Parameters entity T IEntity reference for post processing."
  },
  "api/VRBuilder.Core.Exceptions.AlreadyRegisteredException.html": {
    "href": "api/VRBuilder.Core.Exceptions.AlreadyRegisteredException.html",
    "title": "Class AlreadyRegisteredException | VR Builder Documentation",
    "keywords": "Class AlreadyRegisteredException Namespace VRBuilder.Core.Exceptions Assembly VRBuilder.Core.dll [Obsolete(\"This exception is not used anymore and will be removed in the next major version.\")] public class AlreadyRegisteredException : ProcessException, _Exception, ISerializable Inheritance object Exception ProcessException AlreadyRegisteredException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AlreadyRegisteredException(ISceneObject) public AlreadyRegisteredException(ISceneObject obj) Parameters obj ISceneObject"
  },
  "api/VRBuilder.Core.Exceptions.InvalidStateException.html": {
    "href": "api/VRBuilder.Core.Exceptions.InvalidStateException.html",
    "title": "Class InvalidStateException | VR Builder Documentation",
    "keywords": "Class InvalidStateException Namespace VRBuilder.Core.Exceptions Assembly VRBuilder.Core.dll public class InvalidStateException : ProcessException, _Exception, ISerializable Inheritance object Exception ProcessException InvalidStateException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidStateException(string) public InvalidStateException(string message) Parameters message string"
  },
  "api/VRBuilder.Core.Exceptions.MissingEntityException.html": {
    "href": "api/VRBuilder.Core.Exceptions.MissingEntityException.html",
    "title": "Class MissingEntityException | VR Builder Documentation",
    "keywords": "Class MissingEntityException Namespace VRBuilder.Core.Exceptions Assembly VRBuilder.Core.dll public class MissingEntityException : ProcessException, _Exception, ISerializable Inheritance object Exception ProcessException MissingEntityException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MissingEntityException(string) public MissingEntityException(string message) Parameters message string"
  },
  "api/VRBuilder.Core.Exceptions.MissingModeException.html": {
    "href": "api/VRBuilder.Core.Exceptions.MissingModeException.html",
    "title": "Class MissingModeException | VR Builder Documentation",
    "keywords": "Class MissingModeException Namespace VRBuilder.Core.Exceptions Assembly VRBuilder.Core.dll public class MissingModeException : ProcessException, _Exception, ISerializable Inheritance object Exception ProcessException MissingModeException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MissingModeException() public MissingModeException() MissingModeException(string) public MissingModeException(string message) Parameters message string MissingModeException(string, Exception) public MissingModeException(string message, Exception inner) Parameters message string inner Exception"
  },
  "api/VRBuilder.Core.Exceptions.NameNotUniqueException.html": {
    "href": "api/VRBuilder.Core.Exceptions.NameNotUniqueException.html",
    "title": "Class NameNotUniqueException | VR Builder Documentation",
    "keywords": "Class NameNotUniqueException Namespace VRBuilder.Core.Exceptions Assembly VRBuilder.Core.dll [Obsolete(\"This exception is no longer used and will be removed in the next major version.\")] public class NameNotUniqueException : ProcessException, _Exception, ISerializable Inheritance object Exception ProcessException NameNotUniqueException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NameNotUniqueException(ISceneObject) public NameNotUniqueException(ISceneObject entity) Parameters entity ISceneObject"
  },
  "api/VRBuilder.Core.Exceptions.ProcessException.html": {
    "href": "api/VRBuilder.Core.Exceptions.ProcessException.html",
    "title": "Class ProcessException | VR Builder Documentation",
    "keywords": "Class ProcessException Namespace VRBuilder.Core.Exceptions Assembly VRBuilder.Core.dll public class ProcessException : Exception, _Exception, ISerializable Inheritance object Exception ProcessException Implements _Exception ISerializable Derived AlreadyRegisteredException InvalidStateException MissingEntityException MissingModeException NameNotUniqueException PropertyNotFoundException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ProcessException() public ProcessException() ProcessException(string) public ProcessException(string message) Parameters message string ProcessException(string, Exception) public ProcessException(string message, Exception inner) Parameters message string inner Exception"
  },
  "api/VRBuilder.Core.Exceptions.PropertyNotFoundException.html": {
    "href": "api/VRBuilder.Core.Exceptions.PropertyNotFoundException.html",
    "title": "Class PropertyNotFoundException | VR Builder Documentation",
    "keywords": "Class PropertyNotFoundException Namespace VRBuilder.Core.Exceptions Assembly VRBuilder.Core.dll public class PropertyNotFoundException : ProcessException, _Exception, ISerializable Inheritance object Exception ProcessException PropertyNotFoundException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PropertyNotFoundException(string) public PropertyNotFoundException(string message) Parameters message string PropertyNotFoundException(ISceneObject, Type) public PropertyNotFoundException(ISceneObject sourceObject, Type missingType) Parameters sourceObject ISceneObject missingType Type"
  },
  "api/VRBuilder.Core.Exceptions.html": {
    "href": "api/VRBuilder.Core.Exceptions.html",
    "title": "Namespace VRBuilder.Core.Exceptions | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Exceptions Classes AlreadyRegisteredException InvalidStateException MissingEntityException MissingModeException NameNotUniqueException ProcessException PropertyNotFoundException"
  },
  "api/VRBuilder.Core.FastForwardProcessEventArgs.html": {
    "href": "api/VRBuilder.Core.FastForwardProcessEventArgs.html",
    "title": "Class FastForwardProcessEventArgs | VR Builder Documentation",
    "keywords": "Class FastForwardProcessEventArgs Namespace VRBuilder.Core Assembly VRBuilder.Core.dll EventArgs for fast forward process events. public class FastForwardProcessEventArgs : ProcessEventArgs Inheritance object EventArgs ProcessEventArgs FastForwardProcessEventArgs Inherited Members ProcessEventArgs.Process ProcessEventArgs.Chapter ProcessEventArgs.Step EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FastForwardProcessEventArgs(ITransition, IProcess) public FastForwardProcessEventArgs(ITransition transition, IProcess process) Parameters transition ITransition process IProcess Fields CompletedTransition Completed transition public readonly ITransition CompletedTransition Field Value ITransition"
  },
  "api/VRBuilder.Core.IAutocompleter.html": {
    "href": "api/VRBuilder.Core.IAutocompleter.html",
    "title": "Interface IAutocompleter | VR Builder Documentation",
    "keywords": "Interface IAutocompleter Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A base interface for an autocompleter. Autocompleters are used alongside fast-forwarding of the processes. They must fake circumstances under which conditions should complete if fast-forwarding requires it. public interface IAutocompleter Methods Complete() A custom logic to \"fake\" natural completion of an entity. void Complete()"
  },
  "api/VRBuilder.Core.IBehaviorCollection.html": {
    "href": "api/VRBuilder.Core.IBehaviorCollection.html",
    "title": "Interface IBehaviorCollection | VR Builder Documentation",
    "keywords": "Interface IBehaviorCollection Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A collection of IBehaviors of a IStep. public interface IBehaviorCollection : IStepChild, IEntity, IDataOwner<IBehaviorCollectionData>, IDataOwner, IClonable<IBehaviorCollection> Inherited Members IEntity.LifeCycle IEntity.GetActivatingProcess() IEntity.GetActiveProcess() IEntity.GetDeactivatingProcess() IEntity.Configure(IMode) IEntity.Update() IEntity.Parent IDataOwner<IBehaviorCollectionData>.Data IClonable<IBehaviorCollection>.Clone()"
  },
  "api/VRBuilder.Core.IBehaviorCollectionData.html": {
    "href": "api/VRBuilder.Core.IBehaviorCollectionData.html",
    "title": "Interface IBehaviorCollectionData | VR Builder Documentation",
    "keywords": "Interface IBehaviorCollectionData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A data that contains a list of IBehaviors. public interface IBehaviorCollectionData : IEntityCollectionDataWithMode<IBehavior>, IEntityCollectionData<IBehavior>, IEntityCollectionDataWithMode, IEntityCollectionData, IModeData, IData Inherited Members IEntityCollectionData<IBehavior>.GetChildren() IModeData.Mode IData.Metadata Properties Behaviors A list of IBehaviors. IList<IBehavior> Behaviors { get; set; } Property Value IList<IBehavior>"
  },
  "api/VRBuilder.Core.IChapter.html": {
    "href": "api/VRBuilder.Core.IChapter.html",
    "title": "Interface IChapter | VR Builder Documentation",
    "keywords": "Interface IChapter Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A chapter is a high-level grouping of several ISteps. public interface IChapter : IEntity, IDataOwner<IChapterData>, IDataOwner, IClonable<IChapter> Inherited Members IEntity.LifeCycle IEntity.GetActivatingProcess() IEntity.GetActiveProcess() IEntity.GetDeactivatingProcess() IEntity.Configure(IMode) IEntity.Update() IEntity.Parent IDataOwner<IChapterData>.Data IClonable<IChapter>.Clone() Properties ChapterMetadata Utility data which is used by VR Builder custom editors. ChapterMetadata ChapterMetadata { get; } Property Value ChapterMetadata"
  },
  "api/VRBuilder.Core.IChapterData.html": {
    "href": "api/VRBuilder.Core.IChapterData.html",
    "title": "Interface IChapterData | VR Builder Documentation",
    "keywords": "Interface IChapterData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll The IChapter's data interface. public interface IChapterData : IEntitySequenceDataWithMode<IStep>, IEntitySequenceData<IStep>, IEntityCollectionData<IStep>, IEntityCollectionData, IEntitySequenceData, IModeData, IRenameableData, INamedData, IData Inherited Members IEntitySequenceData<IStep>.Current IEntityCollectionData<IStep>.GetChildren() IModeData.Mode IRenameableData.SetName(string) INamedData.Name IData.Metadata Properties FirstStep The IStep from which the chapter starts. IStep FirstStep { get; set; } Property Value IStep Steps The list of all ISteps in the chapter. IList<IStep> Steps { get; set; } Property Value IList<IStep>"
  },
  "api/VRBuilder.Core.IClonable-1.html": {
    "href": "api/VRBuilder.Core.IClonable-1.html",
    "title": "Interface IClonable<T> | VR Builder Documentation",
    "keywords": "Interface IClonable<T> Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Interface for objects that can be duplicated. public interface IClonable<T> Type Parameters T Methods Clone() Returns a deep copy of the object. T Clone() Returns T"
  },
  "api/VRBuilder.Core.ICompletable.html": {
    "href": "api/VRBuilder.Core.ICompletable.html",
    "title": "Interface ICompletable | VR Builder Documentation",
    "keywords": "Interface ICompletable Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Base interface for objects which can be completed. public interface ICompletable Properties IsCompleted True if this instance is already completed. bool IsCompleted { get; } Property Value bool Methods Autocomplete() Forces this instance's completion. void Autocomplete()"
  },
  "api/VRBuilder.Core.ICompletableEntity.html": {
    "href": "api/VRBuilder.Core.ICompletableEntity.html",
    "title": "Interface ICompletableEntity | VR Builder Documentation",
    "keywords": "Interface ICompletableEntity Namespace VRBuilder.Core Assembly VRBuilder.Core.dll An IEntity which can be completed. public interface ICompletableEntity : ICompletable, IEntity Inherited Members ICompletable.IsCompleted ICompletable.Autocomplete() IEntity.LifeCycle IEntity.GetActivatingProcess() IEntity.GetActiveProcess() IEntity.GetDeactivatingProcess() IEntity.Configure(IMode) IEntity.Update() IEntity.Parent"
  },
  "api/VRBuilder.Core.IData.html": {
    "href": "api/VRBuilder.Core.IData.html",
    "title": "Interface IData | VR Builder Documentation",
    "keywords": "Interface IData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Abstract data structure. public interface IData Properties Metadata Reference to this object's IMetadata. [DataMember] Metadata Metadata { get; set; } Property Value Metadata"
  },
  "api/VRBuilder.Core.IDataOwner-1.html": {
    "href": "api/VRBuilder.Core.IDataOwner-1.html",
    "title": "Interface IDataOwner<TData> | VR Builder Documentation",
    "keywords": "Interface IDataOwner<TData> Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Abstract holder of data. public interface IDataOwner<out TData> : IDataOwner Type Parameters TData Properties Data Abstract data. [DataMember] TData Data { get; } Property Value TData"
  },
  "api/VRBuilder.Core.IDataOwner.html": {
    "href": "api/VRBuilder.Core.IDataOwner.html",
    "title": "Interface IDataOwner | VR Builder Documentation",
    "keywords": "Interface IDataOwner Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Abstract holder of data. public interface IDataOwner Properties Data Abstract data. IData Data { get; } Property Value IData"
  },
  "api/VRBuilder.Core.IDescribable.html": {
    "href": "api/VRBuilder.Core.IDescribable.html",
    "title": "Interface IDescribable | VR Builder Documentation",
    "keywords": "Interface IDescribable Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Interface for all process entities that have a description. public interface IDescribable Properties Description Description of this process entity. string Description { get; set; } Property Value string"
  },
  "api/VRBuilder.Core.IDescribedData.html": {
    "href": "api/VRBuilder.Core.IDescribedData.html",
    "title": "Interface IDescribedData | VR Builder Documentation",
    "keywords": "Interface IDescribedData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Data structure with an IStep's description. public interface IDescribedData : IData Inherited Members IData.Metadata Properties Description IStep's description. string Description { get; set; } Property Value string"
  },
  "api/VRBuilder.Core.IEntity.html": {
    "href": "api/VRBuilder.Core.IEntity.html",
    "title": "Interface IEntity | VR Builder Documentation",
    "keywords": "Interface IEntity Namespace VRBuilder.Core Assembly VRBuilder.Core.dll The basic interface for all components of a process: behaviors, conditions, transitions, and so on. Do not implement this interface directly. Use Behaviors.Behavior or Conditions.Condition abstract classes instead. public interface IEntity Properties LifeCycle The entity's life cycle. ILifeCycle LifeCycle { get; } Property Value ILifeCycle Parent Entity parent to this entity. IEntity Parent { get; set; } Property Value IEntity Methods Configure(IMode) Configures the entity according to the given mode. void Configure(IMode mode) Parameters mode IMode GetActivatingProcess() Returns a new instance of a process for the Activating Stage. IStageProcess GetActivatingProcess() Returns IStageProcess GetActiveProcess() Returns a new instance of a process for the Active Stage. IStageProcess GetActiveProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. IStageProcess GetDeactivatingProcess() Returns IStageProcess Update() Called every frame during the Unity's update. void Update()"
  },
  "api/VRBuilder.Core.ILifeCycle.html": {
    "href": "api/VRBuilder.Core.ILifeCycle.html",
    "title": "Interface ILifeCycle | VR Builder Documentation",
    "keywords": "Interface ILifeCycle Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A life cycle of an entity. It handles transition between four stages: Inactive, Activating, Active, and Deactivating. public interface ILifeCycle Properties Stage The current stage. Stage Stage { get; } Property Value Stage Methods Activate() Enters Activating stage if was deactivating. void Activate() Deactivate() Enters Deactivating stage if was Active. If was Activating, will start deactivating as soon as it enters Active stage. void Deactivate() MarkToFastForward() Marks all stages to fast-forward until it reaches Inactive stage. void MarkToFastForward() MarkToFastForwardStage(Stage) Marks the given stage to fast-forward. void MarkToFastForwardStage(Stage stage) Parameters stage Stage Update() This method should be called every frame. void Update() Events StageChanged An event which is fired when the current stage changes. event EventHandler<ActivationStateChangedEventArgs> StageChanged Event Type EventHandler<ActivationStateChangedEventArgs>"
  },
  "api/VRBuilder.Core.ILockablePropertiesProvider.html": {
    "href": "api/VRBuilder.Core.ILockablePropertiesProvider.html",
    "title": "Interface ILockablePropertiesProvider | VR Builder Documentation",
    "keywords": "Interface ILockablePropertiesProvider Namespace VRBuilder.Core Assembly VRBuilder.Core.dll This interface is used to allow entities, for example Transition or VRBuilder.Core.Conditions to provide properties which should be locked. public interface ILockablePropertiesProvider Methods GetLockableProperties() Returns all LockableProperties this provider requires. IEnumerable<LockablePropertyData> GetLockableProperties() Returns IEnumerable<LockablePropertyData>"
  },
  "api/VRBuilder.Core.IMetadata.html": {
    "href": "api/VRBuilder.Core.IMetadata.html",
    "title": "Interface IMetadata | VR Builder Documentation",
    "keywords": "Interface IMetadata Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Utility data which is used by the VR Builder SDK custom editors. public interface IMetadata"
  },
  "api/VRBuilder.Core.INamedData.html": {
    "href": "api/VRBuilder.Core.INamedData.html",
    "title": "Interface INamedData | VR Builder Documentation",
    "keywords": "Interface INamedData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Data structure with an IStep's name. public interface INamedData : IData Inherited Members IData.Metadata Properties Name Name of the entity. string Name { get; } Property Value string"
  },
  "api/VRBuilder.Core.IO.DefaultFileSystem.html": {
    "href": "api/VRBuilder.Core.IO.DefaultFileSystem.html",
    "title": "Class DefaultFileSystem | VR Builder Documentation",
    "keywords": "Class DefaultFileSystem Namespace VRBuilder.Core.IO Assembly VRBuilder.Core.dll Default implementation of IPlatformFileSystem based in 'System.IO'. public class DefaultFileSystem : IPlatformFileSystem Inheritance object DefaultFileSystem Implements IPlatformFileSystem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks It works out of the box for most of the Unity's supported platforms. Constructors DefaultFileSystem(string, string) public DefaultFileSystem(string streamingAssetsPath, string persistentDataPath) Parameters streamingAssetsPath string persistentDataPath string Fields PersistentDataPath The path to the platform's persistent data directory (Read Only). protected readonly string PersistentDataPath Field Value string StreamingAssetsPath The path to the platform's StreamingAssets folder (Read Only). protected readonly string StreamingAssetsPath Field Value string Methods BuildPersistentDataPath(string) Builds a directory from given filePath. protected virtual string BuildPersistentDataPath(string filePath) Parameters filePath string Returns string The created directory absolute path. Remarks filePath must be relative to the platform persistent data folder. Exists(string) Returns true if given filePath contains the name of an existing file under the StreamingAssets or platform persistent data folder; otherwise, false. public virtual Task<bool> Exists(string filePath) Parameters filePath string Returns Task<bool> Remarks filePath must be relative to the StreamingAssets or the platform persistent data folder. FetchStreamingAssetsFilesAt(string, string) Returns the names of files (including their paths) that match the specified search pattern in the specified directory relative to the Streaming Assets folder. public virtual IEnumerable<string> FetchStreamingAssetsFilesAt(string path, string searchPattern) Parameters path string The relative path to the Streaming Assets folder. This string is not case-sensitive. searchPattern string The search string to match against the names of files in path. Depending on the platform, this parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. Returns IEnumerable<string> Remarks The following wildcard specifiers are permitted in searchPattern: Wildcard specifier Matches (asterisk) Zero or more characters in that position. ? (question mark) Zero or one character in that position. FileExistsInPersistentData(string) Returns true if given filePath contains the name of an existing file under the platform persistent data folder; otherwise, false. protected virtual Task<bool> FileExistsInPersistentData(string filePath) Parameters filePath string Returns Task<bool> Remarks filePath must be relative to the platform persistent data folder. FileExistsInStreamingAssets(string) Returns true if given filePath contains the name of an existing file under the StreamingAssets folder; otherwise, false. protected virtual Task<bool> FileExistsInStreamingAssets(string filePath) Parameters filePath string Returns Task<bool> Remarks filePath must be relative to the StreamingAssets folder. NormalizePath(string) Normalizes path to platform specific. protected virtual string NormalizePath(string filePath) Parameters filePath string Returns string Read(string) Loads a file stored at filePath. public virtual Task<byte[]> Read(string filePath) Parameters filePath string Returns Task<byte[]> The contents of the file into a byte array. Remarks filePath must be relative to the StreamingAssets or the persistent data folder. Exceptions FileNotFoundException Exception thrown if the file does not exist. ReadAllText(string) Loads a file stored at filePath. public virtual Task<string> ReadAllText(string filePath) Parameters filePath string Returns Task<string> Returns a string with the content of the file. Remarks filePath must be relative to the StreamingAssets or the persistent data folder. Exceptions FileNotFoundException Exception thrown if the file does not exist. ReadFromPersistentData(string) Loads a file stored at filePath. Returns a FileNotFoundException if file does not exist. protected virtual Task<byte[]> ReadFromPersistentData(string filePath) Parameters filePath string Returns Task<byte[]> The contents of the file into a byte array. Remarks filePath must be relative to the platform persistent data folder. ReadFromStreamingAssets(string) Loads a file stored at filePath. Returns a FileNotFoundException if file does not exist. protected virtual Task<byte[]> ReadFromStreamingAssets(string filePath) Parameters filePath string Returns Task<byte[]> The contents of the file into a byte array. Remarks filePath must be relative to the StreamingAssets folder. Write(string, byte[]) Saves given fileData in provided filePath. public virtual Task<bool> Write(string filePath, byte[] fileData) Parameters filePath string fileData byte[] Returns Task<bool> Returns true if fileData could be saved successfully; otherwise, false. Remarks filePath must be relative to PersistentDataPath."
  },
  "api/VRBuilder.Core.IO.FileManager.html": {
    "href": "api/VRBuilder.Core.IO.FileManager.html",
    "title": "Class FileManager | VR Builder Documentation",
    "keywords": "Class FileManager Namespace VRBuilder.Core.IO Assembly VRBuilder.Core.dll Handles runtime operations that allow reading and writing to files in Unity. public static class FileManager Inheritance object FileManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Exists(string) Returns true if given filePath contains the name of an existing file under the StreamingAssets or platform persistent data folder; otherwise, false. public static Task<bool> Exists(string filePath) Parameters filePath string Returns Task<bool> Remarks filePath must be relative to the StreamingAssets or the platform persistent data folder. FetchStreamingAssetsFilesAt(string, string) Returns the names of files (including their paths) that match the specified search pattern in the specified directory relative to the Streaming Assets folder. public static IEnumerable<string> FetchStreamingAssetsFilesAt(string path, string searchPattern) Parameters path string The relative path to the Streaming Assets folder. This string is not case-sensitive. searchPattern string The search string to match against the names of files in path. Depending on the platform, this parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see implementations of IPlatformFileSystem), but doesn't support regular expressions. Returns IEnumerable<string> Read(string) Loads a file stored at filePath. public static Task<byte[]> Read(string filePath) Parameters filePath string Returns Task<byte[]> The contents of the file into a byte array. Remarks filePath must be relative to the StreamingAssets or the persistent data folder. Exceptions ArgumentException Exception thrown if filePath is invalid. FileNotFoundException Exception thrown if the file does not exist. ReadAllText(string) Loads a file stored at filePath. public static Task<string> ReadAllText(string filePath) Parameters filePath string Returns Task<string> Returns a string with the content of the file. Remarks filePath must be relative to the StreamingAssets or the persistent data folder. Exceptions ArgumentException Exception thrown if filePath is invalid. FileNotFoundException Exception thrown if the file does not exist. Write(string, byte[]) Saves given fileData in provided filePath. public static Task<bool> Write(string filePath, byte[] fileData) Parameters filePath string fileData byte[] Returns Task<bool> Returns true if fileData could be saved successfully; otherwise, false. Remarks filePath must be relative to PersistentDataPath."
  },
  "api/VRBuilder.Core.IO.IPlatformFileSystem.html": {
    "href": "api/VRBuilder.Core.IO.IPlatformFileSystem.html",
    "title": "Interface IPlatformFileSystem | VR Builder Documentation",
    "keywords": "Interface IPlatformFileSystem Namespace VRBuilder.Core.IO Assembly VRBuilder.Core.dll Interface with basic platform operations for reading and saving files in Unity. public interface IPlatformFileSystem Remarks Operations are done for the StreamingAssets and platform persistent data folders. Methods Exists(string) Returns true if given filePath contains the name of an existing file under the StreamingAssets or platform persistent data folder; otherwise, false. Task<bool> Exists(string filePath) Parameters filePath string Returns Task<bool> Remarks filePath must be relative to the StreamingAssets or the platform persistent data folder. FetchStreamingAssetsFilesAt(string, string) Returns the names of files (including their paths) that match the specified search pattern in the specified directory relative to the Streaming Assets folder. IEnumerable<string> FetchStreamingAssetsFilesAt(string path, string searchPattern) Parameters path string The relative path to the Streaming Assets folder. This string is not case-sensitive. searchPattern string The search string to match against the names of files in path. Depending on the platform, this parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. Returns IEnumerable<string> Read(string) Loads a file stored at filePath. Task<byte[]> Read(string filePath) Parameters filePath string Returns Task<byte[]> The contents of the file into a byte array. Remarks filePath must be relative to the StreamingAssets or the persistent data folder. Exceptions FileNotFoundException Exception thrown if the file does not exist. ReadAllText(string) Loads a file stored at filePath. Task<string> ReadAllText(string filePath) Parameters filePath string Returns Task<string> Returns a string with the content of the file. Remarks filePath must be relative to the StreamingAssets or the persistent data folder. Exceptions FileNotFoundException Exception thrown if the file does not exist. Write(string, byte[]) Saves given fileData in provided filePath. Task<bool> Write(string filePath, byte[] fileData) Parameters filePath string fileData byte[] Returns Task<bool> Returns true if fileData could be saved successfully; otherwise, false. Remarks filePath must be relative to PersistentDataPath."
  },
  "api/VRBuilder.Core.IO.IProcessAssetManifest.html": {
    "href": "api/VRBuilder.Core.IO.IProcessAssetManifest.html",
    "title": "Interface IProcessAssetManifest | VR Builder Documentation",
    "keywords": "Interface IProcessAssetManifest Namespace VRBuilder.Core.IO Assembly VRBuilder.Core.dll Provides instructions on how a process asset should be loaded. public interface IProcessAssetManifest Properties AdditionalFileNames Names of files containing additional data. IEnumerable<string> AdditionalFileNames { get; set; } Property Value IEnumerable<string> AssetStrategyTypeName Full type name of the asset strategy used to load the process. It should be a type of IProcessAssetStrategy. string AssetStrategyTypeName { get; set; } Property Value string ProcessFileName Name of the main process file. string ProcessFileName { get; set; } Property Value string"
  },
  "api/VRBuilder.Core.IO.IProcessAssetStrategy.html": {
    "href": "api/VRBuilder.Core.IO.IProcessAssetStrategy.html",
    "title": "Interface IProcessAssetStrategy | VR Builder Documentation",
    "keywords": "Interface IProcessAssetStrategy Namespace VRBuilder.Core.IO Assembly VRBuilder.Core.dll Defines how a process asset should be saved or loaded. public interface IProcessAssetStrategy Properties CreateManifest If true, a manifest file will be created. The file will be read first when loading the process. bool CreateManifest { get; } Property Value bool Methods CreateSerializedProcessAssets(IProcess, IProcessSerializer) Returns a number of named byte arrays containing the process data. The first key is the process file, subsequent ones are additional data. IDictionary<string, byte[]> CreateSerializedProcessAssets(IProcess process, IProcessSerializer serializer) Parameters process IProcess serializer IProcessSerializer Returns IDictionary<string, byte[]> GetProcessFromSerializedData(byte[], IEnumerable<byte[]>, IProcessSerializer) Attempts to build a process from the provided serialized data. IProcess GetProcessFromSerializedData(byte[] processData, IEnumerable<byte[]> additionalData, IProcessSerializer serializer) Parameters processData byte[] additionalData IEnumerable<byte[]> serializer IProcessSerializer Returns IProcess"
  },
  "api/VRBuilder.Core.IO.ProcessAssetManifest.html": {
    "href": "api/VRBuilder.Core.IO.ProcessAssetManifest.html",
    "title": "Class ProcessAssetManifest | VR Builder Documentation",
    "keywords": "Class ProcessAssetManifest Namespace VRBuilder.Core.IO Assembly VRBuilder.Core.dll Provides instructions on how a process asset should be loaded. [Serializable] public class ProcessAssetManifest : IProcessAssetManifest Inheritance object ProcessAssetManifest Implements IProcessAssetManifest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AdditionalFileNames Names of files containing additional data. [DataMember] public IEnumerable<string> AdditionalFileNames { get; set; } Property Value IEnumerable<string> AssetStrategyTypeName Full type name of the asset strategy used to load the process. It should be a type of IProcessAssetStrategy. [DataMember] public string AssetStrategyTypeName { get; set; } Property Value string ProcessFileName Name of the main process file. [DataMember] public string ProcessFileName { get; set; } Property Value string"
  },
  "api/VRBuilder.Core.IO.SingleFileProcessAssetStrategy.html": {
    "href": "api/VRBuilder.Core.IO.SingleFileProcessAssetStrategy.html",
    "title": "Class SingleFileProcessAssetStrategy | VR Builder Documentation",
    "keywords": "Class SingleFileProcessAssetStrategy Namespace VRBuilder.Core.IO Assembly VRBuilder.Core.dll Process asset strategy that saves the process as a single file. public class SingleFileProcessAssetStrategy : IProcessAssetStrategy Inheritance object SingleFileProcessAssetStrategy Implements IProcessAssetStrategy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreateManifest If true, a manifest file will be created. The file will be read first when loading the process. public bool CreateManifest { get; } Property Value bool Methods CreateSerializedProcessAssets(IProcess, IProcessSerializer) Returns a number of named byte arrays containing the process data. The first key is the process file, subsequent ones are additional data. public IDictionary<string, byte[]> CreateSerializedProcessAssets(IProcess process, IProcessSerializer serializer) Parameters process IProcess serializer IProcessSerializer Returns IDictionary<string, byte[]> GetProcessFromSerializedData(byte[], IEnumerable<byte[]>, IProcessSerializer) Attempts to build a process from the provided serialized data. public IProcess GetProcessFromSerializedData(byte[] processData, IEnumerable<byte[]> additionalData, IProcessSerializer serializer) Parameters processData byte[] additionalData IEnumerable<byte[]> serializer IProcessSerializer Returns IProcess"
  },
  "api/VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.html": {
    "href": "api/VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.html",
    "title": "Class SplitChaptersProcessAssetStrategy | VR Builder Documentation",
    "keywords": "Class SplitChaptersProcessAssetStrategy Namespace VRBuilder.Core.IO Assembly VRBuilder.Core.dll Asset strategy that saves the process as a list of chapter, then each chapter in a separate file. A manifest file is created as well. public class SplitChaptersProcessAssetStrategy : IProcessAssetStrategy Inheritance object SplitChaptersProcessAssetStrategy Implements IProcessAssetStrategy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreateManifest If true, a manifest file will be created. The file will be read first when loading the process. public bool CreateManifest { get; } Property Value bool Methods CreateSerializedProcessAssets(IProcess, IProcessSerializer) Returns a number of named byte arrays containing the process data. The first key is the process file, subsequent ones are additional data. public IDictionary<string, byte[]> CreateSerializedProcessAssets(IProcess process, IProcessSerializer serializer) Parameters process IProcess serializer IProcessSerializer Returns IDictionary<string, byte[]> GetProcessFromSerializedData(byte[], IEnumerable<byte[]>, IProcessSerializer) Attempts to build a process from the provided serialized data. public IProcess GetProcessFromSerializedData(byte[] processData, IEnumerable<byte[]> additionalData, IProcessSerializer serializer) Parameters processData byte[] additionalData IEnumerable<byte[]> serializer IProcessSerializer Returns IProcess"
  },
  "api/VRBuilder.Core.IO.html": {
    "href": "api/VRBuilder.Core.IO.html",
    "title": "Namespace VRBuilder.Core.IO | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.IO Classes DefaultFileSystem Default implementation of IPlatformFileSystem based in 'System.IO'. FileManager Handles runtime operations that allow reading and writing to files in Unity. ProcessAssetManifest Provides instructions on how a process asset should be loaded. SingleFileProcessAssetStrategy Process asset strategy that saves the process as a single file. SplitChaptersProcessAssetStrategy Asset strategy that saves the process as a list of chapter, then each chapter in a separate file. A manifest file is created as well. Interfaces IPlatformFileSystem Interface with basic platform operations for reading and saving files in Unity. IProcessAssetManifest Provides instructions on how a process asset should be loaded. IProcessAssetStrategy Defines how a process asset should be saved or loaded."
  },
  "api/VRBuilder.Core.IProcess.html": {
    "href": "api/VRBuilder.Core.IProcess.html",
    "title": "Interface IProcess | VR Builder Documentation",
    "keywords": "Interface IProcess Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Interface of a process. public interface IProcess : IEntity, IDataOwner<IProcessData>, IDataOwner, IClonable<IProcess> Inherited Members IEntity.LifeCycle IEntity.GetActivatingProcess() IEntity.GetActiveProcess() IEntity.GetDeactivatingProcess() IEntity.Configure(IMode) IEntity.Update() IEntity.Parent IDataOwner<IProcessData>.Data IClonable<IProcess>.Clone() Properties ProcessMetadata Utility data used by editor. ProcessMetadata ProcessMetadata { get; } Property Value ProcessMetadata"
  },
  "api/VRBuilder.Core.IProcessData.html": {
    "href": "api/VRBuilder.Core.IProcessData.html",
    "title": "Interface IProcessData | VR Builder Documentation",
    "keywords": "Interface IProcessData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll The data class for a IProcess. public interface IProcessData : IEntityNonLinearSequenceDataWithMode<IChapter>, IEntitySequenceDataWithMode<IChapter>, IEntitySequenceData<IChapter>, IEntityCollectionData<IChapter>, IEntityCollectionData, IEntitySequenceData, IModeData, IRenameableData, INamedData, IData Inherited Members IEntityNonLinearSequenceDataWithMode<IChapter>.OverrideNext IEntitySequenceData<IChapter>.Current IEntityCollectionData<IChapter>.GetChildren() IModeData.Mode IRenameableData.SetName(string) INamedData.Name IData.Metadata Properties Chapters The list of the IChapters. IList<IChapter> Chapters { get; set; } Property Value IList<IChapter> FirstChapter The IChapter to start execution from. IChapter FirstChapter { get; } Property Value IChapter"
  },
  "api/VRBuilder.Core.IRenameableData.html": {
    "href": "api/VRBuilder.Core.IRenameableData.html",
    "title": "Interface IRenameableData | VR Builder Documentation",
    "keywords": "Interface IRenameableData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Interface for data that can be renamed. public interface IRenameableData : INamedData, IData Inherited Members INamedData.Name IData.Metadata Methods SetName(string) Set the new name. void SetName(string name) Parameters name string"
  },
  "api/VRBuilder.Core.IStageProcess.html": {
    "href": "api/VRBuilder.Core.IStageProcess.html",
    "title": "Interface IStageProcess | VR Builder Documentation",
    "keywords": "Interface IStageProcess Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A process for an IEntity's Stage. public interface IStageProcess Methods End() This method is invoked immediately after the Update() was iterated over completely, or after the FastForward() was called. The invocation is guaranteed. Use it for deinitialization. void End() FastForward() This method is called when the process was not completed yet. It must \"fake\" normal execution of the process and handle the cases when the Update() is not iterated over completely. void FastForward() Start() This method is invoked immediately when entity enters the stage. The invocation is guaranteed. Use it for initialization. void Start() Update() This method will be iterated over while the entity is in this stage, one iteration step per frame, starting from the second frame. IEnumerator Update() Returns IEnumerator"
  },
  "api/VRBuilder.Core.IStep.html": {
    "href": "api/VRBuilder.Core.IStep.html",
    "title": "Interface IStep | VR Builder Documentation",
    "keywords": "Interface IStep Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Interface for a process step. public interface IStep : IDataOwner<IStepData>, IDataOwner, IEntity, IClonable<IStep> Inherited Members IDataOwner<IStepData>.Data IEntity.LifeCycle IEntity.GetActivatingProcess() IEntity.GetActiveProcess() IEntity.GetDeactivatingProcess() IEntity.Configure(IMode) IEntity.Update() IEntity.Parent IClonable<IStep>.Clone() Properties StepMetadata Step's metadata. StepMetadata StepMetadata { get; set; } Property Value StepMetadata"
  },
  "api/VRBuilder.Core.IStepChild.html": {
    "href": "api/VRBuilder.Core.IStepChild.html",
    "title": "Interface IStepChild | VR Builder Documentation",
    "keywords": "Interface IStepChild Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Abstract data structure. Usually works along with IDataOwner. public interface IStepChild : IEntity Inherited Members IEntity.LifeCycle IEntity.GetActivatingProcess() IEntity.GetActiveProcess() IEntity.GetDeactivatingProcess() IEntity.Configure(IMode) IEntity.Update() IEntity.Parent"
  },
  "api/VRBuilder.Core.IStepData.html": {
    "href": "api/VRBuilder.Core.IStepData.html",
    "title": "Interface IStepData | VR Builder Documentation",
    "keywords": "Interface IStepData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll The interface for a step's data. public interface IStepData : IRenameableData, INamedData, IDescribedData, IEntitySequenceDataWithMode<IStepChild>, IEntitySequenceData<IStepChild>, IEntityCollectionData<IStepChild>, IEntityCollectionData, IEntitySequenceData, IModeData, IData Inherited Members IRenameableData.SetName(string) INamedData.Name IDescribedData.Description IEntitySequenceData<IStepChild>.Current IEntityCollectionData<IStepChild>.GetChildren() IModeData.Mode IData.Metadata Properties Behaviors The list of the step's behaviors. IBehaviorCollection Behaviors { get; set; } Property Value IBehaviorCollection Transitions The list of the step's transitions. ITransitionCollection Transitions { get; set; } Property Value ITransitionCollection"
  },
  "api/VRBuilder.Core.ITransition.html": {
    "href": "api/VRBuilder.Core.ITransition.html",
    "title": "Interface ITransition | VR Builder Documentation",
    "keywords": "Interface ITransition Namespace VRBuilder.Core Assembly VRBuilder.Core.dll An interface for a transition that determines when a IStep is completed and what is the next IStep. public interface ITransition : IEntity, ICompletable, IDataOwner<ITransitionData>, IDataOwner, IClonable<ITransition> Inherited Members IEntity.LifeCycle IEntity.GetActivatingProcess() IEntity.GetActiveProcess() IEntity.GetDeactivatingProcess() IEntity.Configure(IMode) IEntity.Update() IEntity.Parent ICompletable.IsCompleted ICompletable.Autocomplete() IDataOwner<ITransitionData>.Data IClonable<ITransition>.Clone()"
  },
  "api/VRBuilder.Core.ITransitionCollection.html": {
    "href": "api/VRBuilder.Core.ITransitionCollection.html",
    "title": "Interface ITransitionCollection | VR Builder Documentation",
    "keywords": "Interface ITransitionCollection Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Interface for a collection of transitions. public interface ITransitionCollection : IStepChild, IEntity, IDataOwner<ITransitionCollectionData>, IDataOwner, IClonable<ITransitionCollection> Inherited Members IEntity.LifeCycle IEntity.GetActivatingProcess() IEntity.GetActiveProcess() IEntity.GetDeactivatingProcess() IEntity.Configure(IMode) IEntity.Update() IEntity.Parent IDataOwner<ITransitionCollectionData>.Data IClonable<ITransitionCollection>.Clone()"
  },
  "api/VRBuilder.Core.ITransitionCollectionData.html": {
    "href": "api/VRBuilder.Core.ITransitionCollectionData.html",
    "title": "Interface ITransitionCollectionData | VR Builder Documentation",
    "keywords": "Interface ITransitionCollectionData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll The interface of a data with a list of ITransitions. public interface ITransitionCollectionData : IEntityCollectionDataWithMode<ITransition>, IEntityCollectionData<ITransition>, IEntityCollectionDataWithMode, IEntityCollectionData, IModeData, IData Inherited Members IEntityCollectionData<ITransition>.GetChildren() IModeData.Mode IData.Metadata Properties Transitions A list of ITransitions. IList<ITransition> Transitions { get; set; } Property Value IList<ITransition>"
  },
  "api/VRBuilder.Core.ITransitionData.html": {
    "href": "api/VRBuilder.Core.ITransitionData.html",
    "title": "Interface ITransitionData | VR Builder Documentation",
    "keywords": "Interface ITransitionData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll public interface ITransitionData : IEntityCollectionDataWithMode<ICondition>, IEntityCollectionData<ICondition>, IEntityCollectionDataWithMode, IEntityCollectionData, IModeData, ICompletableData, INamedData, IData Inherited Members IEntityCollectionData<ICondition>.GetChildren() IModeData.Mode ICompletableData.IsCompleted INamedData.Name IData.Metadata Properties Conditions A list of conditions. When you complete all of them, this transition will trigger. IList<ICondition> Conditions { get; set; } Property Value IList<ICondition> TargetStep The next step to take after this transition triggers. IStep TargetStep { get; set; } Property Value IStep"
  },
  "api/VRBuilder.Core.Input.IInputActionListener.html": {
    "href": "api/VRBuilder.Core.Input.IInputActionListener.html",
    "title": "Interface IInputActionListener | VR Builder Documentation",
    "keywords": "Interface IInputActionListener Namespace VRBuilder.Core.Input Assembly VRBuilder.Core.dll Allows to prioritize input actions. public interface IInputActionListener Properties IgnoreFocus If this listener ignores a set focus, it will also be called when focus is active. bool IgnoreFocus { get; } Property Value bool Priority Priority of this input. int Priority { get; } Property Value int"
  },
  "api/VRBuilder.Core.Input.IInputFocus.html": {
    "href": "api/VRBuilder.Core.Input.IInputFocus.html",
    "title": "Interface IInputFocus | VR Builder Documentation",
    "keywords": "Interface IInputFocus Namespace VRBuilder.Core.Input Assembly VRBuilder.Core.dll Can be used to mark a GameObject focusable. public interface IInputFocus Properties ActionMapName If this is not null the action map with the given name will be set. string ActionMapName { get; } Property Value string CanBeFocused Return if this object can be focused. bool CanBeFocused { get; } Property Value bool Methods OnFocus() Will be called when this object is focused. void OnFocus() OnReleaseFocus() Will be called when the object's focus is released. void OnReleaseFocus()"
  },
  "api/VRBuilder.Core.Input.InputActionListener.html": {
    "href": "api/VRBuilder.Core.Input.InputActionListener.html",
    "title": "Class InputActionListener | VR Builder Documentation",
    "keywords": "Class InputActionListener Namespace VRBuilder.Core.Input Assembly VRBuilder.Core.dll Base class for InputActionListener. public abstract class InputActionListener : MonoBehaviour, IInputActionListener Inheritance object Object Component Behaviour MonoBehaviour InputActionListener Implements IInputActionListener Derived SpectatorController Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties IgnoreFocus If this listener ignores a set focus, it will also be called when focus is active. public virtual bool IgnoreFocus { get; } Property Value bool Priority Priority of this input. public virtual int Priority { get; } Property Value int Methods RegisterInputEvent(Action<InputEventArgs>) Registers the given method as input event, the name of the method will be the event name. protected virtual void RegisterInputEvent(Action<InputController.InputEventArgs> action) Parameters action Action<InputController.InputEventArgs> UnregisterInputEvent(Action<InputEventArgs>) Unregisters the given method as input event, the name of the method will be the event name. protected virtual void UnregisterInputEvent(Action<InputController.InputEventArgs> action) Parameters action Action<InputController.InputEventArgs>"
  },
  "api/VRBuilder.Core.Input.InputController.InputEventArgs.html": {
    "href": "api/VRBuilder.Core.Input.InputController.InputEventArgs.html",
    "title": "Class InputController.InputEventArgs | VR Builder Documentation",
    "keywords": "Class InputController.InputEventArgs Namespace VRBuilder.Core.Input Assembly VRBuilder.Core.dll public class InputController.InputEventArgs : EventArgs Inheritance object EventArgs InputController.InputEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputEventArgs(object) public InputEventArgs(object context) Parameters context object Fields Context public readonly object Context Field Value object"
  },
  "api/VRBuilder.Core.Input.InputController.InputFocusEventArgs.html": {
    "href": "api/VRBuilder.Core.Input.InputController.InputFocusEventArgs.html",
    "title": "Class InputController.InputFocusEventArgs | VR Builder Documentation",
    "keywords": "Class InputController.InputFocusEventArgs Namespace VRBuilder.Core.Input Assembly VRBuilder.Core.dll public class InputController.InputFocusEventArgs : EventArgs Inheritance object EventArgs InputController.InputFocusEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputFocusEventArgs(IInputFocus) public InputFocusEventArgs(IInputFocus inputFocus) Parameters inputFocus IInputFocus Fields InputFocus public readonly IInputFocus InputFocus Field Value IInputFocus"
  },
  "api/VRBuilder.Core.Input.InputController.ListenerInfo.html": {
    "href": "api/VRBuilder.Core.Input.InputController.ListenerInfo.html",
    "title": "Struct InputController.ListenerInfo | VR Builder Documentation",
    "keywords": "Struct InputController.ListenerInfo Namespace VRBuilder.Core.Input Assembly VRBuilder.Core.dll Information of the listener registered. protected struct InputController.ListenerInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ListenerInfo(IInputActionListener, Action<InputEventArgs>) public ListenerInfo(IInputActionListener actionListener, Action<InputController.InputEventArgs> action) Parameters actionListener IInputActionListener action Action<InputController.InputEventArgs> Fields Action public readonly Action<InputController.InputEventArgs> Action Field Value Action<InputController.InputEventArgs> ActionListener public readonly IInputActionListener ActionListener Field Value IInputActionListener"
  },
  "api/VRBuilder.Core.Input.InputController.html": {
    "href": "api/VRBuilder.Core.Input.InputController.html",
    "title": "Class InputController | VR Builder Documentation",
    "keywords": "Class InputController Namespace VRBuilder.Core.Input Assembly VRBuilder.Core.dll Central controller for input via the new Input System using C# events. public abstract class InputController : UnitySceneSingleton<InputController> Inheritance object Object Component Behaviour MonoBehaviour UnitySceneSingleton<InputController> InputController Inherited Members UnitySceneSingleton<InputController>.ConcreteType UnitySceneSingleton<InputController>.Instance UnitySceneSingleton<InputController>.Exists UnitySceneSingleton<InputController>.GetName() UnitySceneSingleton<InputController>.OnDestroy() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields OnFocusReleased Will be called when the focus on an object is released. public EventHandler<InputController.InputFocusEventArgs> OnFocusReleased Field Value EventHandler<InputController.InputFocusEventArgs> OnFocused Will be called when an object is focused. public EventHandler<InputController.InputFocusEventArgs> OnFocused Field Value EventHandler<InputController.InputFocusEventArgs> Properties CurrentInputFocus Currently focused object. protected IInputFocus CurrentInputFocus { get; set; } Property Value IInputFocus ListenerDictionary Registered listener. protected Dictionary<string, List<InputController.ListenerInfo>> ListenerDictionary { get; } Property Value Dictionary<string, List<InputController.ListenerInfo>> Methods Awake() protected override void Awake() Focus(IInputFocus) Focus the given input focus target. public abstract void Focus(IInputFocus target) Parameters target IInputFocus RegisterEvent(IInputActionListener, Action<InputEventArgs>) Registers an action event to input. public void RegisterEvent(IInputActionListener listener, Action<InputController.InputEventArgs> action) Parameters listener IInputActionListener The listener owning the action. action Action<InputController.InputEventArgs> The action method which will be called. ReleaseFocus() Releases the focus, if possible. public abstract void ReleaseFocus() Reset() protected virtual void Reset() Setup() will be called on Reset (in editor time) and Awake (in play mode). Intended to setup the input controller properly. protected abstract void Setup() UnregisterEvent(IInputActionListener, Action<InputEventArgs>) Unregisters the given listeners action. public void UnregisterEvent(IInputActionListener listener, Action<InputController.InputEventArgs> action) Parameters listener IInputActionListener action Action<InputController.InputEventArgs>"
  },
  "api/VRBuilder.Core.Input.html": {
    "href": "api/VRBuilder.Core.Input.html",
    "title": "Namespace VRBuilder.Core.Input | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Input Classes InputActionListener Base class for InputActionListener. InputController Central controller for input via the new Input System using C# events. InputController.InputEventArgs InputController.InputFocusEventArgs Structs InputController.ListenerInfo Information of the listener registered. Interfaces IInputActionListener Allows to prioritize input actions. IInputFocus Can be used to mark a GameObject focusable."
  },
  "api/VRBuilder.Core.InstantProcess-1.html": {
    "href": "api/VRBuilder.Core.InstantProcess-1.html",
    "title": "Class InstantProcess<TData> | VR Builder Documentation",
    "keywords": "Class InstantProcess<TData> Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A convenience class for processes that happen instantly. You only have to implement the Start() method. public abstract class InstantProcess<TData> : StageProcess<TData>, IStageProcess where TData : class, IData Type Parameters TData Inheritance object StageProcess<TData> InstantProcess<TData> Implements IStageProcess Inherited Members StageProcess<TData>.Data StageProcess<TData>.Outer object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InstantProcess(TData) protected InstantProcess(TData data) Parameters data TData Methods End() This method is invoked immediately after the Update() was iterated over completely, or after the FastForward() was called. The invocation is guaranteed. Use it for deinitialization. public override void End() FastForward() This method is called when the process was not completed yet. It must \"fake\" normal execution of the process and handle the cases when the Update() is not iterated over completely. public override void FastForward() Start() This method is invoked immediately when entity enters the stage. The invocation is guaranteed. Use it for initialization. public override abstract void Start() Update() This method will be iterated over while the entity is in this stage, one iteration step per frame, starting from the second frame. public override IEnumerator Update() Returns IEnumerator"
  },
  "api/VRBuilder.Core.LifeCycle.html": {
    "href": "api/VRBuilder.Core.LifeCycle.html",
    "title": "Class LifeCycle | VR Builder Documentation",
    "keywords": "Class LifeCycle Namespace VRBuilder.Core Assembly VRBuilder.Core.dll The implementation of the ILifeCycle interface. public sealed class LifeCycle : ILifeCycle Inheritance object LifeCycle Implements ILifeCycle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LifeCycle(IEntity) public LifeCycle(IEntity owner) Parameters owner IEntity Properties Stage The current stage. public Stage Stage { get; } Property Value Stage Methods Activate() Enters Activating stage if was deactivating. public void Activate() Deactivate() Enters Deactivating stage if was Active. If was Activating, will start deactivating as soon as it enters Active stage. public void Deactivate() MarkToFastForward() Marks all stages to fast-forward until it reaches Inactive stage. public void MarkToFastForward() MarkToFastForwardStage(Stage) Marks the given stage to fast-forward. public void MarkToFastForwardStage(Stage stage) Parameters stage Stage Update() This method should be called every frame. public void Update() Events StageChanged An event which is fired when the current stage changes. public event EventHandler<ActivationStateChangedEventArgs> StageChanged Event Type EventHandler<ActivationStateChangedEventArgs>"
  },
  "api/VRBuilder.Core.Localization.ILocalizedContent.html": {
    "href": "api/VRBuilder.Core.Localization.ILocalizedContent.html",
    "title": "Interface ILocalizedContent | VR Builder Documentation",
    "keywords": "Interface ILocalizedContent Namespace VRBuilder.Core.Localization Assembly VRBuilder.Core.dll Interface for localized text content. public interface ILocalizedContent Methods GetLocalizedContent() Returns localized content according to the localization and process configuration. string GetLocalizedContent() Returns string"
  },
  "api/VRBuilder.Core.Localization.LanguageSettings.html": {
    "href": "api/VRBuilder.Core.Localization.LanguageSettings.html",
    "title": "Class LanguageSettings | VR Builder Documentation",
    "keywords": "Class LanguageSettings Namespace VRBuilder.Core.Localization Assembly VRBuilder.Core.dll Language settings for VR Builder. public class LanguageSettings : SettingsObject<LanguageSettings> Inheritance object Object ScriptableObject SettingsObject<LanguageSettings> LanguageSettings Inherited Members SettingsObject<LanguageSettings>.Instance SettingsObject<LanguageSettings>.Save() ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields ApplicationLanguage Language which should be used if no localization settings are present. public string ApplicationLanguage Field Value string Properties ActiveOrDefaultLanguage Returns the active or default language. public string ActiveOrDefaultLanguage { get; } Property Value string ActiveOrDefaultLocale Returns the active or default locale. public Locale ActiveOrDefaultLocale { get; } Property Value Locale Methods GetLocaleFromString(string) Get Locale object from a language or language code string. public Locale GetLocaleFromString(string languageOrCode) Parameters languageOrCode string The language or language code string. Returns Locale The Locale object corresponding to the language code string or NULL."
  },
  "api/VRBuilder.Core.Localization.LanguageUtils.html": {
    "href": "api/VRBuilder.Core.Localization.LanguageUtils.html",
    "title": "Class LanguageUtils | VR Builder Documentation",
    "keywords": "Class LanguageUtils Namespace VRBuilder.Core.Localization Assembly VRBuilder.Core.dll Collection of language utilities. public static class LanguageUtils Inheritance object LanguageUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetLocalizedChapterName(IChapter, string, Locale) Try to localize a chapter name if used as a key in a localization table public static string GetLocalizedChapterName(IChapter chapter, string localizationTable, Locale locale) Parameters chapter IChapter localizationTable string locale Locale Returns string GetLocalizedStepName(IStep, string, Locale) Try to localize a step name if used as a key in a localization table public static string GetLocalizedStepName(IStep step, string localizationTable, Locale locale) Parameters step IStep localizationTable string locale Locale Returns string GetLocalizedString(string, string) Try to get the localized string for a key and in a table with the currently selcted locale public static string GetLocalizedString(string localizationKey, string localizationTable) Parameters localizationKey string localizationTable string Returns string GetLocalizedString(string, string, Locale) Try to get the localized string for a key and in a table with a custom locale public static string GetLocalizedString(string localizationKey, string localizationTable, Locale locale) Parameters localizationKey string localizationTable string locale Locale Returns string TryConvertToTwoLetterIsoCode(string, out string) Convert natural language name to two-letters ISO code. public static bool TryConvertToTwoLetterIsoCode(this string language, out string result) Parameters language string String with natural language name or two-letters ISO code. result string If language is already in two-letters ISO code, simply returns it. If language is a natural language name, returns two-symbol code. Otherwise, returns null. Returns bool Was operation successful or not."
  },
  "api/VRBuilder.Core.Localization.html": {
    "href": "api/VRBuilder.Core.Localization.html",
    "title": "Namespace VRBuilder.Core.Localization | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Localization Classes LanguageSettings Language settings for VR Builder. LanguageUtils Collection of language utilities. Interfaces ILocalizedContent Interface for localized text content."
  },
  "api/VRBuilder.Core.Metadata.html": {
    "href": "api/VRBuilder.Core.Metadata.html",
    "title": "Class Metadata | VR Builder Documentation",
    "keywords": "Class Metadata Namespace VRBuilder.Core Assembly VRBuilder.Core.dll General implementation of IMetadata. [DataContract(IsReference = true)] public class Metadata : IMetadata Inheritance object Metadata Implements IMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Clear() public void Clear() GetMetadata(MemberInfo) Returns a set of data extracted from given member. public Dictionary<string, object> GetMetadata(MemberInfo member) Parameters member MemberInfo Returns Dictionary<string, object> GetMetadata(MemberInfo, MetadataAttribute) Returns a set of data extracted from specified attribute of given member. public object GetMetadata(MemberInfo member, MetadataAttribute attribute) Parameters member MemberInfo attribute MetadataAttribute Returns object SetMetadata(MemberInfo, string, object) Sets a set of data in to specified member. public void SetMetadata(MemberInfo member, string attributeName, object data) Parameters member MemberInfo Member data. attributeName string Key name of provided data. data object Data to be saved as metadata for member."
  },
  "api/VRBuilder.Core.ParallelExecutionPostProcessing.html": {
    "href": "api/VRBuilder.Core.ParallelExecutionPostProcessing.html",
    "title": "Class ParallelExecutionPostProcessing | VR Builder Documentation",
    "keywords": "Class ParallelExecutionPostProcessing Namespace VRBuilder.Core Assembly VRBuilder.Editor.dll Postprocessing for a parallel execution node. public class ParallelExecutionPostProcessing : EntityPostProcessing<IStep> Inheritance object EntityPostProcessing<IStep> ParallelExecutionPostProcessing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(IStep) Executes post processing. public override void Execute(IStep entity) Parameters entity IStep IEntity reference for post processing."
  },
  "api/VRBuilder.Core.Process.EntityData.html": {
    "href": "api/VRBuilder.Core.Process.EntityData.html",
    "title": "Class Process.EntityData | VR Builder Documentation",
    "keywords": "Class Process.EntityData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll The data class for a process. public class Process.EntityData : EntityCollectionData<IChapter>, IProcessData, IEntityNonLinearSequenceDataWithMode<IChapter>, IEntitySequenceDataWithMode<IChapter>, IEntitySequenceData<IChapter>, IEntityCollectionData<IChapter>, IEntityCollectionData, IEntitySequenceData, IModeData, IRenameableData, INamedData, IData Inheritance object EntityCollectionData<IChapter> Process.EntityData Implements IProcessData IEntityNonLinearSequenceDataWithMode<IChapter> IEntitySequenceDataWithMode<IChapter> IEntitySequenceData<IChapter> IEntityCollectionData<IChapter> IEntityCollectionData IEntitySequenceData IModeData IRenameableData INamedData IData Inherited Members EntityCollectionData<IChapter>.Metadata object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Chapters The list of the IChapters. [DataMember] public IList<IChapter> Chapters { get; set; } Property Value IList<IChapter> Current Current entity in the sequence. [IgnoreDataMember] public IChapter Current { get; set; } Property Value IChapter FirstChapter The IChapter to start execution from. public IChapter FirstChapter { get; } Property Value IChapter Mode public IMode Mode { get; set; } Property Value IMode Name Name of the entity. [DataMember] public string Name { get; set; } Property Value string OverrideNext If not null, overrides the next entity in the sequence. [IgnoreDataMember] public IChapter OverrideNext { get; set; } Property Value IChapter Methods GetChildren() public override IEnumerable<IChapter> GetChildren() Returns IEnumerable<IChapter> SetName(string) Set the new name. public void SetName(string name) Parameters name string"
  },
  "api/VRBuilder.Core.Process.html": {
    "href": "api/VRBuilder.Core.Process.html",
    "title": "Class Process | VR Builder Documentation",
    "keywords": "Class Process Namespace VRBuilder.Core Assembly VRBuilder.Core.dll An implementation of IProcess class. It contains a complete information about the process workflow. [DataContract(IsReference = true)] public class Process : Entity<Process.EntityData>, IDataOwner<Process.EntityData>, IProcess, IEntity, IDataOwner<IProcessData>, IDataOwner, IClonable<IProcess> Inheritance object Entity<Process.EntityData> Process Implements IDataOwner<Process.EntityData> IProcess IEntity IDataOwner<IProcessData> IDataOwner IClonable<IProcess> Inherited Members Entity<Process.EntityData>.Data Entity<Process.EntityData>.LifeCycle Entity<Process.EntityData>.Parent Entity<Process.EntityData>.GetActiveProcess() Entity<Process.EntityData>.GetConfigurator() Entity<Process.EntityData>.Configure(IMode) Entity<Process.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Process() protected Process() Process(string, IEnumerable<IChapter>) public Process(string name, IEnumerable<IChapter> chapters) Parameters name string chapters IEnumerable<IChapter> Process(string, IChapter) public Process(string name, IChapter chapter) Parameters name string chapter IChapter Properties CurrentStep Step that is currently being executed. [DataMember] public IStep CurrentStep { get; protected set; } Property Value IStep ProcessMetadata Utility data used by editor. [DataMember] public ProcessMetadata ProcessMetadata { get; set; } Property Value ProcessMetadata Methods Clone() Returns a deep copy of the object. public IProcess Clone() Returns IProcess GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.ProcessEventArgs.html": {
    "href": "api/VRBuilder.Core.ProcessEventArgs.html",
    "title": "Class ProcessEventArgs | VR Builder Documentation",
    "keywords": "Class ProcessEventArgs Namespace VRBuilder.Core Assembly VRBuilder.Core.dll EventArgs for process events. public class ProcessEventArgs : EventArgs Inheritance object EventArgs ProcessEventArgs Derived FastForwardProcessEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProcessEventArgs(IProcess) public ProcessEventArgs(IProcess process) Parameters process IProcess Fields Chapter Active Chapter. public readonly IChapter Chapter Field Value IChapter Process Active process. public readonly IProcess Process Field Value IProcess Step Active Step. public readonly IStep Step Field Value IStep"
  },
  "api/VRBuilder.Core.ProcessMetadata.html": {
    "href": "api/VRBuilder.Core.ProcessMetadata.html",
    "title": "Class ProcessMetadata | VR Builder Documentation",
    "keywords": "Class ProcessMetadata Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Implementation of IMetadata adapted for IProcess data. [DataContract(IsReference = true)] public class ProcessMetadata : IMetadata Inheritance object ProcessMetadata Implements IMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProcessMetadata() public ProcessMetadata() Properties Guid Unique identifier for process. [DataMember] public Guid Guid { get; set; } Property Value Guid StringLocalizationTable String localization table for this process. [DataMember] public string StringLocalizationTable { get; set; } Property Value string"
  },
  "api/VRBuilder.Core.ProcessRunner.ProcessEvents.html": {
    "href": "api/VRBuilder.Core.ProcessRunner.ProcessEvents.html",
    "title": "Class ProcessRunner.ProcessEvents | VR Builder Documentation",
    "keywords": "Class ProcessRunner.ProcessEvents Namespace VRBuilder.Core Assembly VRBuilder.Core.dll public class ProcessRunner.ProcessEvents Inheritance object ProcessRunner.ProcessEvents Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ChapterStarted Will be called each time a chapter activates. public EventHandler<ProcessEventArgs> ChapterStarted Field Value EventHandler<ProcessEventArgs> FastForwardStep Will be called when manual fast forward is triggered. public EventHandler<FastForwardProcessEventArgs> FastForwardStep Field Value EventHandler<FastForwardProcessEventArgs> ProcessFinished Will be called when the process finishes. public EventHandler<ProcessEventArgs> ProcessFinished Field Value EventHandler<ProcessEventArgs> ProcessInitialized Will be called when the process has been initialized. public EventHandler<ProcessEventArgs> ProcessInitialized Field Value EventHandler<ProcessEventArgs> ProcessSetup Will be called before the process is setup internally. public EventHandler<ProcessEventArgs> ProcessSetup Field Value EventHandler<ProcessEventArgs> ProcessStarted Will be called on process start. public EventHandler<ProcessEventArgs> ProcessStarted Field Value EventHandler<ProcessEventArgs> StepStarted Will be called each time a step activates. public EventHandler<ProcessEventArgs> StepStarted Field Value EventHandler<ProcessEventArgs>"
  },
  "api/VRBuilder.Core.ProcessRunner.html": {
    "href": "api/VRBuilder.Core.ProcessRunner.html",
    "title": "Class ProcessRunner | VR Builder Documentation",
    "keywords": "Class ProcessRunner Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Runs a IProcess, expects to be run only once. public static class ProcessRunner Inheritance object ProcessRunner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Current Currently running IProcess public static IProcess Current { get; } Property Value IProcess Events Returns all process events for the current scene. public static ProcessRunner.ProcessEvents Events { get; } Property Value ProcessRunner.ProcessEvents IsRunning Returns true if the current IProcess is running. public static bool IsRunning { get; } Property Value bool Methods Initialize(IProcess) Initializes the process runner by creating all required component in scene. public static void Initialize(IProcess process) Parameters process IProcess The process which should be run. Run() Starts the IProcess. public static void Run() SetNextChapter(IChapter) Sets the specified chapter as the next chapter in the process. public static void SetNextChapter(IChapter chapter) Parameters chapter IChapter SkipChapters(int) Skips the given amount of chapters. public static void SkipChapters(int numberOfChapters) Parameters numberOfChapters int Number of chapters. SkipCurrentChapter() Skips the current chapters. public static void SkipCurrentChapter() SkipStep(ITransition) Skips the current step and uses given transition. public static void SkipStep(ITransition transition) Parameters transition ITransition Transition which should be used."
  },
  "api/VRBuilder.Core.ProcessUtils.AndOperation.html": {
    "href": "api/VRBuilder.Core.ProcessUtils.AndOperation.html",
    "title": "Class AndOperation | VR Builder Documentation",
    "keywords": "Class AndOperation Namespace VRBuilder.Core.ProcessUtils Assembly VRBuilder.Core.dll \"And\" boolean operation. public class AndOperation : IOperationCommand<bool, bool>, IFormattable Inheritance object AndOperation Implements IOperationCommand<bool, bool> IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(bool, bool) Executes the operation on the provided operands. public bool Execute(bool leftOperand, bool rightOperand) Parameters leftOperand bool rightOperand bool Returns bool ToString(string, IFormatProvider) public string ToString(string format, IFormatProvider formatProvider) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/VRBuilder.Core.ProcessUtils.ConfettiMachine.html": {
    "href": "api/VRBuilder.Core.ProcessUtils.ConfettiMachine.html",
    "title": "Class ConfettiMachine | VR Builder Documentation",
    "keywords": "Class ConfettiMachine Namespace VRBuilder.Core.ProcessUtils Assembly VRBuilder.Core.dll Manager of all listed particle systems using confetti as particles. Manages activation, deactivation, and some particle system configurations. public class ConfettiMachine : MonoBehaviour, IParticleMachine Inheritance object Object Component Behaviour MonoBehaviour ConfettiMachine Implements IParticleMachine Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties EmissionDuration Duration in seconds after the machine finishes to emit confetti. public float EmissionDuration { get; } Property Value float IsActive True if particle machine is currently active and emitting particles. public bool IsActive { get; } Property Value bool Methods Activate() Activates the particle machine. public void Activate() Activate(float, float) Activates the particle machine. public void Activate(float newRadius, float newDuration) Parameters newRadius float newDuration float ChangeAreaRadius(float) Changes the radius of the emission area. public void ChangeAreaRadius(float newRadius) Parameters newRadius float ChangeEmissionDuration(float) Changes the duration of the emission of the particle systems. public void ChangeEmissionDuration(float newDuration) Parameters newDuration float Deactivate() Deactivates the particle machine. public void Deactivate()"
  },
  "api/VRBuilder.Core.ProcessUtils.EqualToOperation-1.html": {
    "href": "api/VRBuilder.Core.ProcessUtils.EqualToOperation-1.html",
    "title": "Class EqualToOperation<T> | VR Builder Documentation",
    "keywords": "Class EqualToOperation<T> Namespace VRBuilder.Core.ProcessUtils Assembly VRBuilder.Core.dll True if left and right are equal. public class EqualToOperation<T> : IOperationCommand<T, bool>, IFormattable where T : IEquatable<T> Type Parameters T Inheritance object EqualToOperation<T> Implements IOperationCommand<T, bool> IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(T, T) Executes the operation on the provided operands. public bool Execute(T leftOperand, T rightOperand) Parameters leftOperand T rightOperand T Returns bool ToString(string, IFormatProvider) public string ToString(string format, IFormatProvider formatProvider) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/VRBuilder.Core.ProcessUtils.GreaterOrEqualOperation-1.html": {
    "href": "api/VRBuilder.Core.ProcessUtils.GreaterOrEqualOperation-1.html",
    "title": "Class GreaterOrEqualOperation<T> | VR Builder Documentation",
    "keywords": "Class GreaterOrEqualOperation<T> Namespace VRBuilder.Core.ProcessUtils Assembly VRBuilder.Core.dll True if left >= right. public class GreaterOrEqualOperation<T> : IOperationCommand<T, bool>, IFormattable where T : IComparable<T> Type Parameters T Inheritance object GreaterOrEqualOperation<T> Implements IOperationCommand<T, bool> IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(T, T) Executes the operation on the provided operands. public bool Execute(T leftOperand, T rightOperand) Parameters leftOperand T rightOperand T Returns bool ToString(string, IFormatProvider) public string ToString(string format, IFormatProvider formatProvider) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/VRBuilder.Core.ProcessUtils.GreaterThanOperation-1.html": {
    "href": "api/VRBuilder.Core.ProcessUtils.GreaterThanOperation-1.html",
    "title": "Class GreaterThanOperation<T> | VR Builder Documentation",
    "keywords": "Class GreaterThanOperation<T> Namespace VRBuilder.Core.ProcessUtils Assembly VRBuilder.Core.dll True if left > right. public class GreaterThanOperation<T> : IOperationCommand<T, bool>, IFormattable where T : IComparable<T> Type Parameters T Inheritance object GreaterThanOperation<T> Implements IOperationCommand<T, bool> IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(T, T) Executes the operation on the provided operands. public bool Execute(T leftOperand, T rightOperand) Parameters leftOperand T rightOperand T Returns bool ToString(string, IFormatProvider) public string ToString(string format, IFormatProvider formatProvider) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/VRBuilder.Core.ProcessUtils.IOperationCommand-2.html": {
    "href": "api/VRBuilder.Core.ProcessUtils.IOperationCommand-2.html",
    "title": "Interface IOperationCommand<TOperand, TResult> | VR Builder Documentation",
    "keywords": "Interface IOperationCommand<TOperand, TResult> Namespace VRBuilder.Core.ProcessUtils Assembly VRBuilder.Core.dll A command that executes an operation between two values. public interface IOperationCommand<TOperand, TResult> : IFormattable Type Parameters TOperand Type of the operands. TResult Type of the returned result. Inherited Members IFormattable.ToString(string, IFormatProvider) Methods Execute(TOperand, TOperand) Executes the operation on the provided operands. TResult Execute(TOperand leftOperand, TOperand rightOperand) Parameters leftOperand TOperand rightOperand TOperand Returns TResult"
  },
  "api/VRBuilder.Core.ProcessUtils.IParticleMachine.html": {
    "href": "api/VRBuilder.Core.ProcessUtils.IParticleMachine.html",
    "title": "Interface IParticleMachine | VR Builder Documentation",
    "keywords": "Interface IParticleMachine Namespace VRBuilder.Core.ProcessUtils Assembly VRBuilder.Core.dll public interface IParticleMachine Properties IsActive True if particle machine is currently active and emitting particles. bool IsActive { get; } Property Value bool Methods Activate() Activates the particle machine. void Activate() Activate(float, float) Activates the particle machine. void Activate(float radius, float duration) Parameters radius float New radius of the emission area. duration float New duration of the emission. ChangeAreaRadius(float) Changes the radius of the emission area. void ChangeAreaRadius(float radius) Parameters radius float New radius of the emission area. ChangeEmissionDuration(float) Changes the duration of the emission of the particle systems. void ChangeEmissionDuration(float duration) Parameters duration float New duration of the emission. Deactivate() Deactivates the particle machine. void Deactivate()"
  },
  "api/VRBuilder.Core.ProcessUtils.LessThanOperation-1.html": {
    "href": "api/VRBuilder.Core.ProcessUtils.LessThanOperation-1.html",
    "title": "Class LessThanOperation<T> | VR Builder Documentation",
    "keywords": "Class LessThanOperation<T> Namespace VRBuilder.Core.ProcessUtils Assembly VRBuilder.Core.dll public class LessThanOperation<T> : IOperationCommand<T, bool>, IFormattable where T : IComparable<T> Type Parameters T Inheritance object LessThanOperation<T> Implements IOperationCommand<T, bool> IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(T, T) Executes the operation on the provided operands. public bool Execute(T leftOperand, T rightOperand) Parameters leftOperand T rightOperand T Returns bool ToString(string, IFormatProvider) public string ToString(string format, IFormatProvider formatProvider) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/VRBuilder.Core.ProcessUtils.LessThanOrEqualOperation-1.html": {
    "href": "api/VRBuilder.Core.ProcessUtils.LessThanOrEqualOperation-1.html",
    "title": "Class LessThanOrEqualOperation<T> | VR Builder Documentation",
    "keywords": "Class LessThanOrEqualOperation<T> Namespace VRBuilder.Core.ProcessUtils Assembly VRBuilder.Core.dll public class LessThanOrEqualOperation<T> : IOperationCommand<T, bool>, IFormattable where T : IComparable<T> Type Parameters T Inheritance object LessThanOrEqualOperation<T> Implements IOperationCommand<T, bool> IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(T, T) Executes the operation on the provided operands. public bool Execute(T leftOperand, T rightOperand) Parameters leftOperand T rightOperand T Returns bool ToString(string, IFormatProvider) public string ToString(string format, IFormatProvider formatProvider) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/VRBuilder.Core.ProcessUtils.NotEqualToOperation-1.html": {
    "href": "api/VRBuilder.Core.ProcessUtils.NotEqualToOperation-1.html",
    "title": "Class NotEqualToOperation<T> | VR Builder Documentation",
    "keywords": "Class NotEqualToOperation<T> Namespace VRBuilder.Core.ProcessUtils Assembly VRBuilder.Core.dll True if left and right are not equal. public class NotEqualToOperation<T> : IOperationCommand<T, bool>, IFormattable where T : IEquatable<T> Type Parameters T Inheritance object NotEqualToOperation<T> Implements IOperationCommand<T, bool> IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(T, T) Executes the operation on the provided operands. public bool Execute(T leftOperand, T rightOperand) Parameters leftOperand T rightOperand T Returns bool ToString(string, IFormatProvider) public string ToString(string format, IFormatProvider formatProvider) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/VRBuilder.Core.ProcessUtils.OrOperation.html": {
    "href": "api/VRBuilder.Core.ProcessUtils.OrOperation.html",
    "title": "Class OrOperation | VR Builder Documentation",
    "keywords": "Class OrOperation Namespace VRBuilder.Core.ProcessUtils Assembly VRBuilder.Core.dll \"Or\" boolean operation. public class OrOperation : IOperationCommand<bool, bool>, IFormattable Inheritance object OrOperation Implements IOperationCommand<bool, bool> IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(bool, bool) Executes the operation on the provided operands. public bool Execute(bool leftOperand, bool rightOperand) Parameters leftOperand bool rightOperand bool Returns bool ToString(string, IFormatProvider) public string ToString(string format, IFormatProvider formatProvider) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/VRBuilder.Core.ProcessUtils.ProcessVariable-1.html": {
    "href": "api/VRBuilder.Core.ProcessUtils.ProcessVariable-1.html",
    "title": "Struct ProcessVariable<T> | VR Builder Documentation",
    "keywords": "Struct ProcessVariable<T> Namespace VRBuilder.Core.ProcessUtils Assembly VRBuilder.Core.dll Struct for a process variable. Accommodates the value coming from a IDataProperty<T>, or being a constant value set e.g. in the Step Inspector. [DataContract(IsReference = true)] public struct ProcessVariable<T> Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ProcessVariable(T, IEnumerable<Guid>, bool) public ProcessVariable(T constValue, IEnumerable<Guid> referenceIds, bool isConst) Parameters constValue T referenceIds IEnumerable<Guid> isConst bool ProcessVariable(T, Guid, bool) public ProcessVariable(T constValue, Guid referenceId, bool isConst) Parameters constValue T referenceId Guid isConst bool Properties ConstValue Constant value. [DataMember] public T ConstValue { readonly get; set; } Property Value T IsConst If true, ConstValue is used. Else the value will be fetched from the PropertyReference. [DataMember] public bool IsConst { readonly get; set; } Property Value bool Property Property reference for the variable. [DataMember] public SingleScenePropertyReference<IDataProperty<T>> Property { readonly get; set; } Property Value SingleScenePropertyReference<IDataProperty<T>> PropertyReference [DataMember] [Obsolete(\"Use Property instead.\")] [LegacyProperty(\"Property\")] public ScenePropertyReference<IDataProperty<T>> PropertyReference { readonly get; set; } Property Value ScenePropertyReference<IDataProperty<T>> Value Returns the current value of this variable. public T Value { get; } Property Value T Methods ToString() public override string ToString() Returns string"
  },
  "api/VRBuilder.Core.ProcessUtils.html": {
    "href": "api/VRBuilder.Core.ProcessUtils.html",
    "title": "Namespace VRBuilder.Core.ProcessUtils | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.ProcessUtils Classes AndOperation \"And\" boolean operation. ConfettiMachine Manager of all listed particle systems using confetti as particles. Manages activation, deactivation, and some particle system configurations. EqualToOperation<T> True if left and right are equal. GreaterOrEqualOperation<T> True if left >= right. GreaterThanOperation<T> True if left > right. LessThanOperation<T> LessThanOrEqualOperation<T> NotEqualToOperation<T> True if left and right are not equal. OrOperation \"Or\" boolean operation. Structs ProcessVariable<T> Struct for a process variable. Accommodates the value coming from a IDataProperty<T>, or being a constant value set e.g. in the Step Inspector. Interfaces IOperationCommand<TOperand, TResult> A command that executes an operation between two values. IParticleMachine"
  },
  "api/VRBuilder.Core.Properties.BaseHighlightProperty.HighlightEventArgs.html": {
    "href": "api/VRBuilder.Core.Properties.BaseHighlightProperty.HighlightEventArgs.html",
    "title": "Class BaseHighlightProperty.HighlightEventArgs | VR Builder Documentation",
    "keywords": "Class BaseHighlightProperty.HighlightEventArgs Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Event data for events of BaseHighlightProperty. public class BaseHighlightProperty.HighlightEventArgs : EventArgs Inheritance object EventArgs BaseHighlightProperty.HighlightEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Core.Properties.BaseHighlightProperty.html": {
    "href": "api/VRBuilder.Core.Properties.BaseHighlightProperty.html",
    "title": "Class BaseHighlightProperty | VR Builder Documentation",
    "keywords": "Class BaseHighlightProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Abstract base property for highlight properties. public abstract class BaseHighlightProperty : ProcessSceneObjectProperty, IHighlightProperty, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty BaseHighlightProperty Implements IHighlightProperty ISceneObjectProperty Derived EnableHighlightProperty HighlightProperty Inherited Members ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Properties HighlightEnded Emitted when the object gets unhighlighted. public UnityEvent<HighlightPropertyEventArgs> HighlightEnded { get; } Property Value UnityEvent<HighlightPropertyEventArgs> HighlightStarted Emitted when the object gets highlighted. public UnityEvent<HighlightPropertyEventArgs> HighlightStarted { get; } Property Value UnityEvent<HighlightPropertyEventArgs> IsHighlighted Is currently highlighted. public bool IsHighlighted { get; protected set; } Property Value bool Methods EmitHighlightEvent(HighlightPropertyEventArgs) Emits an event when the property is highlighted. public void EmitHighlightEvent(HighlightPropertyEventArgs args) Parameters args HighlightPropertyEventArgs EmitUnhighlightEvent(HighlightPropertyEventArgs) Emits an event when the property is unhighlighted. public void EmitUnhighlightEvent(HighlightPropertyEventArgs args) Parameters args HighlightPropertyEventArgs Highlight(Color) Highlight this object and use highlightColor. public abstract void Highlight(Color highlightColor) Parameters highlightColor Color Color to use for highlighting. Unhighlight() Disable highlight. public abstract void Unhighlight()"
  },
  "api/VRBuilder.Core.Properties.BezierSplinePathProperty.html": {
    "href": "api/VRBuilder.Core.Properties.BezierSplinePathProperty.html",
    "title": "Class BezierSplinePathProperty | VR Builder Documentation",
    "keywords": "Class BezierSplinePathProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Path property that generates a path from a BezierSpline. [RequireComponent(typeof(BezierSpline))] public class BezierSplinePathProperty : ProcessSceneObjectProperty, IPathProperty, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty BezierSplinePathProperty Implements IPathProperty ISceneObjectProperty Inherited Members ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Methods GetDirection(float) Get the direction of the path in a given position. public Vector3 GetDirection(float t) Parameters t float Position on the path, 0 to 1. Returns Vector3 GetPoint(float) Get a point on the path. public Vector3 GetPoint(float t) Parameters t float Position on the path, 0 to 1. Returns Vector3 OnEnable() protected override void OnEnable()"
  },
  "api/VRBuilder.Core.Properties.BooleanDataProperty.html": {
    "href": "api/VRBuilder.Core.Properties.BooleanDataProperty.html",
    "title": "Class BooleanDataProperty | VR Builder Documentation",
    "keywords": "Class BooleanDataProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Boolean implementation of the DataProperty<T> class. public class BooleanDataProperty : DataProperty<bool>, IDataProperty<bool>, IDataPropertyBase, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty DataProperty<bool> BooleanDataProperty Implements IDataProperty<bool> IDataPropertyBase ISceneObjectProperty Inherited Members DataProperty<bool>.storedValue DataProperty<bool>.GetValue() DataProperty<bool>.ResetValue() DataProperty<bool>.SetValue(bool) DataProperty<bool>.ValueToString(bool) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Properties DefaultValue Defines a default value for the property. public override bool DefaultValue { get; } Property Value bool OnValueChanged Raised when the stored value changes. public override UnityEvent<bool> OnValueChanged { get; } Property Value UnityEvent<bool> OnValueReset Raised when the stored value is reset to the default. public override UnityEvent OnValueReset { get; } Property Value UnityEvent Methods InvertValue() Changes the property's value from true to false and viceversa. public void InvertValue()"
  },
  "api/VRBuilder.Core.Properties.ColliderWithTriggerProperty.ColliderWithTriggerEventArgs.html": {
    "href": "api/VRBuilder.Core.Properties.ColliderWithTriggerProperty.ColliderWithTriggerEventArgs.html",
    "title": "Class ColliderWithTriggerProperty.ColliderWithTriggerEventArgs | VR Builder Documentation",
    "keywords": "Class ColliderWithTriggerProperty.ColliderWithTriggerEventArgs Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll public class ColliderWithTriggerProperty.ColliderWithTriggerEventArgs : EventArgs Inheritance object EventArgs ColliderWithTriggerProperty.ColliderWithTriggerEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ColliderWithTriggerEventArgs(GameObject) public ColliderWithTriggerEventArgs(GameObject collidedObject) Parameters collidedObject GameObject Fields CollidedObject public readonly GameObject CollidedObject Field Value GameObject"
  },
  "api/VRBuilder.Core.Properties.ColliderWithTriggerProperty.html": {
    "href": "api/VRBuilder.Core.Properties.ColliderWithTriggerProperty.html",
    "title": "Class ColliderWithTriggerProperty | VR Builder Documentation",
    "keywords": "Class ColliderWithTriggerProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll public class ColliderWithTriggerProperty : ProcessSceneObjectProperty, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty ColliderWithTriggerProperty Implements ISceneObjectProperty Inherited Members ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Methods FastForwardEnter(ISceneObject) Instantaneously move target inside the collider and fire the event. public void FastForwardEnter(ISceneObject target) Parameters target ISceneObject IsTransformInsideTrigger(Transform) public bool IsTransformInsideTrigger(Transform targetTransform) Parameters targetTransform Transform Returns bool OnEnable() protected override void OnEnable() Events EnteredTrigger public event EventHandler<ColliderWithTriggerProperty.ColliderWithTriggerEventArgs> EnteredTrigger Event Type EventHandler<ColliderWithTriggerProperty.ColliderWithTriggerEventArgs> ExitedTrigger public event EventHandler<ColliderWithTriggerProperty.ColliderWithTriggerEventArgs> ExitedTrigger Event Type EventHandler<ColliderWithTriggerProperty.ColliderWithTriggerEventArgs>"
  },
  "api/VRBuilder.Core.Properties.DataProperty-1.html": {
    "href": "api/VRBuilder.Core.Properties.DataProperty-1.html",
    "title": "Class DataProperty<T> | VR Builder Documentation",
    "keywords": "Class DataProperty<T> Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Base implementation for process data properties. [DisallowMultipleComponent] public abstract class DataProperty<T> : ProcessSceneObjectProperty, IDataProperty<T>, IDataPropertyBase, ISceneObjectProperty Type Parameters T Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty DataProperty<T> Implements IDataProperty<T> IDataPropertyBase ISceneObjectProperty Derived BooleanDataProperty NumberDataProperty TextDataProperty StateDataPropertyBase Inherited Members ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Fields storedValue protected T storedValue Field Value T Properties DefaultValue Defines a default value for the property. public abstract T DefaultValue { get; } Property Value T OnValueChanged Raised when the stored value changes. public abstract UnityEvent<T> OnValueChanged { get; } Property Value UnityEvent<T> OnValueReset Raised when the stored value is reset to the default. public abstract UnityEvent OnValueReset { get; } Property Value UnityEvent Methods GetValue() Returns the value. public T GetValue() Returns T ResetValue() Resets the value to its default. public void ResetValue() SetValue(T) Sets the value. public void SetValue(T value) Parameters value T ValueToString(T) protected virtual string ValueToString(T value) Parameters value T Returns string"
  },
  "api/VRBuilder.Core.Properties.EnableHighlightProperty.html": {
    "href": "api/VRBuilder.Core.Properties.EnableHighlightProperty.html",
    "title": "Class EnableHighlightProperty | VR Builder Documentation",
    "keywords": "Class EnableHighlightProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Highlight property which enables a referenced highlightObject, which can be e.g. a colored copy of the original object or a marker. public class EnableHighlightProperty : BaseHighlightProperty, IHighlightProperty, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty BaseHighlightProperty EnableHighlightProperty Implements IHighlightProperty ISceneObjectProperty Inherited Members BaseHighlightProperty.IsHighlighted BaseHighlightProperty.HighlightStarted BaseHighlightProperty.HighlightEnded BaseHighlightProperty.EmitHighlightEvent(HighlightPropertyEventArgs) BaseHighlightProperty.EmitUnhighlightEvent(HighlightPropertyEventArgs) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Methods Highlight(Color) Highlight this object and use highlightColor. public override void Highlight(Color highlightColor) Parameters highlightColor Color Color to use for highlighting. Unhighlight() Disable highlight. public override void Unhighlight()"
  },
  "api/VRBuilder.Core.Properties.HighlightPropertyEventArgs.html": {
    "href": "api/VRBuilder.Core.Properties.HighlightPropertyEventArgs.html",
    "title": "Class HighlightPropertyEventArgs | VR Builder Documentation",
    "keywords": "Class HighlightPropertyEventArgs Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll public class HighlightPropertyEventArgs : EventArgs Inheritance object EventArgs HighlightPropertyEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HighlightPropertyEventArgs(Color?) public HighlightPropertyEventArgs(Color? highlightColor) Parameters highlightColor Color? Fields HighlightColor public readonly Color? HighlightColor Field Value Color?"
  },
  "api/VRBuilder.Core.Properties.IDataProperty-1.html": {
    "href": "api/VRBuilder.Core.Properties.IDataProperty-1.html",
    "title": "Interface IDataProperty<T> | VR Builder Documentation",
    "keywords": "Interface IDataProperty<T> Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Interface for a property that stores a single value. public interface IDataProperty<T> : IDataPropertyBase, ISceneObjectProperty Type Parameters T Type of the value to be stored. Inherited Members IDataPropertyBase.OnValueReset IDataPropertyBase.ResetValue() ISceneObjectProperty.SceneObject Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Properties OnValueChanged Raised when the stored value changes. UnityEvent<T> OnValueChanged { get; } Property Value UnityEvent<T> Methods GetValue() Returns the value. T GetValue() Returns T SetValue(T) Sets the value. void SetValue(T value) Parameters value T"
  },
  "api/VRBuilder.Core.Properties.IDataPropertyBase.html": {
    "href": "api/VRBuilder.Core.Properties.IDataPropertyBase.html",
    "title": "Interface IDataPropertyBase | VR Builder Documentation",
    "keywords": "Interface IDataPropertyBase Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Base interface for a property that stores a single value. public interface IDataPropertyBase : ISceneObjectProperty Inherited Members ISceneObjectProperty.SceneObject Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Properties OnValueReset Raised when the stored value is reset to the default. UnityEvent OnValueReset { get; } Property Value UnityEvent Methods ResetValue() Resets the value to its default. void ResetValue()"
  },
  "api/VRBuilder.Core.Properties.IHighlightProperty.html": {
    "href": "api/VRBuilder.Core.Properties.IHighlightProperty.html",
    "title": "Interface IHighlightProperty | VR Builder Documentation",
    "keywords": "Interface IHighlightProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Interface for scene objects that can be highlighted. public interface IHighlightProperty : ISceneObjectProperty Inherited Members ISceneObjectProperty.SceneObject Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Properties HighlightEnded Emitted when the object gets unhighlighted. UnityEvent<HighlightPropertyEventArgs> HighlightEnded { get; } Property Value UnityEvent<HighlightPropertyEventArgs> HighlightStarted Emitted when the object gets highlighted. UnityEvent<HighlightPropertyEventArgs> HighlightStarted { get; } Property Value UnityEvent<HighlightPropertyEventArgs> IsHighlighted Is object currently highlighted. bool IsHighlighted { get; } Property Value bool Methods Highlight(Color) Highlight this object and use highlightColor. void Highlight(Color highlightColor) Parameters highlightColor Color Color to use for highlighting. Unhighlight() Disable highlight. void Unhighlight()"
  },
  "api/VRBuilder.Core.Properties.IParticleSystemProperty.html": {
    "href": "api/VRBuilder.Core.Properties.IParticleSystemProperty.html",
    "title": "Interface IParticleSystemProperty | VR Builder Documentation",
    "keywords": "Interface IParticleSystemProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Property that controls a particle system. public interface IParticleSystemProperty : ISceneObjectProperty Inherited Members ISceneObjectProperty.SceneObject Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Properties IsEmitting True if the system is emitting particles. bool IsEmitting { get; } Property Value bool StartedEmission Called when the system starts emitting particles. UnityEvent<ParticleSystemPropertyEventArgs> StartedEmission { get; } Property Value UnityEvent<ParticleSystemPropertyEventArgs> StoppedEmission Called when the system stops emitting particles. UnityEvent<ParticleSystemPropertyEventArgs> StoppedEmission { get; } Property Value UnityEvent<ParticleSystemPropertyEventArgs> Methods StartEmission() Start emitting particles. void StartEmission() StopEmission() Stop emitting particles. void StopEmission()"
  },
  "api/VRBuilder.Core.Properties.IPathProperty.html": {
    "href": "api/VRBuilder.Core.Properties.IPathProperty.html",
    "title": "Interface IPathProperty | VR Builder Documentation",
    "keywords": "Interface IPathProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll This property represents a linear path. public interface IPathProperty : ISceneObjectProperty Inherited Members ISceneObjectProperty.SceneObject Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Methods GetDirection(float) Get the direction of the path in a given position. Vector3 GetDirection(float t) Parameters t float Position on the path, 0 to 1. Returns Vector3 GetPoint(float) Get a point on the path. Vector3 GetPoint(float t) Parameters t float Position on the path, 0 to 1. Returns Vector3"
  },
  "api/VRBuilder.Core.Properties.ISceneObjectProperty.html": {
    "href": "api/VRBuilder.Core.Properties.ISceneObjectProperty.html",
    "title": "Interface ISceneObjectProperty | VR Builder Documentation",
    "keywords": "Interface ISceneObjectProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll public interface ISceneObjectProperty Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Properties SceneObject ISceneObject SceneObject { get; } Property Value ISceneObject"
  },
  "api/VRBuilder.Core.Properties.ISceneObjectPropertyExtension-1.html": {
    "href": "api/VRBuilder.Core.Properties.ISceneObjectPropertyExtension-1.html",
    "title": "Interface ISceneObjectPropertyExtension<T> | VR Builder Documentation",
    "keywords": "Interface ISceneObjectPropertyExtension<T> Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Defines a component extending a ISceneObjectProperty. public interface ISceneObjectPropertyExtension<T> where T : ISceneObjectProperty Type Parameters T"
  },
  "api/VRBuilder.Core.Properties.LockableProperty.html": {
    "href": "api/VRBuilder.Core.Properties.LockableProperty.html",
    "title": "Class LockableProperty | VR Builder Documentation",
    "keywords": "Class LockableProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll ProcessSceneObjectProperty which is lockable, to allow the restrictive environment to handle locking/unlocking your properties, extend this class. public abstract class LockableProperty : ProcessSceneObjectProperty, ISceneObjectProperty, ILockable Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty LockableProperty Implements ISceneObjectProperty ILockable Derived TeleportationProperty GrabbableProperty SnapZoneProperty SnappableProperty TouchableProperty UsableProperty Inherited Members ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Properties EndStepLocked On default the lockable property will use this value to determine if its locked at the end of a step. public virtual bool EndStepLocked { get; } Property Value bool IsLocked Returns if the object is locked. public bool IsLocked { get; } Property Value bool LockOnParentObjectLock Decides if the property will be locked when the parent scene object is locked. public bool LockOnParentObjectLock { get; set; } Property Value bool Methods InternalSetLocked(bool) Handle your internal locking affairs here. protected abstract void InternalSetLocked(bool lockState) Parameters lockState bool OnDisable() protected virtual void OnDisable() OnEnable() protected override void OnEnable() RemoveUnlocker(IStepData) Manually removes a step data keeping the object unlocked. public bool RemoveUnlocker(IStepData data) Parameters data IStepData Returns bool RequestLocked(bool, IStepData) Requests a change on the lock state of the object. public virtual void RequestLocked(bool lockState, IStepData stepData = null) Parameters lockState bool stepData IStepData SetLocked(bool) Changes the lock state of the object. public virtual void SetLocked(bool lockState) Parameters lockState bool Events Locked Will be called when the object containing this interface is locked. public event EventHandler<LockStateChangedEventArgs> Locked Event Type EventHandler<LockStateChangedEventArgs> Unlocked Will be called when the object containing this interface is unlocked. public event EventHandler<LockStateChangedEventArgs> Unlocked Event Type EventHandler<LockStateChangedEventArgs>"
  },
  "api/VRBuilder.Core.Properties.NumberDataProperty.html": {
    "href": "api/VRBuilder.Core.Properties.NumberDataProperty.html",
    "title": "Class NumberDataProperty | VR Builder Documentation",
    "keywords": "Class NumberDataProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Float implementation of the DataProperty<T> class. public class NumberDataProperty : DataProperty<float>, IDataProperty<float>, IDataPropertyBase, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty DataProperty<float> NumberDataProperty Implements IDataProperty<float> IDataPropertyBase ISceneObjectProperty Inherited Members DataProperty<float>.storedValue DataProperty<float>.GetValue() DataProperty<float>.ResetValue() DataProperty<float>.SetValue(float) DataProperty<float>.ValueToString(float) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Properties DefaultValue Defines a default value for the property. public override float DefaultValue { get; } Property Value float OnValueChanged Raised when the stored value changes. public override UnityEvent<float> OnValueChanged { get; } Property Value UnityEvent<float> OnValueReset Raised when the stored value is reset to the default. public override UnityEvent OnValueReset { get; } Property Value UnityEvent Methods IncreaseValue(float) Increases the value of the data property by a given amount. public void IncreaseValue(float increase) Parameters increase float"
  },
  "api/VRBuilder.Core.Properties.ParticleSystemProperty.html": {
    "href": "api/VRBuilder.Core.Properties.ParticleSystemProperty.html",
    "title": "Class ParticleSystemProperty | VR Builder Documentation",
    "keywords": "Class ParticleSystemProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll [RequireComponent(typeof(ParticleSystem))] public class ParticleSystemProperty : ProcessSceneObjectProperty, IParticleSystemProperty, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty ParticleSystemProperty Implements IParticleSystemProperty ISceneObjectProperty Inherited Members ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Properties IsEmitting True if the system is emitting particles. public bool IsEmitting { get; } Property Value bool ParticleSystem The particle system associated with this property. public ParticleSystem ParticleSystem { get; } Property Value ParticleSystem StartedEmission Called when the system starts emitting particles. public UnityEvent<ParticleSystemPropertyEventArgs> StartedEmission { get; } Property Value UnityEvent<ParticleSystemPropertyEventArgs> StoppedEmission Called when the system stops emitting particles. public UnityEvent<ParticleSystemPropertyEventArgs> StoppedEmission { get; } Property Value UnityEvent<ParticleSystemPropertyEventArgs> Methods StartEmission() Start emitting particles. public void StartEmission() StopEmission() Stop emitting particles. public void StopEmission()"
  },
  "api/VRBuilder.Core.Properties.ParticleSystemPropertyEventArgs.html": {
    "href": "api/VRBuilder.Core.Properties.ParticleSystemPropertyEventArgs.html",
    "title": "Class ParticleSystemPropertyEventArgs | VR Builder Documentation",
    "keywords": "Class ParticleSystemPropertyEventArgs Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Event args for IParticleSystemProperty public class ParticleSystemPropertyEventArgs : EventArgs Inheritance object EventArgs ParticleSystemPropertyEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Core.Properties.ProcessSceneObjectProperty.html": {
    "href": "api/VRBuilder.Core.Properties.ProcessSceneObjectProperty.html",
    "title": "Class ProcessSceneObjectProperty | VR Builder Documentation",
    "keywords": "Class ProcessSceneObjectProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll [RequireComponent(typeof(ProcessSceneObject))] public abstract class ProcessSceneObjectProperty : MonoBehaviour, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty Implements ISceneObjectProperty Derived AnimatorProperty ExplodableProperty BaseHighlightProperty BezierSplinePathProperty ColliderWithTriggerProperty DataProperty<T> LockableProperty ParticleSystemProperty TransformInRangeDetectorProperty EventProperty GenericEventProperty<T> ScoreFeedbackProperty TimerProperty VideoPlayerProperty Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Properties SceneObject public ISceneObject SceneObject { get; } Property Value ISceneObject Methods OnEnable() protected virtual void OnEnable() Reset() protected virtual void Reset() ToString() Returns the name of the object. public override string ToString() Returns string The name returned by ToString."
  },
  "api/VRBuilder.Core.Properties.SceneObjectExtensions.html": {
    "href": "api/VRBuilder.Core.Properties.SceneObjectExtensions.html",
    "title": "Class SceneObjectExtensions | VR Builder Documentation",
    "keywords": "Class SceneObjectExtensions Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Helper class that adds functionality to any ISceneObject. public static class SceneObjectExtensions Inheritance object SceneObjectExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddProcessProperty(ISceneObject, Type) Adds a type of processProperty into this ISceneObject. public static ISceneObjectProperty AddProcessProperty(this ISceneObject sceneObject, Type processProperty) Parameters sceneObject ISceneObject ISceneObject to whom the processProperty will be added. processProperty Type Typo of ISceneObjectProperty to be added to sceneObject. Returns ISceneObjectProperty A reference to the ISceneObjectProperty added to sceneObject. AddProcessPropertyExtensions(ISceneObjectProperty) Checks if property extensions exist in the project and adds them to the game object if the current scene requires them. public static void AddProcessPropertyExtensions(this ISceneObjectProperty property) Parameters property ISceneObjectProperty The property to check for. AddProcessProperty<T>(ISceneObject) Adds a ISceneObjectProperty of type T into this ISceneObject. public static ISceneObjectProperty AddProcessProperty<T>(this ISceneObject sceneObject) Parameters sceneObject ISceneObject ISceneObject to whom the type T will be added. Returns ISceneObjectProperty A reference to the ISceneObjectProperty added to sceneObject. Type Parameters T The type of ISceneObjectProperty to be added to sceneObject. RemoveProcessProperty(ISceneObject, Type, bool, IEnumerable<Component>) Removes type of processProperty from this ISceneObject. public static void RemoveProcessProperty(this ISceneObject sceneObject, Type processProperty, bool removeDependencies = false, IEnumerable<Component> excludedFromBeingRemoved = null) Parameters sceneObject ISceneObject ISceneObject from whom the processProperty will be removed. processProperty Type Typo of ISceneObjectProperty to be removed from sceneObject. removeDependencies bool If true, this method also removes other components that are marked as RequiredComponent by processProperty. excludedFromBeingRemoved IEnumerable<Component> The process properties in this list will not be removed if any is a dependency of processProperty. Only relevant if removeDependencies is true. RemoveProcessProperty(ISceneObject, Component, bool, IEnumerable<Component>) Removes type of processProperty from this ISceneObject. public static void RemoveProcessProperty(this ISceneObject sceneObject, Component processProperty, bool removeDependencies = false, IEnumerable<Component> excludedFromBeingRemoved = null) Parameters sceneObject ISceneObject ISceneObject from whom the processProperty will be removed. processProperty Component ISceneObjectProperty to be removed from sceneObject. removeDependencies bool If true, this method also removes other components that are marked as RequiredComponent by processProperty. excludedFromBeingRemoved IEnumerable<Component> The process properties in this list will not be removed if any is a dependency of processProperty. Only relevant if removeDependencies is true. SetSuitableName(ISceneObject, string) Ensures that this ISceneObject's UniqueName is not duplicated. [Obsolete(\"This function is no longer used and will be removed in the next major version.\")] public static void SetSuitableName(this ISceneObject sceneObject, string baseName = \"\") Parameters sceneObject ISceneObject ISceneObject to whom the UniqueName will be validated. baseName string Optional base for this sceneObject's UniqueName."
  },
  "api/VRBuilder.Core.Properties.TeleportationProperty.html": {
    "href": "api/VRBuilder.Core.Properties.TeleportationProperty.html",
    "title": "Class TeleportationProperty | VR Builder Documentation",
    "keywords": "Class TeleportationProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.XRInteraction.dll XR implementation of ITeleportationProperty. [RequireComponent(typeof(TeleportationAnchorVRBuilder), typeof(BoxCollider))] public class TeleportationProperty : LockableProperty, ITeleportationProperty, ISceneObjectProperty, ILockable Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty LockableProperty TeleportationProperty Implements ITeleportationProperty ISceneObjectProperty ILockable Inherited Members LockableProperty.Locked LockableProperty.Unlocked LockableProperty.LockOnParentObjectLock LockableProperty.IsLocked LockableProperty.EndStepLocked LockableProperty.SetLocked(bool) LockableProperty.RequestLocked(bool, IStepData) LockableProperty.RemoveUnlocker(IStepData) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This implementation is based on 'TeleportationAnchor'. Properties IsActive True if the teleportation property is ready to be teleported to. public bool IsActive { get; } Property Value bool OnInitialized Emitted when the teleportation property is initialized. public UnityEvent OnInitialized { get; } Property Value UnityEvent TeleportEnded Emitted when a teleportation action into this ISceneObject was done. public UnityEvent<TeleportationPropertyEventArgs> TeleportEnded { get; } Property Value UnityEvent<TeleportationPropertyEventArgs> WasUsedToTeleport True if a teleportation action into this ITeleportationProperty was done. public bool WasUsedToTeleport { get; } Property Value bool Methods Awake() protected void Awake() EmitTeleported(TeleportingEventArgs) protected virtual void EmitTeleported(TeleportingEventArgs args) Parameters args TeleportingEventArgs FastForwardTeleport() Instantaneously simulate that the object was used. public void FastForwardTeleport() ForceSetTeleported() Forces the property to the teleported state. public void ForceSetTeleported() Initialize() Sets WasUsedToTeleport to true. public void Initialize() Remarks This method is called every time a TeleportCondition is activate. InternalSetLocked(bool) Handle your internal locking affairs here. protected override void InternalSetLocked(bool lockState) Parameters lockState bool OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable()"
  },
  "api/VRBuilder.Core.Properties.TextDataProperty.html": {
    "href": "api/VRBuilder.Core.Properties.TextDataProperty.html",
    "title": "Class TextDataProperty | VR Builder Documentation",
    "keywords": "Class TextDataProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll String implementation of the DataProperty<T> class. public class TextDataProperty : DataProperty<string>, IDataProperty<string>, IDataPropertyBase, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty DataProperty<string> TextDataProperty Implements IDataProperty<string> IDataPropertyBase ISceneObjectProperty Inherited Members DataProperty<string>.storedValue DataProperty<string>.GetValue() DataProperty<string>.ResetValue() DataProperty<string>.SetValue(string) DataProperty<string>.ValueToString(string) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Properties DefaultValue Defines a default value for the property. public override string DefaultValue { get; } Property Value string OnValueChanged Raised when the stored value changes. public override UnityEvent<string> OnValueChanged { get; } Property Value UnityEvent<string> OnValueReset Raised when the stored value is reset to the default. public override UnityEvent OnValueReset { get; } Property Value UnityEvent"
  },
  "api/VRBuilder.Core.Properties.TransformInRangeDetectorProperty.RangeEventArgs.html": {
    "href": "api/VRBuilder.Core.Properties.TransformInRangeDetectorProperty.RangeEventArgs.html",
    "title": "Class TransformInRangeDetectorProperty.RangeEventArgs | VR Builder Documentation",
    "keywords": "Class TransformInRangeDetectorProperty.RangeEventArgs Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll public class TransformInRangeDetectorProperty.RangeEventArgs : EventArgs Inheritance object EventArgs TransformInRangeDetectorProperty.RangeEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RangeEventArgs(Transform) public RangeEventArgs(Transform trackedTransform) Parameters trackedTransform Transform Fields TrackedTransform public readonly Transform TrackedTransform Field Value Transform"
  },
  "api/VRBuilder.Core.Properties.TransformInRangeDetectorProperty.html": {
    "href": "api/VRBuilder.Core.Properties.TransformInRangeDetectorProperty.html",
    "title": "Class TransformInRangeDetectorProperty | VR Builder Documentation",
    "keywords": "Class TransformInRangeDetectorProperty Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll public class TransformInRangeDetectorProperty : ProcessSceneObjectProperty, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty TransformInRangeDetectorProperty Implements ISceneObjectProperty Inherited Members ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SceneObjectExtensions.AddProcessPropertyExtensions(ISceneObjectProperty) Properties DetectionRange public float DetectionRange { get; set; } Property Value float Methods DestroySelf() public void DestroySelf() EmitEnteredArea() protected void EmitEnteredArea() EmitExitedArea() protected void EmitExitedArea() IsTargetInsideRange() public virtual bool IsTargetInsideRange() Returns bool Refresh() Check if there are transforms in range and fire the appropriate events. public void Refresh() SetTrackedTransform(Transform) public void SetTrackedTransform(Transform transformToBeTracked) Parameters transformToBeTracked Transform Events EnteredRange public event EventHandler<TransformInRangeDetectorProperty.RangeEventArgs> EnteredRange Event Type EventHandler<TransformInRangeDetectorProperty.RangeEventArgs> ExitedRange public event EventHandler<TransformInRangeDetectorProperty.RangeEventArgs> ExitedRange Event Type EventHandler<TransformInRangeDetectorProperty.RangeEventArgs>"
  },
  "api/VRBuilder.Core.Properties.UserSceneObject.html": {
    "href": "api/VRBuilder.Core.Properties.UserSceneObject.html",
    "title": "Class UserSceneObject | VR Builder Documentation",
    "keywords": "Class UserSceneObject Namespace VRBuilder.Core.Properties Assembly VRBuilder.Core.dll Used to identify the user within the scene. public class UserSceneObject : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour UserSceneObject Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Head Returns the user's head transform. public Transform Head { get; } Property Value Transform LeftHand Returns the user's left hand transform. public Transform LeftHand { get; } Property Value Transform RightHand Returns the user's right hand transform. public Transform RightHand { get; } Property Value Transform"
  },
  "api/VRBuilder.Core.Properties.html": {
    "href": "api/VRBuilder.Core.Properties.html",
    "title": "Namespace VRBuilder.Core.Properties | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Properties Classes BaseHighlightProperty Abstract base property for highlight properties. BaseHighlightProperty.HighlightEventArgs Event data for events of BaseHighlightProperty. BezierSplinePathProperty Path property that generates a path from a BezierSpline. BooleanDataProperty Boolean implementation of the DataProperty<T> class. ColliderWithTriggerProperty ColliderWithTriggerProperty.ColliderWithTriggerEventArgs DataProperty<T> Base implementation for process data properties. EnableHighlightProperty Highlight property which enables a referenced highlightObject, which can be e.g. a colored copy of the original object or a marker. HighlightPropertyEventArgs LockableProperty ProcessSceneObjectProperty which is lockable, to allow the restrictive environment to handle locking/unlocking your properties, extend this class. NumberDataProperty Float implementation of the DataProperty<T> class. ParticleSystemProperty ParticleSystemPropertyEventArgs Event args for IParticleSystemProperty ProcessSceneObjectProperty SceneObjectExtensions Helper class that adds functionality to any ISceneObject. TeleportationProperty XR implementation of ITeleportationProperty. TextDataProperty String implementation of the DataProperty<T> class. TransformInRangeDetectorProperty TransformInRangeDetectorProperty.RangeEventArgs UserSceneObject Used to identify the user within the scene. Interfaces IDataPropertyBase Base interface for a property that stores a single value. IDataProperty<T> Interface for a property that stores a single value. IHighlightProperty Interface for scene objects that can be highlighted. IParticleSystemProperty Property that controls a particle system. IPathProperty This property represents a linear path. ISceneObjectProperty ISceneObjectPropertyExtension<T> Defines a component extending a ISceneObjectProperty."
  },
  "api/VRBuilder.Core.RandomBranchPostProcessing.html": {
    "href": "api/VRBuilder.Core.RandomBranchPostProcessing.html",
    "title": "Class RandomBranchPostProcessing | VR Builder Documentation",
    "keywords": "Class RandomBranchPostProcessing Namespace VRBuilder.Core Assembly VRBuilder.Randomization.dll IStep implementation of EntityPostProcessing<T> specific for \"randomBranch\" steps. public class RandomBranchPostProcessing : EntityPostProcessing<IStep> Inheritance object EntityPostProcessing<IStep> RandomBranchPostProcessing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(IStep) Executes post processing. public override void Execute(IStep entity) Parameters entity IStep IEntity reference for post processing."
  },
  "api/VRBuilder.Core.RestrictiveEnvironment.DefaultStepLockHandling.html": {
    "href": "api/VRBuilder.Core.RestrictiveEnvironment.DefaultStepLockHandling.html",
    "title": "Class DefaultStepLockHandling | VR Builder Documentation",
    "keywords": "Class DefaultStepLockHandling Namespace VRBuilder.Core.RestrictiveEnvironment Assembly VRBuilder.Core.dll Restricts interaction with scene objects by using LockableProperties, which are extracted from the IStepData. public class DefaultStepLockHandling : StepLockHandlingStrategy Inheritance object StepLockHandlingStrategy DefaultStepLockHandling Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(IMode) Will be called whenever the mode is changed, allows to adapt to lock handling to it. public override void Configure(IMode mode) Parameters mode IMode Lock(IStepData, IEnumerable<LockablePropertyData>) Locks all unlocked LockableProperties for the current step. public override void Lock(IStepData data, IEnumerable<LockablePropertyData> manualUnlocked) Parameters data IStepData IStepData of the current step manualUnlocked IEnumerable<LockablePropertyData> All LockableProperties which were unlocked in addition OnProcessFinished(IProcess) Will be called once when the currently running process finishes. public override void OnProcessFinished(IProcess process) Parameters process IProcess OnProcessStarted(IProcess) Will be called once when a process is started. public override void OnProcessStarted(IProcess process) Parameters process IProcess Unlock(IStepData, IEnumerable<LockablePropertyData>) Unlocks the restrictive environment and allows interaction with scene objects required for this Step to complete. public override void Unlock(IStepData data, IEnumerable<LockablePropertyData> manualUnlocked) Parameters data IStepData IStepData of the current step manualUnlocked IEnumerable<LockablePropertyData> All LockableProperties which are should be unlocked in addition"
  },
  "api/VRBuilder.Core.RestrictiveEnvironment.LockablePropertyData.html": {
    "href": "api/VRBuilder.Core.RestrictiveEnvironment.LockablePropertyData.html",
    "title": "Class LockablePropertyData | VR Builder Documentation",
    "keywords": "Class LockablePropertyData Namespace VRBuilder.Core.RestrictiveEnvironment Assembly VRBuilder.Core.dll Contains a target LockableProperty and additional information which define how the property is handled. public class LockablePropertyData Inheritance object LockablePropertyData Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LockablePropertyData(LockableProperty) public LockablePropertyData(LockableProperty property) Parameters property LockableProperty LockablePropertyData(LockableProperty, bool) public LockablePropertyData(LockableProperty property, bool endStepLocked) Parameters property LockableProperty endStepLocked bool Fields EndStepLocked If true the property is locked in the end of a step. public bool EndStepLocked Field Value bool Property Target lockable property. public readonly LockableProperty Property Field Value LockableProperty Methods Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool Equals(LockablePropertyData) protected bool Equals(LockablePropertyData other) Parameters other LockablePropertyData Returns bool GetHashCode() public override int GetHashCode() Returns int"
  },
  "api/VRBuilder.Core.RestrictiveEnvironment.NonLockingStepHandling.html": {
    "href": "api/VRBuilder.Core.RestrictiveEnvironment.NonLockingStepHandling.html",
    "title": "Class NonLockingStepHandling | VR Builder Documentation",
    "keywords": "Class NonLockingStepHandling Namespace VRBuilder.Core.RestrictiveEnvironment Assembly VRBuilder.Core.dll This implementation does not care about restrictive environment and does nothing. Use this strategy to disable the feature. public class NonLockingStepHandling : StepLockHandlingStrategy Inheritance object StepLockHandlingStrategy NonLockingStepHandling Inherited Members StepLockHandlingStrategy.Configure(IMode) StepLockHandlingStrategy.OnProcessStarted(IProcess) StepLockHandlingStrategy.OnProcessFinished(IProcess) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Lock(IStepData, IEnumerable<LockablePropertyData>) Locks all unlocked LockableProperties for the current step. public override void Lock(IStepData data, IEnumerable<LockablePropertyData> manualUnlocked) Parameters data IStepData IStepData of the current step manualUnlocked IEnumerable<LockablePropertyData> All LockableProperties which were unlocked in addition Unlock(IStepData, IEnumerable<LockablePropertyData>) Unlocks the restrictive environment and allows interaction with scene objects required for this Step to complete. public override void Unlock(IStepData data, IEnumerable<LockablePropertyData> manualUnlocked) Parameters data IStepData IStepData of the current step manualUnlocked IEnumerable<LockablePropertyData> All LockableProperties which are should be unlocked in addition"
  },
  "api/VRBuilder.Core.RestrictiveEnvironment.StepLockHandlingStrategy.html": {
    "href": "api/VRBuilder.Core.RestrictiveEnvironment.StepLockHandlingStrategy.html",
    "title": "Class StepLockHandlingStrategy | VR Builder Documentation",
    "keywords": "Class StepLockHandlingStrategy Namespace VRBuilder.Core.RestrictiveEnvironment Assembly VRBuilder.Core.dll Allows to implement strategies which restrict interaction with scene objects for specific steps. public abstract class StepLockHandlingStrategy Inheritance object StepLockHandlingStrategy Derived DefaultStepLockHandling NonLockingStepHandling Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(IMode) Will be called whenever the mode is changed, allows to adapt to lock handling to it. public virtual void Configure(IMode mode) Parameters mode IMode Lock(IStepData, IEnumerable<LockablePropertyData>) Locks all unlocked LockableProperties for the current step. public abstract void Lock(IStepData data, IEnumerable<LockablePropertyData> manualUnlocked) Parameters data IStepData IStepData of the current step manualUnlocked IEnumerable<LockablePropertyData> All LockableProperties which were unlocked in addition OnProcessFinished(IProcess) Will be called once when the currently running process finishes. public virtual void OnProcessFinished(IProcess process) Parameters process IProcess OnProcessStarted(IProcess) Will be called once when a process is started. public virtual void OnProcessStarted(IProcess process) Parameters process IProcess Unlock(IStepData, IEnumerable<LockablePropertyData>) Unlocks the restrictive environment and allows interaction with scene objects required for this Step to complete. public abstract void Unlock(IStepData data, IEnumerable<LockablePropertyData> manualUnlocked) Parameters data IStepData IStepData of the current step manualUnlocked IEnumerable<LockablePropertyData> All LockableProperties which are should be unlocked in addition"
  },
  "api/VRBuilder.Core.RestrictiveEnvironment.html": {
    "href": "api/VRBuilder.Core.RestrictiveEnvironment.html",
    "title": "Namespace VRBuilder.Core.RestrictiveEnvironment | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.RestrictiveEnvironment Classes DefaultStepLockHandling Restricts interaction with scene objects by using LockableProperties, which are extracted from the IStepData. LockablePropertyData Contains a target LockableProperty and additional information which define how the property is handled. NonLockingStepHandling This implementation does not care about restrictive environment and does nothing. Use this strategy to disable the feature. StepLockHandlingStrategy Allows to implement strategies which restrict interaction with scene objects for specific steps."
  },
  "api/VRBuilder.Core.Runtime.Properties.ICanBeEmpty.html": {
    "href": "api/VRBuilder.Core.Runtime.Properties.ICanBeEmpty.html",
    "title": "Interface ICanBeEmpty | VR Builder Documentation",
    "keywords": "Interface ICanBeEmpty Namespace VRBuilder.Core.Runtime.Properties Assembly VRBuilder.Core.dll Interface which allows validation to check if the object validated is empty. public interface ICanBeEmpty Methods IsEmpty() Returns true when this object is not properly filled. bool IsEmpty() Returns bool"
  },
  "api/VRBuilder.Core.Runtime.Properties.html": {
    "href": "api/VRBuilder.Core.Runtime.Properties.html",
    "title": "Namespace VRBuilder.Core.Runtime.Properties | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Runtime.Properties Interfaces ICanBeEmpty Interface which allows validation to check if the object validated is empty."
  },
  "api/VRBuilder.Core.Runtime.Utils.SettingsObject-1.html": {
    "href": "api/VRBuilder.Core.Runtime.Utils.SettingsObject-1.html",
    "title": "Class SettingsObject<T> | VR Builder Documentation",
    "keywords": "Class SettingsObject<T> Namespace VRBuilder.Core.Runtime.Utils Assembly VRBuilder.Core.dll ScriptableObject with additional load and save mechanic to make it a singleton. public class SettingsObject<T> : ScriptableObject where T : ScriptableObject, new() Type Parameters T The class itself Inheritance object Object ScriptableObject SettingsObject<T> Derived LanguageSettings InteractionSettings SceneObjectGroups SceneObjectTags LifeCycleLoggingConfig InteractionComponentSettings SnapZoneSettings TextToSpeechConfiguration Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Instance public static T Instance { get; } Property Value T Methods ~SettingsObject() protected ~SettingsObject() Save() Saves the VR Builder settings, only works in editor. public void Save()"
  },
  "api/VRBuilder.Core.Runtime.Utils.html": {
    "href": "api/VRBuilder.Core.Runtime.Utils.html",
    "title": "Namespace VRBuilder.Core.Runtime.Utils | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Runtime.Utils Classes SettingsObject<T> ScriptableObject with additional load and save mechanic to make it a singleton."
  },
  "api/VRBuilder.Core.SceneObjects.GuidContainerEventArgs.html": {
    "href": "api/VRBuilder.Core.SceneObjects.GuidContainerEventArgs.html",
    "title": "Class GuidContainerEventArgs | VR Builder Documentation",
    "keywords": "Class GuidContainerEventArgs Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Event args for guid container events. public class GuidContainerEventArgs : EventArgs Inheritance object EventArgs GuidContainerEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GuidContainerEventArgs(Guid) public GuidContainerEventArgs(Guid guid) Parameters guid Guid Fields Guid public readonly Guid Guid Field Value Guid"
  },
  "api/VRBuilder.Core.SceneObjects.IGuidContainer.html": {
    "href": "api/VRBuilder.Core.SceneObjects.IGuidContainer.html",
    "title": "Interface IGuidContainer | VR Builder Documentation",
    "keywords": "Interface IGuidContainer Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll A container for a list of guids that are associated to an object. public interface IGuidContainer Properties Guids All guids on the object. IEnumerable<Guid> Guids { get; } Property Value IEnumerable<Guid> Methods AddGuid(Guid) Add the specified guid. void AddGuid(Guid guid) Parameters guid Guid HasGuid(Guid) True if the object has the specified guid. bool HasGuid(Guid guid) Parameters guid Guid Returns bool RemoveGuid(Guid) Remove the specified guid. bool RemoveGuid(Guid guid) Parameters guid Guid Returns bool Events GuidAdded Raised when a guid is added. event EventHandler<GuidContainerEventArgs> GuidAdded Event Type EventHandler<GuidContainerEventArgs> GuidRemoved Raised when a guid is removed. event EventHandler<GuidContainerEventArgs> GuidRemoved Event Type EventHandler<GuidContainerEventArgs>"
  },
  "api/VRBuilder.Core.SceneObjects.ILockable.html": {
    "href": "api/VRBuilder.Core.SceneObjects.ILockable.html",
    "title": "Interface ILockable | VR Builder Documentation",
    "keywords": "Interface ILockable Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Basic interface for everything which is lockable. public interface ILockable Properties IsLocked Returns if the object is locked. bool IsLocked { get; } Property Value bool Methods RemoveUnlocker(IStepData) Manually removes a step data keeping the object unlocked. bool RemoveUnlocker(IStepData data) Parameters data IStepData Returns bool RequestLocked(bool, IStepData) Requests a change on the lock state of the object. void RequestLocked(bool lockState, IStepData stepData = null) Parameters lockState bool stepData IStepData SetLocked(bool) Changes the lock state of the object. void SetLocked(bool lockState) Parameters lockState bool Events Locked Will be called when the object containing this interface is locked. event EventHandler<LockStateChangedEventArgs> Locked Event Type EventHandler<LockStateChangedEventArgs> Unlocked Will be called when the object containing this interface is unlocked. event EventHandler<LockStateChangedEventArgs> Unlocked Event Type EventHandler<LockStateChangedEventArgs>"
  },
  "api/VRBuilder.Core.SceneObjects.ISceneObject.html": {
    "href": "api/VRBuilder.Core.SceneObjects.ISceneObject.html",
    "title": "Interface ISceneObject | VR Builder Documentation",
    "keywords": "Interface ISceneObject Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Gives the possibility to easily identify targets for Conditions, Behaviors and so on. public interface ISceneObject : ILockable, IGuidContainer Inherited Members ILockable.Locked ILockable.Unlocked ILockable.IsLocked ILockable.SetLocked(bool) ILockable.RequestLocked(bool, IStepData) ILockable.RemoveUnlocker(IStepData) IGuidContainer.GuidAdded IGuidContainer.GuidRemoved IGuidContainer.Guids IGuidContainer.HasGuid(Guid) IGuidContainer.AddGuid(Guid) IGuidContainer.RemoveGuid(Guid) Extension Methods SceneObjectExtensions.AddProcessProperty(ISceneObject, Type) SceneObjectExtensions.AddProcessProperty<T>(ISceneObject) SceneObjectExtensions.RemoveProcessProperty(ISceneObject, Type, bool, IEnumerable<Component>) SceneObjectExtensions.RemoveProcessProperty(ISceneObject, Component, bool, IEnumerable<Component>) SceneObjectExtensions.SetSuitableName(ISceneObject, string) Properties GameObject Target GameObject, used for applying stuff. GameObject GameObject { get; } Property Value GameObject Guid Unique Guid for each entity, which is required Guid Guid { get; } Property Value Guid Properties Properties on the scene object. ICollection<ISceneObjectProperty> Properties { get; } Property Value ICollection<ISceneObjectProperty> UniqueName Unique name which is not required [Obsolete(\"Use Guid instead.\")] string UniqueName { get; } Property Value string Methods ChangeUniqueName(string) Attempts to change the scene object's unique name to the specified name. [Obsolete(\"Use ChangeUniqueId instead.\")] void ChangeUniqueName(string newName) Parameters newName string CheckHasProperty(Type) True if the scene object has a property of the specified type. bool CheckHasProperty(Type type) Parameters type Type Returns bool CheckHasProperty<T>() True if the scene object has a property of the specified type. bool CheckHasProperty<T>() where T : ISceneObjectProperty Returns bool Type Parameters T GetProperty<T>() Returns a property of the specified type. T GetProperty<T>() where T : ISceneObjectProperty Returns T Type Parameters T SetObjectId(Guid) Gives the object a new specified unique ID. void SetObjectId(Guid guid) Parameters guid Guid ValidateProperties(IEnumerable<Type>) Validates properties on the scene object. void ValidateProperties(IEnumerable<Type> properties) Parameters properties IEnumerable<Type> Events ObjectIdChanged Called when the object's object id has been changed. event EventHandler<UniqueIdChangedEventArgs> ObjectIdChanged Event Type EventHandler<UniqueIdChangedEventArgs> UniqueNameChanged [Obsolete(\"This event is no longer used and will be removed in the next major release. Use UniqueIdChanged instead.\")] event EventHandler<SceneObjectNameChanged> UniqueNameChanged Event Type EventHandler<SceneObjectNameChanged>"
  },
  "api/VRBuilder.Core.SceneObjects.ISceneObjectRegistry.html": {
    "href": "api/VRBuilder.Core.SceneObjects.ISceneObjectRegistry.html",
    "title": "Interface ISceneObjectRegistry | VR Builder Documentation",
    "keywords": "Interface ISceneObjectRegistry Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll public interface ISceneObjectRegistry Properties this[Guid] Shortcut for GetByGuid(Guid guid) method. [Obsolete(\"Use GetObjects instead\")] ISceneObject this[Guid guid] { get; } Parameters guid Guid Property Value ISceneObject this[string] Shortcut for GetByName(string name) method. [Obsolete(\"Use GetObjects instead\")] ISceneObject this[string name] { get; } Parameters name string Property Value ISceneObject Methods ContainsGuid(Guid) Returns if the Guid is registered in the registry. bool ContainsGuid(Guid guid) Parameters guid Guid Returns bool ContainsName(string) Returns if the name is registered in the registry. [Obsolete(\"Use ContainsGuid instead.\")] bool ContainsName(string name) Parameters name string Returns bool GetByGuid(Guid) Returns the IProcessSceneEntity belonging to the given Guid. If there is no fitting Entity found a MissingEntityException will be thrown. [Obsolete(\"Use GetObjects instead.\")] ISceneObject GetByGuid(Guid guid) Parameters guid Guid Returns ISceneObject GetByName(string) Returns the IProcessSceneEntity belonging to the given unique name. If there is no fitting Entity found a MissingEntityException will be thrown. [Obsolete(\"Use GetObjects instead.\")] ISceneObject GetByName(string name) Parameters name string Returns ISceneObject GetByTag(Guid) [Obsolete(\"Use GetObjects instead.\")] IEnumerable<ISceneObject> GetByTag(Guid tag) Parameters tag Guid Returns IEnumerable<ISceneObject> GetObjects(Guid) Returns all registered scene objects which have the provided guid assigned to them. IEnumerable<ISceneObject> GetObjects(Guid guid) Parameters guid Guid Returns IEnumerable<ISceneObject> GetProperties<T>(Guid) Returns all registered scene objects with the provided guid and at least one valid property of the specified type. IEnumerable<T> GetProperties<T>(Guid guid) where T : ISceneObjectProperty Parameters guid Guid Returns IEnumerable<T> Type Parameters T GetPropertyByTag<T>(Guid) [Obsolete(\"Use GetProperties instead.\")] IEnumerable<T> GetPropertyByTag<T>(Guid tag) where T : ISceneObjectProperty Parameters tag Guid Returns IEnumerable<T> Type Parameters T Refresh() Updates the registry by removing all ISceneObject which are not in the scene anymore and adding new ones. void Refresh() Register(ISceneObject) Registers an SceneObject in the registry. If there is an SceneObject with the same name already registered, an NameNotUniqueException will be thrown. Also if the Guid is already known an SceneObjectAlreadyRegisteredException will be thrown. void Register(ISceneObject obj) Parameters obj ISceneObject RegisterAll() Registers all SceneObject in scene, independent of their state. void RegisterAll() Unregister(ISceneObject) Removes the SceneObject completely from the Registry. bool Unregister(ISceneObject obj) Parameters obj ISceneObject Returns bool"
  },
  "api/VRBuilder.Core.SceneObjects.ITagContainer.html": {
    "href": "api/VRBuilder.Core.SceneObjects.ITagContainer.html",
    "title": "Interface ITagContainer | VR Builder Documentation",
    "keywords": "Interface ITagContainer Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll A container for a list of guids that are associated to an object as tags. [Obsolete(\"Use IGuidContainer instead.\")] public interface ITagContainer Properties Tags All tags on the object. IEnumerable<Guid> Tags { get; } Property Value IEnumerable<Guid> Methods AddTag(Guid) Add the specified tag. void AddTag(Guid tag) Parameters tag Guid HasTag(Guid) True if the object has the specified tag. bool HasTag(Guid tag) Parameters tag Guid Returns bool RemoveTag(Guid) Remove the specified tag. bool RemoveTag(Guid tag) Parameters tag Guid Returns bool Events TagAdded Raised when a tag is added. event EventHandler<GuidContainerEventArgs> TagAdded Event Type EventHandler<GuidContainerEventArgs> TagRemoved Raised when a tag is removed. event EventHandler<GuidContainerEventArgs> TagRemoved Event Type EventHandler<GuidContainerEventArgs>"
  },
  "api/VRBuilder.Core.SceneObjects.LockStateChangedEventArgs.html": {
    "href": "api/VRBuilder.Core.SceneObjects.LockStateChangedEventArgs.html",
    "title": "Class LockStateChangedEventArgs | VR Builder Documentation",
    "keywords": "Class LockStateChangedEventArgs Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll public class LockStateChangedEventArgs : EventArgs Inheritance object EventArgs LockStateChangedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LockStateChangedEventArgs(bool) public LockStateChangedEventArgs(bool isLocked) Parameters isLocked bool Fields IsLocked public readonly bool IsLocked Field Value bool"
  },
  "api/VRBuilder.Core.SceneObjects.MultipleSceneObjectReference.html": {
    "href": "api/VRBuilder.Core.SceneObjects.MultipleSceneObjectReference.html",
    "title": "Class MultipleSceneObjectReference | VR Builder Documentation",
    "keywords": "Class MultipleSceneObjectReference Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Step inspector reference to multiple ISceneObjects. [DataContract(IsReference = true)] public class MultipleSceneObjectReference : MultipleSceneReference<ISceneObject>, ICanBeEmpty Inheritance object ProcessSceneReferenceBase ProcessSceneReference<ISceneObject> MultipleSceneReference<ISceneObject> MultipleSceneObjectReference Implements ICanBeEmpty Inherited Members MultipleSceneReference<ISceneObject>.Values MultipleSceneReference<ISceneObject>.HasValue() MultipleSceneReference<ISceneObject>.ToString() ProcessSceneReferenceBase.Guids ProcessSceneReferenceBase.AddGuid(Guid) ProcessSceneReferenceBase.RemoveGuid(Guid) ProcessSceneReferenceBase.ResetGuids(IEnumerable<Guid>) ProcessSceneReferenceBase.IsEmpty() ProcessSceneReferenceBase.Equals(object) ProcessSceneReferenceBase.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MultipleSceneObjectReference() public MultipleSceneObjectReference() MultipleSceneObjectReference(IEnumerable<Guid>) public MultipleSceneObjectReference(IEnumerable<Guid> guids) Parameters guids IEnumerable<Guid> MultipleSceneObjectReference(Guid) public MultipleSceneObjectReference(Guid guid) Parameters guid Guid Methods DetermineValue(IEnumerable<ISceneObject>) Determine the objects referenced by this scene reference. protected override IEnumerable<ISceneObject> DetermineValue(IEnumerable<ISceneObject> cachedValue) Parameters cachedValue IEnumerable<ISceneObject> Returns IEnumerable<ISceneObject>"
  },
  "api/VRBuilder.Core.SceneObjects.MultipleScenePropertyReference-1.html": {
    "href": "api/VRBuilder.Core.SceneObjects.MultipleScenePropertyReference-1.html",
    "title": "Class MultipleScenePropertyReference<T> | VR Builder Documentation",
    "keywords": "Class MultipleScenePropertyReference<T> Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Step inspector reference to multiple ISceneObjectPropertys. [DataContract(IsReference = true)] public class MultipleScenePropertyReference<T> : MultipleSceneReference<T>, ICanBeEmpty where T : class, ISceneObjectProperty Type Parameters T Inheritance object ProcessSceneReferenceBase ProcessSceneReference<T> MultipleSceneReference<T> MultipleScenePropertyReference<T> Implements ICanBeEmpty Inherited Members MultipleSceneReference<T>.Values MultipleSceneReference<T>.HasValue() MultipleSceneReference<T>.ToString() ProcessSceneReferenceBase.Guids ProcessSceneReferenceBase.AddGuid(Guid) ProcessSceneReferenceBase.RemoveGuid(Guid) ProcessSceneReferenceBase.ResetGuids(IEnumerable<Guid>) ProcessSceneReferenceBase.IsEmpty() ProcessSceneReferenceBase.Equals(object) ProcessSceneReferenceBase.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MultipleScenePropertyReference() public MultipleScenePropertyReference() MultipleScenePropertyReference(IEnumerable<Guid>) public MultipleScenePropertyReference(IEnumerable<Guid> guids) Parameters guids IEnumerable<Guid> MultipleScenePropertyReference(Guid) public MultipleScenePropertyReference(Guid guid) Parameters guid Guid Methods DetermineValue(IEnumerable<T>) Determine the objects referenced by this scene reference. protected override IEnumerable<T> DetermineValue(IEnumerable<T> cachedValue) Parameters cachedValue IEnumerable<T> Returns IEnumerable<T>"
  },
  "api/VRBuilder.Core.SceneObjects.MultipleSceneReference-1.html": {
    "href": "api/VRBuilder.Core.SceneObjects.MultipleSceneReference-1.html",
    "title": "Class MultipleSceneReference<T> | VR Builder Documentation",
    "keywords": "Class MultipleSceneReference<T> Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Step inspector reference to multiple objects. [DataContract(IsReference = true)] public abstract class MultipleSceneReference<T> : ProcessSceneReference<T>, ICanBeEmpty where T : class Type Parameters T Inheritance object ProcessSceneReferenceBase ProcessSceneReference<T> MultipleSceneReference<T> Implements ICanBeEmpty Derived MultipleSceneObjectReference MultipleScenePropertyReference<T> Inherited Members ProcessSceneReferenceBase.Guids ProcessSceneReferenceBase.AddGuid(Guid) ProcessSceneReferenceBase.RemoveGuid(Guid) ProcessSceneReferenceBase.ResetGuids(IEnumerable<Guid>) ProcessSceneReferenceBase.IsEmpty() ProcessSceneReferenceBase.Equals(object) ProcessSceneReferenceBase.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MultipleSceneReference() public MultipleSceneReference() MultipleSceneReference(IEnumerable<Guid>) public MultipleSceneReference(IEnumerable<Guid> guids) Parameters guids IEnumerable<Guid> MultipleSceneReference(Guid) public MultipleSceneReference(Guid guid) Parameters guid Guid Properties Values The referenced values. public IEnumerable<T> Values { get; } Property Value IEnumerable<T> Methods DetermineValue(IEnumerable<T>) Determine the objects referenced by this scene reference. protected abstract IEnumerable<T> DetermineValue(IEnumerable<T> cachedValue) Parameters cachedValue IEnumerable<T> Returns IEnumerable<T> HasValue() Returns true if the reference contains a non-null value. public override bool HasValue() Returns bool ToString() public override string ToString() Returns string Operators implicit operator List<T>(MultipleSceneReference<T>) public static implicit operator List<T>(MultipleSceneReference<T> reference) Parameters reference MultipleSceneReference<T> Returns List<T>"
  },
  "api/VRBuilder.Core.SceneObjects.ObjectReference-1.html": {
    "href": "api/VRBuilder.Core.SceneObjects.ObjectReference-1.html",
    "title": "Class ObjectReference<T> | VR Builder Documentation",
    "keywords": "Class ObjectReference<T> Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Base class for references to process objects and their properties. [DataContract(IsReference = true)] [Obsolete(\"Use ProcessSceneReferenceBase and derived classes to store references to objects in the scene.\")] public abstract class ObjectReference<T> : UniqueNameReference, ICanBeEmpty where T : class Type Parameters T Inheritance object UniqueNameReference ObjectReference<T> Implements ICanBeEmpty Derived SceneObjectReference ScenePropertyReference<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ObjectReference() protected ObjectReference() ObjectReference(string) protected ObjectReference(string uniqueName) Parameters uniqueName string Properties UniqueName Serializable unique name of referenced object. public override string UniqueName { get; set; } Property Value string Value public T Value { get; } Property Value T Methods DetermineValue(T) protected abstract T DetermineValue(T cachedValue) Parameters cachedValue T Returns T IsEmpty() Returns true when this object is not properly filled. public bool IsEmpty() Returns bool Operators implicit operator T(ObjectReference<T>) public static implicit operator T(ObjectReference<T> reference) Parameters reference ObjectReference<T> Returns T"
  },
  "api/VRBuilder.Core.SceneObjects.ProcessSceneObject.html": {
    "href": "api/VRBuilder.Core.SceneObjects.ProcessSceneObject.html",
    "title": "Class ProcessSceneObject | VR Builder Documentation",
    "keywords": "Class ProcessSceneObject Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll This component gives a GameObject a stable, non-replicatable Globally Unique Identifier. It can be used to reference a specific instance of an object no matter where it is. [ExecuteInEditMode] [DisallowMultipleComponent] public class ProcessSceneObject : MonoBehaviour, ISerializationCallbackReceiver, ISceneObject, ILockable, IGuidContainer Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObject Implements ISerializationCallbackReceiver ISceneObject ILockable IGuidContainer Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SceneObjectExtensions.AddProcessProperty(ISceneObject, Type) SceneObjectExtensions.AddProcessProperty<T>(ISceneObject) SceneObjectExtensions.RemoveProcessProperty(ISceneObject, Type, bool, IEnumerable<Component>) SceneObjectExtensions.RemoveProcessProperty(ISceneObject, Component, bool, IEnumerable<Component>) SceneObjectExtensions.SetSuitableName(ISceneObject, string) Fields guid We use this Guid for comparison, generation and caching. protected Guid guid Field Value Guid Remarks When the serializedGuid is modified by the Unity editor (e.g.: reverting a prefab) this will be used to revert it back canaling the changes of the editor. guids [SerializeField] protected List<SerializableGuid> guids Field Value List<SerializableGuid> tags [SerializeField] [Obsolete(\"This field will be removed in a future major version.\")] protected List<string> tags Field Value List<string> uniqueName [SerializeField] [Tooltip(\"Unique name which identifies an object in scene, can be null or empty, but has to be unique in the scene.\")] [Obsolete(\"This exists for backwards compatibility. Use the serializedGuid field to store the object's unique identifier.\")] protected string uniqueName Field Value string Properties GameObject Target GameObject, used for applying stuff. public GameObject GameObject { get; } Property Value GameObject Guid Unique Guid for each entity, which is required public Guid Guid { get; } Property Value Guid Guids All guids on the object. public IEnumerable<Guid> Guids { get; } Property Value IEnumerable<Guid> IsLocked Returns if the object is locked. public bool IsLocked { get; } Property Value bool Properties Properties associated with this scene object. public ICollection<ISceneObjectProperty> Properties { get; } Property Value ICollection<ISceneObjectProperty> Tags [Obsolete(\"This property will be removed in a future major version.\")] public IEnumerable<Guid> Tags { get; } Property Value IEnumerable<Guid> UniqueName Unique name which is not required [Obsolete(\"Use Guid instead.\")] public string UniqueName { get; } Property Value string Methods AddGuid(Guid) Add the specified guid. public void AddGuid(Guid guid) Parameters guid Guid ChangeUniqueName(string) Attempts to change the scene object's unique name to the specified name. [Obsolete(\"This is no longer supported.\")] public void ChangeUniqueName(string newName = \"\") Parameters newName string CheckHasProperty(Type) True if the scene object has a property of the specified type. public bool CheckHasProperty(Type type) Parameters type Type Returns bool CheckHasProperty<T>() True if the scene object has a property of the specified type. public bool CheckHasProperty<T>() where T : ISceneObjectProperty Returns bool Type Parameters T GetProperty<T>() Returns a property of the specified type. public T GetProperty<T>() where T : ISceneObjectProperty Returns T Type Parameters T HasGuid(Guid) True if the object has the specified guid. public bool HasGuid(Guid guid) Parameters guid Guid Returns bool Init() Initializes the ProcessSceneObject by registering it with the SceneObjectRegistry. It will not register if in prefab mode edit mode or if we are a prefab asset. protected void Init() IsGuidAssigned() Checks if the Guid was assigned a value and not System.Guid.Empty. protected bool IsGuidAssigned() Returns bool true if the Guid is assigned; otherwise, false. OnAfterDeserialize() public void OnAfterDeserialize() OnBeforeSerialize() Implement this method to receive a callback before Unity serializes your object. public void OnBeforeSerialize() Remarks We use this to prevent the GUID to be saved into a prefab on disk. Be aware this is called more often than you would think (e.g.: about once per frame if the object is selected in the editor) https://discussions.unity.com/t/onbeforeserialize-is-getting-called-rapidly/115546, https://blog.unity.com/engine-platform/serialization-in-unity RemoveGuid(Guid) Remove the specified guid. public bool RemoveGuid(Guid guid) Parameters guid Guid Returns bool RemoveUnlocker(IStepData) Manually removes a step data keeping the object unlocked. public bool RemoveUnlocker(IStepData data) Parameters data IStepData Returns bool RequestLocked(bool, IStepData) Requests a change on the lock state of the object. public virtual void RequestLocked(bool lockState, IStepData stepData) Parameters lockState bool stepData IStepData ResetUniqueId() public void ResetUniqueId() SetLocked(bool) Changes the lock state of the object. public void SetLocked(bool lockState) Parameters lockState bool SetObjectId(Guid) Gives the object a new specified unique ID. public void SetObjectId(Guid guid) Parameters guid Guid ToString() Returns the name of the object. public override string ToString() Returns string The name returned by ToString. ValidateProperties(IEnumerable<Type>) Validates properties on the scene object. public void ValidateProperties(IEnumerable<Type> properties) Parameters properties IEnumerable<Type> Events GuidAdded Raised when a guid is added. public event EventHandler<GuidContainerEventArgs> GuidAdded Event Type EventHandler<GuidContainerEventArgs> GuidRemoved Raised when a guid is removed. public event EventHandler<GuidContainerEventArgs> GuidRemoved Event Type EventHandler<GuidContainerEventArgs> Locked Will be called when the object containing this interface is locked. public event EventHandler<LockStateChangedEventArgs> Locked Event Type EventHandler<LockStateChangedEventArgs> ObjectIdChanged Called when the object's object id has been changed. public event EventHandler<UniqueIdChangedEventArgs> ObjectIdChanged Event Type EventHandler<UniqueIdChangedEventArgs> UniqueNameChanged [Obsolete(\"This event is no longer used and will be removed in the next major release.\")] public event EventHandler<SceneObjectNameChanged> UniqueNameChanged Event Type EventHandler<SceneObjectNameChanged> Unlocked Will be called when the object containing this interface is unlocked. public event EventHandler<LockStateChangedEventArgs> Unlocked Event Type EventHandler<LockStateChangedEventArgs>"
  },
  "api/VRBuilder.Core.SceneObjects.ProcessSceneReference-1.html": {
    "href": "api/VRBuilder.Core.SceneObjects.ProcessSceneReference-1.html",
    "title": "Class ProcessSceneReference<T> | VR Builder Documentation",
    "keywords": "Class ProcessSceneReference<T> Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Step inspector reference to a scene object or a specific property. [DataContract(IsReference = true)] public abstract class ProcessSceneReference<T> : ProcessSceneReferenceBase, ICanBeEmpty where T : class Type Parameters T Inheritance object ProcessSceneReferenceBase ProcessSceneReference<T> Implements ICanBeEmpty Derived MultipleSceneReference<T> SingleSceneReference<T> Inherited Members ProcessSceneReferenceBase.Guids ProcessSceneReferenceBase.HasValue() ProcessSceneReferenceBase.AddGuid(Guid) ProcessSceneReferenceBase.RemoveGuid(Guid) ProcessSceneReferenceBase.ResetGuids(IEnumerable<Guid>) ProcessSceneReferenceBase.IsEmpty() ProcessSceneReferenceBase.Equals(object) ProcessSceneReferenceBase.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProcessSceneReference() public ProcessSceneReference() ProcessSceneReference(IEnumerable<Guid>) public ProcessSceneReference(IEnumerable<Guid> guids) Parameters guids IEnumerable<Guid> ProcessSceneReference(Guid) public ProcessSceneReference(Guid guid) Parameters guid Guid"
  },
  "api/VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.html": {
    "href": "api/VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.html",
    "title": "Class ProcessSceneReferenceBase | VR Builder Documentation",
    "keywords": "Class ProcessSceneReferenceBase Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Base class for a process reference to one or more objects. [DataContract(IsReference = true)] public abstract class ProcessSceneReferenceBase : ICanBeEmpty Inheritance object ProcessSceneReferenceBase Implements ICanBeEmpty Derived ProcessSceneReference<T> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProcessSceneReferenceBase() public ProcessSceneReferenceBase() ProcessSceneReferenceBase(IEnumerable<Guid>) public ProcessSceneReferenceBase(IEnumerable<Guid> guids) Parameters guids IEnumerable<Guid> ProcessSceneReferenceBase(Guid) public ProcessSceneReferenceBase(Guid guid) Parameters guid Guid Properties Guids List of guids, each Guid is a reference to a SceneObjectGroups.SceneObjectGroup. public IReadOnlyList<Guid> Guids { get; } Property Value IReadOnlyList<Guid> Methods AddGuid(Guid) Adds the specified guid to this reference. public void AddGuid(Guid guid) Parameters guid Guid Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int HasValue() Returns true if the reference contains a non-null value. public abstract bool HasValue() Returns bool IsEmpty() Returns true when this object is not properly filled. public virtual bool IsEmpty() Returns bool RemoveGuid(Guid) Removes the specified guid from this reference. public bool RemoveGuid(Guid guid) Parameters guid Guid Returns bool ResetGuids(IEnumerable<Guid>) Resets the guids on this reference to the specified value. public void ResetGuids(IEnumerable<Guid> newGuids = null) Parameters newGuids IEnumerable<Guid> Operators operator ==(ProcessSceneReferenceBase, ProcessSceneReferenceBase) public static bool operator ==(ProcessSceneReferenceBase left, ProcessSceneReferenceBase right) Parameters left ProcessSceneReferenceBase right ProcessSceneReferenceBase Returns bool operator !=(ProcessSceneReferenceBase, ProcessSceneReferenceBase) public static bool operator !=(ProcessSceneReferenceBase left, ProcessSceneReferenceBase right) Parameters left ProcessSceneReferenceBase right ProcessSceneReferenceBase Returns bool"
  },
  "api/VRBuilder.Core.SceneObjects.ProcessVariableSelectableValue-1.html": {
    "href": "api/VRBuilder.Core.SceneObjects.ProcessVariableSelectableValue-1.html",
    "title": "Class ProcessVariableSelectableValue<T> | VR Builder Documentation",
    "keywords": "Class ProcessVariableSelectableValue<T> Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Selectable value implementation for process variables. [DataContract(IsReference = true)] public class ProcessVariableSelectableValue<T> : SelectableValue<T, SingleScenePropertyReference<IDataProperty<T>>> Type Parameters T Inheritance object SelectableValue<T, SingleScenePropertyReference<IDataProperty<T>>> ProcessVariableSelectableValue<T> Inherited Members SelectableValue<T, SingleScenePropertyReference<IDataProperty<T>>>.FirstValueLabel SelectableValue<T, SingleScenePropertyReference<IDataProperty<T>>>.SecondValueLabel SelectableValue<T, SingleScenePropertyReference<IDataProperty<T>>>.FirstValue SelectableValue<T, SingleScenePropertyReference<IDataProperty<T>>>.SecondValue SelectableValue<T, SingleScenePropertyReference<IDataProperty<T>>>.IsFirstValueSelected object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProcessVariableSelectableValue(T, SingleScenePropertyReference<IDataProperty<T>>, bool) public ProcessVariableSelectableValue(T firstValue, SingleScenePropertyReference<IDataProperty<T>> secondValue, bool isFirstValueSelected) Parameters firstValue T secondValue SingleScenePropertyReference<IDataProperty<T>> isFirstValueSelected bool Properties FirstValueLabel Label for the first value. public override string FirstValueLabel { get; } Property Value string SecondValueLabel Label for the second value. public override string SecondValueLabel { get; } Property Value string"
  },
  "api/VRBuilder.Core.SceneObjects.PropertyReferenceOrTagSelectableValue-1.html": {
    "href": "api/VRBuilder.Core.SceneObjects.PropertyReferenceOrTagSelectableValue-1.html",
    "title": "Class PropertyReferenceOrTagSelectableValue<T> | VR Builder Documentation",
    "keywords": "Class PropertyReferenceOrTagSelectableValue<T> Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Lets the user choose between a scene property reference or a tag. [DataContract(IsReference = true)] [Obsolete(\"This class is not used anymore and will be removed in the next major release.\")] public class PropertyReferenceOrTagSelectableValue<T> : SelectableValue<ScenePropertyReference<T>, SceneObjectTag<T>> where T : class, ISceneObjectProperty Type Parameters T Inheritance object SelectableValue<ScenePropertyReference<T>, SceneObjectTag<T>> PropertyReferenceOrTagSelectableValue<T> Inherited Members SelectableValue<ScenePropertyReference<T>, SceneObjectTag<T>>.FirstValueLabel SelectableValue<ScenePropertyReference<T>, SceneObjectTag<T>>.SecondValueLabel SelectableValue<ScenePropertyReference<T>, SceneObjectTag<T>>.FirstValue SelectableValue<ScenePropertyReference<T>, SceneObjectTag<T>>.SecondValue SelectableValue<ScenePropertyReference<T>, SceneObjectTag<T>>.IsFirstValueSelected object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyReferenceOrTagSelectableValue() public PropertyReferenceOrTagSelectableValue() Properties FirstValueLabel Label for the first value. public override string FirstValueLabel { get; } Property Value string SecondValueLabel Label for the second value. public override string SecondValueLabel { get; } Property Value string"
  },
  "api/VRBuilder.Core.SceneObjects.SceneObjectNameChanged.html": {
    "href": "api/VRBuilder.Core.SceneObjects.SceneObjectNameChanged.html",
    "title": "Class SceneObjectNameChanged | VR Builder Documentation",
    "keywords": "Class SceneObjectNameChanged Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll [Obsolete(\"These args belong to a unused event and will be removed in the next major release.\")] public class SceneObjectNameChanged : EventArgs Inheritance object EventArgs SceneObjectNameChanged Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SceneObjectNameChanged(string, string) public SceneObjectNameChanged(string newName, string previousName) Parameters newName string previousName string Fields NewName public readonly string NewName Field Value string PreviousName public readonly string PreviousName Field Value string"
  },
  "api/VRBuilder.Core.SceneObjects.SceneObjectReference.html": {
    "href": "api/VRBuilder.Core.SceneObjects.SceneObjectReference.html",
    "title": "Class SceneObjectReference | VR Builder Documentation",
    "keywords": "Class SceneObjectReference Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Weak reference by a unique name to a process object in a scene. [DataContract(IsReference = true)] [Obsolete(\"Use ProcessSceneReferenceBase and derived classes to store references to objects in the scene.\")] public sealed class SceneObjectReference : ObjectReference<ISceneObject>, ICanBeEmpty Inheritance object UniqueNameReference ObjectReference<ISceneObject> SceneObjectReference Implements ICanBeEmpty Inherited Members ObjectReference<ISceneObject>.UniqueName ObjectReference<ISceneObject>.Value ObjectReference<ISceneObject>.IsEmpty() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SceneObjectReference() public SceneObjectReference() SceneObjectReference(string) public SceneObjectReference(string uniqueName) Parameters uniqueName string Methods DetermineValue(ISceneObject) protected override ISceneObject DetermineValue(ISceneObject cached) Parameters cached ISceneObject Returns ISceneObject"
  },
  "api/VRBuilder.Core.SceneObjects.SceneObjectRegistry.html": {
    "href": "api/VRBuilder.Core.SceneObjects.SceneObjectRegistry.html",
    "title": "Class SceneObjectRegistry | VR Builder Documentation",
    "keywords": "Class SceneObjectRegistry Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll [Obsolete(\"This implementation of the scene object registry is obsolete. Use SceneObjectRegistryV2 instead.\")] public class SceneObjectRegistry : ISceneObjectRegistry Inheritance object SceneObjectRegistry Implements ISceneObjectRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SceneObjectRegistry() public SceneObjectRegistry() Properties this[Guid] Shortcut for GetByGuid(Guid guid) method. public ISceneObject this[Guid guid] { get; } Parameters guid Guid Property Value ISceneObject this[string] Shortcut for GetByName(string name) method. public ISceneObject this[string name] { get; } Parameters name string Property Value ISceneObject Methods ContainsGuid(Guid) Returns if the Guid is registered in the registry. public bool ContainsGuid(Guid guid) Parameters guid Guid Returns bool ContainsName(string) Returns if the name is registered in the registry. public bool ContainsName(string name) Parameters name string Returns bool GetByGuid(Guid) Returns the IProcessSceneEntity belonging to the given Guid. If there is no fitting Entity found a MissingEntityException will be thrown. public ISceneObject GetByGuid(Guid guid) Parameters guid Guid Returns ISceneObject GetByName(string) Returns the IProcessSceneEntity belonging to the given unique name. If there is no fitting Entity found a MissingEntityException will be thrown. public ISceneObject GetByName(string name) Parameters name string Returns ISceneObject GetByTag(Guid) [Obsolete(\"Use GetObjects instead.\")] public IEnumerable<ISceneObject> GetByTag(Guid tag) Parameters tag Guid Returns IEnumerable<ISceneObject> GetObjects(Guid) Returns all registered scene objects which have the provided guid assigned to them. public IEnumerable<ISceneObject> GetObjects(Guid tag) Parameters tag Guid Returns IEnumerable<ISceneObject> GetProperties<T>(Guid) Returns all registered scene objects with the provided guid and at least one valid property of the specified type. public IEnumerable<T> GetProperties<T>(Guid tag) where T : ISceneObjectProperty Parameters tag Guid Returns IEnumerable<T> Type Parameters T GetPropertyByTag<T>(Guid) [Obsolete(\"Use GetProperties instead.\")] public IEnumerable<T> GetPropertyByTag<T>(Guid tag) where T : ISceneObjectProperty Parameters tag Guid Returns IEnumerable<T> Type Parameters T Refresh() Updates the registry by removing all ISceneObject which are not in the scene anymore and adding new ones. public void Refresh() Register(ISceneObject) Registers an SceneObject in the registry. If there is an SceneObject with the same name already registered, an NameNotUniqueException will be thrown. Also if the Guid is already known an SceneObjectAlreadyRegisteredException will be thrown. public void Register(ISceneObject obj) Parameters obj ISceneObject RegisterAll() Registers all SceneObject in scene, independent of their state. public void RegisterAll() Unregister(ISceneObject) Removes the SceneObject completely from the Registry. public bool Unregister(ISceneObject entity) Parameters entity ISceneObject Returns bool"
  },
  "api/VRBuilder.Core.SceneObjects.SceneObjectRegistryV2.html": {
    "href": "api/VRBuilder.Core.SceneObjects.SceneObjectRegistryV2.html",
    "title": "Class SceneObjectRegistryV2 | VR Builder Documentation",
    "keywords": "Class SceneObjectRegistryV2 Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Implementation of ISceneObjectRegistry that handles ISceneObjects with one or more GUID associated to them. The GUIDs don't have to be unique and can represent a group of objects. public class SceneObjectRegistryV2 : ISceneObjectRegistry Inheritance object SceneObjectRegistryV2 Implements ISceneObjectRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SceneObjectRegistryV2() public SceneObjectRegistryV2() Fields registeredObjects protected readonly Dictionary<Guid, List<ISceneObject>> registeredObjects Field Value Dictionary<Guid, List<ISceneObject>> Properties this[Guid] Shortcut for GetByGuid(Guid guid) method. public ISceneObject this[Guid guid] { get; } Parameters guid Guid Property Value ISceneObject this[string] Shortcut for GetByName(string name) method. public ISceneObject this[string name] { get; } Parameters name string Property Value ISceneObject RegisteredGuids public IEnumerable<Guid> RegisteredGuids { get; } Property Value IEnumerable<Guid> Methods ContainsGuid(Guid) Returns if the Guid is registered in the registry. public bool ContainsGuid(Guid guid) Parameters guid Guid Returns bool ContainsName(string) Returns if the name is registered in the registry. public bool ContainsName(string guidString) Parameters guidString string Returns bool DebugRebuild() Clears the registry and registers all object in the scene again. public void DebugRebuild() GetByGuid(Guid) Returns the IProcessSceneEntity belonging to the given Guid. If there is no fitting Entity found a MissingEntityException will be thrown. public ISceneObject GetByGuid(Guid guid) Parameters guid Guid Returns ISceneObject GetByName(string) Returns the IProcessSceneEntity belonging to the given unique name. If there is no fitting Entity found a MissingEntityException will be thrown. public ISceneObject GetByName(string name) Parameters name string Returns ISceneObject GetByTag(Guid) [Obsolete(\"Use GetObjects instead.\")] public IEnumerable<ISceneObject> GetByTag(Guid tag) Parameters tag Guid Returns IEnumerable<ISceneObject> GetObjects(Guid) Returns all registered scene objects which have the provided guid assigned to them. public IEnumerable<ISceneObject> GetObjects(Guid guid) Parameters guid Guid Returns IEnumerable<ISceneObject> GetProperties<T>(Guid) Returns all registered scene objects with the provided guid and at least one valid property of the specified type. public IEnumerable<T> GetProperties<T>(Guid guid) where T : ISceneObjectProperty Parameters guid Guid Returns IEnumerable<T> Type Parameters T GetPropertyByTag<T>(Guid) [Obsolete(\"Use GetProperties instead.\")] public IEnumerable<T> GetPropertyByTag<T>(Guid tag) where T : ISceneObjectProperty Parameters tag Guid Returns IEnumerable<T> Type Parameters T Refresh() Updates the registry by removing all ISceneObject which are not in the scene anymore and adding new ones. public void Refresh() Register(ISceneObject) Registers an SceneObject in the registry. If there is an SceneObject with the same name already registered, an NameNotUniqueException will be thrown. Also if the Guid is already known an SceneObjectAlreadyRegisteredException will be thrown. public void Register(ISceneObject obj) Parameters obj ISceneObject RegisterAll() Registers all SceneObject in scene, independent of their state. public void RegisterAll() Unregister(ISceneObject) Removes the SceneObject completely from the Registry. public bool Unregister(ISceneObject obj) Parameters obj ISceneObject Returns bool"
  },
  "api/VRBuilder.Core.SceneObjects.SceneObjectTag-1.html": {
    "href": "api/VRBuilder.Core.SceneObjects.SceneObjectTag-1.html",
    "title": "Class SceneObjectTag<T> | VR Builder Documentation",
    "keywords": "Class SceneObjectTag<T> Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Step inspector reference to a SceneObjectTagBase requiring a specific property. [DataContract(IsReference = true)] [Obsolete(\"Use ProcessSceneReference and its derived classes instead.\")] public sealed class SceneObjectTag<T> : SceneObjectTagBase, ICanBeEmpty Type Parameters T Inheritance object SceneObjectTagBase SceneObjectTag<T> Implements ICanBeEmpty Inherited Members SceneObjectTagBase.Guid SceneObjectTagBase.IsEmpty() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SceneObjectTag() public SceneObjectTag() SceneObjectTag(Guid) public SceneObjectTag(Guid guid) Parameters guid Guid"
  },
  "api/VRBuilder.Core.SceneObjects.SceneObjectTagBase.html": {
    "href": "api/VRBuilder.Core.SceneObjects.SceneObjectTagBase.html",
    "title": "Class SceneObjectTagBase | VR Builder Documentation",
    "keywords": "Class SceneObjectTagBase Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Base class for step inspector references to tags. [DataContract(IsReference = true)] [Obsolete(\"Use ProcessSceneReference and its derived classes instead.\")] public abstract class SceneObjectTagBase : ICanBeEmpty Inheritance object SceneObjectTagBase Implements ICanBeEmpty Derived SceneObjectTag<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SceneObjectTagBase() public SceneObjectTagBase() SceneObjectTagBase(Guid) public SceneObjectTagBase(Guid guid) Parameters guid Guid Properties Guid The guid representing the tag. [DataMember] public Guid Guid { get; set; } Property Value Guid Methods IsEmpty() Returns true when this object is not properly filled. public bool IsEmpty() Returns bool"
  },
  "api/VRBuilder.Core.SceneObjects.ScenePropertyReference-1.html": {
    "href": "api/VRBuilder.Core.SceneObjects.ScenePropertyReference-1.html",
    "title": "Class ScenePropertyReference<T> | VR Builder Documentation",
    "keywords": "Class ScenePropertyReference<T> Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Weak reference to a property of a process object with the same unique name. [Serializable] [DataContract(IsReference = true)] [Obsolete(\"Use ProcessSceneReferenceBase and derived classes to store references to objects in the scene.\")] public sealed class ScenePropertyReference<T> : ObjectReference<T>, ICanBeEmpty where T : class, ISceneObjectProperty Type Parameters T Inheritance object UniqueNameReference ObjectReference<T> ScenePropertyReference<T> Implements ICanBeEmpty Inherited Members ObjectReference<T>.UniqueName ObjectReference<T>.Value ObjectReference<T>.IsEmpty() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ScenePropertyReference() public ScenePropertyReference() ScenePropertyReference(string) public ScenePropertyReference(string uniqueName) Parameters uniqueName string Methods DetermineValue(T) protected override T DetermineValue(T cachedValue) Parameters cachedValue T Returns T Operators implicit operator T(ScenePropertyReference<T>) public static implicit operator T(ScenePropertyReference<T> reference) Parameters reference ScenePropertyReference<T> Returns T"
  },
  "api/VRBuilder.Core.SceneObjects.SelectableValue-2.html": {
    "href": "api/VRBuilder.Core.SceneObjects.SelectableValue-2.html",
    "title": "Class SelectableValue<TFirst, TSecond> | VR Builder Documentation",
    "keywords": "Class SelectableValue<TFirst, TSecond> Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Stores two values and a selection between the two. [DataContract(IsReference = true)] public abstract class SelectableValue<TFirst, TSecond> Type Parameters TFirst TSecond Inheritance object SelectableValue<TFirst, TSecond> Derived ProcessVariableSelectableValue<T> PropertyReferenceOrTagSelectableValue<T> VideoClipOrURLSelectableValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FirstValue The first value to be stored. [DataMember] public virtual TFirst FirstValue { get; set; } Property Value TFirst FirstValueLabel Label for the first value. public abstract string FirstValueLabel { get; } Property Value string IsFirstValueSelected True if the first value should be used. [DataMember] public virtual bool IsFirstValueSelected { get; set; } Property Value bool SecondValue The second value to be stored. [DataMember] public virtual TSecond SecondValue { get; set; } Property Value TSecond SecondValueLabel Label for the second value. public abstract string SecondValueLabel { get; } Property Value string"
  },
  "api/VRBuilder.Core.SceneObjects.SerializableGuid.html": {
    "href": "api/VRBuilder.Core.SceneObjects.SerializableGuid.html",
    "title": "Class SerializableGuid | VR Builder Documentation",
    "keywords": "Class SerializableGuid Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Serializable version of a Guid. [Serializable] public class SerializableGuid : IEquatable<SerializableGuid>, IEquatable<Guid> Inheritance object SerializableGuid Implements IEquatable<SerializableGuid> IEquatable<Guid> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks If not working with the Unity Editor better use Newtonsoft.Json. It has a implementation to serialize Guid. Constructors SerializableGuid(byte[]) public SerializableGuid(byte[] bytes) Parameters bytes byte[] SerializableGuid(Guid) public SerializableGuid(Guid guid) Parameters guid Guid Properties Guid Converts the Guid to byte[] for serialization. public Guid Guid { get; set; } Property Value Guid Methods Equals(Guid) Determines whether the current SerializableGuid object is equal to the specified Guid. public bool Equals(Guid otherGuid) Parameters otherGuid Guid The Guid to compare with the current SerializableGuid object. Returns bool true if the current SerializableGuid object is equal to the specified Guid; otherwise, false. Equals(object) Determines whether the current SerializableGuid object is equal to another object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(SerializableGuid) Determines whether the current SerializableGuid object is equal to another SerializableGuid object. public bool Equals(SerializableGuid other) Parameters other SerializableGuid The SerializableGuid to compare with the current object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer hash code. Remarks This is used in hash-based collections, like Dictionary. IsValid() Checks if the serialized Guid is valid. public bool IsValid() Returns bool true if the serialized Guid is not null and has a length of 16; otherwise, false. IsValid(SerializableGuid) Checks if a SerializableGuid is valid. public static bool IsValid(SerializableGuid serializableGuid) Parameters serializableGuid SerializableGuid The SerializableGuid to check. Returns bool true if the SerializableGuid and serializedGuid is not null, and has a length of 16; otherwise, false. SetGuid(Guid) Sets the Guid value for the SerializableGuid. public void SetGuid(Guid guid) Parameters guid Guid The Guid value to set. ToString() Returns a string representation of the current SerializableGuid object. public override string ToString() Returns string A string representation of the current SerializableGuid object. If the serializedGuid is null or empty, it returns \"null\". If the serializedGuid length is not equal to 16, it returns \"invalid\". Otherwise, it returns the string representation of the Guid. Operators operator ==(SerializableGuid, SerializableGuid) public static bool operator ==(SerializableGuid left, SerializableGuid right) Parameters left SerializableGuid right SerializableGuid Returns bool operator !=(SerializableGuid, SerializableGuid) public static bool operator !=(SerializableGuid left, SerializableGuid right) Parameters left SerializableGuid right SerializableGuid Returns bool"
  },
  "api/VRBuilder.Core.SceneObjects.SingleSceneObjectReference.html": {
    "href": "api/VRBuilder.Core.SceneObjects.SingleSceneObjectReference.html",
    "title": "Class SingleSceneObjectReference | VR Builder Documentation",
    "keywords": "Class SingleSceneObjectReference Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Step inspector reference to a single ISceneObject. [DataContract(IsReference = true)] public class SingleSceneObjectReference : SingleSceneReference<ISceneObject>, ICanBeEmpty Inheritance object ProcessSceneReferenceBase ProcessSceneReference<ISceneObject> SingleSceneReference<ISceneObject> SingleSceneObjectReference Implements ICanBeEmpty Inherited Members SingleSceneReference<ISceneObject>.Value SingleSceneReference<ISceneObject>.HasValue() SingleSceneReference<ISceneObject>.ToString() ProcessSceneReferenceBase.Guids ProcessSceneReferenceBase.AddGuid(Guid) ProcessSceneReferenceBase.RemoveGuid(Guid) ProcessSceneReferenceBase.ResetGuids(IEnumerable<Guid>) ProcessSceneReferenceBase.IsEmpty() ProcessSceneReferenceBase.Equals(object) ProcessSceneReferenceBase.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SingleSceneObjectReference() public SingleSceneObjectReference() SingleSceneObjectReference(IEnumerable<Guid>) public SingleSceneObjectReference(IEnumerable<Guid> guids) Parameters guids IEnumerable<Guid> SingleSceneObjectReference(Guid) public SingleSceneObjectReference(Guid guid) Parameters guid Guid Methods DetermineValue(ISceneObject) Determine the object referenced by this scene reference. protected override ISceneObject DetermineValue(ISceneObject cached) Parameters cached ISceneObject Returns ISceneObject"
  },
  "api/VRBuilder.Core.SceneObjects.SingleScenePropertyReference-1.html": {
    "href": "api/VRBuilder.Core.SceneObjects.SingleScenePropertyReference-1.html",
    "title": "Class SingleScenePropertyReference<T> | VR Builder Documentation",
    "keywords": "Class SingleScenePropertyReference<T> Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Step inspector reference to a single ISceneObjectProperty. [DataContract(IsReference = true)] public class SingleScenePropertyReference<T> : SingleSceneReference<T>, ICanBeEmpty where T : class, ISceneObjectProperty Type Parameters T Inheritance object ProcessSceneReferenceBase ProcessSceneReference<T> SingleSceneReference<T> SingleScenePropertyReference<T> Implements ICanBeEmpty Inherited Members SingleSceneReference<T>.Value SingleSceneReference<T>.HasValue() SingleSceneReference<T>.ToString() ProcessSceneReferenceBase.Guids ProcessSceneReferenceBase.AddGuid(Guid) ProcessSceneReferenceBase.RemoveGuid(Guid) ProcessSceneReferenceBase.ResetGuids(IEnumerable<Guid>) ProcessSceneReferenceBase.IsEmpty() ProcessSceneReferenceBase.Equals(object) ProcessSceneReferenceBase.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SingleScenePropertyReference() public SingleScenePropertyReference() SingleScenePropertyReference(IEnumerable<Guid>) public SingleScenePropertyReference(IEnumerable<Guid> guids) Parameters guids IEnumerable<Guid> SingleScenePropertyReference(Guid) public SingleScenePropertyReference(Guid guid) Parameters guid Guid Methods DetermineValue(T) Determine the object referenced by this scene reference. protected override T DetermineValue(T cachedValue) Parameters cachedValue T Returns T"
  },
  "api/VRBuilder.Core.SceneObjects.SingleSceneReference-1.html": {
    "href": "api/VRBuilder.Core.SceneObjects.SingleSceneReference-1.html",
    "title": "Class SingleSceneReference<T> | VR Builder Documentation",
    "keywords": "Class SingleSceneReference<T> Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Step inspector reference to a single object. [DataContract(IsReference = true)] public abstract class SingleSceneReference<T> : ProcessSceneReference<T>, ICanBeEmpty where T : class Type Parameters T Inheritance object ProcessSceneReferenceBase ProcessSceneReference<T> SingleSceneReference<T> Implements ICanBeEmpty Derived SingleSceneObjectReference SingleScenePropertyReference<T> Inherited Members ProcessSceneReferenceBase.Guids ProcessSceneReferenceBase.AddGuid(Guid) ProcessSceneReferenceBase.RemoveGuid(Guid) ProcessSceneReferenceBase.ResetGuids(IEnumerable<Guid>) ProcessSceneReferenceBase.IsEmpty() ProcessSceneReferenceBase.Equals(object) ProcessSceneReferenceBase.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SingleSceneReference() public SingleSceneReference() SingleSceneReference(IEnumerable<Guid>) public SingleSceneReference(IEnumerable<Guid> guids) Parameters guids IEnumerable<Guid> SingleSceneReference(Guid) public SingleSceneReference(Guid guid) Parameters guid Guid Properties Value public T Value { get; } Property Value T Methods DetermineValue(T) Determine the object referenced by this scene reference. protected abstract T DetermineValue(T cachedValue) Parameters cachedValue T Returns T HasValue() Returns true if the reference contains a non-null value. public override bool HasValue() Returns bool ToString() public override string ToString() Returns string"
  },
  "api/VRBuilder.Core.SceneObjects.TaggableObjectEventArgs.html": {
    "href": "api/VRBuilder.Core.SceneObjects.TaggableObjectEventArgs.html",
    "title": "Class TaggableObjectEventArgs | VR Builder Documentation",
    "keywords": "Class TaggableObjectEventArgs Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Event args for taggable objects events. [Obsolete(\"Will be removed with the next major version.\")] public class TaggableObjectEventArgs : EventArgs Inheritance object EventArgs TaggableObjectEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaggableObjectEventArgs(Guid) public TaggableObjectEventArgs(Guid tag) Parameters tag Guid Fields Tag public readonly Guid Tag Field Value Guid"
  },
  "api/VRBuilder.Core.SceneObjects.UniqueIdChangedEventArgs.html": {
    "href": "api/VRBuilder.Core.SceneObjects.UniqueIdChangedEventArgs.html",
    "title": "Class UniqueIdChangedEventArgs | VR Builder Documentation",
    "keywords": "Class UniqueIdChangedEventArgs Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Arguments for UniqueIdChanged event. public class UniqueIdChangedEventArgs : EventArgs Inheritance object EventArgs UniqueIdChangedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UniqueIdChangedEventArgs(Guid, Guid) public UniqueIdChangedEventArgs(Guid previousId, Guid newId) Parameters previousId Guid newId Guid Fields NewId public readonly Guid NewId Field Value Guid PreviousId public readonly Guid PreviousId Field Value Guid"
  },
  "api/VRBuilder.Core.SceneObjects.UniqueNameReference.html": {
    "href": "api/VRBuilder.Core.SceneObjects.UniqueNameReference.html",
    "title": "Class UniqueNameReference | VR Builder Documentation",
    "keywords": "Class UniqueNameReference Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Simple container for UniqueName. [Obsolete(\"Use ProcessSceneReferenceBase and derived classes to store references to objects in the scene.\")] [DataContract(IsReference = true)] public abstract class UniqueNameReference Inheritance object UniqueNameReference Derived ObjectReference<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UniqueNameReference() protected UniqueNameReference() UniqueNameReference(string) protected UniqueNameReference(string uniqueName) Parameters uniqueName string Properties UniqueName Serializable unique name of referenced object. [DataMember] public virtual string UniqueName { get; set; } Property Value string"
  },
  "api/VRBuilder.Core.SceneObjects.VideoClipOrURLSelectableValue.html": {
    "href": "api/VRBuilder.Core.SceneObjects.VideoClipOrURLSelectableValue.html",
    "title": "Class VideoClipOrURLSelectableValue | VR Builder Documentation",
    "keywords": "Class VideoClipOrURLSelectableValue Namespace VRBuilder.Core.SceneObjects Assembly VRBuilder.Core.dll Lets the user select between a VideoClip asset (stored as asset path) and a string URL. public class VideoClipOrURLSelectableValue : SelectableValue<string, string> Inheritance object SelectableValue<string, string> VideoClipOrURLSelectableValue Inherited Members SelectableValue<string, string>.FirstValueLabel SelectableValue<string, string>.SecondValueLabel SelectableValue<string, string>.FirstValue SelectableValue<string, string>.SecondValue SelectableValue<string, string>.IsFirstValueSelected object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VideoClipOrURLSelectableValue() public VideoClipOrURLSelectableValue() Properties FirstValue The first value to be stored. [DataMember] [UsesSpecificProcessDrawer(\"VideoClipResourceDrawer\")] public override string FirstValue { get; set; } Property Value string FirstValueLabel Label for the first value. public override string FirstValueLabel { get; } Property Value string SecondValueLabel Label for the second value. public override string SecondValueLabel { get; } Property Value string"
  },
  "api/VRBuilder.Core.SceneObjects.html": {
    "href": "api/VRBuilder.Core.SceneObjects.html",
    "title": "Namespace VRBuilder.Core.SceneObjects | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.SceneObjects Classes GuidContainerEventArgs Event args for guid container events. LockStateChangedEventArgs MultipleSceneObjectReference Step inspector reference to multiple ISceneObjects. MultipleScenePropertyReference<T> Step inspector reference to multiple ISceneObjectPropertys. MultipleSceneReference<T> Step inspector reference to multiple objects. ObjectReference<T> Base class for references to process objects and their properties. ProcessSceneObject This component gives a GameObject a stable, non-replicatable Globally Unique Identifier. It can be used to reference a specific instance of an object no matter where it is. ProcessSceneReferenceBase Base class for a process reference to one or more objects. ProcessSceneReference<T> Step inspector reference to a scene object or a specific property. ProcessVariableSelectableValue<T> Selectable value implementation for process variables. PropertyReferenceOrTagSelectableValue<T> Lets the user choose between a scene property reference or a tag. SceneObjectNameChanged SceneObjectReference Weak reference by a unique name to a process object in a scene. SceneObjectRegistry SceneObjectRegistryV2 Implementation of ISceneObjectRegistry that handles ISceneObjects with one or more GUID associated to them. The GUIDs don't have to be unique and can represent a group of objects. SceneObjectTagBase Base class for step inspector references to tags. SceneObjectTag<T> Step inspector reference to a SceneObjectTagBase requiring a specific property. ScenePropertyReference<T> Weak reference to a property of a process object with the same unique name. SelectableValue<TFirst, TSecond> Stores two values and a selection between the two. SerializableGuid Serializable version of a Guid. SingleSceneObjectReference Step inspector reference to a single ISceneObject. SingleScenePropertyReference<T> Step inspector reference to a single ISceneObjectProperty. SingleSceneReference<T> Step inspector reference to a single object. TaggableObjectEventArgs Event args for taggable objects events. UniqueIdChangedEventArgs Arguments for UniqueIdChanged event. UniqueNameReference Simple container for UniqueName. VideoClipOrURLSelectableValue Lets the user select between a VideoClip asset (stored as asset path) and a string URL. Interfaces IGuidContainer A container for a list of guids that are associated to an object. ILockable Basic interface for everything which is lockable. ISceneObject Gives the possibility to easily identify targets for Conditions, Behaviors and so on. ISceneObjectRegistry ITagContainer A container for a list of guids that are associated to an object as tags."
  },
  "api/VRBuilder.Core.Serialization.AnimationCurveConverter.html": {
    "href": "api/VRBuilder.Core.Serialization.AnimationCurveConverter.html",
    "title": "Class AnimationCurveConverter | VR Builder Documentation",
    "keywords": "Class AnimationCurveConverter Namespace VRBuilder.Core.Serialization Assembly VRBuilder.Core.dll Converter that serializes and deserializes UnityEngine.AnimationCurve. [NewtonsoftConverter(1024)] public class AnimationCurveConverter : JsonConverter Inheritance object JsonConverter AnimationCurveConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object, JsonSerializer) Reads the JSON representation of the object. public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/VRBuilder.Core.Serialization.IProcessSerializer.html": {
    "href": "api/VRBuilder.Core.Serialization.IProcessSerializer.html",
    "title": "Interface IProcessSerializer | VR Builder Documentation",
    "keywords": "Interface IProcessSerializer Namespace VRBuilder.Core.Serialization Assembly VRBuilder.Core.dll A serializer which can de/serialize processes and steps to a certain format. public interface IProcessSerializer Properties FileFormat File format used for this serializer. For example, 'json'. string FileFormat { get; } Property Value string Name Display name. string Name { get; } Property Value string Methods ChapterFromByteArray(byte[]) Deserializes a given chapter to a usable object. IChapter ChapterFromByteArray(byte[] data) Parameters data byte[] Returns IChapter ChapterToByteArray(IChapter) Serializes a given chapter into a byte array. byte[] ChapterToByteArray(IChapter chapter) Parameters chapter IChapter Returns byte[] EntityFromByteArray(byte[]) Deserializes a given entity to a usable object. IEntity EntityFromByteArray(byte[] data) Parameters data byte[] Returns IEntity EntityToByteArray(IEntity) Serializes a given entity into a byte array. byte[] EntityToByteArray(IEntity entity) Parameters entity IEntity Returns byte[] ManifestFromByteArray(byte[]) Deserializes a process asset manifest to a usable object. IProcessAssetManifest ManifestFromByteArray(byte[] data) Parameters data byte[] Returns IProcessAssetManifest ManifestToByteArray(IProcessAssetManifest) Serializes a process asset manifest into a byte array. byte[] ManifestToByteArray(IProcessAssetManifest manifest) Parameters manifest IProcessAssetManifest Returns byte[] ProcessFromByteArray(byte[]) Deserializes a given process to a usable object. IProcess ProcessFromByteArray(byte[] data) Parameters data byte[] Returns IProcess ProcessToByteArray(IProcess) Serializes a given process into a byte array. byte[] ProcessToByteArray(IProcess target) Parameters target IProcess Returns byte[] StepFromByteArray(byte[]) Deserializes a given step to a usable object. IStep StepFromByteArray(byte[] data) Parameters data byte[] Returns IStep StepToByteArray(IStep) Serializes a given step into a byte array. The implementation should trim target steps of the step. byte[] StepToByteArray(IStep step) Parameters step IStep Returns byte[]"
  },
  "api/VRBuilder.Core.Serialization.ImprovedNewtonsoftJsonProcessSerializer.html": {
    "href": "api/VRBuilder.Core.Serialization.ImprovedNewtonsoftJsonProcessSerializer.html",
    "title": "Class ImprovedNewtonsoftJsonProcessSerializer | VR Builder Documentation",
    "keywords": "Class ImprovedNewtonsoftJsonProcessSerializer Namespace VRBuilder.Core.Serialization Assembly VRBuilder.Core.dll Improved version of the NewtonsoftJsonProcessSerializer, which now allows to serialize very long chapters. public class ImprovedNewtonsoftJsonProcessSerializer : NewtonsoftJsonProcessSerializer, IProcessSerializer Inheritance object NewtonsoftJsonProcessSerializer ImprovedNewtonsoftJsonProcessSerializer Implements IProcessSerializer Inherited Members NewtonsoftJsonProcessSerializer.ProcessSerializerSettings NewtonsoftJsonProcessSerializer.FileFormat NewtonsoftJsonProcessSerializer.Serialize(IEntity, JsonSerializerSettings) NewtonsoftJsonProcessSerializer.Deserialize<T>(byte[], JsonSerializerSettings) NewtonsoftJsonProcessSerializer.StepToByteArray(IStep) NewtonsoftJsonProcessSerializer.StepFromByteArray(byte[]) NewtonsoftJsonProcessSerializer.ChapterToByteArray(IChapter) NewtonsoftJsonProcessSerializer.ChapterFromByteArray(byte[]) NewtonsoftJsonProcessSerializer.ManifestToByteArray(IProcessAssetManifest) NewtonsoftJsonProcessSerializer.ManifestFromByteArray(byte[]) NewtonsoftJsonProcessSerializer.EntityToByteArray(IEntity) NewtonsoftJsonProcessSerializer.EntityFromByteArray(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Display name. public override string Name { get; } Property Value string Version protected override int Version { get; } Property Value int Methods ProcessFromByteArray(byte[]) Deserializes a given process to a usable object. public override IProcess ProcessFromByteArray(byte[] data) Parameters data byte[] Returns IProcess ProcessToByteArray(IProcess) Serializes a given process into a byte array. public override byte[] ProcessToByteArray(IProcess process) Parameters process IProcess Returns byte[]"
  },
  "api/VRBuilder.Core.Serialization.KeyframeConverter.html": {
    "href": "api/VRBuilder.Core.Serialization.KeyframeConverter.html",
    "title": "Class KeyframeConverter | VR Builder Documentation",
    "keywords": "Class KeyframeConverter Namespace VRBuilder.Core.Serialization Assembly VRBuilder.Core.dll Converter that serializes and deserializes UnityEngine.Keyframe. [NewtonsoftConverter(1024)] public class KeyframeConverter : JsonConverter Inheritance object JsonConverter KeyframeConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object, JsonSerializer) Reads the JSON representation of the object. public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/VRBuilder.Core.Serialization.NewtonsoftConverterAttribute.html": {
    "href": "api/VRBuilder.Core.Serialization.NewtonsoftConverterAttribute.html",
    "title": "Class NewtonsoftConverterAttribute | VR Builder Documentation",
    "keywords": "Class NewtonsoftConverterAttribute Namespace VRBuilder.Core.Serialization Assembly VRBuilder.Core.dll Every class with this attribute which also extends JsonConverter will be added as converter to the NewtonsoftJsonProcessSerializer. public class NewtonsoftConverterAttribute : Attribute, _Attribute Inheritance object Attribute NewtonsoftConverterAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NewtonsoftConverterAttribute(int) public NewtonsoftConverterAttribute(int priority = 1024) Parameters priority int Set the value of Priority property. Properties Priority Defines the order in which converters should be applied, the lower value triggers earlier. public int Priority { get; } Property Value int"
  },
  "api/VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.html": {
    "href": "api/VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.html",
    "title": "Class NewtonsoftJsonProcessSerializer | VR Builder Documentation",
    "keywords": "Class NewtonsoftJsonProcessSerializer Namespace VRBuilder.Core.Serialization.NewtonsoftJson Assembly VRBuilder.Core.dll This serializer uses NewtonsoftJson to serialize data, the outcome is a json file in the UTF-8 encoding. public class NewtonsoftJsonProcessSerializer : IProcessSerializer Inheritance object NewtonsoftJsonProcessSerializer Implements IProcessSerializer Derived ImprovedNewtonsoftJsonProcessSerializer NewtonsoftJsonProcessSerializerV3 NewtonsoftJsonProcessSerializerV4 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FileFormat File format used for this serializer. For example, 'json'. public virtual string FileFormat { get; } Property Value string Name Display name. public virtual string Name { get; } Property Value string ProcessSerializerSettings Returns the json serializer settings used by the process deserialization. public static JsonSerializerSettings ProcessSerializerSettings { get; } Property Value JsonSerializerSettings Version protected virtual int Version { get; } Property Value int Methods ChapterFromByteArray(byte[]) Deserializes a given chapter to a usable object. public virtual IChapter ChapterFromByteArray(byte[] data) Parameters data byte[] Returns IChapter ChapterToByteArray(IChapter) Serializes a given chapter into a byte array. public virtual byte[] ChapterToByteArray(IChapter chapter) Parameters chapter IChapter Returns byte[] Deserialize<T>(byte[], JsonSerializerSettings) protected T Deserialize<T>(byte[] data, JsonSerializerSettings settings) Parameters data byte[] settings JsonSerializerSettings Returns T Type Parameters T EntityFromByteArray(byte[]) Deserializes a given entity to a usable object. public virtual IEntity EntityFromByteArray(byte[] data) Parameters data byte[] Returns IEntity EntityToByteArray(IEntity) Serializes a given entity into a byte array. public virtual byte[] EntityToByteArray(IEntity entity) Parameters entity IEntity Returns byte[] ManifestFromByteArray(byte[]) Deserializes a process asset manifest to a usable object. public virtual IProcessAssetManifest ManifestFromByteArray(byte[] data) Parameters data byte[] Returns IProcessAssetManifest ManifestToByteArray(IProcessAssetManifest) Serializes a process asset manifest into a byte array. public virtual byte[] ManifestToByteArray(IProcessAssetManifest manifest) Parameters manifest IProcessAssetManifest Returns byte[] ProcessFromByteArray(byte[]) Deserializes a given process to a usable object. public virtual IProcess ProcessFromByteArray(byte[] data) Parameters data byte[] Returns IProcess ProcessToByteArray(IProcess) Serializes a given process into a byte array. public virtual byte[] ProcessToByteArray(IProcess process) Parameters process IProcess Returns byte[] Serialize(IEntity, JsonSerializerSettings) protected byte[] Serialize(IEntity entity, JsonSerializerSettings settings) Parameters entity IEntity settings JsonSerializerSettings Returns byte[] StepFromByteArray(byte[]) Deserializes a given step to a usable object. public virtual IStep StepFromByteArray(byte[] data) Parameters data byte[] Returns IStep StepToByteArray(IStep) Serializes a given step into a byte array. The implementation should trim target steps of the step. public virtual byte[] StepToByteArray(IStep step) Parameters step IStep Returns byte[]"
  },
  "api/VRBuilder.Core.Serialization.NewtonsoftJson.html": {
    "href": "api/VRBuilder.Core.Serialization.NewtonsoftJson.html",
    "title": "Namespace VRBuilder.Core.Serialization.NewtonsoftJson | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Serialization.NewtonsoftJson Classes NewtonsoftJsonProcessSerializer This serializer uses NewtonsoftJson to serialize data, the outcome is a json file in the UTF-8 encoding."
  },
  "api/VRBuilder.Core.Serialization.NewtonsoftJsonProcessSerializerV3.html": {
    "href": "api/VRBuilder.Core.Serialization.NewtonsoftJsonProcessSerializerV3.html",
    "title": "Class NewtonsoftJsonProcessSerializerV3 | VR Builder Documentation",
    "keywords": "Class NewtonsoftJsonProcessSerializerV3 Namespace VRBuilder.Core.Serialization Assembly VRBuilder.Core.dll Improved version of the NewtonsoftJsonProcessSerializer, which now allows to serialize very long chapters. public class NewtonsoftJsonProcessSerializerV3 : NewtonsoftJsonProcessSerializer, IProcessSerializer Inheritance object NewtonsoftJsonProcessSerializer NewtonsoftJsonProcessSerializerV3 Implements IProcessSerializer Inherited Members NewtonsoftJsonProcessSerializer.ProcessSerializerSettings NewtonsoftJsonProcessSerializer.FileFormat NewtonsoftJsonProcessSerializer.Serialize(IEntity, JsonSerializerSettings) NewtonsoftJsonProcessSerializer.Deserialize<T>(byte[], JsonSerializerSettings) NewtonsoftJsonProcessSerializer.StepToByteArray(IStep) NewtonsoftJsonProcessSerializer.StepFromByteArray(byte[]) NewtonsoftJsonProcessSerializer.ChapterToByteArray(IChapter) NewtonsoftJsonProcessSerializer.ChapterFromByteArray(byte[]) NewtonsoftJsonProcessSerializer.ManifestToByteArray(IProcessAssetManifest) NewtonsoftJsonProcessSerializer.ManifestFromByteArray(byte[]) NewtonsoftJsonProcessSerializer.EntityToByteArray(IEntity) NewtonsoftJsonProcessSerializer.EntityFromByteArray(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Display name. public override string Name { get; } Property Value string Version protected override int Version { get; } Property Value int Methods ProcessFromByteArray(byte[]) Deserializes a given process to a usable object. public override IProcess ProcessFromByteArray(byte[] data) Parameters data byte[] Returns IProcess ProcessToByteArray(IProcess) Serializes a given process into a byte array. public override byte[] ProcessToByteArray(IProcess process) Parameters process IProcess Returns byte[]"
  },
  "api/VRBuilder.Core.Serialization.NewtonsoftJsonProcessSerializerV4.html": {
    "href": "api/VRBuilder.Core.Serialization.NewtonsoftJsonProcessSerializerV4.html",
    "title": "Class NewtonsoftJsonProcessSerializerV4 | VR Builder Documentation",
    "keywords": "Class NewtonsoftJsonProcessSerializerV4 Namespace VRBuilder.Core.Serialization Assembly VRBuilder.Core.dll Improved version of the NewtonsoftJsonProcessSerializer, which now flattens nested subchapters. public class NewtonsoftJsonProcessSerializerV4 : NewtonsoftJsonProcessSerializer, IProcessSerializer Inheritance object NewtonsoftJsonProcessSerializer NewtonsoftJsonProcessSerializerV4 Implements IProcessSerializer Inherited Members NewtonsoftJsonProcessSerializer.ProcessSerializerSettings NewtonsoftJsonProcessSerializer.FileFormat NewtonsoftJsonProcessSerializer.Serialize(IEntity, JsonSerializerSettings) NewtonsoftJsonProcessSerializer.Deserialize<T>(byte[], JsonSerializerSettings) NewtonsoftJsonProcessSerializer.StepToByteArray(IStep) NewtonsoftJsonProcessSerializer.StepFromByteArray(byte[]) NewtonsoftJsonProcessSerializer.ManifestToByteArray(IProcessAssetManifest) NewtonsoftJsonProcessSerializer.ManifestFromByteArray(byte[]) NewtonsoftJsonProcessSerializer.EntityToByteArray(IEntity) NewtonsoftJsonProcessSerializer.EntityFromByteArray(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Display name. public override string Name { get; } Property Value string Version protected override int Version { get; } Property Value int Methods ChapterFromByteArray(byte[]) Deserializes a given chapter to a usable object. public override IChapter ChapterFromByteArray(byte[] data) Parameters data byte[] Returns IChapter ChapterToByteArray(IChapter) Serializes a given chapter into a byte array. public override byte[] ChapterToByteArray(IChapter chapter) Parameters chapter IChapter Returns byte[] ProcessFromByteArray(byte[]) Deserializes a given process to a usable object. public override IProcess ProcessFromByteArray(byte[] data) Parameters data byte[] Returns IProcess ProcessToByteArray(IProcess) Serializes a given process into a byte array. public override byte[] ProcessToByteArray(IProcess process) Parameters process IProcess Returns byte[]"
  },
  "api/VRBuilder.Core.Serialization.html": {
    "href": "api/VRBuilder.Core.Serialization.html",
    "title": "Namespace VRBuilder.Core.Serialization | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Serialization Classes AnimationCurveConverter Converter that serializes and deserializes UnityEngine.AnimationCurve. ImprovedNewtonsoftJsonProcessSerializer Improved version of the NewtonsoftJsonProcessSerializer, which now allows to serialize very long chapters. KeyframeConverter Converter that serializes and deserializes UnityEngine.Keyframe. NewtonsoftConverterAttribute Every class with this attribute which also extends JsonConverter will be added as converter to the NewtonsoftJsonProcessSerializer. NewtonsoftJsonProcessSerializerV3 Improved version of the NewtonsoftJsonProcessSerializer, which now allows to serialize very long chapters. NewtonsoftJsonProcessSerializerV4 Improved version of the NewtonsoftJsonProcessSerializer, which now flattens nested subchapters. Interfaces IProcessSerializer A serializer which can de/serialize processes and steps to a certain format."
  },
  "api/VRBuilder.Core.Settings.InteractionSettings.html": {
    "href": "api/VRBuilder.Core.Settings.InteractionSettings.html",
    "title": "Class InteractionSettings | VR Builder Documentation",
    "keywords": "Class InteractionSettings Namespace VRBuilder.Core.Settings Assembly VRBuilder.Core.dll Settings related to VR Builder's default interaction behaviour. [CreateAssetMenu(fileName = \"InteractionSettings\", menuName = \"VR Builder/InteractionSettings\", order = 1)] public class InteractionSettings : SettingsObject<InteractionSettings> Inheritance object Object ScriptableObject SettingsObject<InteractionSettings> InteractionSettings Inherited Members SettingsObject<InteractionSettings>.Instance SettingsObject<InteractionSettings>.Save() ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields MakeGrabbablesKinematic [SerializeField] [Tooltip(\"If enabled, objects with a Grabbable Property will not react to physics and therefore will not fall to the ground when released.\")] public bool MakeGrabbablesKinematic Field Value bool"
  },
  "api/VRBuilder.Core.Settings.SceneObjectGroups.SceneObjectGroup.html": {
    "href": "api/VRBuilder.Core.Settings.SceneObjectGroups.SceneObjectGroup.html",
    "title": "Class SceneObjectGroups.SceneObjectGroup | VR Builder Documentation",
    "keywords": "Class SceneObjectGroups.SceneObjectGroup Namespace VRBuilder.Core.Settings Assembly VRBuilder.Core.dll [Serializable] public class SceneObjectGroups.SceneObjectGroup Inheritance object SceneObjectGroups.SceneObjectGroup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SceneObjectGroup(string) public SceneObjectGroup(string label) Parameters label string SceneObjectGroup(string, Guid) public SceneObjectGroup(string label, Guid guid) Parameters label string guid Guid Properties Guid Guid representing the group. public Guid Guid { get; } Property Value Guid Label Text name for this group. public string Label { get; } Property Value string Methods Rename(string) public void Rename(string label) Parameters label string"
  },
  "api/VRBuilder.Core.Settings.SceneObjectGroups.html": {
    "href": "api/VRBuilder.Core.Settings.SceneObjectGroups.html",
    "title": "Class SceneObjectGroups | VR Builder Documentation",
    "keywords": "Class SceneObjectGroups Namespace VRBuilder.Core.Settings Assembly VRBuilder.Core.dll Settings for global list of scene object groups. public class SceneObjectGroups : SettingsObject<SceneObjectGroups> Inheritance object Object ScriptableObject SettingsObject<SceneObjectGroups> SceneObjectGroups Inherited Members SettingsObject<SceneObjectGroups>.Instance SettingsObject<SceneObjectGroups>.Save() ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields GuidNotRegisteredText public const string GuidNotRegisteredText = \"[<i>Missing Group</i>]\" Field Value string UniqueGuidName public const string UniqueGuidName = \"[Object ID]\" Field Value string UniqueGuidNameItalic public const string UniqueGuidNameItalic = \"[<i>Object ID</i>]\" Field Value string Properties Groups All groups in the list. public IEnumerable<SceneObjectGroups.SceneObjectGroup> Groups { get; } Property Value IEnumerable<SceneObjectGroups.SceneObjectGroup> Methods CanCreateGroup(string) True if a group with this label can be created. public bool CanCreateGroup(string label) Parameters label string Returns bool CreateGroup(string, Guid) Create a new group and add it to the list. public SceneObjectGroups.SceneObjectGroup CreateGroup(string label, Guid guid) Parameters label string guid Guid Returns SceneObjectGroups.SceneObjectGroup GetLabel(Guid) Returns the text label associated with the specified guid. public string GetLabel(Guid guid) Parameters guid Guid Returns string GroupExists(Guid) True if the specified group is present in the list. public bool GroupExists(Guid guid) Parameters guid Guid Returns bool RemoveGroup(Guid) Remove the specified group from the list. public bool RemoveGroup(Guid guid) Parameters guid Guid Returns bool RenameGroup(SceneObjectGroup, string) Attempts to rename a group. public bool RenameGroup(SceneObjectGroups.SceneObjectGroup group, string label) Parameters group SceneObjectGroups.SceneObjectGroup label string Returns bool TryGetGroup(Guid, out SceneObjectGroup) Tries to get the group associated with the specified GUID. public bool TryGetGroup(Guid guid, out SceneObjectGroups.SceneObjectGroup group) Parameters guid Guid The GUID of the group to retrieve. group SceneObjectGroups.SceneObjectGroup When this method returns, contains the group associated with the specified GUID, if found; otherwise, the default value. Returns bool true if a group with the specified GUID is found; otherwise, false."
  },
  "api/VRBuilder.Core.Settings.SceneObjectTags.Tag.html": {
    "href": "api/VRBuilder.Core.Settings.SceneObjectTags.Tag.html",
    "title": "Class SceneObjectTags.Tag | VR Builder Documentation",
    "keywords": "Class SceneObjectTags.Tag Namespace VRBuilder.Core.Settings Assembly VRBuilder.Core.dll [Serializable] public class SceneObjectTags.Tag Inheritance object SceneObjectTags.Tag Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Tag(string) public Tag(string label) Parameters label string Tag(string, Guid) public Tag(string label, Guid guid) Parameters label string guid Guid Properties Guid Guid representing the tag. public Guid Guid { get; } Property Value Guid Label Text label for this tag. public string Label { get; } Property Value string Methods Rename(string) public void Rename(string label) Parameters label string"
  },
  "api/VRBuilder.Core.Settings.SceneObjectTags.html": {
    "href": "api/VRBuilder.Core.Settings.SceneObjectTags.html",
    "title": "Class SceneObjectTags | VR Builder Documentation",
    "keywords": "Class SceneObjectTags Namespace VRBuilder.Core.Settings Assembly VRBuilder.Core.dll Settings for global list of scene object tags. [Obsolete(\"The same functionality is now available in the SceneObjectGroups settings object.\")] public class SceneObjectTags : SettingsObject<SceneObjectTags> Inheritance object Object ScriptableObject SettingsObject<SceneObjectTags> SceneObjectTags Inherited Members SettingsObject<SceneObjectTags>.Instance SettingsObject<SceneObjectTags>.Save() ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields AutoGeneratedTagName public const string AutoGeneratedTagName = \"[<i>Object ID</i>]\" Field Value string AutoGeneratedTagNameNoItalic public const string AutoGeneratedTagNameNoItalic = \"[Object ID]\" Field Value string NotRegisterTagName public const string NotRegisterTagName = \"[<i>Not registered. Did you delete it?</i>]\" Field Value string Properties Tags All tags in the list. public IEnumerable<SceneObjectTags.Tag> Tags { get; } Property Value IEnumerable<SceneObjectTags.Tag> Methods CanCreateTag(string) True if a tag with this label can be created. public bool CanCreateTag(string label) Parameters label string Returns bool CreateTag(string, Guid) Create a new tag and add it to the list. public SceneObjectTags.Tag CreateTag(string label, Guid guid) Parameters label string guid Guid Returns SceneObjectTags.Tag GetLabel(Guid) Returns the text label associated with the specified guid. public string GetLabel(Guid guid) Parameters guid Guid Returns string RemoveTag(Guid) Remove the specified tag from the list. public bool RemoveTag(Guid guid) Parameters guid Guid Returns bool RenameTag(Tag, string) Attempts to rename a tag. public bool RenameTag(SceneObjectTags.Tag tag, string label) Parameters tag SceneObjectTags.Tag label string Returns bool TagExists(Guid) True if the specified tag is present in the list. public bool TagExists(Guid guid) Parameters guid Guid Returns bool TryGetTag(Guid, out Tag) Tries to get the tag associated with the specified GUID. public bool TryGetTag(Guid guid, out SceneObjectTags.Tag tag) Parameters guid Guid The GUID of the tag to retrieve. tag SceneObjectTags.Tag When this method returns, contains the tag associated with the specified GUID, if found; otherwise, the default value. Returns bool true if a tag with the specified GUID is found; otherwise, false."
  },
  "api/VRBuilder.Core.Settings.html": {
    "href": "api/VRBuilder.Core.Settings.html",
    "title": "Namespace VRBuilder.Core.Settings | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Settings Classes InteractionSettings Settings related to VR Builder's default interaction behaviour. SceneObjectGroups Settings for global list of scene object groups. SceneObjectGroups.SceneObjectGroup SceneObjectTags Settings for global list of scene object tags. SceneObjectTags.Tag"
  },
  "api/VRBuilder.Core.Setup.ILayerConfigurator.html": {
    "href": "api/VRBuilder.Core.Setup.ILayerConfigurator.html",
    "title": "Interface ILayerConfigurator | VR Builder Documentation",
    "keywords": "Interface ILayerConfigurator Namespace VRBuilder.Core.Setup Assembly VRBuilder.Core.dll Can configure layer masks on an interactor or interactable. public interface ILayerConfigurator Properties LayerSet The layer set to be used on this configurator. LayerSet LayerSet { get; } Property Value LayerSet Methods ConfigureLayers(string, string) Set up the layer masks to the specified layer names. void ConfigureLayers(string interactionLayerName, string raycastLayerName) Parameters interactionLayerName string raycastLayerName string"
  },
  "api/VRBuilder.Core.Setup.LayerSet.html": {
    "href": "api/VRBuilder.Core.Setup.LayerSet.html",
    "title": "Enum LayerSet | VR Builder Documentation",
    "keywords": "Enum LayerSet Namespace VRBuilder.Core.Setup Assembly VRBuilder.Core.dll Define a set of raycast/interaction layers for a specific use. public enum LayerSet Fields Interaction = 1 None = 0 Teleportation = 2 UI = 3"
  },
  "api/VRBuilder.Core.Setup.html": {
    "href": "api/VRBuilder.Core.Setup.html",
    "title": "Namespace VRBuilder.Core.Setup | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Setup Interfaces ILayerConfigurator Can configure layer masks on an interactor or interactable. Enums LayerSet Define a set of raycast/interaction layers for a specific use."
  },
  "api/VRBuilder.Core.Stage.html": {
    "href": "api/VRBuilder.Core.Stage.html",
    "title": "Enum Stage | VR Builder Documentation",
    "keywords": "Enum Stage Namespace VRBuilder.Core Assembly VRBuilder.Core.dll All possible states of an IEntity. public enum Stage Fields Activating = 1 Active = 2 Deactivating = 3 Inactive = 0"
  },
  "api/VRBuilder.Core.StageProcess-1.html": {
    "href": "api/VRBuilder.Core.StageProcess-1.html",
    "title": "Class StageProcess<TData> | VR Builder Documentation",
    "keywords": "Class StageProcess<TData> Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A base implementation of a IStageProcess which provides access to its entity's data. public abstract class StageProcess<TData> : IStageProcess where TData : class, IData Type Parameters TData Inheritance object StageProcess<TData> Implements IStageProcess Derived BaseActiveProcessOverCompletable<TData> ObjectInTargetActiveProcess<TData> EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity> StopEntityIteratingProcess<TEntity> InstantProcess<TData> PlayVideoBehavior.ActivatingProcess Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StageProcess(TData, IEntity) protected StageProcess(TData data, IEntity outer = null) Parameters data TData outer IEntity Properties Data The entity's data. protected TData Data { get; } Property Value TData Outer The entity owning the data. protected IEntity Outer { get; } Property Value IEntity Methods End() This method is invoked immediately after the Update() was iterated over completely, or after the FastForward() was called. The invocation is guaranteed. Use it for deinitialization. public abstract void End() FastForward() This method is called when the process was not completed yet. It must \"fake\" normal execution of the process and handle the cases when the Update() is not iterated over completely. public abstract void FastForward() Start() This method is invoked immediately when entity enters the stage. The invocation is guaranteed. Use it for initialization. public abstract void Start() Update() This method will be iterated over while the entity is in this stage, one iteration step per frame, starting from the second frame. public abstract IEnumerator Update() Returns IEnumerator"
  },
  "api/VRBuilder.Core.Step.EntityData.html": {
    "href": "api/VRBuilder.Core.Step.EntityData.html",
    "title": "Class Step.EntityData | VR Builder Documentation",
    "keywords": "Class Step.EntityData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll public class Step.EntityData : EntityCollectionData<IStepChild>, IStepData, IRenameableData, INamedData, IDescribedData, IEntitySequenceDataWithMode<IStepChild>, IEntitySequenceData<IStepChild>, IEntityCollectionData<IStepChild>, IEntityCollectionData, IEntitySequenceData, IModeData, IData Inheritance object EntityCollectionData<IStepChild> Step.EntityData Implements IStepData IRenameableData INamedData IDescribedData IEntitySequenceDataWithMode<IStepChild> IEntitySequenceData<IStepChild> IEntityCollectionData<IStepChild> IEntityCollectionData IEntitySequenceData IModeData IData Inherited Members EntityCollectionData<IStepChild>.Metadata object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntityData() public EntityData() Properties Behaviors The list of the step's behaviors. [DataMember] public IBehaviorCollection Behaviors { get; set; } Property Value IBehaviorCollection Current Current entity in the sequence. [IgnoreDataMember] public IStepChild Current { get; set; } Property Value IStepChild Description IStep's description. [DataMember] [DrawingPriority(1)] public string Description { get; set; } Property Value string GroupsToUnlock Lists all scene object groups to unlock manually. public IDictionary<Guid, IEnumerable<Type>> GroupsToUnlock { get; set; } Property Value IDictionary<Guid, IEnumerable<Type>> Mode public IMode Mode { get; set; } Property Value IMode Name Name of the entity. [DataMember] [DrawingPriority(0)] public string Name { get; set; } Property Value string TagsToUnlock Lists all scene object tags to unlock manually. [Obsolete(\"Use GroupsToUnlock instead.\")] public IDictionary<Guid, IEnumerable<Type>> TagsToUnlock { get; set; } Property Value IDictionary<Guid, IEnumerable<Type>> ToUnlock Keeps all the lockable properties referenced which should be unlocked manually. [DataMember] public IEnumerable<LockablePropertyReference> ToUnlock { get; set; } Property Value IEnumerable<LockablePropertyReference> Transitions The list of the step's transitions. [DataMember] public ITransitionCollection Transitions { get; set; } Property Value ITransitionCollection Methods GetChildren() public override IEnumerable<IStepChild> GetChildren() Returns IEnumerable<IStepChild> SetName(string) Set the new name. public void SetName(string name) Parameters name string"
  },
  "api/VRBuilder.Core.Step.html": {
    "href": "api/VRBuilder.Core.Step.html",
    "title": "Class Step | VR Builder Documentation",
    "keywords": "Class Step Namespace VRBuilder.Core Assembly VRBuilder.Core.dll An implementation of IStep interface. [DataContract(IsReference = true)] public class Step : Entity<Step.EntityData>, IDataOwner<Step.EntityData>, IStep, IDataOwner<IStepData>, IDataOwner, IEntity, IClonable<IStep> Inheritance object Entity<Step.EntityData> Step Implements IDataOwner<Step.EntityData> IStep IDataOwner<IStepData> IDataOwner IEntity IClonable<IStep> Inherited Members Entity<Step.EntityData>.Data Entity<Step.EntityData>.LifeCycle Entity<Step.EntityData>.Parent Entity<Step.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Step() protected Step() Step(string) public Step(string name) Parameters name string Properties StepMetadata Step's metadata. [DataMember] public StepMetadata StepMetadata { get; set; } Property Value StepMetadata Methods Clone() Returns a deep copy of the object. public IStep Clone() Returns IStep Configure(IMode) Configures the entity according to the given mode. public override void Configure(IMode mode) Parameters mode IMode GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetConfigurator() Override this method if your behavior or condition supports changing between process modes (IMode). By default returns an empty configurator that does nothing. protected override IConfigurator GetConfigurator() Returns IConfigurator GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.StepGroupPostProcessing.html": {
    "href": "api/VRBuilder.Core.StepGroupPostProcessing.html",
    "title": "Class StepGroupPostProcessing | VR Builder Documentation",
    "keywords": "Class StepGroupPostProcessing Namespace VRBuilder.Core Assembly VRBuilder.Editor.dll Postprocessing for a step group node. public class StepGroupPostProcessing : EntityPostProcessing<IStep> Inheritance object EntityPostProcessing<IStep> StepGroupPostProcessing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(IStep) Executes post processing. public override void Execute(IStep entity) Parameters entity IStep IEntity reference for post processing."
  },
  "api/VRBuilder.Core.StepMetadata.html": {
    "href": "api/VRBuilder.Core.StepMetadata.html",
    "title": "Class StepMetadata | VR Builder Documentation",
    "keywords": "Class StepMetadata Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Implementation of IMetadata adapted for IStep data. public class StepMetadata : IMetadata Inheritance object StepMetadata Implements IMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Guid Unique identifier for step. [DataMember] public Guid Guid { get; set; } Property Value Guid Position Graphical position of current IStep on the 'Workflow' window. public Vector2 Position { get; set; } Property Value Vector2 StepType Graphical representation of current IStep on the 'Workflow' window. public string StepType { get; set; } Property Value string"
  },
  "api/VRBuilder.Core.StepPostProcessing.html": {
    "href": "api/VRBuilder.Core.StepPostProcessing.html",
    "title": "Class StepPostProcessing | VR Builder Documentation",
    "keywords": "Class StepPostProcessing Namespace VRBuilder.Core Assembly VRBuilder.Core.dll IStep implementation of EntityPostProcessing<T> for default steps. public class StepPostProcessing : EntityPostProcessing<IStep> Inheritance object EntityPostProcessing<IStep> StepPostProcessing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(IStep) Executes post processing. public override void Execute(IStep entity) Parameters entity IStep IEntity reference for post processing."
  },
  "api/VRBuilder.Core.Transition.EntityData.html": {
    "href": "api/VRBuilder.Core.Transition.EntityData.html",
    "title": "Class Transition.EntityData | VR Builder Documentation",
    "keywords": "Class Transition.EntityData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll The transition's data class. [DisplayName(\"Transition\")] public class Transition.EntityData : EntityCollectionData<ICondition>, ITransitionData, IEntityCollectionDataWithMode<ICondition>, IEntityCollectionData<ICondition>, IEntityCollectionDataWithMode, IEntityCollectionData, IModeData, ICompletableData, INamedData, IData Inheritance object EntityCollectionData<ICondition> Transition.EntityData Implements ITransitionData IEntityCollectionDataWithMode<ICondition> IEntityCollectionData<ICondition> IEntityCollectionDataWithMode IEntityCollectionData IModeData ICompletableData INamedData IData Inherited Members EntityCollectionData<ICondition>.Metadata object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Conditions A list of conditions. When you complete all of them, this transition will trigger. [DataMember] [DisplayName(\"Conditions\")] [ReorderableListOf(new Type[] { typeof(FoldableAttribute), typeof(HelpAttribute), typeof(MenuAttribute) })] public IList<ICondition> Conditions { get; set; } Property Value IList<ICondition> IsCompleted public bool IsCompleted { get; set; } Property Value bool Mode public IMode Mode { get; set; } Property Value IMode Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string TargetStep The next step to take after this transition triggers. [DataMember] public IStep TargetStep { get; set; } Property Value IStep Methods GetChildren() public override IEnumerable<ICondition> GetChildren() Returns IEnumerable<ICondition>"
  },
  "api/VRBuilder.Core.Transition.html": {
    "href": "api/VRBuilder.Core.Transition.html",
    "title": "Class Transition | VR Builder Documentation",
    "keywords": "Class Transition Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A class for a transition from one step to another. [DataContract(IsReference = true)] public class Transition : CompletableEntity<Transition.EntityData>, IDataOwner<Transition.EntityData>, ICompletableEntity, ITransition, IEntity, ICompletable, IDataOwner<ITransitionData>, IDataOwner, IClonable<ITransition>, ILockablePropertiesProvider Inheritance object Entity<Transition.EntityData> CompletableEntity<Transition.EntityData> Transition Implements IDataOwner<Transition.EntityData> ICompletableEntity ITransition IEntity ICompletable IDataOwner<ITransitionData> IDataOwner IClonable<ITransition> ILockablePropertiesProvider Inherited Members CompletableEntity<Transition.EntityData>.IsCompleted CompletableEntity<Transition.EntityData>.Autocomplete() Entity<Transition.EntityData>.Data Entity<Transition.EntityData>.LifeCycle Entity<Transition.EntityData>.Parent Entity<Transition.EntityData>.Configure(IMode) Entity<Transition.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Transition() public Transition() Methods Clone() Returns a deep copy of the object. public ITransition Clone() Returns ITransition GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetAutocompleter() Override this method to return a custom Autocompleter<TData>. protected override IAutocompleter GetAutocompleter() Returns IAutocompleter By default, it returns and empty autocompleter which does nothing. GetConfigurator() Override this method if your behavior or condition supports changing between process modes (IMode). By default returns an empty configurator that does nothing. protected override IConfigurator GetConfigurator() Returns IConfigurator GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess GetLockableProperties() Returns all LockableProperties this provider requires. public IEnumerable<LockablePropertyData> GetLockableProperties() Returns IEnumerable<LockablePropertyData>"
  },
  "api/VRBuilder.Core.TransitionCollection.EntityData.html": {
    "href": "api/VRBuilder.Core.TransitionCollection.EntityData.html",
    "title": "Class TransitionCollection.EntityData | VR Builder Documentation",
    "keywords": "Class TransitionCollection.EntityData Namespace VRBuilder.Core Assembly VRBuilder.Core.dll The data class of the ITransitions' collection. [DataContract(IsReference = true)] public class TransitionCollection.EntityData : EntityCollectionData<ITransition>, ITransitionCollectionData, IEntityCollectionDataWithMode<ITransition>, IEntityCollectionData<ITransition>, IEntityCollectionDataWithMode, IEntityCollectionData, IModeData, IData Inheritance object EntityCollectionData<ITransition> TransitionCollection.EntityData Implements ITransitionCollectionData IEntityCollectionDataWithMode<ITransition> IEntityCollectionData<ITransition> IEntityCollectionDataWithMode IEntityCollectionData IModeData IData Inherited Members EntityCollectionData<ITransition>.Metadata object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Mode public IMode Mode { get; set; } Property Value IMode Transitions A list of ITransitions. [DataMember] [DisplayName(\"\")] [KeepPopulated(typeof(Transition))] [ReorderableListOf(new Type[] { typeof(FoldableAttribute), typeof(DeletableAttribute) })] public virtual IList<ITransition> Transitions { get; set; } Property Value IList<ITransition> Methods GetChildren() public override IEnumerable<ITransition> GetChildren() Returns IEnumerable<ITransition>"
  },
  "api/VRBuilder.Core.TransitionCollection.html": {
    "href": "api/VRBuilder.Core.TransitionCollection.html",
    "title": "Class TransitionCollection | VR Builder Documentation",
    "keywords": "Class TransitionCollection Namespace VRBuilder.Core Assembly VRBuilder.Core.dll A collection of ITransitions. [DataContract(IsReference = true)] public class TransitionCollection : Entity<TransitionCollection.EntityData>, IDataOwner<TransitionCollection.EntityData>, ITransitionCollection, IStepChild, IEntity, IDataOwner<ITransitionCollectionData>, IDataOwner, IClonable<ITransitionCollection> Inheritance object Entity<TransitionCollection.EntityData> TransitionCollection Implements IDataOwner<TransitionCollection.EntityData> ITransitionCollection IStepChild IEntity IDataOwner<ITransitionCollectionData> IDataOwner IClonable<ITransitionCollection> Inherited Members Entity<TransitionCollection.EntityData>.Data Entity<TransitionCollection.EntityData>.LifeCycle Entity<TransitionCollection.EntityData>.Parent Entity<TransitionCollection.EntityData>.Configure(IMode) Entity<TransitionCollection.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TransitionCollection() public TransitionCollection() Methods Clone() Returns a deep copy of the object. public ITransitionCollection Clone() Returns ITransitionCollection GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess GetConfigurator() Override this method if your behavior or condition supports changing between process modes (IMode). By default returns an empty configurator that does nothing. protected override IConfigurator GetConfigurator() Returns IConfigurator GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Core.UI.Drawers.Metadata.ReorderableElementMetadata.html": {
    "href": "api/VRBuilder.Core.UI.Drawers.Metadata.ReorderableElementMetadata.html",
    "title": "Class ReorderableElementMetadata | VR Builder Documentation",
    "keywords": "Class ReorderableElementMetadata Namespace VRBuilder.Core.UI.Drawers.Metadata Assembly VRBuilder.Core.dll Metadata to make ReorderableListOfAttribute reorderable. public class ReorderableElementMetadata Inheritance object ReorderableElementMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFirst Determines, whether the entity is the first one in the list. public bool IsFirst { get; set; } Property Value bool IsLast Determines, whether the entity is the last one in the list. public bool IsLast { get; set; } Property Value bool MoveDown Determines, whether the entity must be moved down in the list. public bool MoveDown { get; set; } Property Value bool MoveUp Determines, whether the entity must be moved up in the list. public bool MoveUp { get; set; } Property Value bool"
  },
  "api/VRBuilder.Core.UI.Drawers.Metadata.html": {
    "href": "api/VRBuilder.Core.UI.Drawers.Metadata.html",
    "title": "Namespace VRBuilder.Core.UI.Drawers.Metadata | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.UI.Drawers.Metadata Classes ReorderableElementMetadata Metadata to make ReorderableListOfAttribute reorderable."
  },
  "api/VRBuilder.Core.Utils.Bezier.html": {
    "href": "api/VRBuilder.Core.Utils.Bezier.html",
    "title": "Class Bezier | VR Builder Documentation",
    "keywords": "Class Bezier Namespace VRBuilder.Core.Utils Assembly VRBuilder.Core.dll Bezier curve formulas. public static class Bezier Inheritance object Bezier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetArcLength(Vector3, Vector3, Vector3, Vector3, int) public static IEnumerable<float> GetArcLength(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, int resolution) Parameters p0 Vector3 p1 Vector3 p2 Vector3 p3 Vector3 resolution int Returns IEnumerable<float> GetFirstDerivative(Vector3, Vector3, Vector3, float) public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, float t) Parameters p0 Vector3 p1 Vector3 p2 Vector3 t float Returns Vector3 GetFirstDerivative(Vector3, Vector3, Vector3, Vector3, float) public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t) Parameters p0 Vector3 p1 Vector3 p2 Vector3 p3 Vector3 t float Returns Vector3 GetPoint(Vector3, Vector3, Vector3, float) public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, float t) Parameters p0 Vector3 p1 Vector3 p2 Vector3 t float Returns Vector3 GetPoint(Vector3, Vector3, Vector3, Vector3, float) public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t) Parameters p0 Vector3 p1 Vector3 p2 Vector3 p3 Vector3 t float Returns Vector3"
  },
  "api/VRBuilder.Core.Utils.BezierControlPointMode.html": {
    "href": "api/VRBuilder.Core.Utils.BezierControlPointMode.html",
    "title": "Enum BezierControlPointMode | VR Builder Documentation",
    "keywords": "Enum BezierControlPointMode Namespace VRBuilder.Core.Utils Assembly VRBuilder.Core.dll Control point modes for BezierSpline. public enum BezierControlPointMode Fields Aligned = 1 Free = 0 Mirrored = 2"
  },
  "api/VRBuilder.Core.Utils.BezierSpline.html": {
    "href": "api/VRBuilder.Core.Utils.BezierSpline.html",
    "title": "Class BezierSpline | VR Builder Documentation",
    "keywords": "Class BezierSpline Namespace VRBuilder.Core.Utils Assembly VRBuilder.Core.dll Class that generates a Bezier spline. public class BezierSpline : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour BezierSpline Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ControlPointCount Amount of control points in the spline. public int ControlPointCount { get; } Property Value int CurveCount Returns curve count. public int CurveCount { get; } Property Value int CurveResolution The amount of segments the curve will be divided in for the linear approximation. public int CurveResolution { get; set; } Property Value int LinearVelocity If true, the t parameter will be applied linearly, with some approximation. public bool LinearVelocity { get; set; } Property Value bool Loop If true, the spline will form a loop. public bool Loop { get; set; } Property Value bool Methods AddCurve() Adds a new curve to the spline. public void AddCurve() GetControlPoint(int) Returns the control point at the given index. public Vector3 GetControlPoint(int index) Parameters index int Returns Vector3 GetControlPointMode(int) Returns control point mode. public BezierControlPointMode GetControlPointMode(int index) Parameters index int Returns BezierControlPointMode GetDirection(float) Returns direction at the given position. public Vector3 GetDirection(float t) Parameters t float Returns Vector3 GetPoint(float) Returns the point at the given position. public Vector3 GetPoint(float t) Parameters t float Returns Vector3 GetVelocity(float) Returns velocity at the given position. public Vector3 GetVelocity(float t) Parameters t float Returns Vector3 RemoveCurve() Removes the last curve from the spline. public void RemoveCurve() Reset() public void Reset() SetControlPoint(int, Vector3) Sets the control point at the given index. public void SetControlPoint(int index, Vector3 point) Parameters index int point Vector3 SetControlPointMode(int, BezierControlPointMode) Sets control point mode. public void SetControlPointMode(int index, BezierControlPointMode mode) Parameters index int mode BezierControlPointMode"
  },
  "api/VRBuilder.Core.Utils.GameObjectExtension.html": {
    "href": "api/VRBuilder.Core.Utils.GameObjectExtension.html",
    "title": "Class GameObjectExtension | VR Builder Documentation",
    "keywords": "Class GameObjectExtension Namespace VRBuilder.Core.Utils Assembly VRBuilder.Core.dll public static class GameObjectExtension Inheritance object GameObjectExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RemoveChildWithNameImmediate(GameObject, string) Removes a gameobject child with a specific name. As it uses DestroyImmediate it should only be used during editor time. public static void RemoveChildWithNameImmediate(this GameObject gameObject, string name) Parameters gameObject GameObject name string SetLayer<T>(GameObject, int, bool) public static void SetLayer<T>(this GameObject gameObject, int layer, bool includeChildren = false) where T : Component Parameters gameObject GameObject layer int includeChildren bool Type Parameters T"
  },
  "api/VRBuilder.Core.Utils.LockObjectsOnSceneStart.html": {
    "href": "api/VRBuilder.Core.Utils.LockObjectsOnSceneStart.html",
    "title": "Class LockObjectsOnSceneStart | VR Builder Documentation",
    "keywords": "Class LockObjectsOnSceneStart Namespace VRBuilder.Core.Utils Assembly VRBuilder.Core.dll Handles locking of all process objects in the scene and makes them non-interactable before the process is started. public class LockObjectsOnSceneStart : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour LockObjectsOnSceneStart Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.Core.Utils.Logging.LifeCycleLoggingConfig.html": {
    "href": "api/VRBuilder.Core.Utils.Logging.LifeCycleLoggingConfig.html",
    "title": "Class LifeCycleLoggingConfig | VR Builder Documentation",
    "keywords": "Class LifeCycleLoggingConfig Namespace VRBuilder.Core.Utils.Logging Assembly VRBuilder.Core.dll ScriptableObject which allows you to configure what of the process life cycle should be logged. public class LifeCycleLoggingConfig : SettingsObject<LifeCycleLoggingConfig> Inheritance object Object ScriptableObject SettingsObject<LifeCycleLoggingConfig> LifeCycleLoggingConfig Inherited Members SettingsObject<LifeCycleLoggingConfig>.Instance SettingsObject<LifeCycleLoggingConfig>.Save() ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields LogBehaviors True, if behaviors are allowed to be logged. public bool LogBehaviors Field Value bool LogChapters True, if chapters are allowed to be logged. public bool LogChapters Field Value bool LogConditions True, if conditions are allowed to be logged. public bool LogConditions Field Value bool LogDataPropertyChanges True, if data property changes are allowed to be logged. public bool LogDataPropertyChanges Field Value bool LogLockState True, if verbose logging is enabled. public bool LogLockState Field Value bool LogSteps True, if steps are allowed to be logged. public bool LogSteps Field Value bool LogTransitions True, if transitions are allowed to be logged. public bool LogTransitions Field Value bool"
  },
  "api/VRBuilder.Core.Utils.Logging.html": {
    "href": "api/VRBuilder.Core.Utils.Logging.html",
    "title": "Namespace VRBuilder.Core.Utils.Logging | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Utils.Logging Classes LifeCycleLoggingConfig ScriptableObject which allows you to configure what of the process life cycle should be logged."
  },
  "api/VRBuilder.Core.Utils.ProcessReferenceUtils.html": {
    "href": "api/VRBuilder.Core.Utils.ProcessReferenceUtils.html",
    "title": "Class ProcessReferenceUtils | VR Builder Documentation",
    "keywords": "Class ProcessReferenceUtils Namespace VRBuilder.Core.Utils Assembly VRBuilder.Core.dll public static class ProcessReferenceUtils Inheritance object ProcessReferenceUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetNameFrom(ISceneObjectProperty) [Obsolete] public static string GetNameFrom(ISceneObjectProperty property) Parameters property ISceneObjectProperty Returns string GetNameFrom(ISceneObject) [Obsolete] public static string GetNameFrom(ISceneObject sceneObject) Parameters sceneObject ISceneObject Returns string GetUniqueIdFrom(ISceneObjectProperty) public static Guid GetUniqueIdFrom(ISceneObjectProperty property) Parameters property ISceneObjectProperty Returns Guid GetUniqueIdFrom(ISceneObject) public static Guid GetUniqueIdFrom(ISceneObject sceneObject) Parameters sceneObject ISceneObject Returns Guid"
  },
  "api/VRBuilder.Core.Utils.ProcessUtils.html": {
    "href": "api/VRBuilder.Core.Utils.ProcessUtils.html",
    "title": "Class ProcessUtils | VR Builder Documentation",
    "keywords": "Class ProcessUtils Namespace VRBuilder.Core.Utils Assembly VRBuilder.Core.dll Collection of utilities for handling processes. public static class ProcessUtils Inheritance object ProcessUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetParentEntity(IEntity, IProcess) Returns the parent entity for the specified entity in the given process. public static IEntity GetParentEntity(IEntity entity, IProcess process) Parameters entity IEntity process IProcess Returns IEntity"
  },
  "api/VRBuilder.Core.Utils.ReflectionUtils.html": {
    "href": "api/VRBuilder.Core.Utils.ReflectionUtils.html",
    "title": "Class ReflectionUtils | VR Builder Documentation",
    "keywords": "Class ReflectionUtils Namespace VRBuilder.Core.Utils Assembly VRBuilder.Core.dll public static class ReflectionUtils Inheritance object ReflectionUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateInstanceOfType(Type) Creates instance of given type using public or protected constructor with no parameters. public static object CreateInstanceOfType(Type type) Parameters type Type Returns object CreateInstanceOfType<T>() Creates instance of given type using public or protected constructor with no parameters. public static T CreateInstanceOfType<T>() Returns T Type Parameters T GetAllTypes() Returns all existing types of all assemblies. public static IEnumerable<Type> GetAllTypes() Returns IEnumerable<Type> GetAttribute<T>(Type, bool) Returns first attribute T of type public static T GetAttribute<T>(this Type type, bool inherit = false) where T : Attribute Parameters type Type inherit bool Returns T Type Parameters T GetConcreteImplementationsOf(Type) Returns non-abstract classes that implement or inherit from given type. public static IEnumerable<Type> GetConcreteImplementationsOf(Type baseType) Parameters baseType Type Returns IEnumerable<Type> GetConcreteImplementationsOf<T>() Returns non-abstract classes that implement or inherit from given type. public static IEnumerable<Type> GetConcreteImplementationsOf<T>() Returns IEnumerable<Type> Type Parameters T GetDeclaredTypeOfPropertyOrField(MemberInfo) Get declared type of field/property info. public static Type GetDeclaredTypeOfPropertyOrField(MemberInfo info) Parameters info MemberInfo Returns Type GetDefault(Type) Returns default instance of type. public static object GetDefault(Type type) Parameters type Type Returns object GetEntryType(object) public static Type GetEntryType(object list) Parameters list object Returns Type GetEntryType(Type) If the given listType is IList{T}, return its generic type argument. Otherwise, return typeof(object). public static Type GetEntryType(Type listType) Parameters listType Type Returns Type GetFinalImplementationsOf<T>(params Type[]) Return an IEnumerable of types which inherit T and are not inherited by any other type. It is sorted by priority. lowestPriorityTypes come at the end. public static IEnumerable<Type> GetFinalImplementationsOf<T>(params Type[] lowestPriorityTypes) Parameters lowestPriorityTypes Type[] Returns IEnumerable<Type> Type Parameters T GetGenericDictionaryInterface(object) Returns generic IDictionary interface which is implemented by the type of dictionaryValue. If dictionaryValue's type does not implement it, returns null. public static Type GetGenericDictionaryInterface(object dictionaryValue) Parameters dictionaryValue object Returns Type GetNameWithNesting(Type) Return type name taking into consideration if it is nested type or not. public static string GetNameWithNesting(this Type type) Parameters type Type Returns string GetTypeFromAssemblyQualifiedName(string) Returns the type from assemblyQualifiedName or null if not found. public static Type GetTypeFromAssemblyQualifiedName(string assemblyQualifiedName) Parameters assemblyQualifiedName string Returns Type GetValueFromPropertyOrField(object, MemberInfo) Get value from property/field member of object owner public static object GetValueFromPropertyOrField(object owner, MemberInfo member) Parameters owner object member MemberInfo Returns object InsertIntoList(ref IList, int, object) Insert a value in list at index index. If the list is fixed size, new instance is created. public static void InsertIntoList(ref IList list, int index, object value) Parameters list IList index int value object IsEmpty(object) Determines if the given object is empty. public static bool IsEmpty(object value) Parameters value object Returns bool IsField(MemberInfo) Is given memberInfo a FieldInfo? public static bool IsField(MemberInfo memberInfo) Parameters memberInfo MemberInfo Returns bool IsNumeric(Type) Checks if the given type is a number. public static bool IsNumeric(Type type) Parameters type Type Returns bool IsProperty(MemberInfo) Is given memberInfo a PropertyInfo? public static bool IsProperty(MemberInfo memberInfo) Parameters memberInfo MemberInfo Returns bool IsSubclassOfGenericDefinition(Type, Type) Check if type inherits from genericDefinition. public static bool IsSubclassOfGenericDefinition(this Type typeToCheck, Type genericDefinition) Parameters typeToCheck Type genericDefinition Type Returns bool RemoveFromList(ref IList, int) Remove an element from list at index. If the list is fixed size, new instance is created. public static void RemoveFromList(ref IList list, int index) Parameters list IList index int ReplaceList<T>(ref IList, IEnumerable<T>) Replace list with a newList. New instance is created. public static void ReplaceList<T>(ref IList list, IEnumerable<T> newList) Parameters list IList newList IEnumerable<T> Type Parameters T SetValueToPropertyOrField(object, MemberInfo, object) Set value to property/field member of object owner. public static void SetValueToPropertyOrField(object owner, MemberInfo member, object value) Parameters owner object member MemberInfo value object WhichHaveAttribute<T>(IEnumerable<Type>) Returns types which have attribute T. public static IEnumerable<Type> WhichHaveAttribute<T>(this IEnumerable<Type> types) where T : Attribute Parameters types IEnumerable<Type> Returns IEnumerable<Type> Type Parameters T"
  },
  "api/VRBuilder.Core.Utils.html": {
    "href": "api/VRBuilder.Core.Utils.html",
    "title": "Namespace VRBuilder.Core.Utils | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Utils Classes Bezier Bezier curve formulas. BezierSpline Class that generates a Bezier spline. GameObjectExtension LockObjectsOnSceneStart Handles locking of all process objects in the scene and makes them non-interactable before the process is started. ProcessReferenceUtils ProcessUtils Collection of utilities for handling processes. ReflectionUtils Enums BezierControlPointMode Control point modes for BezierSpline."
  },
  "api/VRBuilder.Core.Validation.IAttributeValidator.html": {
    "href": "api/VRBuilder.Core.Validation.IAttributeValidator.html",
    "title": "Interface IAttributeValidator | VR Builder Documentation",
    "keywords": "Interface IAttributeValidator Namespace VRBuilder.Core.Validation Assembly VRBuilder.Core.dll Can be used to validate variables in any EntityData. public interface IAttributeValidator Properties ErrorLevel ValidationState which will be used if the validation fails. ValidationErrorLevel ErrorLevel { get; } Property Value ValidationErrorLevel Methods Validate(object) Runs the validation and returns true if there is a problem. List<ReportEntry> Validate(object value) Parameters value object Object which will be validated. Returns List<ReportEntry> Returns a list of report entries."
  },
  "api/VRBuilder.Core.Validation.ReportEntry.html": {
    "href": "api/VRBuilder.Core.Validation.ReportEntry.html",
    "title": "Class ReportEntry | VR Builder Documentation",
    "keywords": "Class ReportEntry Namespace VRBuilder.Core.Validation Assembly VRBuilder.Core.dll Base report entry with all information available on editor Builder core. public class ReportEntry Inheritance object ReportEntry Derived EditorReportEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReportEntry(int, string, ValidationErrorLevel) public ReportEntry(int code, string message, ValidationErrorLevel errorLevel) Parameters code int message string errorLevel ValidationErrorLevel ReportEntry(ReportEntry) protected ReportEntry(ReportEntry entry) Parameters entry ReportEntry Fields Code ErrorCode to easily identifying the error. public readonly int Code Field Value int ErrorLevel Priority level for this ValidationReportEntry. public readonly ValidationErrorLevel ErrorLevel Field Value ValidationErrorLevel Message Detailed description of the issue. public readonly string Message Field Value string"
  },
  "api/VRBuilder.Core.Validation.ValidationErrorLevel.html": {
    "href": "api/VRBuilder.Core.Validation.ValidationErrorLevel.html",
    "title": "Enum ValidationErrorLevel | VR Builder Documentation",
    "keywords": "Enum ValidationErrorLevel Namespace VRBuilder.Core.Validation Assembly VRBuilder.Core.dll Error level of the problem found while validating. public enum ValidationErrorLevel Fields ERROR = 2 FATAL = 3 HINT = 0 WARNING = 1"
  },
  "api/VRBuilder.Core.Validation.html": {
    "href": "api/VRBuilder.Core.Validation.html",
    "title": "Namespace VRBuilder.Core.Validation | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core.Validation Classes ReportEntry Base report entry with all information available on editor Builder core. Interfaces IAttributeValidator Can be used to validate variables in any EntityData. Enums ValidationErrorLevel Error level of the problem found while validating."
  },
  "api/VRBuilder.Core.ViewTransform.html": {
    "href": "api/VRBuilder.Core.ViewTransform.html",
    "title": "Class ViewTransform | VR Builder Documentation",
    "keywords": "Class ViewTransform Namespace VRBuilder.Core Assembly VRBuilder.Core.dll Stores position and scale in a viewport. [DataContract(IsReference = true)] public class ViewTransform Inheritance object ViewTransform Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ViewTransform(Vector3, Vector3) public ViewTransform(Vector3 position, Vector3 scale) Parameters position Vector3 scale Vector3 Properties Position [DataMember] public Vector3 Position { get; set; } Property Value Vector3 Scale [DataMember] public Vector3 Scale { get; set; } Property Value Vector3"
  },
  "api/VRBuilder.Core.html": {
    "href": "api/VRBuilder.Core.html",
    "title": "Namespace VRBuilder.Core | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Core Classes ActivationStateChangedEventArgs Event that is fired when the current stage changes. Autocompleter<TData> A base class for autocompleters which provides access to the entity's data. BehaviorCollection A collection of IBehaviors of a IStep. BehaviorCollection.EntityData The data class for IBehavior collections. Chapter A chapter of a process Process. Chapter.EntityData The chapter's data class. ChapterMetadata Implementation of IMetadata adapted for IChapter data. CompletableEntity<TData> An Entity<TData> which can be completed. Entities can be completed only during their Active Stage. CompositeProcess A process which consists of multiple processes which execute at the same time. It ends when all its child processes end. Configurator<TData> A base class for entities' configurators which have access to their entities' data. EmptyAutocompleter An autocompleter that does nothing. EmptyConfigurator A configurator that does nothing. EmptyProcess A stage process that does nothing. EndChapterPostProcessing IStep implementation of EntityPostProcessing<T> specific for \"endChapter\" steps. EntityFactory Base factory interface for IEntity objects. EntityPostProcessing<T> Base class for implementing post processing after a IEntity creation. Entity<TData> Abstract helper class that can be used for instances that implement IEntity. Provides implementation of the events and properties, and also offers member functions to trigger state changes. FastForwardProcessEventArgs EventArgs for fast forward process events. InstantProcess<TData> A convenience class for processes that happen instantly. You only have to implement the Start() method. LifeCycle The implementation of the ILifeCycle interface. Metadata General implementation of IMetadata. ParallelExecutionPostProcessing Postprocessing for a parallel execution node. Process An implementation of IProcess class. It contains a complete information about the process workflow. Process.EntityData The data class for a process. ProcessEventArgs EventArgs for process events. ProcessMetadata Implementation of IMetadata adapted for IProcess data. ProcessRunner Runs a IProcess, expects to be run only once. ProcessRunner.ProcessEvents RandomBranchPostProcessing IStep implementation of EntityPostProcessing<T> specific for \"randomBranch\" steps. StageProcess<TData> A base implementation of a IStageProcess which provides access to its entity's data. Step An implementation of IStep interface. Step.EntityData StepGroupPostProcessing Postprocessing for a step group node. StepMetadata Implementation of IMetadata adapted for IStep data. StepPostProcessing IStep implementation of EntityPostProcessing<T> for default steps. Transition A class for a transition from one step to another. Transition.EntityData The transition's data class. TransitionCollection A collection of ITransitions. TransitionCollection.EntityData The data class of the ITransitions' collection. ViewTransform Stores position and scale in a viewport. Interfaces IAutocompleter A base interface for an autocompleter. Autocompleters are used alongside fast-forwarding of the processes. They must fake circumstances under which conditions should complete if fast-forwarding requires it. IBehaviorCollection A collection of IBehaviors of a IStep. IBehaviorCollectionData A data that contains a list of IBehaviors. IChapter A chapter is a high-level grouping of several ISteps. IChapterData The IChapter's data interface. IClonable<T> Interface for objects that can be duplicated. ICompletable Base interface for objects which can be completed. ICompletableEntity An IEntity which can be completed. IData Abstract data structure. IDataOwner Abstract holder of data. IDataOwner<TData> Abstract holder of data. IDescribable Interface for all process entities that have a description. IDescribedData Data structure with an IStep's description. IEntity The basic interface for all components of a process: behaviors, conditions, transitions, and so on. Do not implement this interface directly. Use Behaviors.Behavior or Conditions.Condition abstract classes instead. ILifeCycle A life cycle of an entity. It handles transition between four stages: Inactive, Activating, Active, and Deactivating. ILockablePropertiesProvider This interface is used to allow entities, for example Transition or VRBuilder.Core.Conditions to provide properties which should be locked. IMetadata Utility data which is used by the VR Builder SDK custom editors. INamedData Data structure with an IStep's name. IProcess Interface of a process. IProcessData The data class for a IProcess. IRenameableData Interface for data that can be renamed. IStageProcess A process for an IEntity's Stage. IStep Interface for a process step. IStepChild Abstract data structure. Usually works along with IDataOwner. IStepData The interface for a step's data. ITransition An interface for a transition that determines when a IStep is completed and what is the next IStep. ITransitionCollection Interface for a collection of transitions. ITransitionCollectionData The interface of a data with a list of ITransitions. ITransitionData Enums Stage All possible states of an IEntity."
  },
  "api/VRBuilder.Editor.Animations.Configuration.AnimationsConfigurationExtension.html": {
    "href": "api/VRBuilder.Editor.Animations.Configuration.AnimationsConfigurationExtension.html",
    "title": "Class AnimationsConfigurationExtension | VR Builder Documentation",
    "keywords": "Class AnimationsConfigurationExtension Namespace VRBuilder.Editor.Animations.Configuration Assembly VRBuilder.Editor.Animations.dll public class AnimationsConfigurationExtension : IEditorConfigurationExtension Inheritance object AnimationsConfigurationExtension Implements IEditorConfigurationExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisabledMenuItems Menu items disabled by this configuration. public IEnumerable<Type> DisabledMenuItems { get; } Property Value IEnumerable<Type> RequiredMenuItems Menu items required by this configuration. public IEnumerable<Type> RequiredMenuItems { get; } Property Value IEnumerable<Type>"
  },
  "api/VRBuilder.Editor.Animations.Configuration.html": {
    "href": "api/VRBuilder.Editor.Animations.Configuration.html",
    "title": "Namespace VRBuilder.Editor.Animations.Configuration | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.Animations.Configuration Classes AnimationsConfigurationExtension"
  },
  "api/VRBuilder.Editor.Animations.UI.Behaviors.AnimateTransformMenuItem.html": {
    "href": "api/VRBuilder.Editor.Animations.UI.Behaviors.AnimateTransformMenuItem.html",
    "title": "Class AnimateTransformMenuItem | VR Builder Documentation",
    "keywords": "Class AnimateTransformMenuItem Namespace VRBuilder.Editor.Animations.UI.Behaviors Assembly VRBuilder.Editor.Animations.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class AnimateTransformMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> AnimateTransformMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.Animations.UI.Behaviors.ChildExplosionViewMenuItem.html": {
    "href": "api/VRBuilder.Editor.Animations.UI.Behaviors.ChildExplosionViewMenuItem.html",
    "title": "Class ChildExplosionViewMenuItem | VR Builder Documentation",
    "keywords": "Class ChildExplosionViewMenuItem Namespace VRBuilder.Editor.Animations.UI.Behaviors Assembly VRBuilder.Editor.Animations.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class ChildExplosionViewMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> ChildExplosionViewMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.Animations.UI.Behaviors.FollowPathMenuItem.html": {
    "href": "api/VRBuilder.Editor.Animations.UI.Behaviors.FollowPathMenuItem.html",
    "title": "Class FollowPathMenuItem | VR Builder Documentation",
    "keywords": "Class FollowPathMenuItem Namespace VRBuilder.Editor.Animations.UI.Behaviors Assembly VRBuilder.Editor.Animations.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class FollowPathMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> FollowPathMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.Animations.UI.Behaviors.RotateAroundAxisMenuItem.html": {
    "href": "api/VRBuilder.Editor.Animations.UI.Behaviors.RotateAroundAxisMenuItem.html",
    "title": "Class RotateAroundAxisMenuItem | VR Builder Documentation",
    "keywords": "Class RotateAroundAxisMenuItem Namespace VRBuilder.Editor.Animations.UI.Behaviors Assembly VRBuilder.Editor.Animations.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class RotateAroundAxisMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> RotateAroundAxisMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.Animations.UI.Behaviors.SetAnimatorBoolMenuItem.html": {
    "href": "api/VRBuilder.Editor.Animations.UI.Behaviors.SetAnimatorBoolMenuItem.html",
    "title": "Class SetAnimatorBoolMenuItem | VR Builder Documentation",
    "keywords": "Class SetAnimatorBoolMenuItem Namespace VRBuilder.Editor.Animations.UI.Behaviors Assembly VRBuilder.Editor.Animations.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetAnimatorBoolMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetAnimatorBoolMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.Animations.UI.Behaviors.SetAnimatorFloatMenuItem.html": {
    "href": "api/VRBuilder.Editor.Animations.UI.Behaviors.SetAnimatorFloatMenuItem.html",
    "title": "Class SetAnimatorFloatMenuItem | VR Builder Documentation",
    "keywords": "Class SetAnimatorFloatMenuItem Namespace VRBuilder.Editor.Animations.UI.Behaviors Assembly VRBuilder.Editor.Animations.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetAnimatorFloatMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetAnimatorFloatMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.Animations.UI.Behaviors.SetAnimatorIntMenuItem.html": {
    "href": "api/VRBuilder.Editor.Animations.UI.Behaviors.SetAnimatorIntMenuItem.html",
    "title": "Class SetAnimatorIntMenuItem | VR Builder Documentation",
    "keywords": "Class SetAnimatorIntMenuItem Namespace VRBuilder.Editor.Animations.UI.Behaviors Assembly VRBuilder.Editor.Animations.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetAnimatorIntMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetAnimatorIntMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.Animations.UI.Behaviors.SetAnimatorTriggerMenuItem.html": {
    "href": "api/VRBuilder.Editor.Animations.UI.Behaviors.SetAnimatorTriggerMenuItem.html",
    "title": "Class SetAnimatorTriggerMenuItem | VR Builder Documentation",
    "keywords": "Class SetAnimatorTriggerMenuItem Namespace VRBuilder.Editor.Animations.UI.Behaviors Assembly VRBuilder.Editor.Animations.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetAnimatorTriggerMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetAnimatorTriggerMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.Animations.UI.Behaviors.html": {
    "href": "api/VRBuilder.Editor.Animations.UI.Behaviors.html",
    "title": "Namespace VRBuilder.Editor.Animations.UI.Behaviors | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.Animations.UI.Behaviors Classes AnimateTransformMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). ChildExplosionViewMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). FollowPathMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). RotateAroundAxisMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetAnimatorBoolMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetAnimatorFloatMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetAnimatorIntMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetAnimatorTriggerMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem()."
  },
  "api/VRBuilder.Editor.BasicInteraction.Inspector.HasGuidValidationEditor.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.Inspector.HasGuidValidationEditor.html",
    "title": "Class HasGuidValidationEditor | VR Builder Documentation",
    "keywords": "Class HasGuidValidationEditor Namespace VRBuilder.Editor.BasicInteraction.Inspector Assembly VRBuilder.Editor.BasicInteraction.dll [CustomEditor(typeof(HasGuidValidation))] [CanEditMultipleObjects] public class HasGuidValidationEditor : Editor Inheritance object Object ScriptableObject Editor HasGuidValidationEditor Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields dropBoxStyle protected GUIStyle dropBoxStyle Field Value GUIStyle richTextLabelStyle protected GUIStyle richTextLabelStyle Field Value GUIStyle Methods DropAreaGUI(Action<GameObject>) protected void DropAreaGUI(Action<GameObject> dropAction) Parameters dropAction Action<GameObject> OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI() OpenMissingProcessSceneObjectDialog(GameObject) protected Guid OpenMissingProcessSceneObjectDialog(GameObject selectedSceneObject) Parameters selectedSceneObject GameObject Returns Guid"
  },
  "api/VRBuilder.Editor.BasicInteraction.Inspector.IsObjectWithTagValidationEditor.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.Inspector.IsObjectWithTagValidationEditor.html",
    "title": "Class IsObjectWithTagValidationEditor | VR Builder Documentation",
    "keywords": "Class IsObjectWithTagValidationEditor Namespace VRBuilder.Editor.BasicInteraction.Inspector Assembly VRBuilder.Editor.BasicInteraction.dll [CustomEditor(typeof(IsObjectWithTagValidation))] [CanEditMultipleObjects] public class IsObjectWithTagValidationEditor : Editor Inheritance object Object ScriptableObject Editor IsObjectWithTagValidationEditor Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/VRBuilder.Editor.BasicInteraction.Inspector.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.Inspector.html",
    "title": "Namespace VRBuilder.Editor.BasicInteraction.Inspector | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.BasicInteraction.Inspector Classes HasGuidValidationEditor IsObjectWithTagValidationEditor"
  },
  "api/VRBuilder.Editor.BasicInteraction.InteractionFrameworkSceneSetup.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.InteractionFrameworkSceneSetup.html",
    "title": "Class InteractionFrameworkSceneSetup | VR Builder Documentation",
    "keywords": "Class InteractionFrameworkSceneSetup Namespace VRBuilder.Editor.BasicInteraction Assembly VRBuilder.Editor.BasicInteraction.dll This base class is supposed to be implemented by classes which will be called to setup the scene, specifically interaction frameworks. public abstract class InteractionFrameworkSceneSetup : SceneSetup Inheritance object SceneSetup InteractionFrameworkSceneSetup Derived XRInteractionSceneSetup Inherited Members SceneSetup.Setup(ISceneSetupConfiguration) SceneSetup.SetupPrefab(string) SceneSetup.FindPrefab(string) SceneSetup.IsPrefabMissingInScene(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Key Identifier key for specific scene setup types, e.g. for every interaction framework. public override string Key { get; } Property Value string Priority Priority lets you tweak in which order different SceneSetups will be performed. The priority is considered from lowest to highest. public override int Priority { get; } Property Value int Methods RemoveMainCamera() Removes current MainCamera. protected void RemoveMainCamera()"
  },
  "api/VRBuilder.Editor.BasicInteraction.RigSetup.DefaultRigSceneSetup.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.RigSetup.DefaultRigSceneSetup.html",
    "title": "Class DefaultRigSceneSetup | VR Builder Documentation",
    "keywords": "Class DefaultRigSceneSetup Namespace VRBuilder.Editor.BasicInteraction.RigSetup Assembly VRBuilder.Editor.BasicInteraction.dll Setups the default rig for the active interaction component. public class DefaultRigSceneSetup : SceneSetup Inheritance object SceneSetup DefaultRigSceneSetup Inherited Members SceneSetup.SetupPrefab(string) SceneSetup.FindPrefab(string) SceneSetup.IsPrefabMissingInScene(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Key Identifier key for specific scene setup types, e.g. for every interaction framework. public override string Key { get; } Property Value string Priority Priority lets you tweak in which order different SceneSetups will be performed. The priority is considered from lowest to highest. public override int Priority { get; } Property Value int Methods Setup(ISceneSetupConfiguration) Setup the scene with necessary objects and/or logic. public override void Setup(ISceneSetupConfiguration configuration) Parameters configuration ISceneSetupConfiguration"
  },
  "api/VRBuilder.Editor.BasicInteraction.RigSetup.RigLoaderSceneSetup.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.RigSetup.RigLoaderSceneSetup.html",
    "title": "Class RigLoaderSceneSetup | VR Builder Documentation",
    "keywords": "Class RigLoaderSceneSetup Namespace VRBuilder.Editor.BasicInteraction.RigSetup Assembly VRBuilder.Editor.BasicInteraction.dll Setups the rig loader, cleans up the scene and creates a dummy user. public class RigLoaderSceneSetup : SceneSetup Inheritance object SceneSetup RigLoaderSceneSetup Inherited Members SceneSetup.SetupPrefab(string) SceneSetup.FindPrefab(string) SceneSetup.IsPrefabMissingInScene(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Key Identifier key for specific scene setup types, e.g. for every interaction framework. public override string Key { get; } Property Value string Priority Priority lets you tweak in which order different SceneSetups will be performed. The priority is considered from lowest to highest. public override int Priority { get; } Property Value int Methods Setup(ISceneSetupConfiguration) Setup the scene with necessary objects and/or logic. public override void Setup(ISceneSetupConfiguration configuration) Parameters configuration ISceneSetupConfiguration"
  },
  "api/VRBuilder.Editor.BasicInteraction.RigSetup.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.RigSetup.html",
    "title": "Namespace VRBuilder.Editor.BasicInteraction.RigSetup | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.BasicInteraction.RigSetup Classes DefaultRigSceneSetup Setups the default rig for the active interaction component. RigLoaderSceneSetup Setups the rig loader, cleans up the scene and creates a dummy user."
  },
  "api/VRBuilder.Editor.BasicInteraction.UI.Behaviors.UnsnapMenuItem.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.UI.Behaviors.UnsnapMenuItem.html",
    "title": "Class UnsnapMenuItem | VR Builder Documentation",
    "keywords": "Class UnsnapMenuItem Namespace VRBuilder.Editor.BasicInteraction.UI.Behaviors Assembly VRBuilder.Editor.BasicInteraction.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class UnsnapMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> UnsnapMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.BasicInteraction.UI.Behaviors.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.UI.Behaviors.html",
    "title": "Namespace VRBuilder.Editor.BasicInteraction.UI.Behaviors | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.BasicInteraction.UI.Behaviors Classes UnsnapMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem()."
  },
  "api/VRBuilder.Editor.BasicInteraction.UI.Conditions.GrabbedMenuItem.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.UI.Conditions.GrabbedMenuItem.html",
    "title": "Class GrabbedMenuItem | VR Builder Documentation",
    "keywords": "Class GrabbedMenuItem Namespace VRBuilder.Editor.BasicInteraction.UI.Conditions Assembly VRBuilder.Editor.BasicInteraction.dll public class GrabbedMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> GrabbedMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.BasicInteraction.UI.Conditions.ReleasedMenuItem.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.UI.Conditions.ReleasedMenuItem.html",
    "title": "Class ReleasedMenuItem | VR Builder Documentation",
    "keywords": "Class ReleasedMenuItem Namespace VRBuilder.Editor.BasicInteraction.UI.Conditions Assembly VRBuilder.Editor.BasicInteraction.dll public class ReleasedMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> ReleasedMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.BasicInteraction.UI.Conditions.SnappedMenuItem.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.UI.Conditions.SnappedMenuItem.html",
    "title": "Class SnappedMenuItem | VR Builder Documentation",
    "keywords": "Class SnappedMenuItem Namespace VRBuilder.Editor.BasicInteraction.UI.Conditions Assembly VRBuilder.Editor.BasicInteraction.dll public class SnappedMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> SnappedMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.BasicInteraction.UI.Conditions.TeleportMenuItem.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.UI.Conditions.TeleportMenuItem.html",
    "title": "Class TeleportMenuItem | VR Builder Documentation",
    "keywords": "Class TeleportMenuItem Namespace VRBuilder.Editor.BasicInteraction.UI.Conditions Assembly VRBuilder.Editor.BasicInteraction.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class TeleportMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> TeleportMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.BasicInteraction.UI.Conditions.TouchedMenuItem.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.UI.Conditions.TouchedMenuItem.html",
    "title": "Class TouchedMenuItem | VR Builder Documentation",
    "keywords": "Class TouchedMenuItem Namespace VRBuilder.Editor.BasicInteraction.UI.Conditions Assembly VRBuilder.Editor.BasicInteraction.dll public class TouchedMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> TouchedMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.BasicInteraction.UI.Conditions.UsedMenuItem.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.UI.Conditions.UsedMenuItem.html",
    "title": "Class UsedMenuItem | VR Builder Documentation",
    "keywords": "Class UsedMenuItem Namespace VRBuilder.Editor.BasicInteraction.UI.Conditions Assembly VRBuilder.Editor.BasicInteraction.dll public class UsedMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> UsedMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.BasicInteraction.UI.Conditions.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.UI.Conditions.html",
    "title": "Namespace VRBuilder.Editor.BasicInteraction.UI.Conditions | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.BasicInteraction.UI.Conditions Classes GrabbedMenuItem ReleasedMenuItem SnappedMenuItem TeleportMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). TouchedMenuItem UsedMenuItem"
  },
  "api/VRBuilder.Editor.BasicInteraction.html": {
    "href": "api/VRBuilder.Editor.BasicInteraction.html",
    "title": "Namespace VRBuilder.Editor.BasicInteraction | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.BasicInteraction Classes InteractionFrameworkSceneSetup This base class is supposed to be implemented by classes which will be called to setup the scene, specifically interaction frameworks."
  },
  "api/VRBuilder.Editor.Configuration.AllowedMenuItemsSettings.html": {
    "href": "api/VRBuilder.Editor.Configuration.AllowedMenuItemsSettings.html",
    "title": "Class AllowedMenuItemsSettings | VR Builder Documentation",
    "keywords": "Class AllowedMenuItemsSettings Namespace VRBuilder.Editor.Configuration Assembly VRBuilder.Editor.dll Configuration class for menu items. It manages whether a behavior or condition should be displayed in the Step Inspector or not. Can be serialized. [DataContract(IsReference = true)] public class AllowedMenuItemsSettings Inheritance object AllowedMenuItemsSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AllowedMenuItemsSettings() [JsonConstructor] public AllowedMenuItemsSettings() AllowedMenuItemsSettings(IDictionary<string, bool>, IDictionary<string, bool>) public AllowedMenuItemsSettings(IDictionary<string, bool> behaviors, IDictionary<string, bool> serializedConditions) Parameters behaviors IDictionary<string, bool> serializedConditions IDictionary<string, bool> Fields SerializedBehaviorSelections [DataMember] public IDictionary<string, bool> SerializedBehaviorSelections Field Value IDictionary<string, bool> SerializedConditionSelections [DataMember] public IDictionary<string, bool> SerializedConditionSelections Field Value IDictionary<string, bool> Methods GetBehaviorMenuOptions() Returns all active behavior menu items. public IEnumerable<MenuItem<IBehavior>> GetBehaviorMenuOptions() Returns IEnumerable<MenuItem<IBehavior>> GetConditionMenuOptions() Returns all active condition menu items. public IEnumerable<MenuItem<ICondition>> GetConditionMenuOptions() Returns IEnumerable<MenuItem<ICondition>> Load() Loads and returns the AllowedMenuItemsSettings object from the default configuration file location. If the AllowedMenuItemsSettingsAssetPath in the editor configuration is empty or null, it returns an empty AllowedMenuItemsSettings object. public static AllowedMenuItemsSettings Load() Returns AllowedMenuItemsSettings RefreshMenuOptions() public void RefreshMenuOptions() Save(AllowedMenuItemsSettings) Serializes the settings object and saves it into a configuration file at a default path. public static bool Save(AllowedMenuItemsSettings settings) Parameters settings AllowedMenuItemsSettings Returns bool Exceptions NullReferenceException Thrown when parameter is null."
  },
  "api/VRBuilder.Editor.Configuration.DefaultEditorConfiguration.html": {
    "href": "api/VRBuilder.Editor.Configuration.DefaultEditorConfiguration.html",
    "title": "Class DefaultEditorConfiguration | VR Builder Documentation",
    "keywords": "Class DefaultEditorConfiguration Namespace VRBuilder.Editor.Configuration Assembly VRBuilder.Editor.dll Default editor configuration definition which is used if no other was implemented. public class DefaultEditorConfiguration : IEditorConfiguration Inheritance object DefaultEditorConfiguration Implements IEditorConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultEditorConfiguration() protected DefaultEditorConfiguration() Properties AllowedMenuItemsSettings The current instance of the AllowedMenuItemsSettings object. It manages the display status of all available behaviors and conditions. public virtual AllowedMenuItemsSettings AllowedMenuItemsSettings { get; set; } Property Value AllowedMenuItemsSettings AllowedMenuItemsSettingsAssetPath Assets path where to save the serialized AllowedMenuItemsSettings file. It has to start with \"Assets/\". public virtual string AllowedMenuItemsSettingsAssetPath { get; } Property Value string BehaviorsMenuContent List of available options in \"Add new behavior\" dropdown. public virtual ReadOnlyCollection<MenuOption<IBehavior>> BehaviorsMenuContent { get; } Property Value ReadOnlyCollection<MenuOption<IBehavior>> ConditionsMenuContent List of available options in \"Add new condition\" dropdown. public virtual ReadOnlyCollection<MenuOption<ICondition>> ConditionsMenuContent { get; } Property Value ReadOnlyCollection<MenuOption<ICondition>> ProcessAssetStrategy Defines how the asset is going to be saved on disk. public IProcessAssetStrategy ProcessAssetStrategy { get; } Property Value IProcessAssetStrategy ProcessStreamingAssetsSubdirectory Absolute path where processes are stored. public virtual string ProcessStreamingAssetsSubdirectory { get; } Property Value string Serializer Serializer used to serialize processes and steps. public virtual IProcessSerializer Serializer { get; } Property Value IProcessSerializer"
  },
  "api/VRBuilder.Editor.Configuration.EditorConfigurator.html": {
    "href": "api/VRBuilder.Editor.Configuration.EditorConfigurator.html",
    "title": "Class EditorConfigurator | VR Builder Documentation",
    "keywords": "Class EditorConfigurator Namespace VRBuilder.Editor.Configuration Assembly VRBuilder.Editor.dll Configurator to set the process editor configuration which is used by the process creation editor tools (like Step Inspector). public static class EditorConfigurator Inheritance object EditorConfigurator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance public static DefaultEditorConfiguration Instance { get; } Property Value DefaultEditorConfiguration Methods Init() public static void Init()"
  },
  "api/VRBuilder.Editor.Configuration.IEditorConfiguration.html": {
    "href": "api/VRBuilder.Editor.Configuration.IEditorConfiguration.html",
    "title": "Interface IEditorConfiguration | VR Builder Documentation",
    "keywords": "Interface IEditorConfiguration Namespace VRBuilder.Editor.Configuration Assembly VRBuilder.Editor.dll Interface for editor configuration definition. Implement it to create your own. public interface IEditorConfiguration Properties AllowedMenuItemsSettings The current instance of the AllowedMenuItemsSettings object. It manages the display status of all available behaviors and conditions. AllowedMenuItemsSettings AllowedMenuItemsSettings { get; set; } Property Value AllowedMenuItemsSettings AllowedMenuItemsSettingsAssetPath Assets path where to save the serialized AllowedMenuItemsSettings file. It has to start with \"Assets/\". string AllowedMenuItemsSettingsAssetPath { get; } Property Value string BehaviorsMenuContent List of available options in \"Add new behavior\" dropdown. ReadOnlyCollection<MenuOption<IBehavior>> BehaviorsMenuContent { get; } Property Value ReadOnlyCollection<MenuOption<IBehavior>> ConditionsMenuContent List of available options in \"Add new condition\" dropdown. ReadOnlyCollection<MenuOption<ICondition>> ConditionsMenuContent { get; } Property Value ReadOnlyCollection<MenuOption<ICondition>> ProcessAssetStrategy Defines how the asset is going to be saved on disk. IProcessAssetStrategy ProcessAssetStrategy { get; } Property Value IProcessAssetStrategy ProcessStreamingAssetsSubdirectory Absolute path where processes are stored. string ProcessStreamingAssetsSubdirectory { get; } Property Value string Serializer Serializer used to serialize processes and steps. IProcessSerializer Serializer { get; } Property Value IProcessSerializer"
  },
  "api/VRBuilder.Editor.Configuration.IEditorConfigurationExtension.html": {
    "href": "api/VRBuilder.Editor.Configuration.IEditorConfigurationExtension.html",
    "title": "Interface IEditorConfigurationExtension | VR Builder Documentation",
    "keywords": "Interface IEditorConfigurationExtension Namespace VRBuilder.Editor.Configuration Assembly VRBuilder.Editor.dll Interface for editor configuration extension definition. public interface IEditorConfigurationExtension Properties DisabledMenuItems Menu items disabled by this configuration. IEnumerable<Type> DisabledMenuItems { get; } Property Value IEnumerable<Type> RequiredMenuItems Menu items required by this configuration. IEnumerable<Type> RequiredMenuItems { get; } Property Value IEnumerable<Type>"
  },
  "api/VRBuilder.Editor.Configuration.LoggingConfigCreationTrigger.html": {
    "href": "api/VRBuilder.Editor.Configuration.LoggingConfigCreationTrigger.html",
    "title": "Class LoggingConfigCreationTrigger | VR Builder Documentation",
    "keywords": "Class LoggingConfigCreationTrigger Namespace VRBuilder.Editor.Configuration Assembly VRBuilder.Editor.dll Checks on editor initialization if there is a logging config. Will add one if it's missing. [InitializeOnLoad] public class LoggingConfigCreationTrigger Inheritance object LoggingConfigCreationTrigger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.Configuration.RuntimeConfiguratorEditor.html": {
    "href": "api/VRBuilder.Editor.Configuration.RuntimeConfiguratorEditor.html",
    "title": "Class RuntimeConfiguratorEditor | VR Builder Documentation",
    "keywords": "Class RuntimeConfiguratorEditor Namespace VRBuilder.Editor.Configuration Assembly VRBuilder.Editor.dll Custom editor for choosing the process configuration in the Unity game object inspector. [CustomEditor(typeof(RuntimeConfigurator))] public class RuntimeConfiguratorEditor : Editor Inheritance object Object ScriptableObject Editor RuntimeConfiguratorEditor Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods IsProcessListEmpty() True when the process list is empty or missing. public static bool IsProcessListEmpty() Returns bool OnEnable() protected void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/VRBuilder.Editor.Configuration.html": {
    "href": "api/VRBuilder.Editor.Configuration.html",
    "title": "Namespace VRBuilder.Editor.Configuration | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.Configuration Classes AllowedMenuItemsSettings Configuration class for menu items. It manages whether a behavior or condition should be displayed in the Step Inspector or not. Can be serialized. DefaultEditorConfiguration Default editor configuration definition which is used if no other was implemented. EditorConfigurator Configurator to set the process editor configuration which is used by the process creation editor tools (like Step Inspector). LoggingConfigCreationTrigger Checks on editor initialization if there is a logging config. Will add one if it's missing. RuntimeConfiguratorEditor Custom editor for choosing the process configuration in the Unity game object inspector. Interfaces IEditorConfiguration Interface for editor configuration definition. Implement it to create your own. IEditorConfigurationExtension Interface for editor configuration extension definition."
  },
  "api/VRBuilder.Editor.Core.UI.BezierSplineInspector.html": {
    "href": "api/VRBuilder.Editor.Core.UI.BezierSplineInspector.html",
    "title": "Class BezierSplineInspector | VR Builder Documentation",
    "keywords": "Class BezierSplineInspector Namespace VRBuilder.Editor.Core.UI Assembly VRBuilder.Editor.dll Editor for BezierSpline. [CustomEditor(typeof(BezierSpline))] public class BezierSplineInspector : Editor Inheritance object Object ScriptableObject Editor BezierSplineInspector Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/VRBuilder.Editor.Core.UI.Drawers.CompareValueToConstDrawer-1.html": {
    "href": "api/VRBuilder.Editor.Core.UI.Drawers.CompareValueToConstDrawer-1.html",
    "title": "Class CompareValueToConstDrawer<T> | VR Builder Documentation",
    "keywords": "Class CompareValueToConstDrawer<T> Namespace VRBuilder.Editor.Core.UI.Drawers Assembly VRBuilder.Editor.dll Custom drawer for CompareValuesCondition<T>. This drawer omits the reference/const selectors in order to improve performance and optimize layout. public abstract class CompareValueToConstDrawer<T> : NameableDrawer, IProcessDrawer where T : IEquatable<T>, IComparable<T> Type Parameters T Inheritance object AbstractDrawer ObjectDrawer NameableDrawer CompareValueToConstDrawer<T> Implements IProcessDrawer Inherited Members NameableDrawer.DrawLabel(Rect, object, Action<object>, GUIContent) ObjectDrawer.CheckValidationForValue(object, MemberInfo, GUIContent) ObjectDrawer.AddValidationInformation(GUIContent, List<EditorReportEntry>) ObjectDrawer.GetValidationReports(object) ObjectDrawer.GetValidationReportsFor(IData, MemberInfo) ObjectDrawer.GetLabel(MemberInfo, object) ObjectDrawer.GetLabel(object, Type) ObjectDrawer.GetMembersToDraw(object) ObjectDrawer.GetTypeNameLabel(object, Type) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks If you only ever need to compare data properties to constant values, you can replace the default drawer with this one for increased editor performance. To do so, modify the implementations of CompareValuesDrawer<T> so that they inherit from this class instead. Methods Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property. DrawOperatorDropdown(Action<object>, Rect, EntityData) Draws the dropdown for selecting the operator depending on the operands' type. protected abstract Rect DrawOperatorDropdown(Action<object> changeValueCallback, Rect nextPosition, CompareValuesCondition<T>.EntityData data) Parameters changeValueCallback Action<object> nextPosition Rect data CompareValuesCondition<T>.EntityData Returns Rect"
  },
  "api/VRBuilder.Editor.Core.UI.Drawers.CompareValuesDrawer-1.html": {
    "href": "api/VRBuilder.Editor.Core.UI.Drawers.CompareValuesDrawer-1.html",
    "title": "Class CompareValuesDrawer<T> | VR Builder Documentation",
    "keywords": "Class CompareValuesDrawer<T> Namespace VRBuilder.Editor.Core.UI.Drawers Assembly VRBuilder.Editor.dll Custom drawer for CompareValuesCondition<T>. public abstract class CompareValuesDrawer<T> : NameableDrawer, IProcessDrawer where T : IEquatable<T>, IComparable<T> Type Parameters T Inheritance object AbstractDrawer ObjectDrawer NameableDrawer CompareValuesDrawer<T> Implements IProcessDrawer Inherited Members NameableDrawer.DrawLabel(Rect, object, Action<object>, GUIContent) ObjectDrawer.CheckValidationForValue(object, MemberInfo, GUIContent) ObjectDrawer.AddValidationInformation(GUIContent, List<EditorReportEntry>) ObjectDrawer.GetValidationReports(object) ObjectDrawer.GetValidationReportsFor(IData, MemberInfo) ObjectDrawer.GetLabel(MemberInfo, object) ObjectDrawer.GetLabel(object, Type) ObjectDrawer.GetMembersToDraw(object) ObjectDrawer.GetTypeNameLabel(object, Type) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property. DrawOperatorDropdown(Action<object>, Rect, EntityData) Draws the dropdown for selecting the operator depending on the operands' type protected abstract Rect DrawOperatorDropdown(Action<object> changeValueCallback, Rect nextPosition, CompareValuesCondition<T>.EntityData data) Parameters changeValueCallback Action<object> nextPosition Rect data CompareValuesCondition<T>.EntityData Returns Rect"
  },
  "api/VRBuilder.Editor.Core.UI.Drawers.LocalizationTableDrawer.html": {
    "href": "api/VRBuilder.Editor.Core.UI.Drawers.LocalizationTableDrawer.html",
    "title": "Class LocalizationTableDrawer | VR Builder Documentation",
    "keywords": "Class LocalizationTableDrawer Namespace VRBuilder.Editor.Core.UI.Drawers Assembly VRBuilder.Editor.TextToSpeech.dll Draws a drop-down for localization tables. public class LocalizationTableDrawer : ObjectDrawer, IProcessDrawer Inheritance object AbstractDrawer ObjectDrawer LocalizationTableDrawer Implements IProcessDrawer Inherited Members ObjectDrawer.CheckValidationForValue(object, MemberInfo, GUIContent) ObjectDrawer.AddValidationInformation(GUIContent, List<EditorReportEntry>) ObjectDrawer.GetValidationReports(object) ObjectDrawer.GetValidationReportsFor(IData, MemberInfo) ObjectDrawer.DrawLabel(Rect, object, Action<object>, GUIContent) ObjectDrawer.GetLabel(MemberInfo, object) ObjectDrawer.GetLabel(object, Type) ObjectDrawer.GetMembersToDraw(object) ObjectDrawer.GetTypeNameLabel(object, Type) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property."
  },
  "api/VRBuilder.Editor.Core.UI.Drawers.PlayAudioBehaviorDrawer.html": {
    "href": "api/VRBuilder.Editor.Core.UI.Drawers.PlayAudioBehaviorDrawer.html",
    "title": "Class PlayAudioBehaviorDrawer | VR Builder Documentation",
    "keywords": "Class PlayAudioBehaviorDrawer Namespace VRBuilder.Editor.Core.UI.Drawers Assembly VRBuilder.Editor.dll Default drawer for PlayAudioBehavior. It sets displayed name to \"Play Audio File\". [DefaultProcessDrawer(typeof(PlayAudioBehavior.EntityData))] public class PlayAudioBehaviorDrawer : NameableDrawer, IProcessDrawer Inheritance object AbstractDrawer ObjectDrawer NameableDrawer PlayAudioBehaviorDrawer Implements IProcessDrawer Inherited Members NameableDrawer.DrawLabel(Rect, object, Action<object>, GUIContent) ObjectDrawer.CheckValidationForValue(object, MemberInfo, GUIContent) ObjectDrawer.AddValidationInformation(GUIContent, List<EditorReportEntry>) ObjectDrawer.GetValidationReports(object) ObjectDrawer.GetValidationReportsFor(IData, MemberInfo) ObjectDrawer.GetLabel(MemberInfo, object) ObjectDrawer.GetLabel(object, Type) ObjectDrawer.GetMembersToDraw(object) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property. GetTypeNameLabel(object, Type) protected override GUIContent GetTypeNameLabel(object value, Type declaredType) Parameters value object declaredType Type Returns GUIContent"
  },
  "api/VRBuilder.Editor.Core.UI.Drawers.SetComponentEnabledBehaviorDrawer.html": {
    "href": "api/VRBuilder.Editor.Core.UI.Drawers.SetComponentEnabledBehaviorDrawer.html",
    "title": "Class SetComponentEnabledBehaviorDrawer | VR Builder Documentation",
    "keywords": "Class SetComponentEnabledBehaviorDrawer Namespace VRBuilder.Editor.Core.UI.Drawers Assembly VRBuilder.Editor.dll [DefaultProcessDrawer(typeof(SetComponentEnabledBehavior.EntityData))] public class SetComponentEnabledBehaviorDrawer : NameableDrawer, IProcessDrawer Inheritance object AbstractDrawer ObjectDrawer NameableDrawer SetComponentEnabledBehaviorDrawer Implements IProcessDrawer Inherited Members NameableDrawer.DrawLabel(Rect, object, Action<object>, GUIContent) ObjectDrawer.CheckValidationForValue(object, MemberInfo, GUIContent) ObjectDrawer.AddValidationInformation(GUIContent, List<EditorReportEntry>) ObjectDrawer.GetValidationReports(object) ObjectDrawer.GetValidationReportsFor(IData, MemberInfo) ObjectDrawer.GetLabel(MemberInfo, object) ObjectDrawer.GetLabel(object, Type) ObjectDrawer.GetMembersToDraw(object) ObjectDrawer.GetTypeNameLabel(object, Type) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property."
  },
  "api/VRBuilder.Editor.Core.UI.Drawers.SetComponentEnabledByTagBehaviorDrawer.html": {
    "href": "api/VRBuilder.Editor.Core.UI.Drawers.SetComponentEnabledByTagBehaviorDrawer.html",
    "title": "Class SetComponentEnabledByTagBehaviorDrawer | VR Builder Documentation",
    "keywords": "Class SetComponentEnabledByTagBehaviorDrawer Namespace VRBuilder.Editor.Core.UI.Drawers Assembly VRBuilder.Editor.dll [Obsolete(\"This drawer is obsolete and will be removed in the next major version.\")] [DefaultProcessDrawer(typeof(SetComponentEnabledByTagBehavior.EntityData))] public class SetComponentEnabledByTagBehaviorDrawer : NameableDrawer, IProcessDrawer Inheritance object AbstractDrawer ObjectDrawer NameableDrawer SetComponentEnabledByTagBehaviorDrawer Implements IProcessDrawer Inherited Members NameableDrawer.DrawLabel(Rect, object, Action<object>, GUIContent) ObjectDrawer.CheckValidationForValue(object, MemberInfo, GUIContent) ObjectDrawer.AddValidationInformation(GUIContent, List<EditorReportEntry>) ObjectDrawer.GetValidationReports(object) ObjectDrawer.GetValidationReportsFor(IData, MemberInfo) ObjectDrawer.GetLabel(MemberInfo, object) ObjectDrawer.GetLabel(object, Type) ObjectDrawer.GetMembersToDraw(object) ObjectDrawer.GetTypeNameLabel(object, Type) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property."
  },
  "api/VRBuilder.Editor.Core.UI.Drawers.html": {
    "href": "api/VRBuilder.Editor.Core.UI.Drawers.html",
    "title": "Namespace VRBuilder.Editor.Core.UI.Drawers | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.Core.UI.Drawers Classes CompareValueToConstDrawer<T> Custom drawer for CompareValuesCondition<T>. This drawer omits the reference/const selectors in order to improve performance and optimize layout. CompareValuesDrawer<T> Custom drawer for CompareValuesCondition<T>. LocalizationTableDrawer Draws a drop-down for localization tables. PlayAudioBehaviorDrawer Default drawer for PlayAudioBehavior. It sets displayed name to \"Play Audio File\". SetComponentEnabledBehaviorDrawer SetComponentEnabledByTagBehaviorDrawer"
  },
  "api/VRBuilder.Editor.Core.UI.html": {
    "href": "api/VRBuilder.Editor.Core.UI.html",
    "title": "Namespace VRBuilder.Editor.Core.UI | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.Core.UI Classes BezierSplineInspector Editor for BezierSpline."
  },
  "api/VRBuilder.Editor.Debugging.SceneObjectRegistryV2EditorWindow.html": {
    "href": "api/VRBuilder.Editor.Debugging.SceneObjectRegistryV2EditorWindow.html",
    "title": "Class SceneObjectRegistryV2EditorWindow | VR Builder Documentation",
    "keywords": "Class SceneObjectRegistryV2EditorWindow Namespace VRBuilder.Editor.Debugging Assembly VRBuilder.Editor.dll public class SceneObjectRegistryV2EditorWindow : EditorWindow Inheritance object Object ScriptableObject EditorWindow SceneObjectRegistryV2EditorWindow Inherited Members EditorWindow.BeginWindows() EditorWindow.EndWindows() EditorWindow.ShowNotification(GUIContent) EditorWindow.ShowNotification(GUIContent, double) EditorWindow.RemoveNotification() EditorWindow.ShowTab() EditorWindow.Focus() EditorWindow.ShowUtility() EditorWindow.ShowPopup() EditorWindow.ShowModalUtility() EditorWindow.ShowAsDropDown(Rect, Vector2) EditorWindow.Show() EditorWindow.Show(bool) EditorWindow.ShowAuxWindow() EditorWindow.ShowModal() EditorWindow.GetWindow(Type, bool, string, bool) EditorWindow.GetWindow(Type, bool, string) EditorWindow.GetWindow(Type, bool) EditorWindow.GetWindow(Type) EditorWindow.GetWindowWithRect(Type, Rect, bool, string) EditorWindow.GetWindowWithRect(Type, Rect, bool) EditorWindow.GetWindowWithRect(Type, Rect) EditorWindow.GetWindow<T>() EditorWindow.GetWindow<T>(bool) EditorWindow.GetWindow<T>(bool, string) EditorWindow.GetWindow<T>(string) EditorWindow.GetWindow<T>(string, bool) EditorWindow.GetWindow<T>(bool, string, bool) EditorWindow.GetWindow<T>(params Type[]) EditorWindow.GetWindow<T>(string, params Type[]) EditorWindow.GetWindow<T>(string, bool, params Type[]) EditorWindow.CreateWindow<T>(params Type[]) EditorWindow.CreateWindow<T>(string, params Type[]) EditorWindow.HasOpenInstances<T>() EditorWindow.FocusWindowIfItsOpen(Type) EditorWindow.FocusWindowIfItsOpen<T>() EditorWindow.GetWindowWithRect<T>(Rect) EditorWindow.GetWindowWithRect<T>(Rect, bool) EditorWindow.GetWindowWithRect<T>(Rect, bool, string) EditorWindow.GetWindowWithRect<T>(Rect, bool, string, bool) EditorWindow.SaveChanges() EditorWindow.DiscardChanges() EditorWindow.Close() EditorWindow.Repaint() EditorWindow.SendEvent(Event) EditorWindow.GetExtraPaneTypes() EditorWindow.TryGetOverlay(string, out Overlay) EditorWindow.OnBackingScaleFactorChanged() EditorWindow.rootVisualElement EditorWindow.wantsMouseMove EditorWindow.wantsMouseEnterLeaveWindow EditorWindow.wantsLessLayoutEvents EditorWindow.autoRepaintOnSceneChange EditorWindow.maximized EditorWindow.hasFocus EditorWindow.docked EditorWindow.focusedWindow EditorWindow.mouseOverWindow EditorWindow.hasUnsavedChanges EditorWindow.saveChangesMessage EditorWindow.minSize EditorWindow.maxSize EditorWindow.title EditorWindow.titleContent EditorWindow.depthBufferBits EditorWindow.antiAlias EditorWindow.position ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.Editor.Debugging.html": {
    "href": "api/VRBuilder.Editor.Debugging.html",
    "title": "Namespace VRBuilder.Editor.Debugging | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.Debugging Classes SceneObjectRegistryV2EditorWindow"
  },
  "api/VRBuilder.Editor.EditorReflectionUtils.html": {
    "href": "api/VRBuilder.Editor.EditorReflectionUtils.html",
    "title": "Class EditorReflectionUtils | VR Builder Documentation",
    "keywords": "Class EditorReflectionUtils Namespace VRBuilder.Editor Assembly VRBuilder.Editor.dll Helper class for reflection. public static class EditorReflectionUtils Inheritance object EditorReflectionUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AssemblyExists(string) Checks if assembly exists in current domain space. public static bool AssemblyExists(string name) Parameters name string Returns bool ClassExists(string, string) Checks if class exists in given assembly. public static bool ClassExists(string assemblyName, string className) Parameters assemblyName string className string Returns bool GetAllDataMembers(object) Returns all data members of a given object. public static IEnumerable<MemberInfo> GetAllDataMembers(object value) Parameters value object Returns IEnumerable<MemberInfo> GetAllFieldsAndProperties(object) Returns all fields and properties of given object as MemberInfo. public static IEnumerable<MemberInfo> GetAllFieldsAndProperties(object value) Parameters value object Returns IEnumerable<MemberInfo> GetAttributes(MemberInfo, bool) public static IEnumerable<Attribute> GetAttributes(this MemberInfo memberInfo, bool isInherited) Parameters memberInfo MemberInfo isInherited bool Returns IEnumerable<Attribute> GetAttributes(Type, bool) public static IEnumerable<Attribute> GetAttributes(this Type type, bool isInherited) Parameters type Type isInherited bool Returns IEnumerable<Attribute> GetAttributes<T>(MemberInfo, bool) public static IEnumerable<T> GetAttributes<T>(this MemberInfo memberInfo, bool isInherited) where T : Attribute Parameters memberInfo MemberInfo isInherited bool Returns IEnumerable<T> Type Parameters T GetAttributes<T>(Type, bool) public static IEnumerable<T> GetAttributes<T>(Type type, bool isInherited) where T : Attribute Parameters type Type isInherited bool Returns IEnumerable<T> Type Parameters T GetDisplayName(MemberInfo) public static string GetDisplayName(this MemberInfo memberInfo) Parameters memberInfo MemberInfo Returns string GetFieldsAndPropertiesToDraw(object) Returns all properties and fields of the object that have to be drawn by process drawers. public static IEnumerable<MemberInfo> GetFieldsAndPropertiesToDraw(object value) Parameters value object Returns IEnumerable<MemberInfo> GetNestedPropertiesFromData<TProperty>(IData) Returns all properties of a given type in the IData and its children. public static IEnumerable<TProperty> GetNestedPropertiesFromData<TProperty>(IData data) Parameters data IData Returns IEnumerable<TProperty> Type Parameters TProperty"
  },
  "api/VRBuilder.Editor.EditorUtils.html": {
    "href": "api/VRBuilder.Editor.EditorUtils.html",
    "title": "Class EditorUtils | VR Builder Documentation",
    "keywords": "Class EditorUtils Namespace VRBuilder.Editor Assembly VRBuilder.Editor.dll Utility helper to ease up working with Unity Editor. [InitializeOnLoad] public static class EditorUtils Inheritance object EditorUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsUpmPackage True if VR Builder is a Package Manager package. public static bool IsUpmPackage { get; } Property Value bool Methods GetCoreFolder() Gets the root folder of VR Builder. public static string GetCoreFolder() Returns string"
  },
  "api/VRBuilder.Editor.Input.InputEditorUtils.html": {
    "href": "api/VRBuilder.Editor.Input.InputEditorUtils.html",
    "title": "Class InputEditorUtils | VR Builder Documentation",
    "keywords": "Class InputEditorUtils Namespace VRBuilder.Editor.Input Assembly VRBuilder.Editor.dll Static utility class which provides methods to help managing assets and functionalities of the new input system. public static class InputEditorUtils Inheritance object InputEditorUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CopyCustomKeyBindingAsset() Copies the custom key bindings into the project by using the default one. public static void CopyCustomKeyBindingAsset() OpenKeyBindingEditor() Opens the key binding editor. public static void OpenKeyBindingEditor() UsesCustomKeyBindingAsset() Checks if the custom key bindings are loaded. public static bool UsesCustomKeyBindingAsset() Returns bool"
  },
  "api/VRBuilder.Editor.Input.html": {
    "href": "api/VRBuilder.Editor.Input.html",
    "title": "Namespace VRBuilder.Editor.Input | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.Input Classes InputEditorUtils Static utility class which provides methods to help managing assets and functionalities of the new input system."
  },
  "api/VRBuilder.Editor.MetadataWrapper.html": {
    "href": "api/VRBuilder.Editor.MetadataWrapper.html",
    "title": "Class MetadataWrapper | VR Builder Documentation",
    "keywords": "Class MetadataWrapper Namespace VRBuilder.Editor Assembly VRBuilder.Editor.dll Data structure used to draw properties in the 'Step Inspector'. public class MetadataWrapper Inheritance object MetadataWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Metadata Collection of data from a 'System.Reflection.MemberInfo'. public Dictionary<string, object> Metadata { get; set; } Property Value Dictionary<string, object> Value Value of an object reference. public object Value { get; set; } Property Value object ValueDeclaredType Type of an object reference. public Type ValueDeclaredType { get; set; } Property Value Type"
  },
  "api/VRBuilder.Editor.PackageManager.Dependency.html": {
    "href": "api/VRBuilder.Editor.PackageManager.Dependency.html",
    "title": "Class Dependency | VR Builder Documentation",
    "keywords": "Class Dependency Namespace VRBuilder.Editor.PackageManager Assembly VRBuilder.Editor.PackageManager.dll Base class for dependencies used by the DependencyManager. public abstract class Dependency Inheritance object Dependency Derived InputSystemPackageEnabler LocalizationPackageEnabler NewtonsoftJSONPackageEnabler PostProcessingPackageEnabler XRHandsPackageEnabler XRInteractionPackageEnabler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Dependency() protected Dependency() Properties Layers A list of layers to be added. protected virtual string[] Layers { get; } Property Value string[] Package A string representing the package to be added. public virtual string Package { get; } Property Value string Priority Priority lets you tweak in which order each Dependency will be performed. The priority is considered from lowest to highest. public virtual int Priority { get; } Property Value int Samples Collection of samples to be imported from the Unity Package. public virtual string[] Samples { get; } Property Value string[] Version A string representing the version of the package. public virtual string Version { get; set; } Property Value string Methods EmitOnDisabled() protected virtual void EmitOnDisabled() EmitOnEnabled() protected virtual void EmitOnEnabled() Events OnPackageDisabled Emitted when this Dependency is set as disabled. public event EventHandler<EventArgs> OnPackageDisabled Event Type EventHandler<EventArgs> OnPackageEnabled Emitted when this Dependency is set as enabled. public event EventHandler<EventArgs> OnPackageEnabled Event Type EventHandler<EventArgs>"
  },
  "api/VRBuilder.Editor.PackageManager.DependencyManager.DependenciesEnabledEventArgs.html": {
    "href": "api/VRBuilder.Editor.PackageManager.DependencyManager.DependenciesEnabledEventArgs.html",
    "title": "Class DependencyManager.DependenciesEnabledEventArgs | VR Builder Documentation",
    "keywords": "Class DependencyManager.DependenciesEnabledEventArgs Namespace VRBuilder.Editor.PackageManager Assembly VRBuilder.Editor.PackageManager.dll public class DependencyManager.DependenciesEnabledEventArgs : EventArgs Inheritance object EventArgs DependencyManager.DependenciesEnabledEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DependenciesEnabledEventArgs(List<Dependency>) public DependenciesEnabledEventArgs(List<Dependency> dependenciesList) Parameters dependenciesList List<Dependency> Fields DependenciesList public readonly List<Dependency> DependenciesList Field Value List<Dependency>"
  },
  "api/VRBuilder.Editor.PackageManager.DependencyManager.html": {
    "href": "api/VRBuilder.Editor.PackageManager.DependencyManager.html",
    "title": "Class DependencyManager | VR Builder Documentation",
    "keywords": "Class DependencyManager Namespace VRBuilder.Editor.PackageManager Assembly VRBuilder.Editor.PackageManager.dll Automatically retrieves all dependencies from the Unity's Package Manager at the startup. [InitializeOnLoad] public class DependencyManager Inheritance object DependencyManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events OnPostProcess Emitted when all found Dependency were installed. public static event EventHandler<DependencyManager.DependenciesEnabledEventArgs> OnPostProcess Event Type EventHandler<DependencyManager.DependenciesEnabledEventArgs>"
  },
  "api/VRBuilder.Editor.PackageManager.InputSystemPackageEnabler.html": {
    "href": "api/VRBuilder.Editor.PackageManager.InputSystemPackageEnabler.html",
    "title": "Class InputSystemPackageEnabler | VR Builder Documentation",
    "keywords": "Class InputSystemPackageEnabler Namespace VRBuilder.Editor.PackageManager Assembly VRBuilder.Editor.PackageManager.dll Adds Unity's Input System package as a dependency. public class InputSystemPackageEnabler : Dependency Inheritance object Dependency InputSystemPackageEnabler Inherited Members Dependency.Version Dependency.Samples Dependency.Layers Dependency.OnPackageEnabled Dependency.OnPackageDisabled Dependency.EmitOnEnabled() Dependency.EmitOnDisabled() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Package A string representing the package to be added. public override string Package { get; } Property Value string Priority Priority lets you tweak in which order each Dependency will be performed. The priority is considered from lowest to highest. public override int Priority { get; } Property Value int"
  },
  "api/VRBuilder.Editor.PackageManager.LocalizationPackageEnabler.html": {
    "href": "api/VRBuilder.Editor.PackageManager.LocalizationPackageEnabler.html",
    "title": "Class LocalizationPackageEnabler | VR Builder Documentation",
    "keywords": "Class LocalizationPackageEnabler Namespace VRBuilder.Editor.PackageManager Assembly VRBuilder.Editor.PackageManager.dll Adds Unity's Localizaion System package as a dependency. public class LocalizationPackageEnabler : Dependency Inheritance object Dependency LocalizationPackageEnabler Inherited Members Dependency.Version Dependency.Samples Dependency.Layers Dependency.OnPackageEnabled Dependency.OnPackageDisabled Dependency.EmitOnEnabled() Dependency.EmitOnDisabled() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Package A string representing the package to be added. public override string Package { get; } Property Value string Priority Priority lets you tweak in which order each Dependency will be performed. The priority is considered from lowest to highest. public override int Priority { get; } Property Value int"
  },
  "api/VRBuilder.Editor.PackageManager.NewtonsoftJSONPackageEnabler.html": {
    "href": "api/VRBuilder.Editor.PackageManager.NewtonsoftJSONPackageEnabler.html",
    "title": "Class NewtonsoftJSONPackageEnabler | VR Builder Documentation",
    "keywords": "Class NewtonsoftJSONPackageEnabler Namespace VRBuilder.Editor.PackageManager Assembly VRBuilder.Editor.PackageManager.dll public class NewtonsoftJSONPackageEnabler : Dependency Inheritance object Dependency NewtonsoftJSONPackageEnabler Inherited Members Dependency.Version Dependency.Samples Dependency.Layers Dependency.OnPackageEnabled Dependency.OnPackageDisabled Dependency.EmitOnEnabled() Dependency.EmitOnDisabled() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Package A string representing the package to be added. public override string Package { get; } Property Value string Priority Priority lets you tweak in which order each Dependency will be performed. The priority is considered from lowest to highest. public override int Priority { get; } Property Value int"
  },
  "api/VRBuilder.Editor.PackageManager.PackageOperationsManager.InitializedEventArgs.html": {
    "href": "api/VRBuilder.Editor.PackageManager.PackageOperationsManager.InitializedEventArgs.html",
    "title": "Class PackageOperationsManager.InitializedEventArgs | VR Builder Documentation",
    "keywords": "Class PackageOperationsManager.InitializedEventArgs Namespace VRBuilder.Editor.PackageManager Assembly VRBuilder.Editor.PackageManager.dll public class PackageOperationsManager.InitializedEventArgs : EventArgs Inheritance object EventArgs PackageOperationsManager.InitializedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.PackageManager.PackageOperationsManager.PackageDisabledEventArgs.html": {
    "href": "api/VRBuilder.Editor.PackageManager.PackageOperationsManager.PackageDisabledEventArgs.html",
    "title": "Class PackageOperationsManager.PackageDisabledEventArgs | VR Builder Documentation",
    "keywords": "Class PackageOperationsManager.PackageDisabledEventArgs Namespace VRBuilder.Editor.PackageManager Assembly VRBuilder.Editor.PackageManager.dll public class PackageOperationsManager.PackageDisabledEventArgs : EventArgs Inheritance object EventArgs PackageOperationsManager.PackageDisabledEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PackageDisabledEventArgs(string) public PackageDisabledEventArgs(string package) Parameters package string Fields Package public readonly string Package Field Value string"
  },
  "api/VRBuilder.Editor.PackageManager.PackageOperationsManager.PackageEnabledEventArgs.html": {
    "href": "api/VRBuilder.Editor.PackageManager.PackageOperationsManager.PackageEnabledEventArgs.html",
    "title": "Class PackageOperationsManager.PackageEnabledEventArgs | VR Builder Documentation",
    "keywords": "Class PackageOperationsManager.PackageEnabledEventArgs Namespace VRBuilder.Editor.PackageManager Assembly VRBuilder.Editor.PackageManager.dll public class PackageOperationsManager.PackageEnabledEventArgs : EventArgs Inheritance object EventArgs PackageOperationsManager.PackageEnabledEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PackageEnabledEventArgs(PackageInfo) public PackageEnabledEventArgs(PackageInfo packageInfo) Parameters packageInfo PackageInfo Fields PackageInfo public readonly PackageInfo PackageInfo Field Value PackageInfo"
  },
  "api/VRBuilder.Editor.PackageManager.PackageOperationsManager.html": {
    "href": "api/VRBuilder.Editor.PackageManager.PackageOperationsManager.html",
    "title": "Class PackageOperationsManager | VR Builder Documentation",
    "keywords": "Class PackageOperationsManager Namespace VRBuilder.Editor.PackageManager Assembly VRBuilder.Editor.PackageManager.dll Handles different Unity's Package Manager requests. [InitializeOnLoad] public class PackageOperationsManager Inheritance object PackageOperationsManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsInitialized Set to true when the package list has been fetched. public static bool IsInitialized { get; } Property Value bool Packages List of currently loaded packages in the Package Manager. public static PackageCollection Packages { get; } Property Value PackageCollection Methods GetInstalledPackageVersion(string) Returns the version corresponding to the provided package if this is installed, otherwise it returns null. public static string GetInstalledPackageVersion(string package) Parameters package string Returns string IsPackageLoaded(string, string) Returns true if the PackageOperationsManager has already collected a list of currently available packages and given package is already on that list with given version. public static bool IsPackageLoaded(string package, string version = null) Parameters package string version string Returns bool Remarks If package already contains an embedded version, version will be ignored. LoadPackage(string, string) Adds a package to the Package Manager. public static void LoadPackage(string package, string version = null) Parameters package string A string representing the package to be added. version string If provided, the package will be loaded with this specific version. RemovePackage(string) Removes a package from the Package Manager. public static void RemovePackage(string package) Parameters package string A string representing the package to be removed. Events OnInitialized Emitted when the package list has been fetched. public static event EventHandler<PackageOperationsManager.InitializedEventArgs> OnInitialized Event Type EventHandler<PackageOperationsManager.InitializedEventArgs> OnPackageDisabled Emitted when a package was successfully removed. public static event EventHandler<PackageOperationsManager.PackageDisabledEventArgs> OnPackageDisabled Event Type EventHandler<PackageOperationsManager.PackageDisabledEventArgs> OnPackageEnabled Emitted when a package was successfully installed. public static event EventHandler<PackageOperationsManager.PackageEnabledEventArgs> OnPackageEnabled Event Type EventHandler<PackageOperationsManager.PackageEnabledEventArgs>"
  },
  "api/VRBuilder.Editor.PackageManager.PostProcessingPackageEnabler.html": {
    "href": "api/VRBuilder.Editor.PackageManager.PostProcessingPackageEnabler.html",
    "title": "Class PostProcessingPackageEnabler | VR Builder Documentation",
    "keywords": "Class PostProcessingPackageEnabler Namespace VRBuilder.Editor.PackageManager Assembly VRBuilder.Editor.PackageManager.dll Adds Unity's Post-Processing package as a dependency. public class PostProcessingPackageEnabler : Dependency Inheritance object Dependency PostProcessingPackageEnabler Inherited Members Dependency.Version Dependency.Samples Dependency.OnPackageEnabled Dependency.OnPackageDisabled Dependency.EmitOnEnabled() Dependency.EmitOnDisabled() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Layers A list of layers to be added. protected override string[] Layers { get; } Property Value string[] Package A string representing the package to be added. public override string Package { get; } Property Value string Priority Priority lets you tweak in which order each Dependency will be performed. The priority is considered from lowest to highest. public override int Priority { get; } Property Value int"
  },
  "api/VRBuilder.Editor.PackageManager.XRInteraction.XRHandsPackageEnabler.html": {
    "href": "api/VRBuilder.Editor.PackageManager.XRInteraction.XRHandsPackageEnabler.html",
    "title": "Class XRHandsPackageEnabler | VR Builder Documentation",
    "keywords": "Class XRHandsPackageEnabler Namespace VRBuilder.Editor.PackageManager.XRInteraction Assembly VRBuilder.Editor.PackageManager.XRInteraction.dll Adds Unity's XR Hands package as a dependency and sets specified symbol for script compilation. public class XRHandsPackageEnabler : Dependency Inheritance object Dependency XRHandsPackageEnabler Inherited Members Dependency.Priority Dependency.Layers Dependency.OnPackageEnabled Dependency.OnPackageDisabled Dependency.EmitOnEnabled() Dependency.EmitOnDisabled() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Package A string representing the package to be added. public override string Package { get; } Property Value string Samples Collection of samples to be imported from the Unity Package. public override string[] Samples { get; } Property Value string[] Version A string representing the version of the package. public override string Version { get; set; } Property Value string"
  },
  "api/VRBuilder.Editor.PackageManager.XRInteraction.XRInteractionPackageEnabler.html": {
    "href": "api/VRBuilder.Editor.PackageManager.XRInteraction.XRInteractionPackageEnabler.html",
    "title": "Class XRInteractionPackageEnabler | VR Builder Documentation",
    "keywords": "Class XRInteractionPackageEnabler Namespace VRBuilder.Editor.PackageManager.XRInteraction Assembly VRBuilder.Editor.PackageManager.XRInteraction.dll Adds Unity's XR-Interaction-Toolkit package as a dependency and sets specified symbol for script compilation. public class XRInteractionPackageEnabler : Dependency Inheritance object Dependency XRInteractionPackageEnabler Inherited Members Dependency.OnPackageEnabled Dependency.OnPackageDisabled Dependency.EmitOnEnabled() Dependency.EmitOnDisabled() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Layers A list of layers to be added. protected override string[] Layers { get; } Property Value string[] Package A string representing the package to be added. public override string Package { get; } Property Value string Priority Priority lets you tweak in which order each Dependency will be performed. The priority is considered from lowest to highest. public override int Priority { get; } Property Value int Samples Collection of samples to be imported from the Unity Package. public override string[] Samples { get; } Property Value string[] Version A string representing the version of the package. public override string Version { get; set; } Property Value string"
  },
  "api/VRBuilder.Editor.PackageManager.XRInteraction.html": {
    "href": "api/VRBuilder.Editor.PackageManager.XRInteraction.html",
    "title": "Namespace VRBuilder.Editor.PackageManager.XRInteraction | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.PackageManager.XRInteraction Classes XRHandsPackageEnabler Adds Unity's XR Hands package as a dependency and sets specified symbol for script compilation. XRInteractionPackageEnabler Adds Unity's XR-Interaction-Toolkit package as a dependency and sets specified symbol for script compilation."
  },
  "api/VRBuilder.Editor.PackageManager.html": {
    "href": "api/VRBuilder.Editor.PackageManager.html",
    "title": "Namespace VRBuilder.Editor.PackageManager | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.PackageManager Classes Dependency Base class for dependencies used by the DependencyManager. DependencyManager Automatically retrieves all dependencies from the Unity's Package Manager at the startup. DependencyManager.DependenciesEnabledEventArgs InputSystemPackageEnabler Adds Unity's Input System package as a dependency. LocalizationPackageEnabler Adds Unity's Localizaion System package as a dependency. NewtonsoftJSONPackageEnabler PackageOperationsManager Handles different Unity's Package Manager requests. PackageOperationsManager.InitializedEventArgs PackageOperationsManager.PackageDisabledEventArgs PackageOperationsManager.PackageEnabledEventArgs PostProcessingPackageEnabler Adds Unity's Post-Processing package as a dependency."
  },
  "api/VRBuilder.Editor.PreBuildCloseProcessEditor.html": {
    "href": "api/VRBuilder.Editor.PreBuildCloseProcessEditor.html",
    "title": "Class PreBuildCloseProcessEditor | VR Builder Documentation",
    "keywords": "Class PreBuildCloseProcessEditor Namespace VRBuilder.Editor Assembly VRBuilder.Editor.dll We are closing the process editor window before the build starts. Having an open process editor window can lead to corrupt Unique Names. public class PreBuildCloseProcessEditor : IPreprocessBuildWithReport, IOrderedCallback Inheritance object PreBuildCloseProcessEditor Implements IPreprocessBuildWithReport IOrderedCallback Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties callbackOrder Returns the relative callback order for callbacks. Callbacks with lower values are called before ones with higher values. public int callbackOrder { get; } Property Value int Methods OnPreprocessBuild(BuildReport) Implement this function to receive a callback before the build is started. public void OnPreprocessBuild(BuildReport report) Parameters report BuildReport A report containing information about the build, such as its target platform and output path."
  },
  "api/VRBuilder.Editor.PreBuildLinkXMLCreator.html": {
    "href": "api/VRBuilder.Editor.PreBuildLinkXMLCreator.html",
    "title": "Class PreBuildLinkXMLCreator | VR Builder Documentation",
    "keywords": "Class PreBuildLinkXMLCreator Namespace VRBuilder.Editor Assembly VRBuilder.Editor.dll Generates a LinkXML file before the build process to preserve all Behaviors and Conditions from VR Builder add-ons. public class PreBuildLinkXMLCreator : IPreprocessBuildWithReport, IOrderedCallback Inheritance object PreBuildLinkXMLCreator Implements IPreprocessBuildWithReport IOrderedCallback Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The existing LinkXML in the VRBuilderRootFolder will be overwritten. Fields LinkXML public const string LinkXML = \"link.xml\" Field Value string VRBuilderRootFolder public const string VRBuilderRootFolder = \"Assets/MindPort/VR Builder\" Field Value string Properties callbackOrder Returns the relative callback order for callbacks. Callbacks with lower values are called before ones with higher values. public int callbackOrder { get; } Property Value int Methods OnPreprocessBuild(BuildReport) Implement this function to receive a callback before the build is started. public void OnPreprocessBuild(BuildReport report) Parameters report BuildReport A report containing information about the build, such as its target platform and output path."
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.BehaviorListUpdater.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.BehaviorListUpdater.html",
    "title": "Class BehaviorListUpdater | VR Builder Documentation",
    "keywords": "Class BehaviorListUpdater Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Concrete implementation of ListUpdater<T>. public class BehaviorListUpdater : ListUpdater<IBehavior>, IUpdater Inheritance object ListUpdater<IBehavior> BehaviorListUpdater Implements IUpdater Inherited Members ListUpdater<IBehavior>.UpdatedType ListUpdater<IBehavior>.Update(MemberInfo, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.ConditionListUpdater.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.ConditionListUpdater.html",
    "title": "Class ConditionListUpdater | VR Builder Documentation",
    "keywords": "Class ConditionListUpdater Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Concrete implementation of ListUpdater<T>. public class ConditionListUpdater : ListUpdater<ICondition>, IUpdater Inheritance object ListUpdater<ICondition> ConditionListUpdater Implements IUpdater Inherited Members ListUpdater<ICondition>.UpdatedType ListUpdater<ICondition>.Update(MemberInfo, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.Converter-2.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.Converter-2.html",
    "title": "Class Converter<TIn, TOut> | VR Builder Documentation",
    "keywords": "Class Converter<TIn, TOut> Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Generic implementation of IConverter. public abstract class Converter<TIn, TOut> : IConverter where TIn : class where TOut : class Type Parameters TIn TOut Inheritance object Converter<TIn, TOut> Implements IConverter Derived DisableGameObjectBehaviorConverter EnableGameObjectBehaviorConverter GrabbedObjectWithTagConditionConverter SetComponentEnabledByTagBehaviorConverter SetObjectsWithTagEnabledBehaviorConverter SnappedObjectWithTagConditionConverter TriggerEventByRefBehaviorConverter TriggerEventByTagBehaviorConverter TriggerGenericEventByRefBehaviorConverter<T> TriggerGenericEventByTagBehaviorConverter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ConvertedType Type supported by this converter. public Type ConvertedType { get; } Property Value Type Methods Convert(object) Returns an object which is an up to date version of the provided object. public object Convert(object oldObject) Parameters oldObject object Returns object PerformConversion(TIn) Returns an object which can replace the provided object. protected abstract TOut PerformConversion(TIn oldObject) Parameters oldObject TIn Returns TOut"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.DataUpdater.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.DataUpdater.html",
    "title": "Class DataUpdater | VR Builder Documentation",
    "keywords": "Class DataUpdater Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Concrete implementation of NestedUpdater<T>. public class DataUpdater : NestedUpdater<IData>, IUpdater Inheritance object Updater<IData> NestedUpdater<IData> DataUpdater Implements IUpdater Inherited Members NestedUpdater<IData>.Update(MemberInfo, object) Updater<IData>.UpdatedType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.DisableGameObjectBehaviorConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.DisableGameObjectBehaviorConverter.html",
    "title": "Class DisableGameObjectBehaviorConverter | VR Builder Documentation",
    "keywords": "Class DisableGameObjectBehaviorConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Replaces an obsolete DisableGameObjectBehavior with a SetObjectsEnabledBehavior with the same configuration. public class DisableGameObjectBehaviorConverter : Converter<DisableGameObjectBehavior, SetObjectsEnabledBehavior>, IConverter Inheritance object Converter<DisableGameObjectBehavior, SetObjectsEnabledBehavior> DisableGameObjectBehaviorConverter Implements IConverter Inherited Members Converter<DisableGameObjectBehavior, SetObjectsEnabledBehavior>.ConvertedType Converter<DisableGameObjectBehavior, SetObjectsEnabledBehavior>.PerformConversion(DisableGameObjectBehavior) Converter<DisableGameObjectBehavior, SetObjectsEnabledBehavior>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PerformConversion(DisableGameObjectBehavior) Returns an object which can replace the provided object. protected override SetObjectsEnabledBehavior PerformConversion(DisableGameObjectBehavior oldBehavior) Parameters oldBehavior DisableGameObjectBehavior Returns SetObjectsEnabledBehavior"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.EnableGameObjectBehaviorConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.EnableGameObjectBehaviorConverter.html",
    "title": "Class EnableGameObjectBehaviorConverter | VR Builder Documentation",
    "keywords": "Class EnableGameObjectBehaviorConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Replaces an obsolete EnableGameObjectBehavior with a SetObjectsEnabledBehavior with the same configuration. public class EnableGameObjectBehaviorConverter : Converter<EnableGameObjectBehavior, SetObjectsEnabledBehavior>, IConverter Inheritance object Converter<EnableGameObjectBehavior, SetObjectsEnabledBehavior> EnableGameObjectBehaviorConverter Implements IConverter Inherited Members Converter<EnableGameObjectBehavior, SetObjectsEnabledBehavior>.ConvertedType Converter<EnableGameObjectBehavior, SetObjectsEnabledBehavior>.PerformConversion(EnableGameObjectBehavior) Converter<EnableGameObjectBehavior, SetObjectsEnabledBehavior>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PerformConversion(EnableGameObjectBehavior) Returns an object which can replace the provided object. protected override SetObjectsEnabledBehavior PerformConversion(EnableGameObjectBehavior oldBehavior) Parameters oldBehavior EnableGameObjectBehavior Returns SetObjectsEnabledBehavior"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.GrabbedObjectWithTagConditionConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.GrabbedObjectWithTagConditionConverter.html",
    "title": "Class GrabbedObjectWithTagConditionConverter | VR Builder Documentation",
    "keywords": "Class GrabbedObjectWithTagConditionConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.BasicInteraction.dll Replaces an obsolete GrabbedObjectWithTagCondition with a GrabbedCondition with the same configuration. public class GrabbedObjectWithTagConditionConverter : Converter<GrabbedObjectWithTagCondition, GrabbedCondition>, IConverter Inheritance object Converter<GrabbedObjectWithTagCondition, GrabbedCondition> GrabbedObjectWithTagConditionConverter Implements IConverter Inherited Members Converter<GrabbedObjectWithTagCondition, GrabbedCondition>.ConvertedType Converter<GrabbedObjectWithTagCondition, GrabbedCondition>.PerformConversion(GrabbedObjectWithTagCondition) Converter<GrabbedObjectWithTagCondition, GrabbedCondition>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PerformConversion(GrabbedObjectWithTagCondition) Returns an object which can replace the provided object. protected override GrabbedCondition PerformConversion(GrabbedObjectWithTagCondition oldCondition) Parameters oldCondition GrabbedObjectWithTagCondition Returns GrabbedCondition"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.IConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.IConverter.html",
    "title": "Interface IConverter | VR Builder Documentation",
    "keywords": "Interface IConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Replaces an object with another up to date object with comparable functionality. public interface IConverter Properties ConvertedType Type supported by this converter. Type ConvertedType { get; } Property Value Type Methods Convert(object) Returns an object which is an up to date version of the provided object. object Convert(object oldEntity) Parameters oldEntity object Returns object"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.IUpdater.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.IUpdater.html",
    "title": "Interface IUpdater | VR Builder Documentation",
    "keywords": "Interface IUpdater Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Updates the value in a field or property according to a newer standard. public interface IUpdater Properties UpdatedType Base type compatible with this updater. Type UpdatedType { get; } Property Value Type Methods Update(MemberInfo, object) Updates the provided field or property. void Update(MemberInfo memberInfo, object owner) Parameters memberInfo MemberInfo owner object"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.ListUpdater-1.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.ListUpdater-1.html",
    "title": "Class ListUpdater<T> | VR Builder Documentation",
    "keywords": "Class ListUpdater<T> Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Iterates through elements of a IList<T> and replaces them with an up to date version if a suitable converter is found. public abstract class ListUpdater<T> : IUpdater Type Parameters T Inheritance object ListUpdater<T> Implements IUpdater Derived BehaviorListUpdater ConditionListUpdater Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties UpdatedType Base type compatible with this updater. public Type UpdatedType { get; } Property Value Type Methods Update(MemberInfo, object) Updates the provided field or property. public void Update(MemberInfo memberInfo, object owner) Parameters memberInfo MemberInfo owner object"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.LockablePropertyReferenceUpdater.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.LockablePropertyReferenceUpdater.html",
    "title": "Class LockablePropertyReferenceUpdater | VR Builder Documentation",
    "keywords": "Class LockablePropertyReferenceUpdater Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Iterates through a collection of LockablePropertyReferences and updates them if a suitable updater exists. public class LockablePropertyReferenceUpdater : Updater<IEnumerable<LockablePropertyReference>>, IUpdater Inheritance object Updater<IEnumerable<LockablePropertyReference>> LockablePropertyReferenceUpdater Implements IUpdater Inherited Members Updater<IEnumerable<LockablePropertyReference>>.UpdatedType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(MemberInfo, object) Updates the provided field or property. public override void Update(MemberInfo memberInfo, object owner) Parameters memberInfo MemberInfo owner object"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.NestedUpdater-1.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.NestedUpdater-1.html",
    "title": "Class NestedUpdater<T> | VR Builder Documentation",
    "keywords": "Class NestedUpdater<T> Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Generic IUpdater that iterates through the fields and properties of the provided object and tries to update them, provided it finds a suitable updater. public abstract class NestedUpdater<T> : Updater<T>, IUpdater Type Parameters T Inheritance object Updater<T> NestedUpdater<T> Implements IUpdater Derived DataUpdater ProcessVariableBoolUpdater ProcessVariableFloatUpdater ProcessVariableStringUpdater Inherited Members Updater<T>.UpdatedType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(MemberInfo, object) Updates the provided field or property. public override void Update(MemberInfo memberInfo, object owner) Parameters memberInfo MemberInfo owner object"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.ProcessSceneReferencePropertyUpdater.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.ProcessSceneReferencePropertyUpdater.html",
    "title": "Class ProcessSceneReferencePropertyUpdater | VR Builder Documentation",
    "keywords": "Class ProcessSceneReferencePropertyUpdater Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Assigns a value to a ProcessSceneReferenceBase property from an obsolete UniqueNameReference or SceneObjectTagBase. public class ProcessSceneReferencePropertyUpdater : PropertyUpdater<ProcessSceneReferenceBase, object>, IUpdater Inheritance object PropertyUpdater<ProcessSceneReferenceBase, object> ProcessSceneReferencePropertyUpdater Implements IUpdater Inherited Members PropertyUpdater<ProcessSceneReferenceBase, object>.UpdatedType PropertyUpdater<ProcessSceneReferenceBase, object>.ShouldBeUpdated(ProcessSceneReferenceBase) PropertyUpdater<ProcessSceneReferenceBase, object>.PerformUpgrade(ref ProcessSceneReferenceBase, ref object) PropertyUpdater<ProcessSceneReferenceBase, object>.Update(MemberInfo, object) PropertyUpdater<ProcessSceneReferenceBase, object>.AttemptToUpdateProperty(MemberInfo, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PerformUpgrade(ref ProcessSceneReferenceBase, ref object) Reads the value from the old property and assigns it to the new property. protected override bool PerformUpgrade(ref ProcessSceneReferenceBase newProperty, ref object oldProperty) Parameters newProperty ProcessSceneReferenceBase oldProperty object Returns bool ShouldBeUpdated(ProcessSceneReferenceBase) True if it is necessary to update the provided property. protected override bool ShouldBeUpdated(ProcessSceneReferenceBase property) Parameters property ProcessSceneReferenceBase Returns bool"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.ProcessUpgradeTool.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.ProcessUpgradeTool.html",
    "title": "Class ProcessUpgradeTool | VR Builder Documentation",
    "keywords": "Class ProcessUpgradeTool Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Tool for upgrading an old process loaded in a scene to be compatible with the latest version of VR Builder. public static class ProcessUpgradeTool Inheritance object ProcessUpgradeTool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Converters Converters available to this tool. public static IEnumerable<IConverter> Converters { get; } Property Value IEnumerable<IConverter> Updaters Updaters available to this tool. public static IEnumerable<IUpdater> Updaters { get; } Property Value IEnumerable<IUpdater> Methods GetUpdaterForType(Type) Returns a suitable updater for the provided type, or null if none is found. public static IUpdater GetUpdaterForType(Type type) Parameters type Type Returns IUpdater UpdateDataOwnerRecursively(IDataOwner) Updates the provided data owner and all of its child data owners, if a suitable updater exists. public static void UpdateDataOwnerRecursively(IDataOwner dataOwner) Parameters dataOwner IDataOwner"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.ProcessVariableBoolUpdater.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.ProcessVariableBoolUpdater.html",
    "title": "Class ProcessVariableBoolUpdater | VR Builder Documentation",
    "keywords": "Class ProcessVariableBoolUpdater Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Concrete implementation of NestedUpdater<T>. public class ProcessVariableBoolUpdater : NestedUpdater<ProcessVariable<bool>>, IUpdater Inheritance object Updater<ProcessVariable<bool>> NestedUpdater<ProcessVariable<bool>> ProcessVariableBoolUpdater Implements IUpdater Inherited Members NestedUpdater<ProcessVariable<bool>>.Update(MemberInfo, object) Updater<ProcessVariable<bool>>.UpdatedType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.ProcessVariableFloatUpdater.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.ProcessVariableFloatUpdater.html",
    "title": "Class ProcessVariableFloatUpdater | VR Builder Documentation",
    "keywords": "Class ProcessVariableFloatUpdater Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Concrete implementation of NestedUpdater<T>. public class ProcessVariableFloatUpdater : NestedUpdater<ProcessVariable<float>>, IUpdater Inheritance object Updater<ProcessVariable<float>> NestedUpdater<ProcessVariable<float>> ProcessVariableFloatUpdater Implements IUpdater Inherited Members NestedUpdater<ProcessVariable<float>>.Update(MemberInfo, object) Updater<ProcessVariable<float>>.UpdatedType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.ProcessVariableStringUpdater.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.ProcessVariableStringUpdater.html",
    "title": "Class ProcessVariableStringUpdater | VR Builder Documentation",
    "keywords": "Class ProcessVariableStringUpdater Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Concrete implementation of NestedUpdater<T>. public class ProcessVariableStringUpdater : NestedUpdater<ProcessVariable<string>>, IUpdater Inheritance object Updater<ProcessVariable<string>> NestedUpdater<ProcessVariable<string>> ProcessVariableStringUpdater Implements IUpdater Inherited Members NestedUpdater<ProcessVariable<string>>.Update(MemberInfo, object) Updater<ProcessVariable<string>>.UpdatedType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.PropertyUpdater-2.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.PropertyUpdater-2.html",
    "title": "Class PropertyUpdater<TNew, TOld> | VR Builder Documentation",
    "keywords": "Class PropertyUpdater<TNew, TOld> Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Generic implementation of IUpdater specific for properties that supersede obsolete properties of a different type. public abstract class PropertyUpdater<TNew, TOld> : IUpdater Type Parameters TNew Type of the property whose value has to be updated. TOld Type of the obsolete property which should be read to get the value. Inheritance object PropertyUpdater<TNew, TOld> Implements IUpdater Derived ProcessSceneReferencePropertyUpdater Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties UpdatedType Base type compatible with this updater. public Type UpdatedType { get; } Property Value Type Methods AttemptToUpdateProperty(MemberInfo, object) protected bool AttemptToUpdateProperty(MemberInfo memberInfo, object owner) Parameters memberInfo MemberInfo owner object Returns bool PerformUpgrade(ref TNew, ref TOld) Reads the value from the old property and assigns it to the new property. protected abstract bool PerformUpgrade(ref TNew newProperty, ref TOld oldProperty) Parameters newProperty TNew oldProperty TOld Returns bool ShouldBeUpdated(TNew) True if it is necessary to update the provided property. protected abstract bool ShouldBeUpdated(TNew property) Parameters property TNew Returns bool Update(MemberInfo, object) Updates the provided field or property. public void Update(MemberInfo memberInfo, object owner) Parameters memberInfo MemberInfo owner object"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.SetComponentEnabledByTagBehaviorConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.SetComponentEnabledByTagBehaviorConverter.html",
    "title": "Class SetComponentEnabledByTagBehaviorConverter | VR Builder Documentation",
    "keywords": "Class SetComponentEnabledByTagBehaviorConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Replaces an obsolete SetComponentEnabledByTagBehavior with a SetComponentEnabledBehavior with the same configuration. public class SetComponentEnabledByTagBehaviorConverter : Converter<SetComponentEnabledByTagBehavior, SetComponentEnabledBehavior>, IConverter Inheritance object Converter<SetComponentEnabledByTagBehavior, SetComponentEnabledBehavior> SetComponentEnabledByTagBehaviorConverter Implements IConverter Inherited Members Converter<SetComponentEnabledByTagBehavior, SetComponentEnabledBehavior>.ConvertedType Converter<SetComponentEnabledByTagBehavior, SetComponentEnabledBehavior>.PerformConversion(SetComponentEnabledByTagBehavior) Converter<SetComponentEnabledByTagBehavior, SetComponentEnabledBehavior>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PerformConversion(SetComponentEnabledByTagBehavior) Returns an object which can replace the provided object. protected override SetComponentEnabledBehavior PerformConversion(SetComponentEnabledByTagBehavior oldBehavior) Parameters oldBehavior SetComponentEnabledByTagBehavior Returns SetComponentEnabledBehavior"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.SetObjectsWithTagEnabledBehaviorConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.SetObjectsWithTagEnabledBehaviorConverter.html",
    "title": "Class SetObjectsWithTagEnabledBehaviorConverter | VR Builder Documentation",
    "keywords": "Class SetObjectsWithTagEnabledBehaviorConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Replaces an obsolete SetObjectsWithTagEnabledBehavior with a SetObjectsEnabledBehavior with the same configuration. public class SetObjectsWithTagEnabledBehaviorConverter : Converter<SetObjectsWithTagEnabledBehavior, SetObjectsEnabledBehavior>, IConverter Inheritance object Converter<SetObjectsWithTagEnabledBehavior, SetObjectsEnabledBehavior> SetObjectsWithTagEnabledBehaviorConverter Implements IConverter Inherited Members Converter<SetObjectsWithTagEnabledBehavior, SetObjectsEnabledBehavior>.ConvertedType Converter<SetObjectsWithTagEnabledBehavior, SetObjectsEnabledBehavior>.PerformConversion(SetObjectsWithTagEnabledBehavior) Converter<SetObjectsWithTagEnabledBehavior, SetObjectsEnabledBehavior>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PerformConversion(SetObjectsWithTagEnabledBehavior) Returns an object which can replace the provided object. protected override SetObjectsEnabledBehavior PerformConversion(SetObjectsWithTagEnabledBehavior oldBehavior) Parameters oldBehavior SetObjectsWithTagEnabledBehavior Returns SetObjectsEnabledBehavior"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.SnappedObjectWithTagConditionConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.SnappedObjectWithTagConditionConverter.html",
    "title": "Class SnappedObjectWithTagConditionConverter | VR Builder Documentation",
    "keywords": "Class SnappedObjectWithTagConditionConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.BasicInteraction.dll Replaces an obsolete SnappedObjectWithTagCondition with a SnappedCondition with the same configuration. public class SnappedObjectWithTagConditionConverter : Converter<SnappedObjectWithTagCondition, SnappedCondition>, IConverter Inheritance object Converter<SnappedObjectWithTagCondition, SnappedCondition> SnappedObjectWithTagConditionConverter Implements IConverter Inherited Members Converter<SnappedObjectWithTagCondition, SnappedCondition>.ConvertedType Converter<SnappedObjectWithTagCondition, SnappedCondition>.PerformConversion(SnappedObjectWithTagCondition) Converter<SnappedObjectWithTagCondition, SnappedCondition>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PerformConversion(SnappedObjectWithTagCondition) Returns an object which can replace the provided object. protected override SnappedCondition PerformConversion(SnappedObjectWithTagCondition oldCondition) Parameters oldCondition SnappedObjectWithTagCondition Returns SnappedCondition"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerBoolEventByRefBehaviorConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerBoolEventByRefBehaviorConverter.html",
    "title": "Class TriggerBoolEventByRefBehaviorConverter | VR Builder Documentation",
    "keywords": "Class TriggerBoolEventByRefBehaviorConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.StatesAndData.dll Replaces an obsolete TriggerGenericEventByRefBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. public class TriggerBoolEventByRefBehaviorConverter : TriggerGenericEventByRefBehaviorConverter<bool>, IConverter Inheritance object Converter<TriggerGenericEventByRefBehavior<bool>, TriggerGenericEventBehavior<bool>> TriggerGenericEventByRefBehaviorConverter<bool> TriggerBoolEventByRefBehaviorConverter Implements IConverter Inherited Members TriggerGenericEventByRefBehaviorConverter<bool>.PerformConversion(TriggerGenericEventByRefBehavior<bool>) Converter<TriggerGenericEventByRefBehavior<bool>, TriggerGenericEventBehavior<bool>>.ConvertedType Converter<TriggerGenericEventByRefBehavior<bool>, TriggerGenericEventBehavior<bool>>.PerformConversion(TriggerGenericEventByRefBehavior<bool>) Converter<TriggerGenericEventByRefBehavior<bool>, TriggerGenericEventBehavior<bool>>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerBoolEventByTagBehaviorConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerBoolEventByTagBehaviorConverter.html",
    "title": "Class TriggerBoolEventByTagBehaviorConverter | VR Builder Documentation",
    "keywords": "Class TriggerBoolEventByTagBehaviorConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.StatesAndData.dll Replaces an obsolete TriggerGenericEventByTagBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. public class TriggerBoolEventByTagBehaviorConverter : TriggerGenericEventByTagBehaviorConverter<bool>, IConverter Inheritance object Converter<TriggerGenericEventByTagBehavior<bool>, TriggerGenericEventBehavior<bool>> TriggerGenericEventByTagBehaviorConverter<bool> TriggerBoolEventByTagBehaviorConverter Implements IConverter Inherited Members TriggerGenericEventByTagBehaviorConverter<bool>.PerformConversion(TriggerGenericEventByTagBehavior<bool>) Converter<TriggerGenericEventByTagBehavior<bool>, TriggerGenericEventBehavior<bool>>.ConvertedType Converter<TriggerGenericEventByTagBehavior<bool>, TriggerGenericEventBehavior<bool>>.PerformConversion(TriggerGenericEventByTagBehavior<bool>) Converter<TriggerGenericEventByTagBehavior<bool>, TriggerGenericEventBehavior<bool>>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerEventByRefBehaviorConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerEventByRefBehaviorConverter.html",
    "title": "Class TriggerEventByRefBehaviorConverter | VR Builder Documentation",
    "keywords": "Class TriggerEventByRefBehaviorConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.StatesAndData.dll Replaces an obsolete TriggerEventByRefBehavior with a TriggerEventBehavior with the same configuration. public class TriggerEventByRefBehaviorConverter : Converter<TriggerEventByRefBehavior, TriggerEventBehavior>, IConverter Inheritance object Converter<TriggerEventByRefBehavior, TriggerEventBehavior> TriggerEventByRefBehaviorConverter Implements IConverter Inherited Members Converter<TriggerEventByRefBehavior, TriggerEventBehavior>.ConvertedType Converter<TriggerEventByRefBehavior, TriggerEventBehavior>.PerformConversion(TriggerEventByRefBehavior) Converter<TriggerEventByRefBehavior, TriggerEventBehavior>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PerformConversion(TriggerEventByRefBehavior) Returns an object which can replace the provided object. protected override TriggerEventBehavior PerformConversion(TriggerEventByRefBehavior oldBehavior) Parameters oldBehavior TriggerEventByRefBehavior Returns TriggerEventBehavior"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerEventByTagBehaviorConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerEventByTagBehaviorConverter.html",
    "title": "Class TriggerEventByTagBehaviorConverter | VR Builder Documentation",
    "keywords": "Class TriggerEventByTagBehaviorConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.StatesAndData.dll Replaces an obsolete TriggerEventByTagBehavior with a TriggerEventBehavior with the same configuration. public class TriggerEventByTagBehaviorConverter : Converter<TriggerEventByTagBehavior, TriggerEventBehavior>, IConverter Inheritance object Converter<TriggerEventByTagBehavior, TriggerEventBehavior> TriggerEventByTagBehaviorConverter Implements IConverter Inherited Members Converter<TriggerEventByTagBehavior, TriggerEventBehavior>.ConvertedType Converter<TriggerEventByTagBehavior, TriggerEventBehavior>.PerformConversion(TriggerEventByTagBehavior) Converter<TriggerEventByTagBehavior, TriggerEventBehavior>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PerformConversion(TriggerEventByTagBehavior) Returns an object which can replace the provided object. protected override TriggerEventBehavior PerformConversion(TriggerEventByTagBehavior oldBehavior) Parameters oldBehavior TriggerEventByTagBehavior Returns TriggerEventBehavior"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerFloatEventByRefBehaviorConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerFloatEventByRefBehaviorConverter.html",
    "title": "Class TriggerFloatEventByRefBehaviorConverter | VR Builder Documentation",
    "keywords": "Class TriggerFloatEventByRefBehaviorConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.StatesAndData.dll Replaces an obsolete TriggerGenericEventByRefBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. public class TriggerFloatEventByRefBehaviorConverter : TriggerGenericEventByRefBehaviorConverter<float>, IConverter Inheritance object Converter<TriggerGenericEventByRefBehavior<float>, TriggerGenericEventBehavior<float>> TriggerGenericEventByRefBehaviorConverter<float> TriggerFloatEventByRefBehaviorConverter Implements IConverter Inherited Members TriggerGenericEventByRefBehaviorConverter<float>.PerformConversion(TriggerGenericEventByRefBehavior<float>) Converter<TriggerGenericEventByRefBehavior<float>, TriggerGenericEventBehavior<float>>.ConvertedType Converter<TriggerGenericEventByRefBehavior<float>, TriggerGenericEventBehavior<float>>.PerformConversion(TriggerGenericEventByRefBehavior<float>) Converter<TriggerGenericEventByRefBehavior<float>, TriggerGenericEventBehavior<float>>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerFloatEventByTagBehaviorConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerFloatEventByTagBehaviorConverter.html",
    "title": "Class TriggerFloatEventByTagBehaviorConverter | VR Builder Documentation",
    "keywords": "Class TriggerFloatEventByTagBehaviorConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.StatesAndData.dll Replaces an obsolete TriggerGenericEventByTagBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. public class TriggerFloatEventByTagBehaviorConverter : TriggerGenericEventByTagBehaviorConverter<float>, IConverter Inheritance object Converter<TriggerGenericEventByTagBehavior<float>, TriggerGenericEventBehavior<float>> TriggerGenericEventByTagBehaviorConverter<float> TriggerFloatEventByTagBehaviorConverter Implements IConverter Inherited Members TriggerGenericEventByTagBehaviorConverter<float>.PerformConversion(TriggerGenericEventByTagBehavior<float>) Converter<TriggerGenericEventByTagBehavior<float>, TriggerGenericEventBehavior<float>>.ConvertedType Converter<TriggerGenericEventByTagBehavior<float>, TriggerGenericEventBehavior<float>>.PerformConversion(TriggerGenericEventByTagBehavior<float>) Converter<TriggerGenericEventByTagBehavior<float>, TriggerGenericEventBehavior<float>>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerGenericEventByRefBehaviorConverter-1.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerGenericEventByRefBehaviorConverter-1.html",
    "title": "Class TriggerGenericEventByRefBehaviorConverter<T> | VR Builder Documentation",
    "keywords": "Class TriggerGenericEventByRefBehaviorConverter<T> Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.StatesAndData.dll Generic implementation to convert an obsolete TriggerGenericEventByRefBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. public abstract class TriggerGenericEventByRefBehaviorConverter<T> : Converter<TriggerGenericEventByRefBehavior<T>, TriggerGenericEventBehavior<T>>, IConverter Type Parameters T Inheritance object Converter<TriggerGenericEventByRefBehavior<T>, TriggerGenericEventBehavior<T>> TriggerGenericEventByRefBehaviorConverter<T> Implements IConverter Derived TriggerBoolEventByRefBehaviorConverter TriggerFloatEventByRefBehaviorConverter TriggerStringEventByRefBehaviorConverter Inherited Members Converter<TriggerGenericEventByRefBehavior<T>, TriggerGenericEventBehavior<T>>.ConvertedType Converter<TriggerGenericEventByRefBehavior<T>, TriggerGenericEventBehavior<T>>.PerformConversion(TriggerGenericEventByRefBehavior<T>) Converter<TriggerGenericEventByRefBehavior<T>, TriggerGenericEventBehavior<T>>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PerformConversion(TriggerGenericEventByRefBehavior<T>) Returns an object which can replace the provided object. protected override TriggerGenericEventBehavior<T> PerformConversion(TriggerGenericEventByRefBehavior<T> oldBehavior) Parameters oldBehavior TriggerGenericEventByRefBehavior<T> Returns TriggerGenericEventBehavior<T>"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerGenericEventByTagBehaviorConverter-1.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerGenericEventByTagBehaviorConverter-1.html",
    "title": "Class TriggerGenericEventByTagBehaviorConverter<T> | VR Builder Documentation",
    "keywords": "Class TriggerGenericEventByTagBehaviorConverter<T> Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.StatesAndData.dll Generic implementation to convert an obsolete TriggerGenericEventByTagBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. public abstract class TriggerGenericEventByTagBehaviorConverter<T> : Converter<TriggerGenericEventByTagBehavior<T>, TriggerGenericEventBehavior<T>>, IConverter Type Parameters T Inheritance object Converter<TriggerGenericEventByTagBehavior<T>, TriggerGenericEventBehavior<T>> TriggerGenericEventByTagBehaviorConverter<T> Implements IConverter Derived TriggerBoolEventByTagBehaviorConverter TriggerFloatEventByTagBehaviorConverter TriggerStringEventByTagBehaviorConverter Inherited Members Converter<TriggerGenericEventByTagBehavior<T>, TriggerGenericEventBehavior<T>>.ConvertedType Converter<TriggerGenericEventByTagBehavior<T>, TriggerGenericEventBehavior<T>>.PerformConversion(TriggerGenericEventByTagBehavior<T>) Converter<TriggerGenericEventByTagBehavior<T>, TriggerGenericEventBehavior<T>>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PerformConversion(TriggerGenericEventByTagBehavior<T>) Returns an object which can replace the provided object. protected override TriggerGenericEventBehavior<T> PerformConversion(TriggerGenericEventByTagBehavior<T> oldBehavior) Parameters oldBehavior TriggerGenericEventByTagBehavior<T> Returns TriggerGenericEventBehavior<T>"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerStringEventByRefBehaviorConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerStringEventByRefBehaviorConverter.html",
    "title": "Class TriggerStringEventByRefBehaviorConverter | VR Builder Documentation",
    "keywords": "Class TriggerStringEventByRefBehaviorConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.StatesAndData.dll Replaces an obsolete TriggerGenericEventByRefBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. public class TriggerStringEventByRefBehaviorConverter : TriggerGenericEventByRefBehaviorConverter<string>, IConverter Inheritance object Converter<TriggerGenericEventByRefBehavior<string>, TriggerGenericEventBehavior<string>> TriggerGenericEventByRefBehaviorConverter<string> TriggerStringEventByRefBehaviorConverter Implements IConverter Inherited Members TriggerGenericEventByRefBehaviorConverter<string>.PerformConversion(TriggerGenericEventByRefBehavior<string>) Converter<TriggerGenericEventByRefBehavior<string>, TriggerGenericEventBehavior<string>>.ConvertedType Converter<TriggerGenericEventByRefBehavior<string>, TriggerGenericEventBehavior<string>>.PerformConversion(TriggerGenericEventByRefBehavior<string>) Converter<TriggerGenericEventByRefBehavior<string>, TriggerGenericEventBehavior<string>>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerStringEventByTagBehaviorConverter.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.TriggerStringEventByTagBehaviorConverter.html",
    "title": "Class TriggerStringEventByTagBehaviorConverter | VR Builder Documentation",
    "keywords": "Class TriggerStringEventByTagBehaviorConverter Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.StatesAndData.dll Replaces an obsolete TriggerGenericEventByTagBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. public class TriggerStringEventByTagBehaviorConverter : TriggerGenericEventByTagBehaviorConverter<string>, IConverter Inheritance object Converter<TriggerGenericEventByTagBehavior<string>, TriggerGenericEventBehavior<string>> TriggerGenericEventByTagBehaviorConverter<string> TriggerStringEventByTagBehaviorConverter Implements IConverter Inherited Members TriggerGenericEventByTagBehaviorConverter<string>.PerformConversion(TriggerGenericEventByTagBehavior<string>) Converter<TriggerGenericEventByTagBehavior<string>, TriggerGenericEventBehavior<string>>.ConvertedType Converter<TriggerGenericEventByTagBehavior<string>, TriggerGenericEventBehavior<string>>.PerformConversion(TriggerGenericEventByTagBehavior<string>) Converter<TriggerGenericEventByTagBehavior<string>, TriggerGenericEventBehavior<string>>.Convert(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.Updater-1.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.Updater-1.html",
    "title": "Class Updater<T> | VR Builder Documentation",
    "keywords": "Class Updater<T> Namespace VRBuilder.Editor.ProcessUpgradeTool Assembly VRBuilder.Editor.dll Generic implementation of IUpdater. public abstract class Updater<T> : IUpdater Type Parameters T Inheritance object Updater<T> Implements IUpdater Derived LockablePropertyReferenceUpdater NestedUpdater<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties UpdatedType Base type compatible with this updater. public Type UpdatedType { get; } Property Value Type Methods Update(MemberInfo, object) Updates the provided field or property. public abstract void Update(MemberInfo memberInfo, object owner) Parameters memberInfo MemberInfo owner object"
  },
  "api/VRBuilder.Editor.ProcessUpgradeTool.html": {
    "href": "api/VRBuilder.Editor.ProcessUpgradeTool.html",
    "title": "Namespace VRBuilder.Editor.ProcessUpgradeTool | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.ProcessUpgradeTool Classes BehaviorListUpdater Concrete implementation of ListUpdater<T>. ConditionListUpdater Concrete implementation of ListUpdater<T>. Converter<TIn, TOut> Generic implementation of IConverter. DataUpdater Concrete implementation of NestedUpdater<T>. DisableGameObjectBehaviorConverter Replaces an obsolete DisableGameObjectBehavior with a SetObjectsEnabledBehavior with the same configuration. EnableGameObjectBehaviorConverter Replaces an obsolete EnableGameObjectBehavior with a SetObjectsEnabledBehavior with the same configuration. GrabbedObjectWithTagConditionConverter Replaces an obsolete GrabbedObjectWithTagCondition with a GrabbedCondition with the same configuration. ListUpdater<T> Iterates through elements of a IList<T> and replaces them with an up to date version if a suitable converter is found. LockablePropertyReferenceUpdater Iterates through a collection of LockablePropertyReferences and updates them if a suitable updater exists. NestedUpdater<T> Generic IUpdater that iterates through the fields and properties of the provided object and tries to update them, provided it finds a suitable updater. ProcessSceneReferencePropertyUpdater Assigns a value to a ProcessSceneReferenceBase property from an obsolete UniqueNameReference or SceneObjectTagBase. ProcessUpgradeTool Tool for upgrading an old process loaded in a scene to be compatible with the latest version of VR Builder. ProcessVariableBoolUpdater Concrete implementation of NestedUpdater<T>. ProcessVariableFloatUpdater Concrete implementation of NestedUpdater<T>. ProcessVariableStringUpdater Concrete implementation of NestedUpdater<T>. PropertyUpdater<TNew, TOld> Generic implementation of IUpdater specific for properties that supersede obsolete properties of a different type. SetComponentEnabledByTagBehaviorConverter Replaces an obsolete SetComponentEnabledByTagBehavior with a SetComponentEnabledBehavior with the same configuration. SetObjectsWithTagEnabledBehaviorConverter Replaces an obsolete SetObjectsWithTagEnabledBehavior with a SetObjectsEnabledBehavior with the same configuration. SnappedObjectWithTagConditionConverter Replaces an obsolete SnappedObjectWithTagCondition with a SnappedCondition with the same configuration. TriggerBoolEventByRefBehaviorConverter Replaces an obsolete TriggerGenericEventByRefBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. TriggerBoolEventByTagBehaviorConverter Replaces an obsolete TriggerGenericEventByTagBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. TriggerEventByRefBehaviorConverter Replaces an obsolete TriggerEventByRefBehavior with a TriggerEventBehavior with the same configuration. TriggerEventByTagBehaviorConverter Replaces an obsolete TriggerEventByTagBehavior with a TriggerEventBehavior with the same configuration. TriggerFloatEventByRefBehaviorConverter Replaces an obsolete TriggerGenericEventByRefBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. TriggerFloatEventByTagBehaviorConverter Replaces an obsolete TriggerGenericEventByTagBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. TriggerGenericEventByRefBehaviorConverter<T> Generic implementation to convert an obsolete TriggerGenericEventByRefBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. TriggerGenericEventByTagBehaviorConverter<T> Generic implementation to convert an obsolete TriggerGenericEventByTagBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. TriggerStringEventByRefBehaviorConverter Replaces an obsolete TriggerGenericEventByRefBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. TriggerStringEventByTagBehaviorConverter Replaces an obsolete TriggerGenericEventByTagBehavior<T> with a TriggerGenericEventBehavior<T> with the same configuration. Updater<T> Generic implementation of IUpdater. Interfaces IConverter Replaces an object with another up to date object with comparable functionality. IUpdater Updates the value in a field or property according to a newer standard."
  },
  "api/VRBuilder.Editor.ProcessValidation.EditorReportEntry.html": {
    "href": "api/VRBuilder.Editor.ProcessValidation.EditorReportEntry.html",
    "title": "Class EditorReportEntry | VR Builder Documentation",
    "keywords": "Class EditorReportEntry Namespace VRBuilder.Editor.ProcessValidation Assembly VRBuilder.Editor.dll Report generated from validations of IValidator objects. public class EditorReportEntry : ReportEntry Inheritance object ReportEntry EditorReportEntry Inherited Members ReportEntry.ErrorLevel ReportEntry.Code ReportEntry.Message object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors EditorReportEntry(IContext, IValidator, ReportEntry) public EditorReportEntry(IContext context, IValidator validator, ReportEntry entry) Parameters context IContext validator IValidator entry ReportEntry Fields Context IContext where the issue is present. public readonly IContext Context Field Value IContext Validator IValidator used to generate this EditorReportEntry. public readonly IValidator Validator Field Value IValidator Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string"
  },
  "api/VRBuilder.Editor.ProcessValidation.IContext.html": {
    "href": "api/VRBuilder.Editor.ProcessValidation.IContext.html",
    "title": "Interface IContext | VR Builder Documentation",
    "keywords": "Interface IContext Namespace VRBuilder.Editor.ProcessValidation Assembly VRBuilder.Editor.dll Context is used to indicate the position in the process structure. public interface IContext Properties Parent Parent context, can be null. IContext Parent { get; } Property Value IContext Methods ToString() Produces a readable string which allows us to find the context in editor. string ToString() Returns string"
  },
  "api/VRBuilder.Editor.ProcessValidation.IContextResolver.html": {
    "href": "api/VRBuilder.Editor.ProcessValidation.IContextResolver.html",
    "title": "Interface IContextResolver | VR Builder Documentation",
    "keywords": "Interface IContextResolver Namespace VRBuilder.Editor.ProcessValidation Assembly VRBuilder.Editor.dll Retrieves IContext from any provided IData. public interface IContextResolver Methods FindContext(IData, IProcess) Resolves the fitting IContext for the given IData. IContext FindContext(IData data, IProcess process) Parameters data IData process IProcess Returns IContext"
  },
  "api/VRBuilder.Editor.ProcessValidation.IValidator.html": {
    "href": "api/VRBuilder.Editor.ProcessValidation.IValidator.html",
    "title": "Interface IValidator | VR Builder Documentation",
    "keywords": "Interface IValidator Namespace VRBuilder.Editor.ProcessValidation Assembly VRBuilder.Editor.dll Validator provides validation for a specific Type. public interface IValidator Properties ValidatedContext Type of Context which is this is this validators scope. Type ValidatedContext { get; } Property Value Type ValidatedType Type which is validated by this validator. Type ValidatedType { get; } Property Value Type Methods CanValidate(object) Will return true when the object can be validated by this validator. bool CanValidate(object validatableObject) Parameters validatableObject object Object to validate. Returns bool True if object can be validated. Validate(object, IContext) Validates the given object. List<EditorReportEntry> Validate(object validatableObject, IContext context) Parameters validatableObject object Object, which will be validated. context IContext Context of the validation. Returns List<EditorReportEntry> List of reports regarding invalid objects related to the validatableObject."
  },
  "api/VRBuilder.Editor.ProcessValidation.html": {
    "href": "api/VRBuilder.Editor.ProcessValidation.html",
    "title": "Namespace VRBuilder.Editor.ProcessValidation | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.ProcessValidation Classes EditorReportEntry Report generated from validations of IValidator objects. Interfaces IContext Context is used to indicate the position in the process structure. IContextResolver Retrieves IContext from any provided IData. IValidator Validator provides validation for a specific Type."
  },
  "api/VRBuilder.Editor.Randomization.UI.Behaviors.ResetValueMenuItem.html": {
    "href": "api/VRBuilder.Editor.Randomization.UI.Behaviors.ResetValueMenuItem.html",
    "title": "Class ResetValueMenuItem | VR Builder Documentation",
    "keywords": "Class ResetValueMenuItem Namespace VRBuilder.Editor.Randomization.UI.Behaviors Assembly VRBuilder.Editor.Randomization.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class ResetValueMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> ResetValueMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.Randomization.UI.Behaviors.SetBooleanValueMenuItem.html": {
    "href": "api/VRBuilder.Editor.Randomization.UI.Behaviors.SetBooleanValueMenuItem.html",
    "title": "Class SetBooleanValueMenuItem | VR Builder Documentation",
    "keywords": "Class SetBooleanValueMenuItem Namespace VRBuilder.Editor.Randomization.UI.Behaviors Assembly VRBuilder.Editor.Randomization.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetBooleanValueMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetBooleanValueMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.Randomization.UI.Behaviors.SetNumberValueMenuItem.html": {
    "href": "api/VRBuilder.Editor.Randomization.UI.Behaviors.SetNumberValueMenuItem.html",
    "title": "Class SetNumberValueMenuItem | VR Builder Documentation",
    "keywords": "Class SetNumberValueMenuItem Namespace VRBuilder.Editor.Randomization.UI.Behaviors Assembly VRBuilder.Editor.Randomization.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetNumberValueMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetNumberValueMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.Randomization.UI.Behaviors.SetRandomBooleanMenuItem.html": {
    "href": "api/VRBuilder.Editor.Randomization.UI.Behaviors.SetRandomBooleanMenuItem.html",
    "title": "Class SetRandomBooleanMenuItem | VR Builder Documentation",
    "keywords": "Class SetRandomBooleanMenuItem Namespace VRBuilder.Editor.Randomization.UI.Behaviors Assembly VRBuilder.Editor.Randomization.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetRandomBooleanMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetRandomBooleanMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.Randomization.UI.Behaviors.SetRandomNumberMenuItem.html": {
    "href": "api/VRBuilder.Editor.Randomization.UI.Behaviors.SetRandomNumberMenuItem.html",
    "title": "Class SetRandomNumberMenuItem | VR Builder Documentation",
    "keywords": "Class SetRandomNumberMenuItem Namespace VRBuilder.Editor.Randomization.UI.Behaviors Assembly VRBuilder.Editor.Randomization.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetRandomNumberMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetRandomNumberMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.Randomization.UI.Behaviors.html": {
    "href": "api/VRBuilder.Editor.Randomization.UI.Behaviors.html",
    "title": "Namespace VRBuilder.Editor.Randomization.UI.Behaviors | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.Randomization.UI.Behaviors Classes ResetValueMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetBooleanValueMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetNumberValueMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetRandomBooleanMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetRandomNumberMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem()."
  },
  "api/VRBuilder.Editor.Randomization.UI.Conditions.CompareBooleansMenuItem.html": {
    "href": "api/VRBuilder.Editor.Randomization.UI.Conditions.CompareBooleansMenuItem.html",
    "title": "Class CompareBooleansMenuItem | VR Builder Documentation",
    "keywords": "Class CompareBooleansMenuItem Namespace VRBuilder.Editor.Randomization.UI.Conditions Assembly VRBuilder.Editor.Randomization.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class CompareBooleansMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> CompareBooleansMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.Randomization.UI.Conditions.CompareNumbersMenuItem.html": {
    "href": "api/VRBuilder.Editor.Randomization.UI.Conditions.CompareNumbersMenuItem.html",
    "title": "Class CompareNumbersMenuItem | VR Builder Documentation",
    "keywords": "Class CompareNumbersMenuItem Namespace VRBuilder.Editor.Randomization.UI.Conditions Assembly VRBuilder.Editor.Randomization.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class CompareNumbersMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> CompareNumbersMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.Randomization.UI.Conditions.html": {
    "href": "api/VRBuilder.Editor.Randomization.UI.Conditions.html",
    "title": "Namespace VRBuilder.Editor.Randomization.UI.Conditions | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.Randomization.UI.Conditions Classes CompareBooleansMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). CompareNumbersMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem()."
  },
  "api/VRBuilder.Editor.Randomization.UI.Graphics.RandomBranchGraphNode.html": {
    "href": "api/VRBuilder.Editor.Randomization.UI.Graphics.RandomBranchGraphNode.html",
    "title": "Class RandomBranchGraphNode | VR Builder Documentation",
    "keywords": "Class RandomBranchGraphNode Namespace VRBuilder.Editor.Randomization.UI.Graphics Assembly VRBuilder.Editor.Randomization.dll Graphical representation of a random branch node. public class RandomBranchGraphNode : StepGraphNode, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle, ISelectable, ICollectibleElement Inheritance object CallbackEventHandler Focusable VisualElement GraphElement Node ProcessGraphNode StepGraphNode RandomBranchGraphNode Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle ISelectable ICollectibleElement Inherited Members StepGraphNode.step StepGraphNode.Name StepGraphNode.EntryPoint StepGraphNode.Outputs StepGraphNode.Position StepGraphNode.Refresh() StepGraphNode.RemovePort(Port) StepGraphNode.RemovePortWithUndo(Port) StepGraphNode.OnSelected() StepGraphNode.SetOutput(int, IStep) StepGraphNode.AddToChapter(IChapter) StepGraphNode.RemoveFromChapter(IChapter) StepGraphNode.UpdateOutputPortName(Port, Node) ProcessGraphNode.deleteIconFileName ProcessGraphNode.editIconFileName ProcessGraphNode.defaultNodeSize ProcessGraphNode.IsEntryPoint ProcessGraphNode.CreatePort(Direction, Port.Capacity) ProcessGraphNode.GetIcon(string) ProcessGraphNode.OpenTextEditor() ProcessGraphNode.OnEditTextFinished(TextField) Node.m_CollapseButton Node.m_ButtonContainer Node.RefreshExpandedState() Node.GetPosition() Node.SetPosition(Rect) Node.OnPortRemoved(Port) Node.InstantiatePort(Orientation, Direction, Port.Capacity, Type) Node.RefreshPorts() Node.ToggleCollapse() Node.UseDefaultStyling() Node.BuildContextualMenu(ContextualMenuPopulateEvent) Node.CollectElements(HashSet<GraphElement>, Func<GraphElement, bool>) Node.mainContainer Node.titleContainer Node.inputContainer Node.outputContainer Node.titleButtonContainer Node.topContainer Node.extensionContainer Node.expanded Node.title GraphElement.ResetLayer() GraphElement.OnCustomStyleResolved(ICustomStyle) GraphElement.IsSelectable() GraphElement.IsMovable() GraphElement.IsResizable() GraphElement.IsDroppable() GraphElement.IsAscendable() GraphElement.IsRenamable() GraphElement.IsCopiable() GraphElement.IsSnappable() GraphElement.IsGroupable() GraphElement.IsStackable() GraphElement.GetGlobalCenter() GraphElement.UpdatePresenterPosition() GraphElement.OnUnselected() GraphElement.HitTest(Vector2) GraphElement.Select(VisualElement, bool) GraphElement.Unselect(VisualElement) GraphElement.IsSelected(VisualElement) GraphElement.elementTypeColor GraphElement.layer GraphElement.showInMiniMap GraphElement.capabilities GraphElement.selected VisualElement.disabledUssClassName VisualElement.ExecuteDefaultAction(EventBase) VisualElement.Focus() VisualElement.SendEvent(EventBase) VisualElement.SetEnabledFromHierarchy(bool) VisualElement.SetEnabled(bool) VisualElement.MarkDirtyRepaint() VisualElement.ContainsPoint(Vector2) VisualElement.Overlaps(Rect) VisualElement.DoMeasure(float, VisualElement.MeasureMode, float, VisualElement.MeasureMode) VisualElement.ToString() VisualElement.GetClasses() VisualElement.ClearClassList() VisualElement.AddToClassList(string) VisualElement.RemoveFromClassList(string) VisualElement.ToggleInClassList(string) VisualElement.EnableInClassList(string, bool) VisualElement.ClassListContains(string) VisualElement.FindAncestorUserData() VisualElement.Add(VisualElement) VisualElement.Insert(int, VisualElement) VisualElement.Remove(VisualElement) VisualElement.RemoveAt(int) VisualElement.Clear() VisualElement.ElementAt(int) VisualElement.IndexOf(VisualElement) VisualElement.Children() VisualElement.Sort(Comparison<VisualElement>) VisualElement.BringToFront() VisualElement.SendToBack() VisualElement.PlaceBehind(VisualElement) VisualElement.PlaceInFront(VisualElement) VisualElement.RemoveFromHierarchy() VisualElement.GetFirstOfType<T>() VisualElement.GetFirstAncestorOfType<T>() VisualElement.Contains(VisualElement) VisualElement.FindCommonAncestor(VisualElement) VisualElement.viewDataKey VisualElement.userData VisualElement.canGrabFocus VisualElement.focusController VisualElement.usageHints VisualElement.transform VisualElement.layout VisualElement.contentRect VisualElement.paddingRect VisualElement.worldBound VisualElement.localBound VisualElement.worldTransform VisualElement.pickingMode VisualElement.name VisualElement.enabledInHierarchy VisualElement.enabledSelf VisualElement.visible VisualElement.generateVisualContent VisualElement.experimental VisualElement.hierarchy VisualElement.cacheAsBitmap VisualElement.parent VisualElement.panel VisualElement.contentContainer VisualElement.visualTreeAssetSource VisualElement.this[int] VisualElement.childCount VisualElement.schedule VisualElement.style VisualElement.customStyle VisualElement.styleSheets VisualElement.tooltip VisualElement.resolvedStyle Focusable.Blur() Focusable.focusable Focusable.tabIndex Focusable.delegatesFocus CallbackEventHandler.RegisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.RegisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TUserArgsType, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TrickleDown) CallbackEventHandler.HandleEvent(EventBase) CallbackEventHandler.HasTrickleDownHandlers() CallbackEventHandler.HasBubbleUpHandlers() CallbackEventHandler.ExecuteDefaultActionAtTarget(EventBase) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RandomBranchGraphNode(IStep) public RandomBranchGraphNode(IStep step) Parameters step IStep Methods AddTransitionPort(bool, int) Adds a potentially deletable transition port to this node. public override Port AddTransitionPort(bool isDeletablePort = true, int index = -1) Parameters isDeletablePort bool If true, a delete button is created which allows to delete the transition. index int Index where to insert the port, if blank it will be added at the end of the list. Returns Port The created port. CreatePortWithUndo() Creates a transition port supporting undo. protected override void CreatePortWithUndo()"
  },
  "api/VRBuilder.Editor.Randomization.UI.Graphics.RandomBranchNodeInstantiator.html": {
    "href": "api/VRBuilder.Editor.Randomization.UI.Graphics.RandomBranchNodeInstantiator.html",
    "title": "Class RandomBranchNodeInstantiator | VR Builder Documentation",
    "keywords": "Class RandomBranchNodeInstantiator Namespace VRBuilder.Editor.Randomization.UI.Graphics Assembly VRBuilder.Editor.Randomization.dll Instantiator for a RandomBranchGraphNode. public class RandomBranchNodeInstantiator : IStepNodeInstantiator Inheritance object RandomBranchNodeInstantiator Implements IStepNodeInstantiator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsInNodeMenu If true, it will appear in the node menu. public bool IsInNodeMenu { get; } Property Value bool Name Display name of the instantiated node. public string Name { get; } Property Value string Priority Nodes with a lower value will appear first in the menu. public int Priority { get; } Property Value int StepType Step type metadata. public string StepType { get; } Property Value string Methods GetContextMenuStatus(IEventHandler, IChapter) Returns the status for the context menu entry to instantiate the node. public DropdownMenuAction.Status GetContextMenuStatus(IEventHandler target, IChapter currentChapter) Parameters target IEventHandler currentChapter IChapter Returns DropdownMenuAction.Status InstantiateNode(IStep) Creates a graphview node of the corresponding type. public ProcessGraphNode InstantiateNode(IStep step) Parameters step IStep Returns ProcessGraphNode"
  },
  "api/VRBuilder.Editor.Randomization.UI.Graphics.html": {
    "href": "api/VRBuilder.Editor.Randomization.UI.Graphics.html",
    "title": "Namespace VRBuilder.Editor.Randomization.UI.Graphics | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.Randomization.UI.Graphics Classes RandomBranchGraphNode Graphical representation of a random branch node. RandomBranchNodeInstantiator Instantiator for a RandomBranchGraphNode."
  },
  "api/VRBuilder.Editor.SceneSetup.html": {
    "href": "api/VRBuilder.Editor.SceneSetup.html",
    "title": "Class SceneSetup | VR Builder Documentation",
    "keywords": "Class SceneSetup Namespace VRBuilder.Editor Assembly VRBuilder.Editor.dll This base class is supposed to be implemented by classes which will be called to setup the scene. Can be used to e.g. setup process classes or interaction frameworks. public abstract class SceneSetup Inheritance object SceneSetup Derived InteractionFrameworkSceneSetup DefaultRigSceneSetup RigLoaderSceneSetup ProcessControllerSceneSetup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See ProcessConfigurationSetup as a reference. Properties Key Identifier key for specific scene setup types, e.g. for every interaction framework. public virtual string Key { get; } Property Value string Priority Priority lets you tweak in which order different SceneSetups will be performed. The priority is considered from lowest to highest. public virtual int Priority { get; } Property Value int Methods FindPrefab(string) Finds and returns a prefab protected GameObject FindPrefab(string prefab) Parameters prefab string Name or path to the target resource to setup. Returns GameObject Remarks Extensions must be omitted. All asset names and paths in Unity use forward slashes, paths using backslashes will not work. Exceptions FileNotFoundException Exception thrown if no prefab can be found in project with given prefab. IsPrefabMissingInScene(string) Returns true if given prefabName is missing in current scene. protected bool IsPrefabMissingInScene(string prefabName) Parameters prefabName string Returns bool Setup(ISceneSetupConfiguration) Setup the scene with necessary objects and/or logic. public abstract void Setup(ISceneSetupConfiguration configuration) Parameters configuration ISceneSetupConfiguration SetupPrefab(string) Sets up given prefab in current scene. protected GameObject SetupPrefab(string prefab) Parameters prefab string Name or path to the target resource to setup. Returns GameObject Remarks Extensions must be omitted. All asset names and paths in Unity use forward slashes, paths using backslashes will not work. Exceptions FileNotFoundException Exception thrown if no prefab can be found in project with given prefab."
  },
  "api/VRBuilder.Editor.Serialization.JsonEditorConfigurationSerializer.html": {
    "href": "api/VRBuilder.Editor.Serialization.JsonEditorConfigurationSerializer.html",
    "title": "Class JsonEditorConfigurationSerializer | VR Builder Documentation",
    "keywords": "Class JsonEditorConfigurationSerializer Namespace VRBuilder.Editor.Serialization Assembly VRBuilder.Editor.dll public static class JsonEditorConfigurationSerializer Inheritance object JsonEditorConfigurationSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SerializerSettings Returns the json serializer settings used by the process editor configuration deserialization. public static JsonSerializerSettings SerializerSettings { get; } Property Value JsonSerializerSettings Methods Deserialize(string) public static AllowedMenuItemsSettings Deserialize(string serialized) Parameters serialized string Returns AllowedMenuItemsSettings Serialize(AllowedMenuItemsSettings) public static string Serialize(AllowedMenuItemsSettings deserialized) Parameters deserialized AllowedMenuItemsSettings Returns string"
  },
  "api/VRBuilder.Editor.Serialization.html": {
    "href": "api/VRBuilder.Editor.Serialization.html",
    "title": "Namespace VRBuilder.Editor.Serialization | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.Serialization Classes JsonEditorConfigurationSerializer"
  },
  "api/VRBuilder.Editor.Settings.BuilderProjectSettings.html": {
    "href": "api/VRBuilder.Editor.Settings.BuilderProjectSettings.html",
    "title": "Class BuilderProjectSettings | VR Builder Documentation",
    "keywords": "Class BuilderProjectSettings Namespace VRBuilder.Editor.Settings Assembly VRBuilder.Editor.dll Settings for a VR Builder Unity project. public class BuilderProjectSettings : ScriptableObject Inheritance object Object ScriptableObject BuilderProjectSettings Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields IsFirstTimeStarted Was VR Builder imported and therefore started for the first time. [HideInInspector] public bool IsFirstTimeStarted Field Value bool OpenXRControllerProfiles [HideInInspector] [SerializeField] public List<string> OpenXRControllerProfiles Field Value List<string> ProjectBuilderVersion Builder version used last time this was checked. [HideInInspector] public string ProjectBuilderVersion Field Value string XRSDKs [HideInInspector] [SerializeField] public List<XRLoaderHelper.XRSDK> XRSDKs Field Value List<XRLoaderHelper.XRSDK> Methods Load() Loads the VR Builder settings for this Unity project from Resources. public static BuilderProjectSettings Load() Returns BuilderProjectSettings Settings Save() Saves the VR Builder settings. public void Save()"
  },
  "api/VRBuilder.Editor.Settings.InteractionComponentSettings.html": {
    "href": "api/VRBuilder.Editor.Settings.InteractionComponentSettings.html",
    "title": "Class InteractionComponentSettings | VR Builder Documentation",
    "keywords": "Class InteractionComponentSettings Namespace VRBuilder.Editor.Settings Assembly VRBuilder.Editor.dll Settings related to VR Builder's interaction component. [CreateAssetMenu(fileName = \"InteractionComponentSettings\", menuName = \"VR Builder/InteractionComponentSettings\", order = 1)] public class InteractionComponentSettings : SettingsObject<InteractionComponentSettings> Inheritance object Object ScriptableObject SettingsObject<InteractionComponentSettings> InteractionComponentSettings Inherited Members SettingsObject<InteractionComponentSettings>.Instance SettingsObject<InteractionComponentSettings>.Save() ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields EnableXRInteractionComponent [SerializeField] [Tooltip(\"Enables VR Builder's built-in XR Interaction Component. You may want to disable this if you are using a custom interaction component, like a partner integration.\")] public bool EnableXRInteractionComponent Field Value bool"
  },
  "api/VRBuilder.Editor.Settings.html": {
    "href": "api/VRBuilder.Editor.Settings.html",
    "title": "Namespace VRBuilder.Editor.Settings | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.Settings Classes BuilderProjectSettings Settings for a VR Builder Unity project. InteractionComponentSettings Settings related to VR Builder's interaction component."
  },
  "api/VRBuilder.Editor.Setup.DefaultSceneSetupConfiguration.html": {
    "href": "api/VRBuilder.Editor.Setup.DefaultSceneSetupConfiguration.html",
    "title": "Class DefaultSceneSetupConfiguration | VR Builder Documentation",
    "keywords": "Class DefaultSceneSetupConfiguration Namespace VRBuilder.Editor.Setup Assembly VRBuilder.Editor.dll Default configuration. public class DefaultSceneSetupConfiguration : ISceneSetupConfiguration Inheritance object DefaultSceneSetupConfiguration Implements ISceneSetupConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllowedExtensionAssemblies Returns the names of the assemblies which contain allowed extensions. public IEnumerable<string> AllowedExtensionAssemblies { get; } Property Value IEnumerable<string> DefaultConfettiPrefab Default resources prefab to use for Confetti behavior. public string DefaultConfettiPrefab { get; } Property Value string DefaultProcessController Default process controller to use in this configuration. public string DefaultProcessController { get; } Property Value string Description Detailed description of the configuration. public string Description { get; } Property Value string Name Display name of the configuration. public string Name { get; } Property Value string Priority Priority of this configuration. public int Priority { get; } Property Value int RuntimeConfigurationName Name of the runtime configuration to use. public string RuntimeConfigurationName { get; } Property Value string Methods GetSetupNames() Gets the required scene setup actions for this configuration. public IEnumerable<string> GetSetupNames() Returns IEnumerable<string>"
  },
  "api/VRBuilder.Editor.Setup.ISceneSetupConfiguration.html": {
    "href": "api/VRBuilder.Editor.Setup.ISceneSetupConfiguration.html",
    "title": "Interface ISceneSetupConfiguration | VR Builder Documentation",
    "keywords": "Interface ISceneSetupConfiguration Namespace VRBuilder.Editor.Setup Assembly VRBuilder.Editor.dll Defines the configuration for a particular scene setup. public interface ISceneSetupConfiguration Properties AllowedExtensionAssemblies Returns the names of the assemblies which contain allowed extensions. IEnumerable<string> AllowedExtensionAssemblies { get; } Property Value IEnumerable<string> DefaultConfettiPrefab Default resources prefab to use for Confetti behavior. string DefaultConfettiPrefab { get; } Property Value string DefaultProcessController Default process controller to use in this configuration. string DefaultProcessController { get; } Property Value string Description Detailed description of the configuration. string Description { get; } Property Value string Name Display name of the configuration. string Name { get; } Property Value string Priority Priority of this configuration. int Priority { get; } Property Value int RuntimeConfigurationName Name of the runtime configuration to use. string RuntimeConfigurationName { get; } Property Value string Methods GetSetupNames() Gets the required scene setup actions for this configuration. IEnumerable<string> GetSetupNames() Returns IEnumerable<string>"
  },
  "api/VRBuilder.Editor.Setup.InputSystemChecker.html": {
    "href": "api/VRBuilder.Editor.Setup.InputSystemChecker.html",
    "title": "Class InputSystemChecker | VR Builder Documentation",
    "keywords": "Class InputSystemChecker Namespace VRBuilder.Editor.Setup Assembly VRBuilder.Editor.dll [InitializeOnLoad] public static class InputSystemChecker Inheritance object InputSystemChecker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.Setup.RigLoaderSceneSetupConfiguration.html": {
    "href": "api/VRBuilder.Editor.Setup.RigLoaderSceneSetupConfiguration.html",
    "title": "Class RigLoaderSceneSetupConfiguration | VR Builder Documentation",
    "keywords": "Class RigLoaderSceneSetupConfiguration Namespace VRBuilder.Editor.Setup Assembly VRBuilder.Editor.dll Basic configuration with rig loader. public class RigLoaderSceneSetupConfiguration : ISceneSetupConfiguration Inheritance object RigLoaderSceneSetupConfiguration Implements ISceneSetupConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllowedExtensionAssemblies Returns the names of the assemblies which contain allowed extensions. public IEnumerable<string> AllowedExtensionAssemblies { get; } Property Value IEnumerable<string> DefaultConfettiPrefab Default resources prefab to use for Confetti behavior. public string DefaultConfettiPrefab { get; } Property Value string DefaultProcessController Default process controller to use in this configuration. public string DefaultProcessController { get; } Property Value string Description Detailed description of the configuration. public string Description { get; } Property Value string Name Display name of the configuration. public string Name { get; } Property Value string Priority Priority of this configuration. public int Priority { get; } Property Value int RuntimeConfigurationName Name of the runtime configuration to use. public string RuntimeConfigurationName { get; } Property Value string Methods GetSetupNames() Gets the required scene setup actions for this configuration. public IEnumerable<string> GetSetupNames() Returns IEnumerable<string>"
  },
  "api/VRBuilder.Editor.Setup.html": {
    "href": "api/VRBuilder.Editor.Setup.html",
    "title": "Namespace VRBuilder.Editor.Setup | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.Setup Classes DefaultSceneSetupConfiguration Default configuration. InputSystemChecker RigLoaderSceneSetupConfiguration Basic configuration with rig loader. Interfaces ISceneSetupConfiguration Defines the configuration for a particular scene setup."
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.MathOperationMenuItem.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.MathOperationMenuItem.html",
    "title": "Class MathOperationMenuItem | VR Builder Documentation",
    "keywords": "Class MathOperationMenuItem Namespace VRBuilder.Editor.StatesAndData.UI.Behaviors Assembly VRBuilder.Editor.StatesAndData.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class MathOperationMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> MathOperationMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.ResetValueMenuItem.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.ResetValueMenuItem.html",
    "title": "Class ResetValueMenuItem | VR Builder Documentation",
    "keywords": "Class ResetValueMenuItem Namespace VRBuilder.Editor.StatesAndData.UI.Behaviors Assembly VRBuilder.Editor.StatesAndData.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class ResetValueMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> ResetValueMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.SetBooleanValueMenuItem.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.SetBooleanValueMenuItem.html",
    "title": "Class SetBooleanValueMenuItem | VR Builder Documentation",
    "keywords": "Class SetBooleanValueMenuItem Namespace VRBuilder.Editor.StatesAndData.UI.Behaviors Assembly VRBuilder.Editor.StatesAndData.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetBooleanValueMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetBooleanValueMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.SetNumberValueMenuItem.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.SetNumberValueMenuItem.html",
    "title": "Class SetNumberValueMenuItem | VR Builder Documentation",
    "keywords": "Class SetNumberValueMenuItem Namespace VRBuilder.Editor.StatesAndData.UI.Behaviors Assembly VRBuilder.Editor.StatesAndData.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetNumberValueMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetNumberValueMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.SetStateValueMenuItem.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.SetStateValueMenuItem.html",
    "title": "Class SetStateValueMenuItem | VR Builder Documentation",
    "keywords": "Class SetStateValueMenuItem Namespace VRBuilder.Editor.StatesAndData.UI.Behaviors Assembly VRBuilder.Editor.StatesAndData.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetStateValueMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetStateValueMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.SetTextValueMenuItem.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.SetTextValueMenuItem.html",
    "title": "Class SetTextValueMenuItem | VR Builder Documentation",
    "keywords": "Class SetTextValueMenuItem Namespace VRBuilder.Editor.StatesAndData.UI.Behaviors Assembly VRBuilder.Editor.StatesAndData.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetTextValueMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetTextValueMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.TriggerBooleanEventByTagMenuItem.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.TriggerBooleanEventByTagMenuItem.html",
    "title": "Class TriggerBooleanEventByTagMenuItem | VR Builder Documentation",
    "keywords": "Class TriggerBooleanEventByTagMenuItem Namespace VRBuilder.Editor.StatesAndData.UI.Behaviors Assembly VRBuilder.Editor.StatesAndData.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class TriggerBooleanEventByTagMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> TriggerBooleanEventByTagMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.TriggerEventMenuItem.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.TriggerEventMenuItem.html",
    "title": "Class TriggerEventMenuItem | VR Builder Documentation",
    "keywords": "Class TriggerEventMenuItem Namespace VRBuilder.Editor.StatesAndData.UI.Behaviors Assembly VRBuilder.Editor.StatesAndData.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class TriggerEventMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> TriggerEventMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.TriggerFloatEventMenuItem.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.TriggerFloatEventMenuItem.html",
    "title": "Class TriggerFloatEventMenuItem | VR Builder Documentation",
    "keywords": "Class TriggerFloatEventMenuItem Namespace VRBuilder.Editor.StatesAndData.UI.Behaviors Assembly VRBuilder.Editor.StatesAndData.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class TriggerFloatEventMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> TriggerFloatEventMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.TriggerStringEventMenuItem.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.TriggerStringEventMenuItem.html",
    "title": "Class TriggerStringEventMenuItem | VR Builder Documentation",
    "keywords": "Class TriggerStringEventMenuItem Namespace VRBuilder.Editor.StatesAndData.UI.Behaviors Assembly VRBuilder.Editor.StatesAndData.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class TriggerStringEventMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> TriggerStringEventMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Behaviors.html",
    "title": "Namespace VRBuilder.Editor.StatesAndData.UI.Behaviors | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.StatesAndData.UI.Behaviors Classes MathOperationMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). ResetValueMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetBooleanValueMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetNumberValueMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetStateValueMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetTextValueMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). TriggerBooleanEventByTagMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). TriggerEventMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). TriggerFloatEventMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). TriggerStringEventMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem()."
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Conditions.CheckStateMenuItem.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Conditions.CheckStateMenuItem.html",
    "title": "Class CheckStateMenuItem | VR Builder Documentation",
    "keywords": "Class CheckStateMenuItem Namespace VRBuilder.Editor.StatesAndData.UI.Conditions Assembly VRBuilder.Editor.StatesAndData.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class CheckStateMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> CheckStateMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Conditions.CompareBooleansMenuItem.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Conditions.CompareBooleansMenuItem.html",
    "title": "Class CompareBooleansMenuItem | VR Builder Documentation",
    "keywords": "Class CompareBooleansMenuItem Namespace VRBuilder.Editor.StatesAndData.UI.Conditions Assembly VRBuilder.Editor.StatesAndData.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class CompareBooleansMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> CompareBooleansMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Conditions.CompareNumbersMenuItem.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Conditions.CompareNumbersMenuItem.html",
    "title": "Class CompareNumbersMenuItem | VR Builder Documentation",
    "keywords": "Class CompareNumbersMenuItem Namespace VRBuilder.Editor.StatesAndData.UI.Conditions Assembly VRBuilder.Editor.StatesAndData.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class CompareNumbersMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> CompareNumbersMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Conditions.CompareTextMenuItem.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Conditions.CompareTextMenuItem.html",
    "title": "Class CompareTextMenuItem | VR Builder Documentation",
    "keywords": "Class CompareTextMenuItem Namespace VRBuilder.Editor.StatesAndData.UI.Conditions Assembly VRBuilder.Editor.StatesAndData.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class CompareTextMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> CompareTextMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Conditions.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Conditions.html",
    "title": "Namespace VRBuilder.Editor.StatesAndData.UI.Conditions | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.StatesAndData.UI.Conditions Classes CheckStateMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). CompareBooleansMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). CompareNumbersMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). CompareTextMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem()."
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Drawers.CheckStateDrawer.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Drawers.CheckStateDrawer.html",
    "title": "Class CheckStateDrawer | VR Builder Documentation",
    "keywords": "Class CheckStateDrawer Namespace VRBuilder.Editor.StatesAndData.UI.Drawers Assembly VRBuilder.Editor.StatesAndData.dll Custom drawer for CheckStateCondition. [DefaultProcessDrawer(typeof(CheckStateCondition.EntityData))] public class CheckStateDrawer : NameableDrawer, IProcessDrawer Inheritance object AbstractDrawer ObjectDrawer NameableDrawer CheckStateDrawer Implements IProcessDrawer Inherited Members NameableDrawer.DrawLabel(Rect, object, Action<object>, GUIContent) ObjectDrawer.CheckValidationForValue(object, MemberInfo, GUIContent) ObjectDrawer.AddValidationInformation(GUIContent, List<EditorReportEntry>) ObjectDrawer.GetValidationReports(object) ObjectDrawer.GetValidationReportsFor(IData, MemberInfo) ObjectDrawer.GetLabel(MemberInfo, object) ObjectDrawer.GetLabel(object, Type) ObjectDrawer.GetMembersToDraw(object) ObjectDrawer.GetTypeNameLabel(object, Type) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property."
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Drawers.SetStateDrawer.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Drawers.SetStateDrawer.html",
    "title": "Class SetStateDrawer | VR Builder Documentation",
    "keywords": "Class SetStateDrawer Namespace VRBuilder.Editor.StatesAndData.UI.Drawers Assembly VRBuilder.Editor.StatesAndData.dll Custom drawer for SetStateBehavior. [DefaultProcessDrawer(typeof(SetStateBehavior.EntityData))] public class SetStateDrawer : NameableDrawer, IProcessDrawer Inheritance object AbstractDrawer ObjectDrawer NameableDrawer SetStateDrawer Implements IProcessDrawer Inherited Members NameableDrawer.DrawLabel(Rect, object, Action<object>, GUIContent) ObjectDrawer.CheckValidationForValue(object, MemberInfo, GUIContent) ObjectDrawer.AddValidationInformation(GUIContent, List<EditorReportEntry>) ObjectDrawer.GetValidationReports(object) ObjectDrawer.GetValidationReportsFor(IData, MemberInfo) ObjectDrawer.GetLabel(MemberInfo, object) ObjectDrawer.GetLabel(object, Type) ObjectDrawer.GetMembersToDraw(object) ObjectDrawer.GetTypeNameLabel(object, Type) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property."
  },
  "api/VRBuilder.Editor.StatesAndData.UI.Drawers.html": {
    "href": "api/VRBuilder.Editor.StatesAndData.UI.Drawers.html",
    "title": "Namespace VRBuilder.Editor.StatesAndData.UI.Drawers | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.StatesAndData.UI.Drawers Classes CheckStateDrawer Custom drawer for CheckStateCondition. SetStateDrawer Custom drawer for SetStateBehavior."
  },
  "api/VRBuilder.Editor.TestableEditorElements.DisabledMenuItem.html": {
    "href": "api/VRBuilder.Editor.TestableEditorElements.DisabledMenuItem.html",
    "title": "Class TestableEditorElements.DisabledMenuItem | VR Builder Documentation",
    "keywords": "Class TestableEditorElements.DisabledMenuItem Namespace VRBuilder.Editor Assembly VRBuilder.Editor.dll public sealed class TestableEditorElements.DisabledMenuItem : TestableEditorElements.MenuOption Inheritance object TestableEditorElements.MenuOption TestableEditorElements.DisabledMenuItem Inherited Members TestableEditorElements.MenuOption.Label object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DisabledMenuItem(GUIContent) public DisabledMenuItem(GUIContent label) Parameters label GUIContent"
  },
  "api/VRBuilder.Editor.TestableEditorElements.DisplayMode.html": {
    "href": "api/VRBuilder.Editor.TestableEditorElements.DisplayMode.html",
    "title": "Enum TestableEditorElements.DisplayMode | VR Builder Documentation",
    "keywords": "Enum TestableEditorElements.DisplayMode Namespace VRBuilder.Editor Assembly VRBuilder.Editor.dll public enum TestableEditorElements.DisplayMode Fields Normal = 0 Playback = 2 Recording = 1"
  },
  "api/VRBuilder.Editor.TestableEditorElements.MenuItem.html": {
    "href": "api/VRBuilder.Editor.TestableEditorElements.MenuItem.html",
    "title": "Class TestableEditorElements.MenuItem | VR Builder Documentation",
    "keywords": "Class TestableEditorElements.MenuItem Namespace VRBuilder.Editor Assembly VRBuilder.Editor.dll public sealed class TestableEditorElements.MenuItem : TestableEditorElements.MenuOption Inheritance object TestableEditorElements.MenuOption TestableEditorElements.MenuItem Inherited Members TestableEditorElements.MenuOption.Label object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MenuItem(GUIContent, bool, MenuFunction) public MenuItem(GUIContent label, bool on, GenericMenu.MenuFunction func) Parameters label GUIContent on bool func GenericMenu.MenuFunction MenuItem(GUIContent, bool, MenuFunction2, object) public MenuItem(GUIContent label, bool on, GenericMenu.MenuFunction2 func, object userData) Parameters label GUIContent on bool func GenericMenu.MenuFunction2 userData object Properties Func public GenericMenu.MenuFunction Func { get; } Property Value GenericMenu.MenuFunction Func2 public GenericMenu.MenuFunction2 Func2 { get; } Property Value GenericMenu.MenuFunction2 On public bool On { get; } Property Value bool UserData public object UserData { get; } Property Value object"
  },
  "api/VRBuilder.Editor.TestableEditorElements.MenuOption.html": {
    "href": "api/VRBuilder.Editor.TestableEditorElements.MenuOption.html",
    "title": "Class TestableEditorElements.MenuOption | VR Builder Documentation",
    "keywords": "Class TestableEditorElements.MenuOption Namespace VRBuilder.Editor Assembly VRBuilder.Editor.dll public class TestableEditorElements.MenuOption Inheritance object TestableEditorElements.MenuOption Derived TestableEditorElements.DisabledMenuItem TestableEditorElements.MenuItem TestableEditorElements.MenuSeparator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MenuOption(GUIContent) protected MenuOption(GUIContent label) Parameters label GUIContent Properties Label public GUIContent Label { get; } Property Value GUIContent"
  },
  "api/VRBuilder.Editor.TestableEditorElements.MenuSeparator.html": {
    "href": "api/VRBuilder.Editor.TestableEditorElements.MenuSeparator.html",
    "title": "Class TestableEditorElements.MenuSeparator | VR Builder Documentation",
    "keywords": "Class TestableEditorElements.MenuSeparator Namespace VRBuilder.Editor Assembly VRBuilder.Editor.dll public sealed class TestableEditorElements.MenuSeparator : TestableEditorElements.MenuOption Inheritance object TestableEditorElements.MenuOption TestableEditorElements.MenuSeparator Inherited Members TestableEditorElements.MenuOption.Label object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MenuSeparator(string) public MenuSeparator(string pathToSubmenu) Parameters pathToSubmenu string"
  },
  "api/VRBuilder.Editor.TestableEditorElements.html": {
    "href": "api/VRBuilder.Editor.TestableEditorElements.html",
    "title": "Class TestableEditorElements | VR Builder Documentation",
    "keywords": "Class TestableEditorElements Namespace VRBuilder.Editor Assembly VRBuilder.Editor.dll public static class TestableEditorElements Inheritance object TestableEditorElements Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Mode public static TestableEditorElements.DisplayMode Mode { get; } Property Value TestableEditorElements.DisplayMode Methods ClearProgressBar() public static void ClearProgressBar() DisplayCancelableProgressBar(string, string, float) If you want to be able to test your editor windows, you should use EditorUtils instead of EditorUtility. If EditorUtils.Mode is set to Recording, it saves the user input. If EditorUtils.Mode is set to Playback, it returns a stored value instead of actually calling its EditorUtility counterpart. IF EditorUtils.Mode is set to Normal, it just calls its EditorUtility counterpart. public static bool DisplayCancelableProgressBar(string title, string info, float progress) Parameters title string info string progress float Returns bool DisplayContextMenu(IList<MenuOption>) public static void DisplayContextMenu(IList<TestableEditorElements.MenuOption> options) Parameters options IList<TestableEditorElements.MenuOption> DisplayDialog(string, string, string, string) DisplayCancelableProgressBar(string, string, float) public static bool DisplayDialog(string title, string message, string ok, string cancel = \"\") Parameters title string message string ok string cancel string Returns bool DisplayDialogComplex(string, string, string, string, string) DisplayCancelableProgressBar(string, string, float) public static int DisplayDialogComplex(string title, string message, string ok, string cancel, string alt) Parameters title string message string ok string cancel string alt string Returns int DisplayDropdownMenu(Rect, IList<MenuOption>) public static void DisplayDropdownMenu(Rect position, IList<TestableEditorElements.MenuOption> options) Parameters position Rect options IList<TestableEditorElements.MenuOption> DisplayProgressBar(string, string, float) DisplayCancelableProgressBar(string, string, float) public static void DisplayProgressBar(string title, string info, float progress) Parameters title string info string progress float OpenFilePanel(string, string, string) DisplayCancelableProgressBar(string, string, float) public static string OpenFilePanel(string title, string directory, string extension) Parameters title string directory string extension string Returns string OpenFilePanelWithFilters(string, string, string[]) DisplayCancelableProgressBar(string, string, float) public static string OpenFilePanelWithFilters(string title, string directory, string[] filters) Parameters title string directory string filters string[] Returns string OpenFolderPanel(string, string, string) DisplayCancelableProgressBar(string, string, float) public static string OpenFolderPanel(string title, string folder, string defaultName) Parameters title string folder string defaultName string Returns string Panic() Stop recording/replaying user actions and clear the stack. public static void Panic() SaveFilePanel(string, string, string, string) DisplayCancelableProgressBar(string, string, float) public static string SaveFilePanel(string title, string directory, string defaultName, string extension) Parameters title string directory string defaultName string extension string Returns string SaveFilePanelInProject(string, string, string, string) DisplayCancelableProgressBar(string, string, float) public static string SaveFilePanelInProject(string title, string defaultName, string extension, string message) Parameters title string defaultName string extension string message string Returns string SaveFolderPanel(string, string, string) DisplayCancelableProgressBar(string, string, float) public static string SaveFolderPanel(string title, string folder, string defaultName) Parameters title string folder string defaultName string Returns string StartPlayback(List<string>) public static void StartPlayback(List<string> selections) Parameters selections List<string> StartRecording() public static void StartRecording() StopPlayback() public static void StopPlayback() StopRecording() public static List<string> StopRecording() Returns List<string>"
  },
  "api/VRBuilder.Editor.TextToSpeech.DummyTextToSpeechProvider.html": {
    "href": "api/VRBuilder.Editor.TextToSpeech.DummyTextToSpeechProvider.html",
    "title": "Class DummyTextToSpeechProvider | VR Builder Documentation",
    "keywords": "Class DummyTextToSpeechProvider Namespace VRBuilder.Editor.TextToSpeech Assembly VRBuilder.Editor.TextToSpeech.dll Dummy provider that creates empty files, useful in case of compatibility issues. public class DummyTextToSpeechProvider : ITextToSpeechProvider Inheritance object DummyTextToSpeechProvider Implements ITextToSpeechProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConvertTextToSpeech(string, Locale) Loads the AudioClip file for the given text. public Task<AudioClip> ConvertTextToSpeech(string text, Locale locale) Parameters text string locale Locale Returns Task<AudioClip> SetConfig(TextToSpeechConfiguration) Used for setting the config file. public void SetConfig(TextToSpeechConfiguration configuration) Parameters configuration TextToSpeechConfiguration"
  },
  "api/VRBuilder.Editor.TextToSpeech.MicrosoftSapiTextToSpeechProvider.html": {
    "href": "api/VRBuilder.Editor.TextToSpeech.MicrosoftSapiTextToSpeechProvider.html",
    "title": "Class MicrosoftSapiTextToSpeechProvider | VR Builder Documentation",
    "keywords": "Class MicrosoftSapiTextToSpeechProvider Namespace VRBuilder.Editor.TextToSpeech Assembly VRBuilder.Editor.TextToSpeech.dll TTS provider which uses Microsoft SAPI to generate audio. TextToSpeechConfig.Voice has to be either \"male\", \"female\", or \"neutral\". TextToSpeechConfig.Language is a language code (\"de\" or \"de-DE\" for German, \"en\" or \"en-US\" for English). It runs the TTS synthesis in a separate thread, saving the result to a temporary cache file. public class MicrosoftSapiTextToSpeechProvider : ITextToSpeechProvider Inheritance object MicrosoftSapiTextToSpeechProvider Implements ITextToSpeechProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConvertTextToSpeech(string, Locale) Loads the AudioClip file for the given text. public Task<AudioClip> ConvertTextToSpeech(string text, Locale locale) Parameters text string locale Locale Returns Task<AudioClip> SetConfig(TextToSpeechConfiguration) Used for setting the config file. public void SetConfig(TextToSpeechConfiguration configuration) Parameters configuration TextToSpeechConfiguration"
  },
  "api/VRBuilder.Editor.TextToSpeech.NAudioConverter.html": {
    "href": "api/VRBuilder.Editor.TextToSpeech.NAudioConverter.html",
    "title": "Class NAudioConverter | VR Builder Documentation",
    "keywords": "Class NAudioConverter Namespace VRBuilder.Editor.TextToSpeech Assembly VRBuilder.Editor.TextToSpeech.dll This AudioConverter uses NAudio to convert audios. public class NAudioConverter : IAudioConverter Inheritance object NAudioConverter Implements IAudioConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateAudioClipFromMp3(byte[]) This method uses NAudio to convert a mp3 file given as byte array to an AudioClip in .wav format. public AudioClip CreateAudioClipFromMp3(byte[] data) Parameters data byte[] Data are the bytes of an mp3 file Returns AudioClip CreateAudioClipFromWAVE(byte[]) This method uses NAudio to convert a wave file given as byte array to an AudioClip in .wav format. public AudioClip CreateAudioClipFromWAVE(byte[] data) Parameters data byte[] Data are the bytes of a wave file Returns AudioClip TryWriteAudioClipToFile(AudioClip, string) This method uses NAudio to create .wav file on disk using a given AudioClip. public bool TryWriteAudioClipToFile(AudioClip audio, string filePath) Parameters audio AudioClip AudioClip to export filePath string Path with filename Returns bool Returns if the AudioClip could was written to a file on disk."
  },
  "api/VRBuilder.Editor.TextToSpeech.TextToSpeechBuildPreprocessor.html": {
    "href": "api/VRBuilder.Editor.TextToSpeech.TextToSpeechBuildPreprocessor.html",
    "title": "Class TextToSpeechBuildPreprocessor | VR Builder Documentation",
    "keywords": "Class TextToSpeechBuildPreprocessor Namespace VRBuilder.Editor.TextToSpeech Assembly VRBuilder.Editor.TextToSpeech.dll Generates TTS files for all processes before a build. public class TextToSpeechBuildPreprocessor : IPreprocessBuildWithReport, IOrderedCallback Inheritance object TextToSpeechBuildPreprocessor Implements IPreprocessBuildWithReport IOrderedCallback Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties callbackOrder Returns the relative callback order for callbacks. Callbacks with lower values are called before ones with higher values. public int callbackOrder { get; } Property Value int Methods OnPreprocessBuild(BuildReport) Generates TTS files for all processes before a build. public void OnPreprocessBuild(BuildReport report) Parameters report BuildReport"
  },
  "api/VRBuilder.Editor.TextToSpeech.TextToSpeechEditorUtils.html": {
    "href": "api/VRBuilder.Editor.TextToSpeech.TextToSpeechEditorUtils.html",
    "title": "Class TextToSpeechEditorUtils | VR Builder Documentation",
    "keywords": "Class TextToSpeechEditorUtils Namespace VRBuilder.Editor.TextToSpeech Assembly VRBuilder.Editor.TextToSpeech.dll public static class TextToSpeechEditorUtils Inheritance object TextToSpeechEditorUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CacheAudioClip(string, Locale, TextToSpeechConfiguration) Generates TTS audio and creates a file. public static Task CacheAudioClip(string text, Locale locale, TextToSpeechConfiguration configuration) Parameters text string locale Locale configuration TextToSpeechConfiguration Returns Task CacheTextToSpeechClips(IEnumerable<ITextToSpeechContent>, Locale, string) Generates files for all TextToSpeechAudio passed. public static Task<int> CacheTextToSpeechClips(IEnumerable<ITextToSpeechContent> clips, Locale locale, string localizationTable) Parameters clips IEnumerable<ITextToSpeechContent> locale Locale localizationTable string Returns Task<int> GenerateTextToSpeechForAllProcesses() Generates TTS audio files for all project locales for all processes. public static void GenerateTextToSpeechForAllProcesses() GenerateTextToSpeechForAllProcesses(Locale) Generates TTS audio files for all available processes for the specified locale. public static Task GenerateTextToSpeechForAllProcesses(Locale locale) Parameters locale Locale The locale for which audio files should be generated. Returns Task GenerateTextToSpeechForAllProcessesAndActiveOrDefaultLocale() Generates TTS audio files for the the active or default locale for all processes. public static void GenerateTextToSpeechForAllProcessesAndActiveOrDefaultLocale()"
  },
  "api/VRBuilder.Editor.TextToSpeech.UI.Behaviors.TextToSpeechMenuItem.html": {
    "href": "api/VRBuilder.Editor.TextToSpeech.UI.Behaviors.TextToSpeechMenuItem.html",
    "title": "Class TextToSpeechMenuItem | VR Builder Documentation",
    "keywords": "Class TextToSpeechMenuItem Namespace VRBuilder.Editor.TextToSpeech.UI.Behaviors Assembly VRBuilder.Editor.TextToSpeech.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class TextToSpeechMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> TextToSpeechMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.TextToSpeech.UI.Behaviors.html": {
    "href": "api/VRBuilder.Editor.TextToSpeech.UI.Behaviors.html",
    "title": "Namespace VRBuilder.Editor.TextToSpeech.UI.Behaviors | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.TextToSpeech.UI.Behaviors Classes TextToSpeechMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem()."
  },
  "api/VRBuilder.Editor.TextToSpeech.UI.ProjectSettings.TextToSpeechSectionProvider.html": {
    "href": "api/VRBuilder.Editor.TextToSpeech.UI.ProjectSettings.TextToSpeechSectionProvider.html",
    "title": "Class TextToSpeechSectionProvider | VR Builder Documentation",
    "keywords": "Class TextToSpeechSectionProvider Namespace VRBuilder.Editor.TextToSpeech.UI.ProjectSettings Assembly VRBuilder.Editor.TextToSpeech.dll Provides text to speech settings. public class TextToSpeechSectionProvider : IProjectSettingsSection Inheritance object TextToSpeechSectionProvider Implements IProjectSettingsSection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Priority Determines the draw order, lower priority will be drawn first. public int Priority { get; } Property Value int TargetPageProvider Type of the target setting provider. public Type TargetPageProvider { get; } Property Value Type Title Title of this section. public string Title { get; } Property Value string Methods ~TextToSpeechSectionProvider() protected ~TextToSpeechSectionProvider() OnGUI(string) Your draw call. public void OnGUI(string searchContext) Parameters searchContext string"
  },
  "api/VRBuilder.Editor.TextToSpeech.UI.ProjectSettings.html": {
    "href": "api/VRBuilder.Editor.TextToSpeech.UI.ProjectSettings.html",
    "title": "Namespace VRBuilder.Editor.TextToSpeech.UI.ProjectSettings | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.TextToSpeech.UI.ProjectSettings Classes TextToSpeechSectionProvider Provides text to speech settings."
  },
  "api/VRBuilder.Editor.TextToSpeech.UI.TextToSpeechConfigurationEditor.html": {
    "href": "api/VRBuilder.Editor.TextToSpeech.UI.TextToSpeechConfigurationEditor.html",
    "title": "Class TextToSpeechConfigurationEditor | VR Builder Documentation",
    "keywords": "Class TextToSpeechConfigurationEditor Namespace VRBuilder.Editor.TextToSpeech.UI Assembly VRBuilder.Editor.TextToSpeech.dll This class draws list of ITextToSpeechProvider in textToSpeechConfiguration. [CustomEditor(typeof(TextToSpeechConfiguration))] public class TextToSpeechConfigurationEditor : Editor Inheritance object Object ScriptableObject Editor TextToSpeechConfigurationEditor Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/VRBuilder.Editor.TextToSpeech.UI.html": {
    "href": "api/VRBuilder.Editor.TextToSpeech.UI.html",
    "title": "Namespace VRBuilder.Editor.TextToSpeech.UI | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.TextToSpeech.UI Classes TextToSpeechConfigurationEditor This class draws list of ITextToSpeechProvider in textToSpeechConfiguration."
  },
  "api/VRBuilder.Editor.TextToSpeech.WebTextToSpeechProvider.DownloadFailedException.html": {
    "href": "api/VRBuilder.Editor.TextToSpeech.WebTextToSpeechProvider.DownloadFailedException.html",
    "title": "Class WebTextToSpeechProvider.DownloadFailedException | VR Builder Documentation",
    "keywords": "Class WebTextToSpeechProvider.DownloadFailedException Namespace VRBuilder.Editor.TextToSpeech Assembly VRBuilder.Editor.TextToSpeech.dll public class WebTextToSpeechProvider.DownloadFailedException : Exception, _Exception, ISerializable Inheritance object Exception WebTextToSpeechProvider.DownloadFailedException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DownloadFailedException(string) public DownloadFailedException(string msg) Parameters msg string DownloadFailedException(string, Exception) public DownloadFailedException(string msg, Exception ex) Parameters msg string ex Exception"
  },
  "api/VRBuilder.Editor.TextToSpeech.WebTextToSpeechProvider.html": {
    "href": "api/VRBuilder.Editor.TextToSpeech.WebTextToSpeechProvider.html",
    "title": "Class WebTextToSpeechProvider | VR Builder Documentation",
    "keywords": "Class WebTextToSpeechProvider Namespace VRBuilder.Editor.TextToSpeech Assembly VRBuilder.Editor.TextToSpeech.dll Abstract WebTextToSpeechProvider which can be used for web based provider. public abstract class WebTextToSpeechProvider : ITextToSpeechProvider Inheritance object WebTextToSpeechProvider Implements ITextToSpeechProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WebTextToSpeechProvider() protected WebTextToSpeechProvider() WebTextToSpeechProvider(UnityWebRequest) protected WebTextToSpeechProvider(UnityWebRequest unityWebRequest) Parameters unityWebRequest UnityWebRequest WebTextToSpeechProvider(UnityWebRequest, IAudioConverter) protected WebTextToSpeechProvider(UnityWebRequest unityWebRequest, IAudioConverter audioConverter) Parameters unityWebRequest UnityWebRequest audioConverter IAudioConverter Fields AudioConverter protected readonly IAudioConverter AudioConverter Field Value IAudioConverter Configuration protected TextToSpeechConfiguration Configuration Field Value TextToSpeechConfiguration UnityWebRequest protected readonly UnityWebRequest UnityWebRequest Field Value UnityWebRequest Properties AudioType The type of audio encoding for the downloaded audio clip. protected AudioType AudioType { get; set; } Property Value AudioType Remarks Relevant for the Android platform. Methods ConvertTextToSpeech(string, Locale) Loads the AudioClip file for the given text. public Task<AudioClip> ConvertTextToSpeech(string text, Locale locale) Parameters text string locale Locale Returns Task<AudioClip> CreateAudioClip(byte[]) This method converts an mp3 file from byte to an AudioClip. If you have a different format, override this method. protected virtual AudioClip CreateAudioClip(byte[] data) Parameters data byte[] Returns AudioClip Remarks The base implementation only works on Windows. CreateRequest(string, string) Method to create the UnityWebRequest needed to get the file. If you have to add specific authorization or other header you can do it here. protected virtual UnityWebRequest CreateRequest(string url, string text) Parameters url string text string Returns UnityWebRequest DownloadAudio(string, Locale, TaskCompletionSource<AudioClip>) This method should asynchronous download the audio file to an AudioClip and call task OnFinish with it. You can use the ParseAudio method to convert the file (mp3) into an AudioClip. protected virtual IEnumerator DownloadAudio(string text, Locale locale, TaskCompletionSource<AudioClip> task) Parameters text string locale Locale task TaskCompletionSource<AudioClip> Returns IEnumerator GetAudioFileDownloadUrl(string) Creates the specific url for the given voice, language and text to download the voice file. protected abstract string GetAudioFileDownloadUrl(string text) Parameters text string The text that should be converted into an audio file. Returns string The full url required to receive the audio file for the given text message SetConfig(TextToSpeechConfiguration) Used for setting the config file. public void SetConfig(TextToSpeechConfiguration configuration) Parameters configuration TextToSpeechConfiguration"
  },
  "api/VRBuilder.Editor.TextToSpeech.html": {
    "href": "api/VRBuilder.Editor.TextToSpeech.html",
    "title": "Namespace VRBuilder.Editor.TextToSpeech | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.TextToSpeech Classes DummyTextToSpeechProvider Dummy provider that creates empty files, useful in case of compatibility issues. MicrosoftSapiTextToSpeechProvider TTS provider which uses Microsoft SAPI to generate audio. TextToSpeechConfig.Voice has to be either \"male\", \"female\", or \"neutral\". TextToSpeechConfig.Language is a language code (\"de\" or \"de-DE\" for German, \"en\" or \"en-US\" for English). It runs the TTS synthesis in a separate thread, saving the result to a temporary cache file. NAudioConverter This AudioConverter uses NAudio to convert audios. TextToSpeechBuildPreprocessor Generates TTS files for all processes before a build. TextToSpeechEditorUtils WebTextToSpeechProvider Abstract WebTextToSpeechProvider which can be used for web based provider. WebTextToSpeechProvider.DownloadFailedException"
  },
  "api/VRBuilder.Editor.TrackAndMeasure.UI.Behaviors.ResetValueMenuItem.html": {
    "href": "api/VRBuilder.Editor.TrackAndMeasure.UI.Behaviors.ResetValueMenuItem.html",
    "title": "Class ResetValueMenuItem | VR Builder Documentation",
    "keywords": "Class ResetValueMenuItem Namespace VRBuilder.Editor.TrackAndMeasure.UI.Behaviors Assembly VRBuilder.Editor.TrackAndMeasure.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class ResetValueMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> ResetValueMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.TrackAndMeasure.UI.Behaviors.SetBooleanValueMenuItem.html": {
    "href": "api/VRBuilder.Editor.TrackAndMeasure.UI.Behaviors.SetBooleanValueMenuItem.html",
    "title": "Class SetBooleanValueMenuItem | VR Builder Documentation",
    "keywords": "Class SetBooleanValueMenuItem Namespace VRBuilder.Editor.TrackAndMeasure.UI.Behaviors Assembly VRBuilder.Editor.TrackAndMeasure.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetBooleanValueMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetBooleanValueMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.TrackAndMeasure.UI.Behaviors.SetNumberValueMenuItem.html": {
    "href": "api/VRBuilder.Editor.TrackAndMeasure.UI.Behaviors.SetNumberValueMenuItem.html",
    "title": "Class SetNumberValueMenuItem | VR Builder Documentation",
    "keywords": "Class SetNumberValueMenuItem Namespace VRBuilder.Editor.TrackAndMeasure.UI.Behaviors Assembly VRBuilder.Editor.TrackAndMeasure.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetNumberValueMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetNumberValueMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.TrackAndMeasure.UI.Behaviors.StartTimerMenuItem.html": {
    "href": "api/VRBuilder.Editor.TrackAndMeasure.UI.Behaviors.StartTimerMenuItem.html",
    "title": "Class StartTimerMenuItem | VR Builder Documentation",
    "keywords": "Class StartTimerMenuItem Namespace VRBuilder.Editor.TrackAndMeasure.UI.Behaviors Assembly VRBuilder.Editor.TrackAndMeasure.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class StartTimerMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> StartTimerMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.TrackAndMeasure.UI.Behaviors.StopTimerMenuItem.html": {
    "href": "api/VRBuilder.Editor.TrackAndMeasure.UI.Behaviors.StopTimerMenuItem.html",
    "title": "Class StopTimerMenuItem | VR Builder Documentation",
    "keywords": "Class StopTimerMenuItem Namespace VRBuilder.Editor.TrackAndMeasure.UI.Behaviors Assembly VRBuilder.Editor.TrackAndMeasure.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class StopTimerMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> StopTimerMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.TrackAndMeasure.UI.Behaviors.UpdateScoreMenuItem.html": {
    "href": "api/VRBuilder.Editor.TrackAndMeasure.UI.Behaviors.UpdateScoreMenuItem.html",
    "title": "Class UpdateScoreMenuItem | VR Builder Documentation",
    "keywords": "Class UpdateScoreMenuItem Namespace VRBuilder.Editor.TrackAndMeasure.UI.Behaviors Assembly VRBuilder.Editor.TrackAndMeasure.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class UpdateScoreMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> UpdateScoreMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.TrackAndMeasure.UI.Behaviors.html": {
    "href": "api/VRBuilder.Editor.TrackAndMeasure.UI.Behaviors.html",
    "title": "Namespace VRBuilder.Editor.TrackAndMeasure.UI.Behaviors | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.TrackAndMeasure.UI.Behaviors Classes ResetValueMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetBooleanValueMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetNumberValueMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). StartTimerMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). StopTimerMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). UpdateScoreMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem()."
  },
  "api/VRBuilder.Editor.TrackAndMeasure.UI.Conditions.CompareBooleansMenuItem.html": {
    "href": "api/VRBuilder.Editor.TrackAndMeasure.UI.Conditions.CompareBooleansMenuItem.html",
    "title": "Class CompareBooleansMenuItem | VR Builder Documentation",
    "keywords": "Class CompareBooleansMenuItem Namespace VRBuilder.Editor.TrackAndMeasure.UI.Conditions Assembly VRBuilder.Editor.TrackAndMeasure.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class CompareBooleansMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> CompareBooleansMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.TrackAndMeasure.UI.Conditions.CompareNumbersMenuItem.html": {
    "href": "api/VRBuilder.Editor.TrackAndMeasure.UI.Conditions.CompareNumbersMenuItem.html",
    "title": "Class CompareNumbersMenuItem | VR Builder Documentation",
    "keywords": "Class CompareNumbersMenuItem Namespace VRBuilder.Editor.TrackAndMeasure.UI.Conditions Assembly VRBuilder.Editor.TrackAndMeasure.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class CompareNumbersMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> CompareNumbersMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.TrackAndMeasure.UI.Conditions.html": {
    "href": "api/VRBuilder.Editor.TrackAndMeasure.UI.Conditions.html",
    "title": "Namespace VRBuilder.Editor.TrackAndMeasure.UI.Conditions | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.TrackAndMeasure.UI.Conditions Classes CompareBooleansMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). CompareNumbersMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem()."
  },
  "api/VRBuilder.Editor.UI.BaseSettingsProvider.html": {
    "href": "api/VRBuilder.Editor.UI.BaseSettingsProvider.html",
    "title": "Class BaseSettingsProvider | VR Builder Documentation",
    "keywords": "Class BaseSettingsProvider Namespace VRBuilder.Editor.UI Assembly VRBuilder.Editor.dll Base Settings provider which allows to inject additional sections which implement IProjectSettingsSection. public abstract class BaseSettingsProvider : SettingsProvider Inheritance object SettingsProvider BaseSettingsProvider Derived LanguageSettingsProvider SceneObjectGroupsSettingsProvider SpectatorSettingsProvider Inherited Members SettingsProvider.OnActivate(string, VisualElement) SettingsProvider.OnDeactivate() SettingsProvider.HasSearchInterest(string) SettingsProvider.OnTitleBarGUI() SettingsProvider.OnFooterBarGUI() SettingsProvider.OnInspectorUpdate() SettingsProvider.Repaint() SettingsProvider.PopulateSearchKeywordsFromGUIContentProperties<T>() SettingsProvider.GetSearchKeywordsFromGUIContentProperties<T>() SettingsProvider.GetSearchKeywordsFromSerializedObject(SerializedObject) SettingsProvider.GetSearchKeywordsFromPath(string) SettingsProvider.label SettingsProvider.settingsPath SettingsProvider.scope SettingsProvider.keywords SettingsProvider.guiHandler SettingsProvider.titleBarGuiHandler SettingsProvider.footerBarGuiHandler SettingsProvider.activateHandler SettingsProvider.deactivateHandler SettingsProvider.hasSearchInterestHandler SettingsProvider.inspectorUpdateHandler object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseSettingsProvider(string, SettingsScope, IEnumerable<string>) protected BaseSettingsProvider(string path, SettingsScope scopes, IEnumerable<string> keywords = null) Parameters path string scopes SettingsScope keywords IEnumerable<string> Fields sections protected List<IProjectSettingsSection> sections Field Value List<IProjectSettingsSection> Methods InternalDraw(string) Your draw implementation, will be drawn above the injected sections. protected abstract void InternalDraw(string searchContext) Parameters searchContext string OnGUI(string) Draw call. public override void OnGUI(string searchContext) Parameters searchContext string"
  },
  "api/VRBuilder.Editor.UI.Behaviors.BehaviorSequenceMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.BehaviorSequenceMenuItem.html",
    "title": "Class BehaviorSequenceMenuItem | VR Builder Documentation",
    "keywords": "Class BehaviorSequenceMenuItem Namespace VRBuilder.Editor.UI.Behaviors Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class BehaviorSequenceMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> BehaviorSequenceMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Behaviors.ConfettiMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.ConfettiMenuItem.html",
    "title": "Class ConfettiMenuItem | VR Builder Documentation",
    "keywords": "Class ConfettiMenuItem Namespace VRBuilder.Editor.UI.Behaviors Assembly VRBuilder.Editor.dll public class ConfettiMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> ConfettiMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Behaviors.DelayMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.DelayMenuItem.html",
    "title": "Class DelayMenuItem | VR Builder Documentation",
    "keywords": "Class DelayMenuItem Namespace VRBuilder.Editor.UI.Behaviors Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class DelayMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> DelayMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Behaviors.DisableComponentMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.DisableComponentMenuItem.html",
    "title": "Class DisableComponentMenuItem | VR Builder Documentation",
    "keywords": "Class DisableComponentMenuItem Namespace VRBuilder.Editor.UI.Behaviors Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class DisableComponentMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> DisableComponentMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Behaviors.DisableObjectsMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.DisableObjectsMenuItem.html",
    "title": "Class DisableObjectsMenuItem | VR Builder Documentation",
    "keywords": "Class DisableObjectsMenuItem Namespace VRBuilder.Editor.UI.Behaviors Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class DisableObjectsMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> DisableObjectsMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Behaviors.EnableComponentMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.EnableComponentMenuItem.html",
    "title": "Class EnableComponentMenuItem | VR Builder Documentation",
    "keywords": "Class EnableComponentMenuItem Namespace VRBuilder.Editor.UI.Behaviors Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class EnableComponentMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> EnableComponentMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Behaviors.EnableObjectsMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.EnableObjectsMenuItem.html",
    "title": "Class EnableObjectsMenuItem | VR Builder Documentation",
    "keywords": "Class EnableObjectsMenuItem Namespace VRBuilder.Editor.UI.Behaviors Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class EnableObjectsMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> EnableObjectsMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Behaviors.HighlightObjectMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.HighlightObjectMenuItem.html",
    "title": "Class HighlightObjectMenuItem | VR Builder Documentation",
    "keywords": "Class HighlightObjectMenuItem Namespace VRBuilder.Editor.UI.Behaviors Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class HighlightObjectMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> HighlightObjectMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Behaviors.LoadSceneMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.LoadSceneMenuItem.html",
    "title": "Class LoadSceneMenuItem | VR Builder Documentation",
    "keywords": "Class LoadSceneMenuItem Namespace VRBuilder.Editor.UI.Behaviors Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class LoadSceneMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> LoadSceneMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Behaviors.MoveObjectMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.MoveObjectMenuItem.html",
    "title": "Class MoveObjectMenuItem | VR Builder Documentation",
    "keywords": "Class MoveObjectMenuItem Namespace VRBuilder.Editor.UI.Behaviors Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class MoveObjectMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> MoveObjectMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Behaviors.PlayResourceAudioMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.PlayResourceAudioMenuItem.html",
    "title": "Class PlayResourceAudioMenuItem | VR Builder Documentation",
    "keywords": "Class PlayResourceAudioMenuItem Namespace VRBuilder.Editor.UI.Behaviors Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class PlayResourceAudioMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> PlayResourceAudioMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Behaviors.ScalingMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.ScalingMenuItem.html",
    "title": "Class ScalingMenuItem | VR Builder Documentation",
    "keywords": "Class ScalingMenuItem Namespace VRBuilder.Editor.UI.Behaviors Assembly VRBuilder.Editor.dll public class ScalingMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> ScalingMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Behaviors.StartParticleEmissionMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.StartParticleEmissionMenuItem.html",
    "title": "Class StartParticleEmissionMenuItem | VR Builder Documentation",
    "keywords": "Class StartParticleEmissionMenuItem Namespace VRBuilder.Editor.UI.Behaviors Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class StartParticleEmissionMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> StartParticleEmissionMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Behaviors.StopParticleEmissionMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.StopParticleEmissionMenuItem.html",
    "title": "Class StopParticleEmissionMenuItem | VR Builder Documentation",
    "keywords": "Class StopParticleEmissionMenuItem Namespace VRBuilder.Editor.UI.Behaviors Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class StopParticleEmissionMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> StopParticleEmissionMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Behaviors.html": {
    "href": "api/VRBuilder.Editor.UI.Behaviors.html",
    "title": "Namespace VRBuilder.Editor.UI.Behaviors | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.UI.Behaviors Classes BehaviorSequenceMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). ConfettiMenuItem DelayMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). DisableComponentMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). DisableObjectsMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). EnableComponentMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). EnableObjectsMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). HighlightObjectMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). LoadSceneMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). MoveObjectMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). PlayResourceAudioMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). ScalingMenuItem StartParticleEmissionMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). StopParticleEmissionMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem()."
  },
  "api/VRBuilder.Editor.UI.BuilderEditorStyles.html": {
    "href": "api/VRBuilder.Editor.UI.BuilderEditorStyles.html",
    "title": "Class BuilderEditorStyles | VR Builder Documentation",
    "keywords": "Class BuilderEditorStyles Namespace VRBuilder.Editor.UI Assembly VRBuilder.Editor.dll public static class BuilderEditorStyles Inheritance object BuilderEditorStyles Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields BaseIndent public const int BaseIndent = 2 Field Value int HighlightTextColor public static Color HighlightTextColor Field Value Color Indent public const int Indent = 12 Field Value int IndentLarge public const int IndentLarge = 36 Field Value int Properties Button public static GUIStyle Button { get; } Property Value GUIStyle Header public static GUIStyle Header { get; } Property Value GUIStyle HelpBox public static GUIStyle HelpBox { get; } Property Value GUIStyle Label public static GUIStyle Label { get; } Property Value GUIStyle Link public static GUIStyle Link { get; } Property Value GUIStyle Paragraph public static GUIStyle Paragraph { get; } Property Value GUIStyle ParagraphNoPadding public static GUIStyle ParagraphNoPadding { get; } Property Value GUIStyle Popup public static GUIStyle Popup { get; } Property Value GUIStyle RadioButton public static GUIStyle RadioButton { get; } Property Value GUIStyle SubText public static GUIStyle SubText { get; } Property Value GUIStyle TextField public static GUIStyle TextField { get; } Property Value GUIStyle Title public static GUIStyle Title { get; } Property Value GUIStyle TitleNoPadding public static GUIStyle TitleNoPadding { get; } Property Value GUIStyle Toggle public static GUIStyle Toggle { get; } Property Value GUIStyle Methods ApplyMargin(GUIStyle, int) public static GUIStyle ApplyMargin(GUIStyle style, int ident = 12) Parameters style GUIStyle ident int Returns GUIStyle ApplyMargin(GUIStyle, RectOffset) public static GUIStyle ApplyMargin(GUIStyle style, RectOffset indent) Parameters style GUIStyle indent RectOffset Returns GUIStyle ApplyPadding(GUIStyle, int) public static GUIStyle ApplyPadding(GUIStyle style, int ident = 12) Parameters style GUIStyle ident int Returns GUIStyle ApplyPadding(GUIStyle, RectOffset) public static GUIStyle ApplyPadding(GUIStyle style, RectOffset indent) Parameters style GUIStyle indent RectOffset Returns GUIStyle"
  },
  "api/VRBuilder.Editor.UI.BuilderGUILayout.html": {
    "href": "api/VRBuilder.Editor.UI.BuilderGUILayout.html",
    "title": "Class BuilderGUILayout | VR Builder Documentation",
    "keywords": "Class BuilderGUILayout Namespace VRBuilder.Editor.UI Assembly VRBuilder.Editor.dll Layout extension for VR Builder. public static class BuilderGUILayout Inheritance object BuilderGUILayout Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawCheckBoxList<T>(IEnumerable<T>, List<T>, List<string>, List<T>) public static IEnumerable<T> DrawCheckBoxList<T>(IEnumerable<T> selection, List<T> entries, List<string> content, List<T> disabledEntries) Parameters selection IEnumerable<T> entries List<T> content List<string> disabledEntries List<T> Returns IEnumerable<T> Type Parameters T DrawLink(string, Action, int) Draws a clickable link which looks like a hyperlink. public static void DrawLink(string text, Action action, int indent = 12) Parameters text string Text to be displayed action Action action done on click indent int Intend on the left DrawLink(string, string, int) Draws a clickable link which opens a website. public static void DrawLink(string text, string url, int indent = 12) Parameters text string Text to be displayed url string url to be opened inside the browser indent int Intend on the left DrawTextField(string, int, int, params GUILayoutOption[]) public static string DrawTextField(string content, int charLimit = -1, int indent = 0, params GUILayoutOption[] options) Parameters content string charLimit int indent int options GUILayoutOption[] Returns string DrawTextField(string, int, params GUILayoutOption[]) public static string DrawTextField(string content, int charLimit = -1, params GUILayoutOption[] options) Parameters content string charLimit int options GUILayoutOption[] Returns string DrawToggleGroup<T>(T, List<T>, List<string>, List<T>) public static T DrawToggleGroup<T>(T selection, List<T> entries, List<string> content, List<T> disabledEntries) Parameters selection T entries List<T> content List<string> disabledEntries List<T> Returns T Type Parameters T DrawToggleGroup<T>(T, List<T>, List<GUIContent>, List<T>) public static T DrawToggleGroup<T>(T selection, List<T> entries, List<GUIContent> content, List<T> disabledEntries) Parameters selection T entries List<T> content List<GUIContent> disabledEntries List<T> Returns T Type Parameters T"
  },
  "api/VRBuilder.Editor.UI.Conditions.ObjectInColliderMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Conditions.ObjectInColliderMenuItem.html",
    "title": "Class ObjectInColliderMenuItem | VR Builder Documentation",
    "keywords": "Class ObjectInColliderMenuItem Namespace VRBuilder.Editor.UI.Conditions Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class ObjectInColliderMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> ObjectInColliderMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.UI.Conditions.ObjectInRangeMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Conditions.ObjectInRangeMenuItem.html",
    "title": "Class ObjectInRangeMenuItem | VR Builder Documentation",
    "keywords": "Class ObjectInRangeMenuItem Namespace VRBuilder.Editor.UI.Conditions Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class ObjectInRangeMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> ObjectInRangeMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.UI.Conditions.SetParentMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Conditions.SetParentMenuItem.html",
    "title": "Class SetParentMenuItem | VR Builder Documentation",
    "keywords": "Class SetParentMenuItem Namespace VRBuilder.Editor.UI.Conditions Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class SetParentMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> SetParentMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.UI.Conditions.TimeoutMenuItem.html": {
    "href": "api/VRBuilder.Editor.UI.Conditions.TimeoutMenuItem.html",
    "title": "Class TimeoutMenuItem | VR Builder Documentation",
    "keywords": "Class TimeoutMenuItem Namespace VRBuilder.Editor.UI.Conditions Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public class TimeoutMenuItem : MenuItem<ICondition> Inheritance object MenuOption<ICondition> MenuItem<ICondition> TimeoutMenuItem Inherited Members MenuItem<ICondition>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override ICondition GetNewItem() Returns ICondition"
  },
  "api/VRBuilder.Editor.UI.Conditions.html": {
    "href": "api/VRBuilder.Editor.UI.Conditions.html",
    "title": "Namespace VRBuilder.Editor.UI.Conditions | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.UI.Conditions Classes ObjectInColliderMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). ObjectInRangeMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). SetParentMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). TimeoutMenuItem The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem()."
  },
  "api/VRBuilder.Editor.UI.Drawers.AbstractDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.AbstractDrawer.html",
    "title": "Class AbstractDrawer | VR Builder Documentation",
    "keywords": "Class AbstractDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Simple base drawer class. public abstract class AbstractDrawer : IProcessDrawer Inheritance object AbstractDrawer Implements IProcessDrawer Derived DropdownDrawer<T> ObjectDrawer ProcessSceneReferenceDrawer ResourcePathDrawer<T> SceneObjectTagDrawer SelectableValueDrawer<TFirst, TSecond> UniqueNameReferenceDrawer UserTagDropdownDrawer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ChangeValue(Func<object>, Func<object>, Action<object>) Call when the value has changed; it will create proper ProcessCommand to handle Do/Undo logic. AbstractDrawer for a proper implementation. A delegate that returns a new value for the drawn entity. Invoked during the ProcessCommand.Do call. The result is passed to the assignValueCallback. A delegate that returns an old value for the drawn entity. Invoked during the ProcessCommand.Undo call. The result is passed to the assignValueCallback. A delegate that actually assigns a value to the property/field. public void ChangeValue(Func<object> getNewValueCallback, Func<object> getOldValueCallback, Action<object> assignValueCallback) Parameters getNewValueCallback Func<object> getOldValueCallback Func<object> assignValueCallback Action<object> Draw(Rect, object, Action<object>, string) Draw editor view in given Rect. public Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, string label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when the value (or values of child members) has actually changed. label string Label text to display. Returns Rect The area that was taken by the property. Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public abstract Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property. GetLabel(object, Type) Return a label for a value of declaredType. public virtual GUIContent GetLabel(object value, Type declaredType) Parameters value object declaredType Type Returns GUIContent GetLabel(MemberInfo, object) Return a label for a property/field memberInfo of an object memberOwner. public virtual GUIContent GetLabel(MemberInfo memberInfo, object memberOwner) Parameters memberInfo MemberInfo memberOwner object Returns GUIContent"
  },
  "api/VRBuilder.Editor.UI.Drawers.DefaultProcessDrawerAttribute.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.DefaultProcessDrawerAttribute.html",
    "title": "Class DefaultProcessDrawerAttribute | VR Builder Documentation",
    "keywords": "Class DefaultProcessDrawerAttribute Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Marks a Process drawer as a default drawer for a given type. [AttributeUsage(AttributeTargets.Class, Inherited = false)] public class DefaultProcessDrawerAttribute : Attribute, _Attribute Inheritance object Attribute DefaultProcessDrawerAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultProcessDrawerAttribute(Type) public DefaultProcessDrawerAttribute(Type type) Parameters type Type Properties DrawableType Objects of which type can be processed by this Process drawer. public Type DrawableType { get; } Property Value Type"
  },
  "api/VRBuilder.Editor.UI.Drawers.DrawerLocator.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.DrawerLocator.html",
    "title": "Class DrawerLocator | VR Builder Documentation",
    "keywords": "Class DrawerLocator Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll [InitializeOnLoad] public static class DrawerLocator Inheritance object DrawerLocator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDrawerForMember(MemberInfo, object) Returns required drawer for a given object member. If the member has a UsesSpecificProcessDrawerAttribute, returns the drawer defined in that attribute. If the member contains non-null value, tries to find drawers from most concrete type definition (which is actual value's type) and up through inheritance tree. If member's value is null, does the same starting from the property declared type instead. If drawer is still not found, checks drawers for interfaces. If everything else fails, returns the drawer for System.Object. public static IProcessDrawer GetDrawerForMember(MemberInfo memberInfo, object owner) Parameters memberInfo MemberInfo Reflection information about the member for which drawer is needed. owner object Object to which this member belongs to. Returns IProcessDrawer Returns suitable Process drawer. Returns null only if the member is not a property or field, or the specified custom drawer is not found. GetDrawerForValue(object, Type) Returns required drawer for a given value. If the value is not null, try to find drawers from most concrete type definition (which is actual value's type) and up through inheritance tree. If the value is null, does the same starting from the member declaring type instead. If drawer is still not found, checks drawers for interfaces. If everything else fails, returns the drawer for System.Object. public static IProcessDrawer GetDrawerForValue(object value, Type declaredType) Parameters value object Value to get drawer for. declaredType Type Declaring type of the class member that contains the value. Returns IProcessDrawer Returns suitable Process drawer. GetInstantiatorDrawer(Type) Get a drawer for a view that creates a new instance of declaredType public static IProcessDrawer GetInstantiatorDrawer(Type declaredType) Parameters declaredType Type Returns IProcessDrawer"
  },
  "api/VRBuilder.Editor.UI.Drawers.DropDownElement-1.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.DropDownElement-1.html",
    "title": "Struct DropDownElement<T> | VR Builder Documentation",
    "keywords": "Struct DropDownElement<T> Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll An element in a dropdown. public struct DropDownElement<T> where T : IEquatable<T> Type Parameters T Type of value returned by the dropdown. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors DropDownElement(T) public DropDownElement(T value) Parameters value T DropDownElement(T, string) public DropDownElement(T value, string label) Parameters value T label string DropDownElement(T, GUIContent) public DropDownElement(T value, GUIContent label) Parameters value T label GUIContent Properties Label Display name of the element. public GUIContent Label { readonly get; set; } Property Value GUIContent Value Selectable value. public T Value { readonly get; set; } Property Value T"
  },
  "api/VRBuilder.Editor.UI.Drawers.DropdownDrawer-1.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.DropdownDrawer-1.html",
    "title": "Class DropdownDrawer<T> | VR Builder Documentation",
    "keywords": "Class DropdownDrawer<T> Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Generic drawer for dropdowns. Implement by providing your possible options. public abstract class DropdownDrawer<T> : AbstractDrawer, IProcessDrawer where T : IEquatable<T> Type Parameters T Type of value provided by the dropdown. Inheritance object AbstractDrawer DropdownDrawer<T> Implements IProcessDrawer Derived SceneDropdownDrawer Inherited Members AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.GetLabel(MemberInfo, object) AbstractDrawer.GetLabel(object, Type) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks In case of a null or invalid value, the drawer will automatically select the first available value. You can create a null entry for the first value if you want it to default to null. Properties PossibleOptions List of elements displayed in the dropdown. protected abstract IList<DropDownElement<T>> PossibleOptions { get; } Property Value IList<DropDownElement<T>> Methods Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property."
  },
  "api/VRBuilder.Editor.UI.Drawers.IProcessDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.IProcessDrawer.html",
    "title": "Interface IProcessDrawer | VR Builder Documentation",
    "keywords": "Interface IProcessDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Interface of a drawer for process members. public interface IProcessDrawer Methods ChangeValue(Func<object>, Func<object>, Action<object>) Call when the value has changed; it will create proper ProcessCommand to handle Do/Undo logic. AbstractDrawer for a proper implementation. A delegate that returns a new value for the drawn entity. Invoked during the ProcessCommand.Do call. The result is passed to the assignValueCallback. A delegate that returns an old value for the drawn entity. Invoked during the ProcessCommand.Undo call. The result is passed to the assignValueCallback. A delegate that actually assigns a value to the property/field. void ChangeValue(Func<object> getNewValueCallback, Func<object> getOldValueCallback, Action<object> assignValueCallback) Parameters getNewValueCallback Func<object> getOldValueCallback Func<object> assignValueCallback Action<object> Draw(Rect, object, Action<object>, string) Draw editor view in given Rect. Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, string label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when the value (or values of child members) has actually changed. label string Label text to display. Returns Rect The area that was taken by the property. Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property. GetLabel(object, Type) Return a label for a value of declaredType. GUIContent GetLabel(object value, Type declaredType) Parameters value object declaredType Type Returns GUIContent GetLabel(MemberInfo, object) Return a label for a property/field memberInfo of an object memberOwner. GUIContent GetLabel(MemberInfo memberInfo, object memberOwner) Parameters memberInfo MemberInfo memberOwner object Returns GUIContent"
  },
  "api/VRBuilder.Editor.UI.Drawers.NameableDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.NameableDrawer.html",
    "title": "Class NameableDrawer | VR Builder Documentation",
    "keywords": "Class NameableDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Drawer for values implementing INameable interface. Instead of drawing a plain text as a label, it draws a TextField with the name. [DefaultProcessDrawer(typeof(INamedData))] public class NameableDrawer : ObjectDrawer, IProcessDrawer Inheritance object AbstractDrawer ObjectDrawer NameableDrawer Implements IProcessDrawer Derived CompareValueToConstDrawer<T> CompareValuesDrawer<T> PlayAudioBehaviorDrawer SetComponentEnabledBehaviorDrawer SetComponentEnabledByTagBehaviorDrawer CheckStateDrawer SetStateDrawer Inherited Members ObjectDrawer.Draw(Rect, object, Action<object>, GUIContent) ObjectDrawer.CheckValidationForValue(object, MemberInfo, GUIContent) ObjectDrawer.AddValidationInformation(GUIContent, List<EditorReportEntry>) ObjectDrawer.GetValidationReports(object) ObjectDrawer.GetValidationReportsFor(IData, MemberInfo) ObjectDrawer.GetLabel(MemberInfo, object) ObjectDrawer.GetLabel(object, Type) ObjectDrawer.GetMembersToDraw(object) ObjectDrawer.GetTypeNameLabel(object, Type) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawLabel(Rect, object, Action<object>, GUIContent) Draw a label for an object. protected override float DrawLabel(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect currentValue object changeValueCallback Action<object> label GUIContent Returns float"
  },
  "api/VRBuilder.Editor.UI.Drawers.ObjectDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.ObjectDrawer.html",
    "title": "Class ObjectDrawer | VR Builder Documentation",
    "keywords": "Class ObjectDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Process drawer for object properties. Used when everything else does not fit. [DefaultProcessDrawer(typeof(object))] public class ObjectDrawer : AbstractDrawer, IProcessDrawer Inheritance object AbstractDrawer ObjectDrawer Implements IProcessDrawer Derived LocalizationTableDrawer NameableDrawer Inherited Members AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddValidationInformation(GUIContent, List<EditorReportEntry>) protected virtual GUIContent AddValidationInformation(GUIContent guiContent, List<EditorReportEntry> entries) Parameters guiContent GUIContent entries List<EditorReportEntry> Returns GUIContent CheckValidationForValue(object, MemberInfo, GUIContent) protected virtual void CheckValidationForValue(object currentValue, MemberInfo info, GUIContent label) Parameters currentValue object info MemberInfo label GUIContent Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property. DrawLabel(Rect, object, Action<object>, GUIContent) Draw a label for an object. protected virtual float DrawLabel(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect currentValue object changeValueCallback Action<object> label GUIContent Returns float GetLabel(object, Type) Return a label for a value of declaredType. public override GUIContent GetLabel(object value, Type declaredType) Parameters value object declaredType Type Returns GUIContent GetLabel(MemberInfo, object) Return a label for a property/field memberInfo of an object memberOwner. public override GUIContent GetLabel(MemberInfo memberInfo, object memberOwner) Parameters memberInfo MemberInfo memberOwner object Returns GUIContent GetMembersToDraw(object) protected virtual IEnumerable<MemberInfo> GetMembersToDraw(object value) Parameters value object Returns IEnumerable<MemberInfo> GetTypeNameLabel(object, Type) protected virtual GUIContent GetTypeNameLabel(object value, Type declaredType) Parameters value object declaredType Type Returns GUIContent GetValidationReports(object) protected virtual List<EditorReportEntry> GetValidationReports(object value) Parameters value object Returns List<EditorReportEntry> GetValidationReportsFor(IData, MemberInfo) protected virtual List<EditorReportEntry> GetValidationReportsFor(IData data, MemberInfo memberInfo) Parameters data IData memberInfo MemberInfo Returns List<EditorReportEntry>"
  },
  "api/VRBuilder.Editor.UI.Drawers.ParticleSystemPropertySelectableValueDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.ParticleSystemPropertySelectableValueDrawer.html",
    "title": "Class ParticleSystemPropertySelectableValueDrawer | VR Builder Documentation",
    "keywords": "Class ParticleSystemPropertySelectableValueDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Concrete implementation of SelectableValue<TFirst, TSecond> for IParticleSystemProperty. [Obsolete(\"This drawer is obsolete and will be removed in the next major version.\")] [DefaultProcessDrawer(typeof(PropertyReferenceOrTagSelectableValue<IParticleSystemProperty>))] public class ParticleSystemPropertySelectableValueDrawer : SelectableValueDrawer<ScenePropertyReference<IParticleSystemProperty>, SceneObjectTag<IParticleSystemProperty>>, IProcessDrawer Inheritance object AbstractDrawer SelectableValueDrawer<ScenePropertyReference<IParticleSystemProperty>, SceneObjectTag<IParticleSystemProperty>> ParticleSystemPropertySelectableValueDrawer Implements IProcessDrawer Inherited Members SelectableValueDrawer<ScenePropertyReference<IParticleSystemProperty>, SceneObjectTag<IParticleSystemProperty>>.Draw(Rect, object, Action<object>, GUIContent) SelectableValueDrawer<ScenePropertyReference<IParticleSystemProperty>, SceneObjectTag<IParticleSystemProperty>>.AddNewRectLine(ref Rect) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.Draw(Rect, object, Action<object>, GUIContent) AbstractDrawer.GetLabel(MemberInfo, object) AbstractDrawer.GetLabel(object, Type) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.UI.Drawers.ProcessSceneReferenceDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.ProcessSceneReferenceDrawer.html",
    "title": "Class ProcessSceneReferenceDrawer | VR Builder Documentation",
    "keywords": "Class ProcessSceneReferenceDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Drawer for ProcessSceneReferenceBase. [DefaultProcessDrawer(typeof(ProcessSceneReferenceBase))] public class ProcessSceneReferenceDrawer : AbstractDrawer, IProcessDrawer Inheritance object AbstractDrawer ProcessSceneReferenceDrawer Implements IProcessDrawer Inherited Members AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.GetLabel(MemberInfo, object) AbstractDrawer.GetLabel(object, Type) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields dropBoxStyle protected GUIStyle dropBoxStyle Field Value GUIStyle isExpanded protected bool isExpanded Field Value bool isUndoOperation protected bool isUndoOperation Field Value bool richTextLabelStyle protected GUIStyle richTextLabelStyle Field Value GUIStyle Methods AddFixItAllButton(IEnumerable<GameObject>, Type, ref Rect, ref Rect) protected void AddFixItAllButton(IEnumerable<GameObject> selectedSceneObject, Type valueType, ref Rect originalRect, ref Rect guiLineRect) Parameters selectedSceneObject IEnumerable<GameObject> valueType Type originalRect Rect guiLineRect Rect AddFixItButton(GameObject, Type, ref Rect, ref Rect) protected void AddFixItButton(GameObject selectedSceneObject, Type valueType, ref Rect originalRect, ref Rect guiLineRect) Parameters selectedSceneObject GameObject valueType Type originalRect Rect guiLineRect Rect AddNewRectLine(ref Rect, float) protected Rect AddNewRectLine(ref Rect currentRect, float height = -3.4028235E+38) Parameters currentRect Rect height float Returns Rect Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property. DropAreaGUI(ref Rect, ref Rect, ProcessSceneReferenceBase, Action<GameObject, Rect>, Action<object>, GUIContent) Renders a drop area GUI for assigning groups to the behavior or condition. protected void DropAreaGUI(ref Rect originalRect, ref Rect guiLineRect, ProcessSceneReferenceBase reference, Action<GameObject, Rect> dropAction, Action<object> changeValueCallback, GUIContent label) Parameters originalRect Rect The rect of the whole behavior or condition. guiLineRect Rect The rect of the last drawn line. reference ProcessSceneReferenceBase dropAction Action<GameObject, Rect> The action to perform when a game object is dropped. changeValueCallback Action<object> label GUIContent OpenMissingProcessSceneObjectDialog(GameObject) protected Guid OpenMissingProcessSceneObjectDialog(GameObject selectedSceneObject) Parameters selectedSceneObject GameObject Returns Guid SceneObjectAutomaticSetup(GameObject, Type) protected void SceneObjectAutomaticSetup(GameObject selectedSceneObject, Type valueType) Parameters selectedSceneObject GameObject valueType Type"
  },
  "api/VRBuilder.Editor.UI.Drawers.ProcessVariableBoolSelectableValueDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.ProcessVariableBoolSelectableValueDrawer.html",
    "title": "Class ProcessVariableBoolSelectableValueDrawer | VR Builder Documentation",
    "keywords": "Class ProcessVariableBoolSelectableValueDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Concrete implementation of process variable selectable value drawer. [DefaultProcessDrawer(typeof(ProcessVariableSelectableValue<bool>))] public class ProcessVariableBoolSelectableValueDrawer : SelectableValueDrawer<bool, SingleScenePropertyReference<IDataProperty<bool>>>, IProcessDrawer Inheritance object AbstractDrawer SelectableValueDrawer<bool, SingleScenePropertyReference<IDataProperty<bool>>> ProcessVariableBoolSelectableValueDrawer Implements IProcessDrawer Inherited Members SelectableValueDrawer<bool, SingleScenePropertyReference<IDataProperty<bool>>>.Draw(Rect, object, Action<object>, GUIContent) SelectableValueDrawer<bool, SingleScenePropertyReference<IDataProperty<bool>>>.AddNewRectLine(ref Rect) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.Draw(Rect, object, Action<object>, GUIContent) AbstractDrawer.GetLabel(MemberInfo, object) AbstractDrawer.GetLabel(object, Type) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.UI.Drawers.ProcessVariableFloatSelectableValueDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.ProcessVariableFloatSelectableValueDrawer.html",
    "title": "Class ProcessVariableFloatSelectableValueDrawer | VR Builder Documentation",
    "keywords": "Class ProcessVariableFloatSelectableValueDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Concrete implementation of process variable selectable value drawer. [DefaultProcessDrawer(typeof(ProcessVariableSelectableValue<float>))] public class ProcessVariableFloatSelectableValueDrawer : SelectableValueDrawer<float, SingleScenePropertyReference<IDataProperty<float>>>, IProcessDrawer Inheritance object AbstractDrawer SelectableValueDrawer<float, SingleScenePropertyReference<IDataProperty<float>>> ProcessVariableFloatSelectableValueDrawer Implements IProcessDrawer Inherited Members SelectableValueDrawer<float, SingleScenePropertyReference<IDataProperty<float>>>.Draw(Rect, object, Action<object>, GUIContent) SelectableValueDrawer<float, SingleScenePropertyReference<IDataProperty<float>>>.AddNewRectLine(ref Rect) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.Draw(Rect, object, Action<object>, GUIContent) AbstractDrawer.GetLabel(MemberInfo, object) AbstractDrawer.GetLabel(object, Type) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.UI.Drawers.ProcessVariableStringSelectableValueDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.ProcessVariableStringSelectableValueDrawer.html",
    "title": "Class ProcessVariableStringSelectableValueDrawer | VR Builder Documentation",
    "keywords": "Class ProcessVariableStringSelectableValueDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Concrete implementation of process variable selectable value drawer. [DefaultProcessDrawer(typeof(ProcessVariableSelectableValue<string>))] public class ProcessVariableStringSelectableValueDrawer : SelectableValueDrawer<string, SingleScenePropertyReference<IDataProperty<string>>>, IProcessDrawer Inheritance object AbstractDrawer SelectableValueDrawer<string, SingleScenePropertyReference<IDataProperty<string>>> ProcessVariableStringSelectableValueDrawer Implements IProcessDrawer Inherited Members SelectableValueDrawer<string, SingleScenePropertyReference<IDataProperty<string>>>.Draw(Rect, object, Action<object>, GUIContent) SelectableValueDrawer<string, SingleScenePropertyReference<IDataProperty<string>>>.AddNewRectLine(ref Rect) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.Draw(Rect, object, Action<object>, GUIContent) AbstractDrawer.GetLabel(MemberInfo, object) AbstractDrawer.GetLabel(object, Type) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.UI.Drawers.ResourcePathDrawer-1.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.ResourcePathDrawer-1.html",
    "title": "Class ResourcePathDrawer<T> | VR Builder Documentation",
    "keywords": "Class ResourcePathDrawer<T> Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Draws an object field and sets the Resources path of the dragged object. public abstract class ResourcePathDrawer<T> : AbstractDrawer, IProcessDrawer where T : Object Type Parameters T Inheritance object AbstractDrawer ResourcePathDrawer<T> Implements IProcessDrawer Derived VideoClipResourceDrawer Inherited Members AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.GetLabel(MemberInfo, object) AbstractDrawer.GetLabel(object, Type) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property."
  },
  "api/VRBuilder.Editor.UI.Drawers.SceneDropdownDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.SceneDropdownDrawer.html",
    "title": "Class SceneDropdownDrawer | VR Builder Documentation",
    "keywords": "Class SceneDropdownDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Drawer for a dropdown listing all the scenes in the build settings and allowing to select one by index. public class SceneDropdownDrawer : DropdownDrawer<string>, IProcessDrawer Inheritance object AbstractDrawer DropdownDrawer<string> SceneDropdownDrawer Implements IProcessDrawer Inherited Members DropdownDrawer<string>.Draw(Rect, object, Action<object>, GUIContent) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.GetLabel(MemberInfo, object) AbstractDrawer.GetLabel(object, Type) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SceneDropdownDrawer() public SceneDropdownDrawer() Properties PossibleOptions List of elements displayed in the dropdown. protected override IList<DropDownElement<string>> PossibleOptions { get; } Property Value IList<DropDownElement<string>>"
  },
  "api/VRBuilder.Editor.UI.Drawers.SceneObjectTagDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.SceneObjectTagDrawer.html",
    "title": "Class SceneObjectTagDrawer | VR Builder Documentation",
    "keywords": "Class SceneObjectTagDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Drawer for SceneObjectTagBase. [DefaultProcessDrawer(typeof(SceneObjectTagBase))] [Obsolete(\"This drawer is obsolete and will be removed in the next major version.\")] public class SceneObjectTagDrawer : AbstractDrawer, IProcessDrawer Inheritance object AbstractDrawer SceneObjectTagDrawer Implements IProcessDrawer Inherited Members AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.GetLabel(MemberInfo, object) AbstractDrawer.GetLabel(object, Type) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields isUndoOperation protected bool isUndoOperation Field Value bool Methods AddNewRectLine(ref Rect) protected Rect AddNewRectLine(ref Rect currentRect) Parameters currentRect Rect Returns Rect CheckForMisconfigurationIssues(GameObject, Type, ref Rect, ref Rect) protected void CheckForMisconfigurationIssues(GameObject selectedSceneObject, Type valueType, ref Rect originalRect, ref Rect guiLineRect) Parameters selectedSceneObject GameObject valueType Type originalRect Rect guiLineRect Rect Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property. SceneObjectAutomaticSetup(GameObject, Type) protected void SceneObjectAutomaticSetup(GameObject selectedSceneObject, Type valueType) Parameters selectedSceneObject GameObject valueType Type"
  },
  "api/VRBuilder.Editor.UI.Drawers.SelectableValueDrawer-2.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.SelectableValueDrawer-2.html",
    "title": "Class SelectableValueDrawer<TFirst, TSecond> | VR Builder Documentation",
    "keywords": "Class SelectableValueDrawer<TFirst, TSecond> Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Template drawer for selectable values. A concrete implementation of this drawer is required for each use case. public abstract class SelectableValueDrawer<TFirst, TSecond> : AbstractDrawer, IProcessDrawer Type Parameters TFirst TSecond Inheritance object AbstractDrawer SelectableValueDrawer<TFirst, TSecond> Implements IProcessDrawer Derived ParticleSystemPropertySelectableValueDrawer ProcessVariableBoolSelectableValueDrawer ProcessVariableFloatSelectableValueDrawer ProcessVariableStringSelectableValueDrawer StringsSelectableValueDrawer Inherited Members AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.GetLabel(MemberInfo, object) AbstractDrawer.GetLabel(object, Type) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddNewRectLine(ref Rect) protected Rect AddNewRectLine(ref Rect currentRect) Parameters currentRect Rect Returns Rect Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property."
  },
  "api/VRBuilder.Editor.UI.Drawers.StringsSelectableValueDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.StringsSelectableValueDrawer.html",
    "title": "Class StringsSelectableValueDrawer | VR Builder Documentation",
    "keywords": "Class StringsSelectableValueDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Selectable value drawer letting the user choose between two string values. public class StringsSelectableValueDrawer : SelectableValueDrawer<string, string>, IProcessDrawer Inheritance object AbstractDrawer SelectableValueDrawer<string, string> StringsSelectableValueDrawer Implements IProcessDrawer Inherited Members SelectableValueDrawer<string, string>.Draw(Rect, object, Action<object>, GUIContent) SelectableValueDrawer<string, string>.AddNewRectLine(ref Rect) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.Draw(Rect, object, Action<object>, GUIContent) AbstractDrawer.GetLabel(MemberInfo, object) AbstractDrawer.GetLabel(object, Type) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.UI.Drawers.UniqueNameReferenceDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.UniqueNameReferenceDrawer.html",
    "title": "Class UniqueNameReferenceDrawer | VR Builder Documentation",
    "keywords": "Class UniqueNameReferenceDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Process drawer for UniqueNameReference members. [Obsolete(\"This drawer is obsolete and will be removed in the next major version.\")] [DefaultProcessDrawer(typeof(UniqueNameReference))] public class UniqueNameReferenceDrawer : AbstractDrawer, IProcessDrawer Inheritance object AbstractDrawer UniqueNameReferenceDrawer Implements IProcessDrawer Inherited Members AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.GetLabel(MemberInfo, object) AbstractDrawer.GetLabel(object, Type) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields isUndoOperation protected bool isUndoOperation Field Value bool missingUniqueNames protected readonly HashSet<string> missingUniqueNames Field Value HashSet<string> undoGroupName protected const string undoGroupName = \"brotcat\" Field Value string Methods AddNewRectLine(ref Rect) protected Rect AddNewRectLine(ref Rect currentRect) Parameters currentRect Rect Returns Rect CheckForMisconfigurationIssues(GameObject, Type, ref Rect, ref Rect) protected void CheckForMisconfigurationIssues(GameObject selectedSceneObject, Type valueType, ref Rect originalRect, ref Rect guiLineRect) Parameters selectedSceneObject GameObject valueType Type originalRect Rect guiLineRect Rect Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property. GetGameObjectFromID(string) protected GameObject GetGameObjectFromID(string objectUniqueName) Parameters objectUniqueName string Returns GameObject GetIDFromSelectedObject(GameObject, Type, string) protected string GetIDFromSelectedObject(GameObject selectedSceneObject, Type valueType, string oldUniqueName) Parameters selectedSceneObject GameObject valueType Type oldUniqueName string Returns string SceneObjectAutomaticSetup(GameObject, Type) protected void SceneObjectAutomaticSetup(GameObject selectedSceneObject, Type valueType) Parameters selectedSceneObject GameObject valueType Type"
  },
  "api/VRBuilder.Editor.UI.Drawers.UserTagDropdownDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.UserTagDropdownDrawer.html",
    "title": "Class UserTagDropdownDrawer | VR Builder Documentation",
    "keywords": "Class UserTagDropdownDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Drawer for SceneObjectTagBase. [Obsolete(\"This drawer is obsolete and will be removed in the next major version.\")] public class UserTagDropdownDrawer : AbstractDrawer, IProcessDrawer Inheritance object AbstractDrawer UserTagDropdownDrawer Implements IProcessDrawer Inherited Members AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.GetLabel(MemberInfo, object) AbstractDrawer.GetLabel(object, Type) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields isUndoOperation protected bool isUndoOperation Field Value bool Methods AddNewRectLine(ref Rect) protected Rect AddNewRectLine(ref Rect currentRect) Parameters currentRect Rect Returns Rect CheckForMisconfigurationIssues(GameObject, Type, ref Rect, ref Rect) protected void CheckForMisconfigurationIssues(GameObject selectedSceneObject, Type valueType, ref Rect originalRect, ref Rect guiLineRect) Parameters selectedSceneObject GameObject valueType Type originalRect Rect guiLineRect Rect Draw(Rect, object, Action<object>, GUIContent) Draw editor view in given Rect. public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label) Parameters rect Rect A rectangle in which editor view should fit. The height value is ignored. currentValue object Current value of a member. changeValueCallback Action<object> Delegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus). Invoke only when child member's value has changed; Otherwise, if the value itself has changed, call ChangeValue(Func<object>, Func<object>, Action<object>) so it could manage Do/Undo stack in a proper way. label GUIContent Label content to display. Returns Rect The area that was taken by the property. SceneObjectAutomaticSetup(GameObject, Type) protected void SceneObjectAutomaticSetup(GameObject selectedSceneObject, Type valueType) Parameters selectedSceneObject GameObject valueType Type"
  },
  "api/VRBuilder.Editor.UI.Drawers.VideoClipResourceDrawer.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.VideoClipResourceDrawer.html",
    "title": "Class VideoClipResourceDrawer | VR Builder Documentation",
    "keywords": "Class VideoClipResourceDrawer Namespace VRBuilder.Editor.UI.Drawers Assembly VRBuilder.Editor.dll Implementation of asset path drawer for UnityEngine.Video.VideoClip assets. public class VideoClipResourceDrawer : ResourcePathDrawer<VideoClip>, IProcessDrawer Inheritance object AbstractDrawer ResourcePathDrawer<VideoClip> VideoClipResourceDrawer Implements IProcessDrawer Inherited Members ResourcePathDrawer<VideoClip>.Draw(Rect, object, Action<object>, GUIContent) AbstractDrawer.Draw(Rect, object, Action<object>, string) AbstractDrawer.GetLabel(MemberInfo, object) AbstractDrawer.GetLabel(object, Type) AbstractDrawer.ChangeValue(Func<object>, Func<object>, Action<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.UI.Drawers.html": {
    "href": "api/VRBuilder.Editor.UI.Drawers.html",
    "title": "Namespace VRBuilder.Editor.UI.Drawers | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.UI.Drawers Classes AbstractDrawer Simple base drawer class. DefaultProcessDrawerAttribute Marks a Process drawer as a default drawer for a given type. DrawerLocator DropdownDrawer<T> Generic drawer for dropdowns. Implement by providing your possible options. NameableDrawer Drawer for values implementing INameable interface. Instead of drawing a plain text as a label, it draws a TextField with the name. ObjectDrawer Process drawer for object properties. Used when everything else does not fit. ParticleSystemPropertySelectableValueDrawer Concrete implementation of SelectableValue<TFirst, TSecond> for IParticleSystemProperty. ProcessSceneReferenceDrawer Drawer for ProcessSceneReferenceBase. ProcessVariableBoolSelectableValueDrawer Concrete implementation of process variable selectable value drawer. ProcessVariableFloatSelectableValueDrawer Concrete implementation of process variable selectable value drawer. ProcessVariableStringSelectableValueDrawer Concrete implementation of process variable selectable value drawer. ResourcePathDrawer<T> Draws an object field and sets the Resources path of the dragged object. SceneDropdownDrawer Drawer for a dropdown listing all the scenes in the build settings and allowing to select one by index. SceneObjectTagDrawer Drawer for SceneObjectTagBase. SelectableValueDrawer<TFirst, TSecond> Template drawer for selectable values. A concrete implementation of this drawer is required for each use case. StringsSelectableValueDrawer Selectable value drawer letting the user choose between two string values. UniqueNameReferenceDrawer Process drawer for UniqueNameReference members. UserTagDropdownDrawer Drawer for SceneObjectTagBase. VideoClipResourceDrawer Implementation of asset path drawer for UnityEngine.Video.VideoClip assets. Structs DropDownElement<T> An element in a dropdown. Interfaces IProcessDrawer Interface of a drawer for process members."
  },
  "api/VRBuilder.Editor.UI.EditorDrawingHelper.html": {
    "href": "api/VRBuilder.Editor.UI.EditorDrawingHelper.html",
    "title": "Class EditorDrawingHelper | VR Builder Documentation",
    "keywords": "Class EditorDrawingHelper Namespace VRBuilder.Editor.UI Assembly VRBuilder.Editor.dll Helper class for drawing primitives in custom editors. public static class EditorDrawingHelper Inheritance object EditorDrawingHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ButtonHeight Height of one button in the Step Inspector. public static float ButtonHeight Field Value float Remarks There isn't a constant for this in Unity. This is the same as the height of the \"Add Behavior\" Unity button. IndentationWidth Width of one indentation step in the Step Inspector. public const float IndentationWidth = 16 Field Value float VerticalSpacing Default spacing between Step Inspector elements. public const float VerticalSpacing = 6 Field Value float Properties HeaderLineHeight Height of slightly bigger line in the Step Inspector. public static float HeaderLineHeight { get; } Property Value float SingleLineHeight Height of one line in the Step Inspector. public static float SingleLineHeight { get; } Property Value float Methods CalculateAddButtonRect(ref Rect) Draw button which is similar to default \"Add Component\" Unity button. public static Rect CalculateAddButtonRect(ref Rect rect) Parameters rect Rect Returns Rect DrawAddButton(ref Rect, string) Draw button which is similar to default \"Add Component\" Unity button. public static bool DrawAddButton(ref Rect rect, string label) Parameters rect Rect label string Returns bool DrawArrow(Vector2, Vector2, Color, float, float) Draw an arrow. public static void DrawArrow(Vector2 from, Vector2 to, Color color, float arrowheadAngleInDegrees, float arrowheadLength) Parameters from Vector2 Position from which arrow begins. to Vector2 Position at which arrow is pointing. color Color Arrow color. arrowheadAngleInDegrees float How wide is the arrow's end in degrees. arrowheadLength float How long is the arrow head in pixels. DrawCircle(Vector2, float, Color) Draw a circle. public static void DrawCircle(Vector2 position, float radius, Color color) Parameters position Vector2 Center of the circle. radius float Radius of the circle. color Color Color of the circle. DrawFoldoutWithReducedFocusArea(Rect, bool, GUIContent, GUIStyle, GUIStyle) Draws EditorGUI.Foldout with focus area located only around triangle-shaped button. public static bool DrawFoldoutWithReducedFocusArea(Rect rect, bool currentState, GUIContent foldoutLabel, GUIStyle foldoutStyle = null, GUIStyle labelStyle = null) Parameters rect Rect Rectangle in which foldout view is drawn. currentState bool Are contents folded out. foldoutLabel GUIContent Foldout text. foldoutStyle GUIStyle Foldout style. labelStyle GUIStyle Returns bool result of EditorGUI.Foldout (is foldout expanded or not). DrawHelpButton(ref Rect) Draw a paste button next to the DrawPasteButton(ref Rect) button. public static bool DrawHelpButton(ref Rect rect) Parameters rect Rect Returns bool DrawHollowRectangle(Rect, Color, float) Draws a rectangle which is hollow inside. public static void DrawHollowRectangle(Rect rect, Color color, float lineWidth) Parameters rect Rect Rect that defines outer bounds of rectangle. color Color Color of rectangle borders. lineWidth float Thickness of the rect border. DrawHorizontalLine(Vector2, float, Color) Draws a horizontal line starting at startPoint with given length. public static void DrawHorizontalLine(Vector2 startPoint, float length, Color color) Parameters startPoint Vector2 Origin of line. length float Length of line. color Color Color or line. DrawPasteButton(ref Rect) Draw a paste button next to the DrawAddButton(ref Rect, string) button. public static bool DrawPasteButton(ref Rect rect) Parameters rect Rect Returns bool DrawPolyline(IList<Vector2>, Color) Draws a curve by connecting the given points with lines. public static void DrawPolyline(IList<Vector2> points, Color color) Parameters points IList<Vector2> color Color Color of the curve. DrawRect(Rect, Color) Draw a rect. public static void DrawRect(Rect rect, Color color) Parameters rect Rect Rect size and position to draw. color Color Color of the rect. DrawRoundedRect(Rect, Color, float) Draw a rectangle with rounded corners. public static void DrawRoundedRect(Rect rect, Color color, float cornerRadius) Parameters rect Rect Rect size and position to draw. color Color Color of the rect. cornerRadius float Corners are drawn as quarters of a circle with radius equal to cornerRadius. If the radius is too small (less than one pixel) or too big (bigger than a half of any side), simple rect is drawn. DrawTexture(Rect, Texture, Color) Draws a texture in a specific color public static void DrawTexture(Rect iconRect, Texture texture, Color color) Parameters iconRect Rect Position and size of the texture. texture Texture The texture to paint. color Color The color it should be painted in. DrawTriangle(IList<Vector2>, Color) Draw a triangle. public static void DrawTriangle(IList<Vector2> points, Color color) Parameters points IList<Vector2> List of points color Color Fill color of triangle DrawVerticalLine(Vector2, float, Color) Draws a vertical line starting at startPoint with given length. public static void DrawVerticalLine(Vector2 startPoint, float length, Color color) Parameters startPoint Vector2 Origin of line. length float Length of line. color Color Color or line. GetNextLineRect(Rect) Returns Rect which is one EditorGUIUtility.singleLineHeight lower and one EditorGUIUtility.singleLineHeight shorter than origin Rect. public static Rect GetNextLineRect(Rect origin) Parameters origin Rect Returns Rect TruncateText(string, GUIStyle, float, string) Truncate given text. Applies truncatingSequence at the end of truncated text. Space characters at the end of the line are discarded. Designed for a single-line string, no clue how well would it work with multi-line. public static string TruncateText(string text, GUIStyle style, float maxWidth, string truncatingSequence = \"...\") Parameters text string Initial text. style GUIStyle Style in which text width is calculated. maxWidth float Maximal width allowed in pixels. truncatingSequence string Text to be appended at the end of the truncated text. Returns string Truncated text that is not wider than maximal width."
  },
  "api/VRBuilder.Editor.UI.EditorIcon.html": {
    "href": "api/VRBuilder.Editor.UI.EditorIcon.html",
    "title": "Class EditorIcon | VR Builder Documentation",
    "keywords": "Class EditorIcon Namespace VRBuilder.Editor.UI Assembly VRBuilder.Editor.dll Utility class to help with different unity color schemes (dark/light). Takes care about loading the given icon, will add _light or _dark to the given path. If only one icon is found it will be used for both skins. If no icon is found there will be an NullReferenceException thrown. DO NOT ADD FILE ENDINGS TO THE PATH! public class EditorIcon Inheritance object EditorIcon Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EditorIcon(string) public EditorIcon(string path) Parameters path string Properties Texture Returns the texture of the icon, depending on the skin used. public Texture Texture { get; } Property Value Texture"
  },
  "api/VRBuilder.Editor.UI.Graphics.DefaultStepNodeInstantiator.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.DefaultStepNodeInstantiator.html",
    "title": "Class DefaultStepNodeInstantiator | VR Builder Documentation",
    "keywords": "Class DefaultStepNodeInstantiator Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Instantiator for a default IStep node. public class DefaultStepNodeInstantiator : IStepNodeInstantiator Inheritance object DefaultStepNodeInstantiator Implements IStepNodeInstantiator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsInNodeMenu If true, it will appear in the node menu. public bool IsInNodeMenu { get; } Property Value bool Name Display name of the instantiated node. public string Name { get; } Property Value string Priority Nodes with a lower value will appear first in the menu. public int Priority { get; } Property Value int StepType Step type metadata. public string StepType { get; } Property Value string Methods GetContextMenuStatus(IEventHandler, IChapter) Returns the status for the context menu entry to instantiate the node. public DropdownMenuAction.Status GetContextMenuStatus(IEventHandler target, IChapter currentChapter) Parameters target IEventHandler currentChapter IChapter Returns DropdownMenuAction.Status InstantiateNode(IStep) Creates a graphview node of the corresponding type. public ProcessGraphNode InstantiateNode(IStep step) Parameters step IStep Returns ProcessGraphNode"
  },
  "api/VRBuilder.Editor.UI.Graphics.EndChapterNode.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.EndChapterNode.html",
    "title": "Class EndChapterNode | VR Builder Documentation",
    "keywords": "Class EndChapterNode Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Node representation for the End Chapter node. public class EndChapterNode : StepGraphNode, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle, ISelectable, ICollectibleElement Inheritance object CallbackEventHandler Focusable VisualElement GraphElement Node ProcessGraphNode StepGraphNode EndChapterNode Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle ISelectable ICollectibleElement Inherited Members StepGraphNode.step StepGraphNode.Name StepGraphNode.EntryPoint StepGraphNode.Outputs StepGraphNode.Position StepGraphNode.Refresh() StepGraphNode.CreatePortWithUndo() StepGraphNode.RemovePort(Port) StepGraphNode.RemovePortWithUndo(Port) StepGraphNode.SetOutput(int, IStep) StepGraphNode.AddToChapter(IChapter) StepGraphNode.RemoveFromChapter(IChapter) StepGraphNode.UpdateOutputPortName(Port, Node) ProcessGraphNode.deleteIconFileName ProcessGraphNode.editIconFileName ProcessGraphNode.defaultNodeSize ProcessGraphNode.IsEntryPoint ProcessGraphNode.CreatePort(Direction, Port.Capacity) ProcessGraphNode.GetIcon(string) ProcessGraphNode.OpenTextEditor() ProcessGraphNode.OnEditTextFinished(TextField) Node.m_CollapseButton Node.m_ButtonContainer Node.RefreshExpandedState() Node.GetPosition() Node.SetPosition(Rect) Node.OnPortRemoved(Port) Node.InstantiatePort(Orientation, Direction, Port.Capacity, Type) Node.RefreshPorts() Node.ToggleCollapse() Node.UseDefaultStyling() Node.BuildContextualMenu(ContextualMenuPopulateEvent) Node.CollectElements(HashSet<GraphElement>, Func<GraphElement, bool>) Node.mainContainer Node.titleContainer Node.inputContainer Node.outputContainer Node.titleButtonContainer Node.topContainer Node.extensionContainer Node.expanded Node.title GraphElement.ResetLayer() GraphElement.OnCustomStyleResolved(ICustomStyle) GraphElement.IsSelectable() GraphElement.IsMovable() GraphElement.IsResizable() GraphElement.IsDroppable() GraphElement.IsAscendable() GraphElement.IsRenamable() GraphElement.IsCopiable() GraphElement.IsSnappable() GraphElement.IsGroupable() GraphElement.IsStackable() GraphElement.GetGlobalCenter() GraphElement.UpdatePresenterPosition() GraphElement.OnUnselected() GraphElement.HitTest(Vector2) GraphElement.Select(VisualElement, bool) GraphElement.Unselect(VisualElement) GraphElement.IsSelected(VisualElement) GraphElement.elementTypeColor GraphElement.layer GraphElement.showInMiniMap GraphElement.capabilities GraphElement.selected VisualElement.disabledUssClassName VisualElement.ExecuteDefaultAction(EventBase) VisualElement.Focus() VisualElement.SendEvent(EventBase) VisualElement.SetEnabledFromHierarchy(bool) VisualElement.SetEnabled(bool) VisualElement.MarkDirtyRepaint() VisualElement.ContainsPoint(Vector2) VisualElement.Overlaps(Rect) VisualElement.DoMeasure(float, VisualElement.MeasureMode, float, VisualElement.MeasureMode) VisualElement.ToString() VisualElement.GetClasses() VisualElement.ClearClassList() VisualElement.AddToClassList(string) VisualElement.RemoveFromClassList(string) VisualElement.ToggleInClassList(string) VisualElement.EnableInClassList(string, bool) VisualElement.ClassListContains(string) VisualElement.FindAncestorUserData() VisualElement.Add(VisualElement) VisualElement.Insert(int, VisualElement) VisualElement.Remove(VisualElement) VisualElement.RemoveAt(int) VisualElement.Clear() VisualElement.ElementAt(int) VisualElement.IndexOf(VisualElement) VisualElement.Children() VisualElement.Sort(Comparison<VisualElement>) VisualElement.BringToFront() VisualElement.SendToBack() VisualElement.PlaceBehind(VisualElement) VisualElement.PlaceInFront(VisualElement) VisualElement.RemoveFromHierarchy() VisualElement.GetFirstOfType<T>() VisualElement.GetFirstAncestorOfType<T>() VisualElement.Contains(VisualElement) VisualElement.FindCommonAncestor(VisualElement) VisualElement.viewDataKey VisualElement.userData VisualElement.canGrabFocus VisualElement.focusController VisualElement.usageHints VisualElement.transform VisualElement.layout VisualElement.contentRect VisualElement.paddingRect VisualElement.worldBound VisualElement.localBound VisualElement.worldTransform VisualElement.pickingMode VisualElement.name VisualElement.enabledInHierarchy VisualElement.enabledSelf VisualElement.visible VisualElement.generateVisualContent VisualElement.experimental VisualElement.hierarchy VisualElement.cacheAsBitmap VisualElement.parent VisualElement.panel VisualElement.contentContainer VisualElement.visualTreeAssetSource VisualElement.this[int] VisualElement.childCount VisualElement.schedule VisualElement.style VisualElement.customStyle VisualElement.styleSheets VisualElement.tooltip VisualElement.resolvedStyle Focusable.Blur() Focusable.focusable Focusable.tabIndex Focusable.delegatesFocus CallbackEventHandler.RegisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.RegisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TUserArgsType, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TrickleDown) CallbackEventHandler.HandleEvent(EventBase) CallbackEventHandler.HasTrickleDownHandlers() CallbackEventHandler.HasBubbleUpHandlers() CallbackEventHandler.ExecuteDefaultActionAtTarget(EventBase) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors EndChapterNode(IStep) public EndChapterNode(IStep step) Parameters step IStep Fields DefaultPadding protected const float DefaultPadding = 8 Field Value float DropDownPadding protected const float DropDownPadding = 4 Field Value float ElementWidth protected const float ElementWidth = 128 Field Value float Properties Behavior protected GoToChapterBehavior Behavior { get; } Property Value GoToChapterBehavior Methods AddTransitionPort(bool, int) Adds a potentially deletable transition port to this node. public override Port AddTransitionPort(bool isDeletablePort = true, int index = -1) Parameters isDeletablePort bool If true, a delete button is created which allows to delete the transition. index int Index where to insert the port, if blank it will be added at the end of the list. Returns Port The created port. OnSelected() Called when the GraphElement is selected. public override void OnSelected()"
  },
  "api/VRBuilder.Editor.UI.Graphics.EndChapterNodeInstantiator.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.EndChapterNodeInstantiator.html",
    "title": "Class EndChapterNodeInstantiator | VR Builder Documentation",
    "keywords": "Class EndChapterNodeInstantiator Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Instantiator for the End Chapter node. public class EndChapterNodeInstantiator : IStepNodeInstantiator Inheritance object EndChapterNodeInstantiator Implements IStepNodeInstantiator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsInNodeMenu If true, it will appear in the node menu. public bool IsInNodeMenu { get; } Property Value bool Name Display name of the instantiated node. public string Name { get; } Property Value string Priority Nodes with a lower value will appear first in the menu. public int Priority { get; } Property Value int StepType Step type metadata. public string StepType { get; } Property Value string Methods GetContextMenuStatus(IEventHandler, IChapter) Returns the status for the context menu entry to instantiate the node. public DropdownMenuAction.Status GetContextMenuStatus(IEventHandler target, IChapter currentChapter) Parameters target IEventHandler currentChapter IChapter Returns DropdownMenuAction.Status InstantiateNode(IStep) Creates a graphview node of the corresponding type. public ProcessGraphNode InstantiateNode(IStep step) Parameters step IStep Returns ProcessGraphNode"
  },
  "api/VRBuilder.Editor.UI.Graphics.EntryPointNode.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.EntryPointNode.html",
    "title": "Class EntryPointNode | VR Builder Documentation",
    "keywords": "Class EntryPointNode Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Entry point node in a graph view editor. public class EntryPointNode : ProcessGraphNode, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle, ISelectable, ICollectibleElement Inheritance object CallbackEventHandler Focusable VisualElement GraphElement Node ProcessGraphNode EntryPointNode Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle ISelectable ICollectibleElement Inherited Members ProcessGraphNode.deleteIconFileName ProcessGraphNode.editIconFileName ProcessGraphNode.defaultNodeSize ProcessGraphNode.IsEntryPoint ProcessGraphNode.UpdateOutputPortName(Port, Node) ProcessGraphNode.AddTransitionPort(bool, int) ProcessGraphNode.CreatePort(Direction, Port.Capacity) ProcessGraphNode.GetIcon(string) ProcessGraphNode.OpenTextEditor() ProcessGraphNode.OnEditTextFinished(TextField) Node.m_CollapseButton Node.m_ButtonContainer Node.RefreshExpandedState() Node.GetPosition() Node.SetPosition(Rect) Node.OnPortRemoved(Port) Node.InstantiatePort(Orientation, Direction, Port.Capacity, Type) Node.RefreshPorts() Node.ToggleCollapse() Node.UseDefaultStyling() Node.BuildContextualMenu(ContextualMenuPopulateEvent) Node.CollectElements(HashSet<GraphElement>, Func<GraphElement, bool>) Node.mainContainer Node.titleContainer Node.inputContainer Node.outputContainer Node.titleButtonContainer Node.topContainer Node.extensionContainer Node.expanded Node.title GraphElement.ResetLayer() GraphElement.OnCustomStyleResolved(ICustomStyle) GraphElement.IsSelectable() GraphElement.IsMovable() GraphElement.IsResizable() GraphElement.IsDroppable() GraphElement.IsAscendable() GraphElement.IsRenamable() GraphElement.IsCopiable() GraphElement.IsSnappable() GraphElement.IsGroupable() GraphElement.IsStackable() GraphElement.GetGlobalCenter() GraphElement.UpdatePresenterPosition() GraphElement.OnUnselected() GraphElement.HitTest(Vector2) GraphElement.Select(VisualElement, bool) GraphElement.Unselect(VisualElement) GraphElement.IsSelected(VisualElement) GraphElement.elementTypeColor GraphElement.layer GraphElement.showInMiniMap GraphElement.capabilities GraphElement.selected VisualElement.disabledUssClassName VisualElement.ExecuteDefaultAction(EventBase) VisualElement.Focus() VisualElement.SendEvent(EventBase) VisualElement.SetEnabledFromHierarchy(bool) VisualElement.SetEnabled(bool) VisualElement.MarkDirtyRepaint() VisualElement.ContainsPoint(Vector2) VisualElement.Overlaps(Rect) VisualElement.DoMeasure(float, VisualElement.MeasureMode, float, VisualElement.MeasureMode) VisualElement.ToString() VisualElement.GetClasses() VisualElement.ClearClassList() VisualElement.AddToClassList(string) VisualElement.RemoveFromClassList(string) VisualElement.ToggleInClassList(string) VisualElement.EnableInClassList(string, bool) VisualElement.ClassListContains(string) VisualElement.FindAncestorUserData() VisualElement.Add(VisualElement) VisualElement.Insert(int, VisualElement) VisualElement.Remove(VisualElement) VisualElement.RemoveAt(int) VisualElement.Clear() VisualElement.ElementAt(int) VisualElement.IndexOf(VisualElement) VisualElement.Children() VisualElement.Sort(Comparison<VisualElement>) VisualElement.BringToFront() VisualElement.SendToBack() VisualElement.PlaceBehind(VisualElement) VisualElement.PlaceInFront(VisualElement) VisualElement.RemoveFromHierarchy() VisualElement.GetFirstOfType<T>() VisualElement.GetFirstAncestorOfType<T>() VisualElement.Contains(VisualElement) VisualElement.FindCommonAncestor(VisualElement) VisualElement.viewDataKey VisualElement.userData VisualElement.canGrabFocus VisualElement.focusController VisualElement.usageHints VisualElement.transform VisualElement.layout VisualElement.contentRect VisualElement.paddingRect VisualElement.worldBound VisualElement.localBound VisualElement.worldTransform VisualElement.pickingMode VisualElement.name VisualElement.enabledInHierarchy VisualElement.enabledSelf VisualElement.visible VisualElement.generateVisualContent VisualElement.experimental VisualElement.hierarchy VisualElement.cacheAsBitmap VisualElement.parent VisualElement.panel VisualElement.contentContainer VisualElement.visualTreeAssetSource VisualElement.this[int] VisualElement.childCount VisualElement.schedule VisualElement.style VisualElement.customStyle VisualElement.styleSheets VisualElement.tooltip VisualElement.resolvedStyle Focusable.Blur() Focusable.focusable Focusable.tabIndex Focusable.delegatesFocus CallbackEventHandler.RegisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.RegisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TUserArgsType, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TrickleDown) CallbackEventHandler.HandleEvent(EventBase) CallbackEventHandler.HasTrickleDownHandlers() CallbackEventHandler.HasBubbleUpHandlers() CallbackEventHandler.ExecuteDefaultActionAtTarget(EventBase) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors EntryPointNode() public EntryPointNode() Properties EntryPoint Step other nodes connect to. public override IStep EntryPoint { get; } Property Value IStep Name Name of the node. public override string Name { get; set; } Property Value string Outputs Steps this node leads to. public override IStep[] Outputs { get; } Property Value IStep[] Position Position in the graph. public override Vector2 Position { get; set; } Property Value Vector2 Methods AddToChapter(IChapter) Adds node to specified chapter. public override void AddToChapter(IChapter chapter) Parameters chapter IChapter OnSelected() Called when the GraphElement is selected. public override void OnSelected() Refresh() Refreshes the node's graphics. public override void Refresh() RemoveFromChapter(IChapter) Removes node from specified chapter. public override void RemoveFromChapter(IChapter chapter) Parameters chapter IChapter RemovePortWithUndo(Port) Remove port with undo. protected override void RemovePortWithUndo(Port port) Parameters port Port SetOutput(int, IStep) Sets an output to the specified step. public override void SetOutput(int index, IStep output) Parameters index int output IStep"
  },
  "api/VRBuilder.Editor.UI.Graphics.IContextMenuActions.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.IContextMenuActions.html",
    "title": "Interface IContextMenuActions | VR Builder Documentation",
    "keywords": "Interface IContextMenuActions Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Interface for a process graph object having custom context menu actions. public interface IContextMenuActions Methods AddContextMenuActions(DropdownMenu) Adds custom actions to the context menu. void AddContextMenuActions(DropdownMenu menu) Parameters menu DropdownMenu"
  },
  "api/VRBuilder.Editor.UI.Graphics.IStepNodeInstantiator.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.IStepNodeInstantiator.html",
    "title": "Interface IStepNodeInstantiator | VR Builder Documentation",
    "keywords": "Interface IStepNodeInstantiator Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Instantiates a node matching the public interface IStepNodeInstantiator Properties IsInNodeMenu If true, it will appear in the node menu. bool IsInNodeMenu { get; } Property Value bool Name Display name of the instantiated node. string Name { get; } Property Value string Priority Nodes with a lower value will appear first in the menu. int Priority { get; } Property Value int StepType Step type metadata. string StepType { get; } Property Value string Methods GetContextMenuStatus(IEventHandler, IChapter) Returns the status for the context menu entry to instantiate the node. DropdownMenuAction.Status GetContextMenuStatus(IEventHandler target, IChapter currentChapter) Parameters target IEventHandler currentChapter IChapter Returns DropdownMenuAction.Status InstantiateNode(IStep) Creates a graphview node of the corresponding type. ProcessGraphNode InstantiateNode(IStep step) Parameters step IStep Returns ProcessGraphNode"
  },
  "api/VRBuilder.Editor.UI.Graphics.ParallelExecutionNode.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.ParallelExecutionNode.html",
    "title": "Class ParallelExecutionNode | VR Builder Documentation",
    "keywords": "Class ParallelExecutionNode Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Graphical representation of a Parallel Execution node. public class ParallelExecutionNode : StepGraphNode, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle, ISelectable, ICollectibleElement Inheritance object CallbackEventHandler Focusable VisualElement GraphElement Node ProcessGraphNode StepGraphNode ParallelExecutionNode Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle ISelectable ICollectibleElement Inherited Members StepGraphNode.step StepGraphNode.Name StepGraphNode.EntryPoint StepGraphNode.Outputs StepGraphNode.Position StepGraphNode.CreatePortWithUndo() StepGraphNode.RemovePort(Port) StepGraphNode.RemovePortWithUndo(Port) StepGraphNode.SetOutput(int, IStep) StepGraphNode.AddToChapter(IChapter) StepGraphNode.RemoveFromChapter(IChapter) StepGraphNode.UpdateOutputPortName(Port, Node) ProcessGraphNode.deleteIconFileName ProcessGraphNode.editIconFileName ProcessGraphNode.defaultNodeSize ProcessGraphNode.IsEntryPoint ProcessGraphNode.AddTransitionPort(bool, int) ProcessGraphNode.CreatePort(Direction, Port.Capacity) ProcessGraphNode.GetIcon(string) ProcessGraphNode.OpenTextEditor() ProcessGraphNode.OnEditTextFinished(TextField) Node.m_CollapseButton Node.m_ButtonContainer Node.RefreshExpandedState() Node.GetPosition() Node.SetPosition(Rect) Node.OnPortRemoved(Port) Node.InstantiatePort(Orientation, Direction, Port.Capacity, Type) Node.RefreshPorts() Node.ToggleCollapse() Node.UseDefaultStyling() Node.BuildContextualMenu(ContextualMenuPopulateEvent) Node.CollectElements(HashSet<GraphElement>, Func<GraphElement, bool>) Node.mainContainer Node.titleContainer Node.inputContainer Node.outputContainer Node.titleButtonContainer Node.topContainer Node.extensionContainer Node.expanded Node.title GraphElement.ResetLayer() GraphElement.OnCustomStyleResolved(ICustomStyle) GraphElement.IsSelectable() GraphElement.IsMovable() GraphElement.IsResizable() GraphElement.IsDroppable() GraphElement.IsAscendable() GraphElement.IsRenamable() GraphElement.IsCopiable() GraphElement.IsSnappable() GraphElement.IsGroupable() GraphElement.IsStackable() GraphElement.GetGlobalCenter() GraphElement.UpdatePresenterPosition() GraphElement.OnUnselected() GraphElement.HitTest(Vector2) GraphElement.Select(VisualElement, bool) GraphElement.Unselect(VisualElement) GraphElement.IsSelected(VisualElement) GraphElement.elementTypeColor GraphElement.layer GraphElement.showInMiniMap GraphElement.capabilities GraphElement.selected VisualElement.disabledUssClassName VisualElement.ExecuteDefaultAction(EventBase) VisualElement.Focus() VisualElement.SendEvent(EventBase) VisualElement.SetEnabledFromHierarchy(bool) VisualElement.SetEnabled(bool) VisualElement.MarkDirtyRepaint() VisualElement.ContainsPoint(Vector2) VisualElement.Overlaps(Rect) VisualElement.DoMeasure(float, VisualElement.MeasureMode, float, VisualElement.MeasureMode) VisualElement.ToString() VisualElement.GetClasses() VisualElement.ClearClassList() VisualElement.AddToClassList(string) VisualElement.RemoveFromClassList(string) VisualElement.ToggleInClassList(string) VisualElement.EnableInClassList(string, bool) VisualElement.ClassListContains(string) VisualElement.FindAncestorUserData() VisualElement.Add(VisualElement) VisualElement.Insert(int, VisualElement) VisualElement.Remove(VisualElement) VisualElement.RemoveAt(int) VisualElement.Clear() VisualElement.ElementAt(int) VisualElement.IndexOf(VisualElement) VisualElement.Children() VisualElement.Sort(Comparison<VisualElement>) VisualElement.BringToFront() VisualElement.SendToBack() VisualElement.PlaceBehind(VisualElement) VisualElement.PlaceInFront(VisualElement) VisualElement.RemoveFromHierarchy() VisualElement.GetFirstOfType<T>() VisualElement.GetFirstAncestorOfType<T>() VisualElement.Contains(VisualElement) VisualElement.FindCommonAncestor(VisualElement) VisualElement.viewDataKey VisualElement.userData VisualElement.canGrabFocus VisualElement.focusController VisualElement.usageHints VisualElement.transform VisualElement.layout VisualElement.contentRect VisualElement.paddingRect VisualElement.worldBound VisualElement.localBound VisualElement.worldTransform VisualElement.pickingMode VisualElement.name VisualElement.enabledInHierarchy VisualElement.enabledSelf VisualElement.visible VisualElement.generateVisualContent VisualElement.experimental VisualElement.hierarchy VisualElement.cacheAsBitmap VisualElement.parent VisualElement.panel VisualElement.contentContainer VisualElement.visualTreeAssetSource VisualElement.this[int] VisualElement.childCount VisualElement.schedule VisualElement.style VisualElement.customStyle VisualElement.styleSheets VisualElement.tooltip VisualElement.resolvedStyle Focusable.Blur() Focusable.focusable Focusable.tabIndex Focusable.delegatesFocus CallbackEventHandler.RegisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.RegisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TUserArgsType, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TrickleDown) CallbackEventHandler.HandleEvent(EventBase) CallbackEventHandler.HasTrickleDownHandlers() CallbackEventHandler.HasBubbleUpHandlers() CallbackEventHandler.ExecuteDefaultActionAtTarget(EventBase) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ParallelExecutionNode(IStep) public ParallelExecutionNode(IStep step) Parameters step IStep Fields DefaultThreadName public static string DefaultThreadName Field Value string Properties Behavior protected ExecuteChaptersBehavior Behavior { get; } Property Value ExecuteChaptersBehavior Methods OnSelected() Called when the GraphElement is selected. public override void OnSelected() Refresh() Refreshes the node's graphics. public override void Refresh()"
  },
  "api/VRBuilder.Editor.UI.Graphics.ParallelExecutionNodeInstantiator.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.ParallelExecutionNodeInstantiator.html",
    "title": "Class ParallelExecutionNodeInstantiator | VR Builder Documentation",
    "keywords": "Class ParallelExecutionNodeInstantiator Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Instantiator for the Step Group node. public class ParallelExecutionNodeInstantiator : IStepNodeInstantiator Inheritance object ParallelExecutionNodeInstantiator Implements IStepNodeInstantiator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsInNodeMenu If true, it will appear in the node menu. public bool IsInNodeMenu { get; } Property Value bool Name Display name of the instantiated node. public string Name { get; } Property Value string Priority Nodes with a lower value will appear first in the menu. public int Priority { get; } Property Value int StepType Step type metadata. public string StepType { get; } Property Value string Methods GetContextMenuStatus(IEventHandler, IChapter) Returns the status for the context menu entry to instantiate the node. public DropdownMenuAction.Status GetContextMenuStatus(IEventHandler target, IChapter currentChapter) Parameters target IEventHandler currentChapter IChapter Returns DropdownMenuAction.Status InstantiateNode(IStep) Creates a graphview node of the corresponding type. public ProcessGraphNode InstantiateNode(IStep step) Parameters step IStep Returns ProcessGraphNode"
  },
  "api/VRBuilder.Editor.UI.Graphics.ProcessExec.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.ProcessExec.html",
    "title": "Class ProcessExec | VR Builder Documentation",
    "keywords": "Class ProcessExec Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Type that connects step nodes in the graph view editor. public class ProcessExec Inheritance object ProcessExec Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.UI.Graphics.ProcessGraphNode.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.ProcessGraphNode.html",
    "title": "Class ProcessGraphNode | VR Builder Documentation",
    "keywords": "Class ProcessGraphNode Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Process node in a graph view editor. public abstract class ProcessGraphNode : Node, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle, ISelectable, ICollectibleElement Inheritance object CallbackEventHandler Focusable VisualElement GraphElement Node ProcessGraphNode Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle ISelectable ICollectibleElement Derived EntryPointNode StepGraphNode Inherited Members Node.m_CollapseButton Node.m_ButtonContainer Node.RefreshExpandedState() Node.GetPosition() Node.SetPosition(Rect) Node.OnPortRemoved(Port) Node.InstantiatePort(Orientation, Direction, Port.Capacity, Type) Node.RefreshPorts() Node.ToggleCollapse() Node.UseDefaultStyling() Node.BuildContextualMenu(ContextualMenuPopulateEvent) Node.CollectElements(HashSet<GraphElement>, Func<GraphElement, bool>) Node.mainContainer Node.titleContainer Node.inputContainer Node.outputContainer Node.titleButtonContainer Node.topContainer Node.extensionContainer Node.expanded Node.title GraphElement.ResetLayer() GraphElement.OnCustomStyleResolved(ICustomStyle) GraphElement.IsSelectable() GraphElement.IsMovable() GraphElement.IsResizable() GraphElement.IsDroppable() GraphElement.IsAscendable() GraphElement.IsRenamable() GraphElement.IsCopiable() GraphElement.IsSnappable() GraphElement.IsGroupable() GraphElement.IsStackable() GraphElement.GetGlobalCenter() GraphElement.UpdatePresenterPosition() GraphElement.OnSelected() GraphElement.OnUnselected() GraphElement.HitTest(Vector2) GraphElement.Select(VisualElement, bool) GraphElement.Unselect(VisualElement) GraphElement.IsSelected(VisualElement) GraphElement.elementTypeColor GraphElement.layer GraphElement.showInMiniMap GraphElement.capabilities GraphElement.selected VisualElement.disabledUssClassName VisualElement.ExecuteDefaultAction(EventBase) VisualElement.Focus() VisualElement.SendEvent(EventBase) VisualElement.SetEnabledFromHierarchy(bool) VisualElement.SetEnabled(bool) VisualElement.MarkDirtyRepaint() VisualElement.ContainsPoint(Vector2) VisualElement.Overlaps(Rect) VisualElement.DoMeasure(float, VisualElement.MeasureMode, float, VisualElement.MeasureMode) VisualElement.ToString() VisualElement.GetClasses() VisualElement.ClearClassList() VisualElement.AddToClassList(string) VisualElement.RemoveFromClassList(string) VisualElement.ToggleInClassList(string) VisualElement.EnableInClassList(string, bool) VisualElement.ClassListContains(string) VisualElement.FindAncestorUserData() VisualElement.Add(VisualElement) VisualElement.Insert(int, VisualElement) VisualElement.Remove(VisualElement) VisualElement.RemoveAt(int) VisualElement.Clear() VisualElement.ElementAt(int) VisualElement.IndexOf(VisualElement) VisualElement.Children() VisualElement.Sort(Comparison<VisualElement>) VisualElement.BringToFront() VisualElement.SendToBack() VisualElement.PlaceBehind(VisualElement) VisualElement.PlaceInFront(VisualElement) VisualElement.RemoveFromHierarchy() VisualElement.GetFirstOfType<T>() VisualElement.GetFirstAncestorOfType<T>() VisualElement.Contains(VisualElement) VisualElement.FindCommonAncestor(VisualElement) VisualElement.viewDataKey VisualElement.userData VisualElement.canGrabFocus VisualElement.focusController VisualElement.usageHints VisualElement.transform VisualElement.layout VisualElement.contentRect VisualElement.paddingRect VisualElement.worldBound VisualElement.localBound VisualElement.worldTransform VisualElement.pickingMode VisualElement.name VisualElement.enabledInHierarchy VisualElement.enabledSelf VisualElement.visible VisualElement.generateVisualContent VisualElement.experimental VisualElement.hierarchy VisualElement.cacheAsBitmap VisualElement.parent VisualElement.panel VisualElement.contentContainer VisualElement.visualTreeAssetSource VisualElement.this[int] VisualElement.childCount VisualElement.schedule VisualElement.style VisualElement.customStyle VisualElement.styleSheets VisualElement.tooltip VisualElement.resolvedStyle Focusable.Blur() Focusable.focusable Focusable.tabIndex Focusable.delegatesFocus CallbackEventHandler.RegisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.RegisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TUserArgsType, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TrickleDown) CallbackEventHandler.HandleEvent(EventBase) CallbackEventHandler.HasTrickleDownHandlers() CallbackEventHandler.HasBubbleUpHandlers() CallbackEventHandler.ExecuteDefaultActionAtTarget(EventBase) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ProcessGraphNode() public ProcessGraphNode() Fields defaultNodeSize protected Vector2 defaultNodeSize Field Value Vector2 deleteIconFileName protected const string deleteIconFileName = \"icon_delete\" Field Value string editIconFileName protected const string editIconFileName = \"icon_edit\" Field Value string Properties EntryPoint Step other nodes connect to. public abstract IStep EntryPoint { get; } Property Value IStep IsEntryPoint True if this is the \"Start\" node. public bool IsEntryPoint { get; set; } Property Value bool Name Name of the node. public abstract string Name { get; set; } Property Value string Outputs Steps this node leads to. public abstract IStep[] Outputs { get; } Property Value IStep[] Position Position in the graph. public abstract Vector2 Position { get; set; } Property Value Vector2 Methods AddToChapter(IChapter) Adds node to specified chapter. public abstract void AddToChapter(IChapter chapter) Parameters chapter IChapter AddTransitionPort(bool, int) Adds a potentially deletable transition port to this node. public virtual Port AddTransitionPort(bool isDeletablePort = true, int index = -1) Parameters isDeletablePort bool If true, a delete button is created which allows to delete the transition. index int Index where to insert the port, if blank it will be added at the end of the list. Returns Port The created port. CreatePort(Direction, Capacity) protected Port CreatePort(Direction direction, Port.Capacity capacity = Capacity.Single) Parameters direction Direction capacity Port.Capacity Returns Port GetIcon(string) protected Image GetIcon(string fileName) Parameters fileName string Returns Image OnEditTextFinished(TextField) protected virtual void OnEditTextFinished(TextField textField) Parameters textField TextField OpenTextEditor() protected virtual void OpenTextEditor() Refresh() Refreshes the node's graphics. public virtual void Refresh() RemoveFromChapter(IChapter) Removes node from specified chapter. public abstract void RemoveFromChapter(IChapter chapter) Parameters chapter IChapter RemovePortWithUndo(Port) Remove port with undo. protected abstract void RemovePortWithUndo(Port port) Parameters port Port SetOutput(int, IStep) Sets an output to the specified step. public abstract void SetOutput(int index, IStep output) Parameters index int output IStep UpdateOutputPortName(Port, Node) Updates the name of the output port depending on the node it is connected with. public virtual void UpdateOutputPortName(Port outputPort, Node input) Parameters outputPort Port input Node"
  },
  "api/VRBuilder.Editor.UI.Graphics.ProcessGraphView.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.ProcessGraphView.html",
    "title": "Class ProcessGraphView | VR Builder Documentation",
    "keywords": "Class ProcessGraphView Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Graphical representation of a process chapter. public class ProcessGraphView : GraphView, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle, ISelection Inheritance object CallbackEventHandler Focusable VisualElement GraphView ProcessGraphView Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle ISelection Inherited Members GraphView.ports GraphView.UpdateViewTransform(Vector3, Vector3) GraphView.GetPortCenterOverride(Port, out Vector2) GraphView.AddLayer(int) GraphView.GetElementByGuid(string) GraphView.GetNodeByGuid(string) GraphView.GetPortByGuid(string) GraphView.GetEdgeByGuid(string) GraphView.SetupZoom(float, float) GraphView.SetupZoom(float, float, float, float) GraphView.ValidateTransform() GraphView.AddToSelection(ISelectable) GraphView.RemoveFromSelection(ISelectable) GraphView.ClearSelection() GraphView.ExecuteDefaultActionAtTarget(EventBase) GraphView.ExecuteDefaultAction(EventBase) GraphView.CollectElements(IEnumerable<GraphElement>, HashSet<GraphElement>, Func<GraphElement, bool>) GraphView.CollectCopyableGraphElements(IEnumerable<GraphElement>, HashSet<GraphElement>) GraphView.CopySelectionCallback() GraphView.CutSelectionCallback() GraphView.PasteCallback() GraphView.DuplicateSelectionCallback() GraphView.DeleteSelectionCallback(GraphView.AskUser) GraphView.SerializeGraphElements(IEnumerable<GraphElement>) GraphView.CanPasteSerializedData(string) GraphView.UnserializeAndPasteOperation(string, string) GraphView.DeleteSelectionOperation(string, GraphView.AskUser) GraphView.AddElement(GraphElement) GraphView.RemoveElement(GraphElement) GraphView.DeleteSelection() GraphView.DeleteElements(IEnumerable<GraphElement>) GraphView.FrameAll() GraphView.FrameSelection() GraphView.FrameOrigin() GraphView.FramePrev() GraphView.FrameNext() GraphView.FramePrev(Func<GraphElement, bool>) GraphView.FrameNext(Func<GraphElement, bool>) GraphView.CalculateRectToFitAll(VisualElement) GraphView.CalculateFrameTransform(Rect, Rect, int, out Vector3, out Vector3) GraphView.GetBlackboard() GraphView.ReleaseBlackboard(Blackboard) GraphView.CreatePlacematContainer() GraphView.nodeCreationRequest GraphView.graphViewChanged GraphView.groupTitleChanged GraphView.elementsAddedToGroup GraphView.elementsRemovedFromGroup GraphView.elementsInsertedToStackNode GraphView.elementsRemovedFromStackNode GraphView.elementResized GraphView.viewTransformChanged GraphView.supportsWindowedBlackboard GraphView.contentViewContainer GraphView.viewport GraphView.viewTransform GraphView.isReframable GraphView.contentContainer GraphView.placematContainer GraphView.graphElements GraphView.nodes GraphView.edges GraphView.minScale GraphView.maxScale GraphView.scaleStep GraphView.referenceScale GraphView.scale GraphView.zoomerMaxElementCountWithPixelCacheRegen GraphView.selection GraphView.canCopySelection GraphView.canCutSelection GraphView.canPaste GraphView.canDuplicateSelection GraphView.canDeleteSelection GraphView.serializeGraphElements GraphView.canPasteSerializedData GraphView.unserializeAndPaste GraphView.deleteSelection VisualElement.disabledUssClassName VisualElement.Focus() VisualElement.SendEvent(EventBase) VisualElement.SetEnabledFromHierarchy(bool) VisualElement.SetEnabled(bool) VisualElement.MarkDirtyRepaint() VisualElement.ContainsPoint(Vector2) VisualElement.Overlaps(Rect) VisualElement.DoMeasure(float, VisualElement.MeasureMode, float, VisualElement.MeasureMode) VisualElement.ToString() VisualElement.GetClasses() VisualElement.ClearClassList() VisualElement.AddToClassList(string) VisualElement.RemoveFromClassList(string) VisualElement.ToggleInClassList(string) VisualElement.EnableInClassList(string, bool) VisualElement.ClassListContains(string) VisualElement.FindAncestorUserData() VisualElement.Add(VisualElement) VisualElement.Insert(int, VisualElement) VisualElement.Remove(VisualElement) VisualElement.RemoveAt(int) VisualElement.Clear() VisualElement.ElementAt(int) VisualElement.IndexOf(VisualElement) VisualElement.Children() VisualElement.Sort(Comparison<VisualElement>) VisualElement.BringToFront() VisualElement.SendToBack() VisualElement.PlaceBehind(VisualElement) VisualElement.PlaceInFront(VisualElement) VisualElement.RemoveFromHierarchy() VisualElement.GetFirstOfType<T>() VisualElement.GetFirstAncestorOfType<T>() VisualElement.Contains(VisualElement) VisualElement.FindCommonAncestor(VisualElement) VisualElement.viewDataKey VisualElement.userData VisualElement.canGrabFocus VisualElement.focusController VisualElement.usageHints VisualElement.transform VisualElement.layout VisualElement.contentRect VisualElement.paddingRect VisualElement.worldBound VisualElement.localBound VisualElement.worldTransform VisualElement.pickingMode VisualElement.name VisualElement.enabledInHierarchy VisualElement.enabledSelf VisualElement.visible VisualElement.generateVisualContent VisualElement.experimental VisualElement.hierarchy VisualElement.cacheAsBitmap VisualElement.parent VisualElement.panel VisualElement.visualTreeAssetSource VisualElement.this[int] VisualElement.childCount VisualElement.schedule VisualElement.style VisualElement.customStyle VisualElement.styleSheets VisualElement.tooltip VisualElement.resolvedStyle Focusable.Blur() Focusable.focusable Focusable.tabIndex Focusable.delegatesFocus CallbackEventHandler.RegisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.RegisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TUserArgsType, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TrickleDown) CallbackEventHandler.HandleEvent(EventBase) CallbackEventHandler.HasTrickleDownHandlers() CallbackEventHandler.HasBubbleUpHandlers() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ProcessGraphView() public ProcessGraphView() Methods BuildContextualMenu(ContextualMenuPopulateEvent) Add menu items to the contextual menu. public override void BuildContextualMenu(ContextualMenuPopulateEvent evt) Parameters evt ContextualMenuPopulateEvent The event holding the menu to populate. GetCompatiblePorts(Port, NodeAdapter) Get all ports compatible with given port. public override List<Port> GetCompatiblePorts(Port startPort, NodeAdapter nodeAdapter) Parameters startPort Port Start port to validate against. nodeAdapter NodeAdapter Node adapter. Returns List<Port> List of compatible ports. RefreshSelectedNode() Updates visualization of the node selected in the step inspector. public void RefreshSelectedNode() SetChapter(IChapter) Displays the specified chapter. public void SetChapter(IChapter chapter) Parameters chapter IChapter"
  },
  "api/VRBuilder.Editor.UI.Graphics.ProcessGraphViewWindow.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.ProcessGraphViewWindow.html",
    "title": "Class ProcessGraphViewWindow | VR Builder Documentation",
    "keywords": "Class ProcessGraphViewWindow Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Editor windows that displays the process using a graphview. public class ProcessGraphViewWindow : ProcessEditorWindow Inheritance object Object ScriptableObject EditorWindow ProcessEditorWindow ProcessGraphViewWindow Inherited Members EditorWindow.BeginWindows() EditorWindow.EndWindows() EditorWindow.ShowNotification(GUIContent) EditorWindow.ShowNotification(GUIContent, double) EditorWindow.RemoveNotification() EditorWindow.ShowTab() EditorWindow.Focus() EditorWindow.ShowUtility() EditorWindow.ShowPopup() EditorWindow.ShowModalUtility() EditorWindow.ShowAsDropDown(Rect, Vector2) EditorWindow.Show() EditorWindow.Show(bool) EditorWindow.ShowAuxWindow() EditorWindow.ShowModal() EditorWindow.GetWindow(Type, bool, string, bool) EditorWindow.GetWindow(Type, bool, string) EditorWindow.GetWindow(Type, bool) EditorWindow.GetWindow(Type) EditorWindow.GetWindowWithRect(Type, Rect, bool, string) EditorWindow.GetWindowWithRect(Type, Rect, bool) EditorWindow.GetWindowWithRect(Type, Rect) EditorWindow.GetWindow<T>() EditorWindow.GetWindow<T>(bool) EditorWindow.GetWindow<T>(bool, string) EditorWindow.GetWindow<T>(string) EditorWindow.GetWindow<T>(string, bool) EditorWindow.GetWindow<T>(bool, string, bool) EditorWindow.GetWindow<T>(params Type[]) EditorWindow.GetWindow<T>(string, params Type[]) EditorWindow.GetWindow<T>(string, bool, params Type[]) EditorWindow.CreateWindow<T>(params Type[]) EditorWindow.CreateWindow<T>(string, params Type[]) EditorWindow.HasOpenInstances<T>() EditorWindow.FocusWindowIfItsOpen(Type) EditorWindow.FocusWindowIfItsOpen<T>() EditorWindow.GetWindowWithRect<T>(Rect) EditorWindow.GetWindowWithRect<T>(Rect, bool) EditorWindow.GetWindowWithRect<T>(Rect, bool, string) EditorWindow.GetWindowWithRect<T>(Rect, bool, string, bool) EditorWindow.SaveChanges() EditorWindow.DiscardChanges() EditorWindow.Close() EditorWindow.Repaint() EditorWindow.SendEvent(Event) EditorWindow.GetExtraPaneTypes() EditorWindow.TryGetOverlay(string, out Overlay) EditorWindow.OnBackingScaleFactorChanged() EditorWindow.rootVisualElement EditorWindow.wantsMouseMove EditorWindow.wantsMouseEnterLeaveWindow EditorWindow.wantsLessLayoutEvents EditorWindow.autoRepaintOnSceneChange EditorWindow.maximized EditorWindow.hasFocus EditorWindow.docked EditorWindow.focusedWindow EditorWindow.mouseOverWindow EditorWindow.hasUnsavedChanges EditorWindow.saveChangesMessage EditorWindow.minSize EditorWindow.maxSize EditorWindow.title EditorWindow.titleContent EditorWindow.depthBufferBits EditorWindow.antiAlias EditorWindow.position ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.Editor.UI.Graphics.Renderers.GraphicalElementRenderer.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.Renderers.GraphicalElementRenderer.html",
    "title": "Class GraphicalElementRenderer | VR Builder Documentation",
    "keywords": "Class GraphicalElementRenderer Namespace VRBuilder.Editor.UI.Graphics.Renderers Assembly VRBuilder.Editor.dll public abstract class GraphicalElementRenderer Inheritance object GraphicalElementRenderer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw() Called once in the end of the frame. Use it to draw elements in the editor window. public abstract void Draw()"
  },
  "api/VRBuilder.Editor.UI.Graphics.Renderers.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.Renderers.html",
    "title": "Namespace VRBuilder.Editor.UI.Graphics.Renderers | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.UI.Graphics.Renderers Classes GraphicalElementRenderer"
  },
  "api/VRBuilder.Editor.UI.Graphics.StepGraphNode.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.StepGraphNode.html",
    "title": "Class StepGraphNode | VR Builder Documentation",
    "keywords": "Class StepGraphNode Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Step node in a graph view editor. public class StepGraphNode : ProcessGraphNode, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle, ISelectable, ICollectibleElement Inheritance object CallbackEventHandler Focusable VisualElement GraphElement Node ProcessGraphNode StepGraphNode Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle ISelectable ICollectibleElement Derived RandomBranchGraphNode EndChapterNode ParallelExecutionNode StepGroupNode Inherited Members ProcessGraphNode.deleteIconFileName ProcessGraphNode.editIconFileName ProcessGraphNode.defaultNodeSize ProcessGraphNode.IsEntryPoint ProcessGraphNode.AddTransitionPort(bool, int) ProcessGraphNode.CreatePort(Direction, Port.Capacity) ProcessGraphNode.GetIcon(string) ProcessGraphNode.OpenTextEditor() ProcessGraphNode.OnEditTextFinished(TextField) Node.m_CollapseButton Node.m_ButtonContainer Node.RefreshExpandedState() Node.GetPosition() Node.SetPosition(Rect) Node.OnPortRemoved(Port) Node.InstantiatePort(Orientation, Direction, Port.Capacity, Type) Node.RefreshPorts() Node.ToggleCollapse() Node.UseDefaultStyling() Node.BuildContextualMenu(ContextualMenuPopulateEvent) Node.CollectElements(HashSet<GraphElement>, Func<GraphElement, bool>) Node.mainContainer Node.titleContainer Node.inputContainer Node.outputContainer Node.titleButtonContainer Node.topContainer Node.extensionContainer Node.expanded Node.title GraphElement.ResetLayer() GraphElement.OnCustomStyleResolved(ICustomStyle) GraphElement.IsSelectable() GraphElement.IsMovable() GraphElement.IsResizable() GraphElement.IsDroppable() GraphElement.IsAscendable() GraphElement.IsRenamable() GraphElement.IsCopiable() GraphElement.IsSnappable() GraphElement.IsGroupable() GraphElement.IsStackable() GraphElement.GetGlobalCenter() GraphElement.UpdatePresenterPosition() GraphElement.OnUnselected() GraphElement.HitTest(Vector2) GraphElement.Select(VisualElement, bool) GraphElement.Unselect(VisualElement) GraphElement.IsSelected(VisualElement) GraphElement.elementTypeColor GraphElement.layer GraphElement.showInMiniMap GraphElement.capabilities GraphElement.selected VisualElement.disabledUssClassName VisualElement.ExecuteDefaultAction(EventBase) VisualElement.Focus() VisualElement.SendEvent(EventBase) VisualElement.SetEnabledFromHierarchy(bool) VisualElement.SetEnabled(bool) VisualElement.MarkDirtyRepaint() VisualElement.ContainsPoint(Vector2) VisualElement.Overlaps(Rect) VisualElement.DoMeasure(float, VisualElement.MeasureMode, float, VisualElement.MeasureMode) VisualElement.ToString() VisualElement.GetClasses() VisualElement.ClearClassList() VisualElement.AddToClassList(string) VisualElement.RemoveFromClassList(string) VisualElement.ToggleInClassList(string) VisualElement.EnableInClassList(string, bool) VisualElement.ClassListContains(string) VisualElement.FindAncestorUserData() VisualElement.Add(VisualElement) VisualElement.Insert(int, VisualElement) VisualElement.Remove(VisualElement) VisualElement.RemoveAt(int) VisualElement.Clear() VisualElement.ElementAt(int) VisualElement.IndexOf(VisualElement) VisualElement.Children() VisualElement.Sort(Comparison<VisualElement>) VisualElement.BringToFront() VisualElement.SendToBack() VisualElement.PlaceBehind(VisualElement) VisualElement.PlaceInFront(VisualElement) VisualElement.RemoveFromHierarchy() VisualElement.GetFirstOfType<T>() VisualElement.GetFirstAncestorOfType<T>() VisualElement.Contains(VisualElement) VisualElement.FindCommonAncestor(VisualElement) VisualElement.viewDataKey VisualElement.userData VisualElement.canGrabFocus VisualElement.focusController VisualElement.usageHints VisualElement.transform VisualElement.layout VisualElement.contentRect VisualElement.paddingRect VisualElement.worldBound VisualElement.localBound VisualElement.worldTransform VisualElement.pickingMode VisualElement.name VisualElement.enabledInHierarchy VisualElement.enabledSelf VisualElement.visible VisualElement.generateVisualContent VisualElement.experimental VisualElement.hierarchy VisualElement.cacheAsBitmap VisualElement.parent VisualElement.panel VisualElement.contentContainer VisualElement.visualTreeAssetSource VisualElement.this[int] VisualElement.childCount VisualElement.schedule VisualElement.style VisualElement.customStyle VisualElement.styleSheets VisualElement.tooltip VisualElement.resolvedStyle Focusable.Blur() Focusable.focusable Focusable.tabIndex Focusable.delegatesFocus CallbackEventHandler.RegisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.RegisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TUserArgsType, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TrickleDown) CallbackEventHandler.HandleEvent(EventBase) CallbackEventHandler.HasTrickleDownHandlers() CallbackEventHandler.HasBubbleUpHandlers() CallbackEventHandler.ExecuteDefaultActionAtTarget(EventBase) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors StepGraphNode(IStep) public StepGraphNode(IStep step) Parameters step IStep Fields step protected IStep step Field Value IStep Properties EntryPoint Step other nodes connect to. public override IStep EntryPoint { get; } Property Value IStep Name Name of the node. public override string Name { get; set; } Property Value string Outputs Steps this node leads to. public override IStep[] Outputs { get; } Property Value IStep[] Position Position in the graph. public override Vector2 Position { get; set; } Property Value Vector2 Methods AddToChapter(IChapter) Adds node to specified chapter. public override void AddToChapter(IChapter chapter) Parameters chapter IChapter CreatePortWithUndo() Creates a transition port supporting undo. protected virtual void CreatePortWithUndo() OnSelected() Called when the GraphElement is selected. public override void OnSelected() Refresh() Refreshes the node's graphics. public override void Refresh() RemoveFromChapter(IChapter) Removes node from specified chapter. public override void RemoveFromChapter(IChapter chapter) Parameters chapter IChapter RemovePort(Port) Removes the specified output port. protected void RemovePort(Port port) Parameters port Port RemovePortWithUndo(Port) Removes the specified output port supporting undo. protected override void RemovePortWithUndo(Port port) Parameters port Port SetOutput(int, IStep) Sets an output to the specified step. public override void SetOutput(int index, IStep output) Parameters index int output IStep UpdateOutputPortName(Port, Node) Updates the name of the output port depending on the node it is connected with. public override void UpdateOutputPortName(Port outputPort, Node input) Parameters outputPort Port input Node"
  },
  "api/VRBuilder.Editor.UI.Graphics.StepGroupNode.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.StepGroupNode.html",
    "title": "Class StepGroupNode | VR Builder Documentation",
    "keywords": "Class StepGroupNode Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Graphical representation of a Step Group node. public class StepGroupNode : StepGraphNode, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle, ISelectable, ICollectibleElement, IContextMenuActions Inheritance object CallbackEventHandler Focusable VisualElement GraphElement Node ProcessGraphNode StepGraphNode StepGroupNode Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle ISelectable ICollectibleElement IContextMenuActions Inherited Members StepGraphNode.step StepGraphNode.Name StepGraphNode.EntryPoint StepGraphNode.Outputs StepGraphNode.Position StepGraphNode.Refresh() StepGraphNode.CreatePortWithUndo() StepGraphNode.RemovePort(Port) StepGraphNode.RemovePortWithUndo(Port) StepGraphNode.SetOutput(int, IStep) StepGraphNode.AddToChapter(IChapter) StepGraphNode.RemoveFromChapter(IChapter) StepGraphNode.UpdateOutputPortName(Port, Node) ProcessGraphNode.deleteIconFileName ProcessGraphNode.editIconFileName ProcessGraphNode.defaultNodeSize ProcessGraphNode.IsEntryPoint ProcessGraphNode.AddTransitionPort(bool, int) ProcessGraphNode.CreatePort(Direction, Port.Capacity) ProcessGraphNode.GetIcon(string) ProcessGraphNode.OpenTextEditor() Node.m_CollapseButton Node.m_ButtonContainer Node.RefreshExpandedState() Node.GetPosition() Node.SetPosition(Rect) Node.OnPortRemoved(Port) Node.InstantiatePort(Orientation, Direction, Port.Capacity, Type) Node.RefreshPorts() Node.ToggleCollapse() Node.UseDefaultStyling() Node.BuildContextualMenu(ContextualMenuPopulateEvent) Node.CollectElements(HashSet<GraphElement>, Func<GraphElement, bool>) Node.mainContainer Node.titleContainer Node.inputContainer Node.outputContainer Node.titleButtonContainer Node.topContainer Node.extensionContainer Node.expanded Node.title GraphElement.ResetLayer() GraphElement.OnCustomStyleResolved(ICustomStyle) GraphElement.IsSelectable() GraphElement.IsMovable() GraphElement.IsResizable() GraphElement.IsDroppable() GraphElement.IsAscendable() GraphElement.IsRenamable() GraphElement.IsCopiable() GraphElement.IsSnappable() GraphElement.IsGroupable() GraphElement.IsStackable() GraphElement.GetGlobalCenter() GraphElement.UpdatePresenterPosition() GraphElement.OnUnselected() GraphElement.HitTest(Vector2) GraphElement.Select(VisualElement, bool) GraphElement.Unselect(VisualElement) GraphElement.IsSelected(VisualElement) GraphElement.elementTypeColor GraphElement.layer GraphElement.showInMiniMap GraphElement.capabilities GraphElement.selected VisualElement.disabledUssClassName VisualElement.ExecuteDefaultAction(EventBase) VisualElement.Focus() VisualElement.SendEvent(EventBase) VisualElement.SetEnabledFromHierarchy(bool) VisualElement.SetEnabled(bool) VisualElement.MarkDirtyRepaint() VisualElement.ContainsPoint(Vector2) VisualElement.Overlaps(Rect) VisualElement.DoMeasure(float, VisualElement.MeasureMode, float, VisualElement.MeasureMode) VisualElement.ToString() VisualElement.GetClasses() VisualElement.ClearClassList() VisualElement.AddToClassList(string) VisualElement.RemoveFromClassList(string) VisualElement.ToggleInClassList(string) VisualElement.EnableInClassList(string, bool) VisualElement.ClassListContains(string) VisualElement.FindAncestorUserData() VisualElement.Add(VisualElement) VisualElement.Insert(int, VisualElement) VisualElement.Remove(VisualElement) VisualElement.RemoveAt(int) VisualElement.Clear() VisualElement.ElementAt(int) VisualElement.IndexOf(VisualElement) VisualElement.Children() VisualElement.Sort(Comparison<VisualElement>) VisualElement.BringToFront() VisualElement.SendToBack() VisualElement.PlaceBehind(VisualElement) VisualElement.PlaceInFront(VisualElement) VisualElement.RemoveFromHierarchy() VisualElement.GetFirstOfType<T>() VisualElement.GetFirstAncestorOfType<T>() VisualElement.Contains(VisualElement) VisualElement.FindCommonAncestor(VisualElement) VisualElement.viewDataKey VisualElement.userData VisualElement.canGrabFocus VisualElement.focusController VisualElement.usageHints VisualElement.transform VisualElement.layout VisualElement.contentRect VisualElement.paddingRect VisualElement.worldBound VisualElement.localBound VisualElement.worldTransform VisualElement.pickingMode VisualElement.name VisualElement.enabledInHierarchy VisualElement.enabledSelf VisualElement.visible VisualElement.generateVisualContent VisualElement.experimental VisualElement.hierarchy VisualElement.cacheAsBitmap VisualElement.parent VisualElement.panel VisualElement.contentContainer VisualElement.visualTreeAssetSource VisualElement.this[int] VisualElement.childCount VisualElement.schedule VisualElement.style VisualElement.customStyle VisualElement.styleSheets VisualElement.tooltip VisualElement.resolvedStyle Focusable.Blur() Focusable.focusable Focusable.tabIndex Focusable.delegatesFocus CallbackEventHandler.RegisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.RegisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TUserArgsType, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType>(EventCallback<TEventType>, TrickleDown) CallbackEventHandler.UnregisterCallback<TEventType, TUserArgsType>(EventCallback<TEventType, TUserArgsType>, TrickleDown) CallbackEventHandler.HandleEvent(EventBase) CallbackEventHandler.HasTrickleDownHandlers() CallbackEventHandler.HasBubbleUpHandlers() CallbackEventHandler.ExecuteDefaultActionAtTarget(EventBase) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors StepGroupNode(IStep) public StepGroupNode(IStep step) Parameters step IStep Properties Behavior protected ExecuteChapterBehavior Behavior { get; } Property Value ExecuteChapterBehavior Methods AddContextMenuActions(DropdownMenu) Adds custom actions to the context menu. public void AddContextMenuActions(DropdownMenu menu) Parameters menu DropdownMenu GroupSteps(IChapter, IEnumerable<IStep>) public void GroupSteps(IChapter currentChapter, IEnumerable<IStep> steps) Parameters currentChapter IChapter steps IEnumerable<IStep> OnEditTextFinished(TextField) protected override void OnEditTextFinished(TextField textField) Parameters textField TextField OnSelected() Called when the GraphElement is selected. public override void OnSelected()"
  },
  "api/VRBuilder.Editor.UI.Graphics.StepGroupNodeInstantiator.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.StepGroupNodeInstantiator.html",
    "title": "Class StepGroupNodeInstantiator | VR Builder Documentation",
    "keywords": "Class StepGroupNodeInstantiator Namespace VRBuilder.Editor.UI.Graphics Assembly VRBuilder.Editor.dll Instantiator for the Step Group node. public class StepGroupNodeInstantiator : IStepNodeInstantiator Inheritance object StepGroupNodeInstantiator Implements IStepNodeInstantiator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsInNodeMenu If true, it will appear in the node menu. public bool IsInNodeMenu { get; } Property Value bool Name Display name of the instantiated node. public string Name { get; } Property Value string Priority Nodes with a lower value will appear first in the menu. public int Priority { get; } Property Value int StepType Step type metadata. public string StepType { get; } Property Value string Methods GetContextMenuStatus(IEventHandler, IChapter) Returns the status for the context menu entry to instantiate the node. public DropdownMenuAction.Status GetContextMenuStatus(IEventHandler target, IChapter currentChapter) Parameters target IEventHandler currentChapter IChapter Returns DropdownMenuAction.Status InstantiateNode(IStep) Creates a graphview node of the corresponding type. public ProcessGraphNode InstantiateNode(IStep step) Parameters step IStep Returns ProcessGraphNode"
  },
  "api/VRBuilder.Editor.UI.Graphics.html": {
    "href": "api/VRBuilder.Editor.UI.Graphics.html",
    "title": "Namespace VRBuilder.Editor.UI.Graphics | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.UI.Graphics Classes DefaultStepNodeInstantiator Instantiator for a default IStep node. EndChapterNode Node representation for the End Chapter node. EndChapterNodeInstantiator Instantiator for the End Chapter node. EntryPointNode Entry point node in a graph view editor. ParallelExecutionNode Graphical representation of a Parallel Execution node. ParallelExecutionNodeInstantiator Instantiator for the Step Group node. ProcessExec Type that connects step nodes in the graph view editor. ProcessGraphNode Process node in a graph view editor. ProcessGraphView Graphical representation of a process chapter. ProcessGraphViewWindow Editor windows that displays the process using a graphview. StepGraphNode Step node in a graph view editor. StepGroupNode Graphical representation of a Step Group node. StepGroupNodeInstantiator Instantiator for the Step Group node. Interfaces IContextMenuActions Interface for a process graph object having custom context menu actions. IStepNodeInstantiator Instantiates a node matching the"
  },
  "api/VRBuilder.Editor.UI.IProjectSettingsSection.html": {
    "href": "api/VRBuilder.Editor.UI.IProjectSettingsSection.html",
    "title": "Interface IProjectSettingsSection | VR Builder Documentation",
    "keywords": "Interface IProjectSettingsSection Namespace VRBuilder.Editor.UI Assembly VRBuilder.Editor.dll Allows to inject a settings section into a setting provider. public interface IProjectSettingsSection Properties Priority Determines the draw order, lower priority will be drawn first. int Priority { get; } Property Value int TargetPageProvider Type of the target setting provider. Type TargetPageProvider { get; } Property Value Type Title Title of this section. string Title { get; } Property Value string Methods OnGUI(string) Your draw call. void OnGUI(string searchContext) Parameters searchContext string"
  },
  "api/VRBuilder.Editor.UI.LanguageSettingsProvider.html": {
    "href": "api/VRBuilder.Editor.UI.LanguageSettingsProvider.html",
    "title": "Class LanguageSettingsProvider | VR Builder Documentation",
    "keywords": "Class LanguageSettingsProvider Namespace VRBuilder.Editor.UI Assembly VRBuilder.Editor.dll public class LanguageSettingsProvider : BaseSettingsProvider Inheritance object SettingsProvider BaseSettingsProvider LanguageSettingsProvider Inherited Members BaseSettingsProvider.sections BaseSettingsProvider.OnGUI(string) SettingsProvider.OnActivate(string, VisualElement) SettingsProvider.HasSearchInterest(string) SettingsProvider.OnTitleBarGUI() SettingsProvider.OnFooterBarGUI() SettingsProvider.OnInspectorUpdate() SettingsProvider.Repaint() SettingsProvider.PopulateSearchKeywordsFromGUIContentProperties<T>() SettingsProvider.GetSearchKeywordsFromGUIContentProperties<T>() SettingsProvider.GetSearchKeywordsFromSerializedObject(SerializedObject) SettingsProvider.GetSearchKeywordsFromPath(string) SettingsProvider.label SettingsProvider.settingsPath SettingsProvider.scope SettingsProvider.keywords SettingsProvider.guiHandler SettingsProvider.titleBarGuiHandler SettingsProvider.footerBarGuiHandler SettingsProvider.activateHandler SettingsProvider.deactivateHandler SettingsProvider.hasSearchInterestHandler SettingsProvider.inspectorUpdateHandler object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LanguageSettingsProvider() public LanguageSettingsProvider() Methods InternalDraw(string) Your draw implementation, will be drawn above the injected sections. protected override void InternalDraw(string searchContext) Parameters searchContext string OnDeactivate() Use this function to implement a handler for when the user clicks on another setting or when the Settings window closes. public override void OnDeactivate() Provider() [SettingsProvider] public static SettingsProvider Provider() Returns SettingsProvider"
  },
  "api/VRBuilder.Editor.UI.LogoStyle.html": {
    "href": "api/VRBuilder.Editor.UI.LogoStyle.html",
    "title": "Enum LogoStyle | VR Builder Documentation",
    "keywords": "Enum LogoStyle Namespace VRBuilder.Editor.UI Assembly VRBuilder.Editor.dll public enum LogoStyle Fields Icon = 2 SideBySide = 0 TopBottom = 1"
  },
  "api/VRBuilder.Editor.UI.ProcessSceneObjectEditor.html": {
    "href": "api/VRBuilder.Editor.UI.ProcessSceneObjectEditor.html",
    "title": "Class ProcessSceneObjectEditor | VR Builder Documentation",
    "keywords": "Class ProcessSceneObjectEditor Namespace VRBuilder.Editor.UI Assembly VRBuilder.Editor.dll Custom editor for ProcessSceneObject. [CustomEditor(typeof(ProcessSceneObject))] [CanEditMultipleObjects] public class ProcessSceneObjectEditor : Editor Inheritance object Object ScriptableObject Editor ProcessSceneObjectEditor Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.OnInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields AssetOnDiskText public const string AssetOnDiskText = \"[Asset on disk]\" Field Value string MultipleValuesSelectedText public const string MultipleValuesSelectedText = \"[Multiple values selected]\" Field Value string UniqueIdDisplayName public const string UniqueIdDisplayName = \"Object ID\" Field Value string Methods CreateInspectorGUI() Implement this method to make a custom UIElements inspector. public override VisualElement CreateInspectorGUI() Returns VisualElement"
  },
  "api/VRBuilder.Editor.UI.SceneObjectGroupsSettingsProvider.html": {
    "href": "api/VRBuilder.Editor.UI.SceneObjectGroupsSettingsProvider.html",
    "title": "Class SceneObjectGroupsSettingsProvider | VR Builder Documentation",
    "keywords": "Class SceneObjectGroupsSettingsProvider Namespace VRBuilder.Editor.UI Assembly VRBuilder.Editor.dll Provider for a list of scene object groups. public class SceneObjectGroupsSettingsProvider : BaseSettingsProvider Inheritance object SettingsProvider BaseSettingsProvider SceneObjectGroupsSettingsProvider Inherited Members BaseSettingsProvider.sections BaseSettingsProvider.OnGUI(string) SettingsProvider.OnActivate(string, VisualElement) SettingsProvider.HasSearchInterest(string) SettingsProvider.OnTitleBarGUI() SettingsProvider.OnFooterBarGUI() SettingsProvider.OnInspectorUpdate() SettingsProvider.Repaint() SettingsProvider.PopulateSearchKeywordsFromGUIContentProperties<T>() SettingsProvider.GetSearchKeywordsFromGUIContentProperties<T>() SettingsProvider.GetSearchKeywordsFromSerializedObject(SerializedObject) SettingsProvider.GetSearchKeywordsFromPath(string) SettingsProvider.label SettingsProvider.settingsPath SettingsProvider.scope SettingsProvider.keywords SettingsProvider.guiHandler SettingsProvider.titleBarGuiHandler SettingsProvider.footerBarGuiHandler SettingsProvider.activateHandler SettingsProvider.deactivateHandler SettingsProvider.hasSearchInterestHandler SettingsProvider.inspectorUpdateHandler object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SceneObjectGroupsSettingsProvider() public SceneObjectGroupsSettingsProvider() Methods InternalDraw(string) Your draw implementation, will be drawn above the injected sections. protected override void InternalDraw(string searchContext) Parameters searchContext string OnDeactivate() Use this function to implement a handler for when the user clicks on another setting or when the Settings window closes. public override void OnDeactivate() Provider() [SettingsProvider] public static SettingsProvider Provider() Returns SettingsProvider"
  },
  "api/VRBuilder.Editor.UI.SceneObjectGroupsSettingsSection.html": {
    "href": "api/VRBuilder.Editor.UI.SceneObjectGroupsSettingsSection.html",
    "title": "Class SceneObjectGroupsSettingsSection | VR Builder Documentation",
    "keywords": "Class SceneObjectGroupsSettingsSection Namespace VRBuilder.Editor.UI Assembly VRBuilder.Editor.dll Settings section to manage groups that scene objects can belong to. public class SceneObjectGroupsSettingsSection : IProjectSettingsSection Inheritance object SceneObjectGroupsSettingsSection Implements IProjectSettingsSection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Priority Determines the draw order, lower priority will be drawn first. public int Priority { get; } Property Value int TargetPageProvider Type of the target setting provider. public Type TargetPageProvider { get; } Property Value Type Title Title of this section. public string Title { get; } Property Value string Methods OnGUI(string) Your draw call. public void OnGUI(string searchContext) Parameters searchContext string"
  },
  "api/VRBuilder.Editor.UI.SpectatorSettingsProvider.html": {
    "href": "api/VRBuilder.Editor.UI.SpectatorSettingsProvider.html",
    "title": "Class SpectatorSettingsProvider | VR Builder Documentation",
    "keywords": "Class SpectatorSettingsProvider Namespace VRBuilder.Editor.UI Assembly VRBuilder.Editor.dll public class SpectatorSettingsProvider : BaseSettingsProvider Inheritance object SettingsProvider BaseSettingsProvider SpectatorSettingsProvider Inherited Members BaseSettingsProvider.sections BaseSettingsProvider.OnGUI(string) SettingsProvider.OnActivate(string, VisualElement) SettingsProvider.OnDeactivate() SettingsProvider.HasSearchInterest(string) SettingsProvider.OnTitleBarGUI() SettingsProvider.OnFooterBarGUI() SettingsProvider.OnInspectorUpdate() SettingsProvider.Repaint() SettingsProvider.PopulateSearchKeywordsFromGUIContentProperties<T>() SettingsProvider.GetSearchKeywordsFromGUIContentProperties<T>() SettingsProvider.GetSearchKeywordsFromSerializedObject(SerializedObject) SettingsProvider.GetSearchKeywordsFromPath(string) SettingsProvider.label SettingsProvider.settingsPath SettingsProvider.scope SettingsProvider.keywords SettingsProvider.guiHandler SettingsProvider.titleBarGuiHandler SettingsProvider.footerBarGuiHandler SettingsProvider.activateHandler SettingsProvider.deactivateHandler SettingsProvider.hasSearchInterestHandler SettingsProvider.inspectorUpdateHandler object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SpectatorSettingsProvider() public SpectatorSettingsProvider() Methods InternalDraw(string) Your draw implementation, will be drawn above the injected sections. protected override void InternalDraw(string searchContext) Parameters searchContext string Provider() [SettingsProvider] public static SettingsProvider Provider() Returns SettingsProvider"
  },
  "api/VRBuilder.Editor.UI.StepInspector.Menu.DisabledMenuItem-1.html": {
    "href": "api/VRBuilder.Editor.UI.StepInspector.Menu.DisabledMenuItem-1.html",
    "title": "Class DisabledMenuItem<T> | VR Builder Documentation",
    "keywords": "Class DisabledMenuItem<T> Namespace VRBuilder.Editor.UI.StepInspector.Menu Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it as a disabled option with get_DisplayedName. public class DisabledMenuItem<T> : MenuOption<T> Type Parameters T Inheritance object MenuOption<T> DisabledMenuItem<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DisabledMenuItem(string) public DisabledMenuItem(string label) Parameters label string The displayed text. Properties Label A name displayed in the Step Inspector. public string Label { get; } Property Value string"
  },
  "api/VRBuilder.Editor.UI.StepInspector.Menu.MenuItem-1.html": {
    "href": "api/VRBuilder.Editor.UI.StepInspector.Menu.MenuItem-1.html",
    "title": "Class MenuItem<T> | VR Builder Documentation",
    "keywords": "Class MenuItem<T> Namespace VRBuilder.Editor.UI.StepInspector.Menu Assembly VRBuilder.Editor.dll The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). public abstract class MenuItem<T> : MenuOption<T> Type Parameters T A type of an object to create. Inheritance object MenuOption<T> MenuItem<T> Derived AnimateTransformMenuItem ChildExplosionViewMenuItem FollowPathMenuItem RotateAroundAxisMenuItem SetAnimatorBoolMenuItem SetAnimatorFloatMenuItem SetAnimatorIntMenuItem SetAnimatorTriggerMenuItem UnsnapMenuItem GrabbedMenuItem ReleasedMenuItem SnappedMenuItem TeleportMenuItem TouchedMenuItem UsedMenuItem ResetValueMenuItem SetBooleanValueMenuItem SetNumberValueMenuItem SetRandomBooleanMenuItem SetRandomNumberMenuItem CompareBooleansMenuItem CompareNumbersMenuItem MathOperationMenuItem ResetValueMenuItem SetBooleanValueMenuItem SetNumberValueMenuItem SetStateValueMenuItem SetTextValueMenuItem TriggerBooleanEventByTagMenuItem TriggerEventMenuItem TriggerFloatEventMenuItem TriggerStringEventMenuItem CheckStateMenuItem CompareBooleansMenuItem CompareNumbersMenuItem CompareTextMenuItem TextToSpeechMenuItem ResetValueMenuItem SetBooleanValueMenuItem SetNumberValueMenuItem StartTimerMenuItem StopTimerMenuItem UpdateScoreMenuItem CompareBooleansMenuItem CompareNumbersMenuItem BehaviorSequenceMenuItem ConfettiMenuItem DelayMenuItem DisableComponentMenuItem DisableObjectsMenuItem EnableComponentMenuItem EnableObjectsMenuItem HighlightObjectMenuItem LoadSceneMenuItem MoveObjectMenuItem PlayResourceAudioMenuItem ScalingMenuItem StartParticleEmissionMenuItem StopParticleEmissionMenuItem ObjectInColliderMenuItem ObjectInRangeMenuItem SetParentMenuItem TimeoutMenuItem PlayVideoBehaviorMenuItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public abstract string DisplayedName { get; } Property Value string Methods GetItemType() Returns the Type of the item created in GetNewItem() public virtual Type GetItemType() Returns Type GetNewItem() Returns a new instance of an object (behavior or condition). public abstract T GetNewItem() Returns T"
  },
  "api/VRBuilder.Editor.UI.StepInspector.Menu.MenuOption-1.html": {
    "href": "api/VRBuilder.Editor.UI.StepInspector.Menu.MenuOption-1.html",
    "title": "Class MenuOption<T> | VR Builder Documentation",
    "keywords": "Class MenuOption<T> Namespace VRBuilder.Editor.UI.StepInspector.Menu Assembly VRBuilder.Editor.dll A base class for options displayed in the \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus. public abstract class MenuOption<T> Type Parameters T Inheritance object MenuOption<T> Derived DisabledMenuItem<T> MenuItem<T> MenuSeparator<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.UI.StepInspector.Menu.MenuSeparator-1.html": {
    "href": "api/VRBuilder.Editor.UI.StepInspector.Menu.MenuSeparator-1.html",
    "title": "Class MenuSeparator<T> | VR Builder Documentation",
    "keywords": "Class MenuSeparator<T> Namespace VRBuilder.Editor.UI.StepInspector.Menu Assembly VRBuilder.Editor.dll This class adds a separator in the \"Add Behavior\"/\"Add Condition\" dropdown menus. public sealed class MenuSeparator<T> : MenuOption<T> Type Parameters T Inheritance object MenuOption<T> MenuSeparator<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MenuSeparator(string) public MenuSeparator(string pathToSubmenu = \"\") Parameters pathToSubmenu string Properties PathToSubmenu The submenu where separator will be displayed. public string PathToSubmenu { get; } Property Value string"
  },
  "api/VRBuilder.Editor.UI.StepInspector.Menu.html": {
    "href": "api/VRBuilder.Editor.UI.StepInspector.Menu.html",
    "title": "Namespace VRBuilder.Editor.UI.StepInspector.Menu | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.UI.StepInspector.Menu Classes DisabledMenuItem<T> The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it as a disabled option with get_DisplayedName. MenuItem<T> The Step Inspector populates \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus with implementations of this class. Use either IBehavior or ICondition as the generic parameter. The Step Inspector will display it with DisplayedName.get. If clicked, it will use the result of GetNewItem(). MenuOption<T> A base class for options displayed in the \"Add Behavior\" and \"Add Condition\" buttons' dropdown menus. MenuSeparator<T> This class adds a separator in the \"Add Behavior\"/\"Add Condition\" dropdown menus."
  },
  "api/VRBuilder.Editor.UI.Views.ViewDictionary.EnumType.html": {
    "href": "api/VRBuilder.Editor.UI.Views.ViewDictionary.EnumType.html",
    "title": "Enum ViewDictionary.EnumType | VR Builder Documentation",
    "keywords": "Enum ViewDictionary.EnumType Namespace VRBuilder.Editor.UI.Views Assembly VRBuilder.Editor.dll public enum ViewDictionary.EnumType Fields GroupListItem = 1 SceneReferencesGroupItem = 3 SceneReferencesList = 2 SceneReferencesObjectItem = 4 SearchableList = 0"
  },
  "api/VRBuilder.Editor.UI.Views.ViewDictionary.html": {
    "href": "api/VRBuilder.Editor.UI.Views.ViewDictionary.html",
    "title": "Class ViewDictionary | VR Builder Documentation",
    "keywords": "Class ViewDictionary Namespace VRBuilder.Editor.UI.Views Assembly VRBuilder.Editor.dll A static class that holds the path to UXML files mapped by an enum containing the UXML file names public class ViewDictionary Inheritance object ViewDictionary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetPath(EnumType) Retrieves the path associated with the specified enum value. public static string GetPath(ViewDictionary.EnumType enumValue) Parameters enumValue ViewDictionary.EnumType The enum value to retrieve the path for. Returns string The path associated with the enum value, or null if the path is not found. LoadAsset(EnumType) Loads a VisualTreeAsset based on the provided enum value. public static VisualTreeAsset LoadAsset(ViewDictionary.EnumType enumValue) Parameters enumValue ViewDictionary.EnumType The enum value representing the desired asset. Returns VisualTreeAsset The loaded VisualTreeAsset, or null if the asset could not be found."
  },
  "api/VRBuilder.Editor.UI.Views.html": {
    "href": "api/VRBuilder.Editor.UI.Views.html",
    "title": "Namespace VRBuilder.Editor.UI.Views | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.UI.Views Classes ViewDictionary A static class that holds the path to UXML files mapped by an enum containing the UXML file names Enums ViewDictionary.EnumType"
  },
  "api/VRBuilder.Editor.UI.Windows.IStepView.html": {
    "href": "api/VRBuilder.Editor.UI.Windows.IStepView.html",
    "title": "Interface IStepView | VR Builder Documentation",
    "keywords": "Interface IStepView Namespace VRBuilder.Editor.UI.Windows Assembly VRBuilder.Editor.dll Interface for GUI step view. public interface IStepView Methods ResetStepView() Resets the step view. void ResetStepView() SetStep(IStep) Sets a new step. void SetStep(IStep newStep) Parameters newStep IStep"
  },
  "api/VRBuilder.Editor.UI.Windows.ProcessEditorWindow.html": {
    "href": "api/VRBuilder.Editor.UI.Windows.ProcessEditorWindow.html",
    "title": "Class ProcessEditorWindow | VR Builder Documentation",
    "keywords": "Class ProcessEditorWindow Namespace VRBuilder.Editor.UI.Windows Assembly VRBuilder.Editor.dll Base class for a process GUI editor window. public abstract class ProcessEditorWindow : EditorWindow Inheritance object Object ScriptableObject EditorWindow ProcessEditorWindow Derived ProcessGraphViewWindow ProcessWindow Inherited Members EditorWindow.BeginWindows() EditorWindow.EndWindows() EditorWindow.ShowNotification(GUIContent) EditorWindow.ShowNotification(GUIContent, double) EditorWindow.RemoveNotification() EditorWindow.ShowTab() EditorWindow.Focus() EditorWindow.ShowUtility() EditorWindow.ShowPopup() EditorWindow.ShowModalUtility() EditorWindow.ShowAsDropDown(Rect, Vector2) EditorWindow.Show() EditorWindow.Show(bool) EditorWindow.ShowAuxWindow() EditorWindow.ShowModal() EditorWindow.GetWindow(Type, bool, string, bool) EditorWindow.GetWindow(Type, bool, string) EditorWindow.GetWindow(Type, bool) EditorWindow.GetWindow(Type) EditorWindow.GetWindowWithRect(Type, Rect, bool, string) EditorWindow.GetWindowWithRect(Type, Rect, bool) EditorWindow.GetWindowWithRect(Type, Rect) EditorWindow.GetWindow<T>() EditorWindow.GetWindow<T>(bool) EditorWindow.GetWindow<T>(bool, string) EditorWindow.GetWindow<T>(string) EditorWindow.GetWindow<T>(string, bool) EditorWindow.GetWindow<T>(bool, string, bool) EditorWindow.GetWindow<T>(params Type[]) EditorWindow.GetWindow<T>(string, params Type[]) EditorWindow.GetWindow<T>(string, bool, params Type[]) EditorWindow.CreateWindow<T>(params Type[]) EditorWindow.CreateWindow<T>(string, params Type[]) EditorWindow.HasOpenInstances<T>() EditorWindow.FocusWindowIfItsOpen(Type) EditorWindow.FocusWindowIfItsOpen<T>() EditorWindow.GetWindowWithRect<T>(Rect) EditorWindow.GetWindowWithRect<T>(Rect, bool) EditorWindow.GetWindowWithRect<T>(Rect, bool, string) EditorWindow.GetWindowWithRect<T>(Rect, bool, string, bool) EditorWindow.SaveChanges() EditorWindow.DiscardChanges() EditorWindow.Close() EditorWindow.Repaint() EditorWindow.SendEvent(Event) EditorWindow.GetExtraPaneTypes() EditorWindow.TryGetOverlay(string, out Overlay) EditorWindow.OnBackingScaleFactorChanged() EditorWindow.rootVisualElement EditorWindow.wantsMouseMove EditorWindow.wantsMouseEnterLeaveWindow EditorWindow.wantsLessLayoutEvents EditorWindow.autoRepaintOnSceneChange EditorWindow.maximized EditorWindow.hasFocus EditorWindow.docked EditorWindow.focusedWindow EditorWindow.mouseOverWindow EditorWindow.hasUnsavedChanges EditorWindow.saveChangesMessage EditorWindow.minSize EditorWindow.maxSize EditorWindow.title EditorWindow.titleContent EditorWindow.depthBufferBits EditorWindow.antiAlias EditorWindow.position ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.Editor.UI.Windows.ProcessWindow.html": {
    "href": "api/VRBuilder.Editor.UI.Windows.ProcessWindow.html",
    "title": "Class ProcessWindow | VR Builder Documentation",
    "keywords": "Class ProcessWindow Namespace VRBuilder.Editor.UI.Windows Assembly VRBuilder.Editor.dll This class draws the Workflow window.. [Obsolete(\"This class is not used anymore and will be removed in the next major version.\")] public class ProcessWindow : ProcessEditorWindow Inheritance object Object ScriptableObject EditorWindow ProcessEditorWindow ProcessWindow Inherited Members EditorWindow.BeginWindows() EditorWindow.EndWindows() EditorWindow.ShowNotification(GUIContent) EditorWindow.ShowNotification(GUIContent, double) EditorWindow.RemoveNotification() EditorWindow.ShowTab() EditorWindow.Focus() EditorWindow.ShowUtility() EditorWindow.ShowPopup() EditorWindow.ShowModalUtility() EditorWindow.ShowAsDropDown(Rect, Vector2) EditorWindow.Show() EditorWindow.Show(bool) EditorWindow.ShowAuxWindow() EditorWindow.ShowModal() EditorWindow.GetWindow(Type, bool, string, bool) EditorWindow.GetWindow(Type, bool, string) EditorWindow.GetWindow(Type, bool) EditorWindow.GetWindow(Type) EditorWindow.GetWindowWithRect(Type, Rect, bool, string) EditorWindow.GetWindowWithRect(Type, Rect, bool) EditorWindow.GetWindowWithRect(Type, Rect) EditorWindow.GetWindow<T>() EditorWindow.GetWindow<T>(bool) EditorWindow.GetWindow<T>(bool, string) EditorWindow.GetWindow<T>(string) EditorWindow.GetWindow<T>(string, bool) EditorWindow.GetWindow<T>(bool, string, bool) EditorWindow.GetWindow<T>(params Type[]) EditorWindow.GetWindow<T>(string, params Type[]) EditorWindow.GetWindow<T>(string, bool, params Type[]) EditorWindow.CreateWindow<T>(params Type[]) EditorWindow.CreateWindow<T>(string, params Type[]) EditorWindow.HasOpenInstances<T>() EditorWindow.FocusWindowIfItsOpen(Type) EditorWindow.FocusWindowIfItsOpen<T>() EditorWindow.GetWindowWithRect<T>(Rect) EditorWindow.GetWindowWithRect<T>(Rect, bool) EditorWindow.GetWindowWithRect<T>(Rect, bool, string) EditorWindow.GetWindowWithRect<T>(Rect, bool, string, bool) EditorWindow.SaveChanges() EditorWindow.DiscardChanges() EditorWindow.Close() EditorWindow.Repaint() EditorWindow.SendEvent(Event) EditorWindow.GetExtraPaneTypes() EditorWindow.TryGetOverlay(string, out Overlay) EditorWindow.OnBackingScaleFactorChanged() EditorWindow.rootVisualElement EditorWindow.wantsMouseMove EditorWindow.wantsMouseEnterLeaveWindow EditorWindow.wantsLessLayoutEvents EditorWindow.autoRepaintOnSceneChange EditorWindow.maximized EditorWindow.hasFocus EditorWindow.docked EditorWindow.focusedWindow EditorWindow.mouseOverWindow EditorWindow.hasUnsavedChanges EditorWindow.saveChangesMessage EditorWindow.minSize EditorWindow.maxSize EditorWindow.title EditorWindow.titleContent EditorWindow.depthBufferBits EditorWindow.antiAlias EditorWindow.position ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.Editor.UI.Windows.SceneReferencesEditorPopup.html": {
    "href": "api/VRBuilder.Editor.UI.Windows.SceneReferencesEditorPopup.html",
    "title": "Class SceneReferencesEditorPopup | VR Builder Documentation",
    "keywords": "Class SceneReferencesEditorPopup Namespace VRBuilder.Editor.UI.Windows Assembly VRBuilder.Editor.dll public class SceneReferencesEditorPopup : PopupWindowContent Inheritance object PopupWindowContent SceneReferencesEditorPopup Inherited Members PopupWindowContent.OnClose() PopupWindowContent.editorWindow object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SceneReferencesEditorPopup(ProcessSceneReferenceBase, Action<object>) public SceneReferencesEditorPopup(ProcessSceneReferenceBase reference, Action<object> changeValueCallback) Parameters reference ProcessSceneReferenceBase changeValueCallback Action<object> Methods GetWindowSize() The size of the popup window. public override Vector2 GetWindowSize() Returns Vector2 The size of the Popup window. OnGUI(Rect) Callback for drawing GUI controls for the popup window. public override void OnGUI(Rect rect) Parameters rect Rect The rectangle to draw the GUI inside. OnOpen() Callback when the popup window is opened. public override void OnOpen() SetWindowSize(float, float) Set the with and or height of the window. If the given value is smaller than the minimum size, the minimum size will be used. public void SetWindowSize(float windowWith = -1, float windowHeight = -1) Parameters windowWith float windowHeight float"
  },
  "api/VRBuilder.Editor.UI.Windows.SearchableGroupListPopup.html": {
    "href": "api/VRBuilder.Editor.UI.Windows.SearchableGroupListPopup.html",
    "title": "Class SearchableGroupListPopup | VR Builder Documentation",
    "keywords": "Class SearchableGroupListPopup Namespace VRBuilder.Editor.UI.Windows Assembly VRBuilder.Editor.dll Popup window that displays a searchable list of all VR Builder SceneObjectGroups. public class SearchableGroupListPopup : PopupWindowContent Inheritance object PopupWindowContent SearchableGroupListPopup Inherited Members PopupWindowContent.OnClose() PopupWindowContent.editorWindow object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides functionality for displaying a a searchable list of all VR Builder SceneObjectGroups in a popup window, where the groups can be filtered based on a search query. The class supports partial word matching in the search. Constructors SearchableGroupListPopup(Action<SceneObjectGroup>, VisualTreeAsset, VisualTreeAsset) public SearchableGroupListPopup(Action<SceneObjectGroups.SceneObjectGroup> onItemSelected, VisualTreeAsset searchableList, VisualTreeAsset listItem) Parameters onItemSelected Action<SceneObjectGroups.SceneObjectGroup> searchableList VisualTreeAsset listItem VisualTreeAsset Methods GetWindowSize() The size of the popup window. public override Vector2 GetWindowSize() Returns Vector2 The size of the Popup window. OnGUI(Rect) Callback for drawing GUI controls for the popup window. public override void OnGUI(Rect rect) Parameters rect Rect The rectangle to draw the GUI inside. OnOpen() Callback when the popup window is opened. public override void OnOpen() SetAvailableGroups(IEnumerable<SceneObjectGroup>, bool) Set the groups to be displayed in the list. public void SetAvailableGroups(IEnumerable<SceneObjectGroups.SceneObjectGroup> availableGroups, bool firstItemIsProcessSceneObject = false) Parameters availableGroups IEnumerable<SceneObjectGroups.SceneObjectGroup> firstItemIsProcessSceneObject bool SetContext(bool) Sets the context of weather GroupCountNotAvailableText should be displayed instead of the group reference count. public void SetContext(bool isInPreviewContext) Parameters isInPreviewContext bool If true GroupCountNotAvailableText will be displayed instead of a the group reference count. SetWindowSize(float, float) Set the with and or height of the window. If the given value is smaller than the minimum size, the minimum size will be used. public void SetWindowSize(float windowWith = -1, float windowHeight = -1) Parameters windowWith float windowHeight float"
  },
  "api/VRBuilder.Editor.UI.Windows.WindowUtils.html": {
    "href": "api/VRBuilder.Editor.UI.Windows.WindowUtils.html",
    "title": "Class WindowUtils | VR Builder Documentation",
    "keywords": "Class WindowUtils Namespace VRBuilder.Editor.UI.Windows Assembly VRBuilder.Editor.dll public class WindowUtils Inheritance object WindowUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.Editor.UI.Windows.html": {
    "href": "api/VRBuilder.Editor.UI.Windows.html",
    "title": "Namespace VRBuilder.Editor.UI.Windows | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.UI.Windows Classes ProcessEditorWindow Base class for a process GUI editor window. ProcessWindow This class draws the Workflow window.. SceneReferencesEditorPopup SearchableGroupListPopup Popup window that displays a searchable list of all VR Builder SceneObjectGroups. WindowUtils Interfaces IStepView Interface for GUI step view."
  },
  "api/VRBuilder.Editor.UI.Wizard.ProjectSetupWizard.html": {
    "href": "api/VRBuilder.Editor.UI.Wizard.ProjectSetupWizard.html",
    "title": "Class ProjectSetupWizard | VR Builder Documentation",
    "keywords": "Class ProjectSetupWizard Namespace VRBuilder.Editor.UI.Wizard Assembly VRBuilder.Editor.dll Wizard which guides the user through setting up a new project, including a process, scene and XR hardware. [InitializeOnLoad] public static class ProjectSetupWizard Inheritance object ProjectSetupWizard Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events SetupFinished Will be called when the VR Builder Setup wizard is closed. public static event EventHandler<EventArgs> SetupFinished Event Type EventHandler<EventArgs>"
  },
  "api/VRBuilder.Editor.UI.Wizard.SceneSetupWizard.html": {
    "href": "api/VRBuilder.Editor.UI.Wizard.SceneSetupWizard.html",
    "title": "Class SceneSetupWizard | VR Builder Documentation",
    "keywords": "Class SceneSetupWizard Namespace VRBuilder.Editor.UI.Wizard Assembly VRBuilder.Editor.dll Wizard which guides the user through creating a new process in a new or existing scene. public static class SceneSetupWizard Inheritance object SceneSetupWizard Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events SetupFinished Will be called when the Process Setup wizard is closed. public static event EventHandler<EventArgs> SetupFinished Event Type EventHandler<EventArgs>"
  },
  "api/VRBuilder.Editor.UI.Wizard.html": {
    "href": "api/VRBuilder.Editor.UI.Wizard.html",
    "title": "Namespace VRBuilder.Editor.UI.Wizard | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.UI.Wizard Classes ProjectSetupWizard Wizard which guides the user through setting up a new project, including a process, scene and XR hardware. SceneSetupWizard Wizard which guides the user through creating a new process in a new or existing scene."
  },
  "api/VRBuilder.Editor.UI.WorkflowEditorColorPalette.html": {
    "href": "api/VRBuilder.Editor.UI.WorkflowEditorColorPalette.html",
    "title": "Class WorkflowEditorColorPalette | VR Builder Documentation",
    "keywords": "Class WorkflowEditorColorPalette Namespace VRBuilder.Editor.UI Assembly VRBuilder.Editor.dll Class to provide convenient access to all colors used in the Workflow window. [DataContract] public class WorkflowEditorColorPalette Inheritance object WorkflowEditorColorPalette Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EditorBackground Returns background color of the editor based on current editor skin. public static Color EditorBackground { get; } Property Value Color ElementBackground Background color for graphical elements (step nodes, buttons...) [DataMember] public Color ElementBackground { get; } Property Value Color Primary Primary color for selected elements. [DataMember] public Color Primary { get; } Property Value Color Secondary Secondary color (for highlights). [DataMember] public Color Secondary { get; } Property Value Color Text Text color easily readable at ElementBackground color. [DataMember] public Color Text { get; } Property Value Color Transition Color of transition arrows between steps. [DataMember] public Color Transition { get; } Property Value Color Methods GetDefaultPalette() public static WorkflowEditorColorPalette GetDefaultPalette() Returns WorkflowEditorColorPalette LoadPaletteFrom(string) Load palette from a json file. public static WorkflowEditorColorPalette LoadPaletteFrom(string paletteSubpath) Parameters paletteSubpath string Subpath to file. If file is not found, use default palette. If more than one possible candidate is found, use default palette. If there was a serialization error, use default palette. Returns WorkflowEditorColorPalette"
  },
  "api/VRBuilder.Editor.UI.html": {
    "href": "api/VRBuilder.Editor.UI.html",
    "title": "Namespace VRBuilder.Editor.UI | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.UI Classes BaseSettingsProvider Base Settings provider which allows to inject additional sections which implement IProjectSettingsSection. BuilderEditorStyles BuilderGUILayout Layout extension for VR Builder. EditorDrawingHelper Helper class for drawing primitives in custom editors. EditorIcon Utility class to help with different unity color schemes (dark/light). Takes care about loading the given icon, will add _light or _dark to the given path. If only one icon is found it will be used for both skins. If no icon is found there will be an NullReferenceException thrown. DO NOT ADD FILE ENDINGS TO THE PATH! LanguageSettingsProvider ProcessSceneObjectEditor Custom editor for ProcessSceneObject. SceneObjectGroupsSettingsProvider Provider for a list of scene object groups. SceneObjectGroupsSettingsSection Settings section to manage groups that scene objects can belong to. SpectatorSettingsProvider WorkflowEditorColorPalette Class to provide convenient access to all colors used in the Workflow window. Interfaces IProjectSettingsSection Allows to inject a settings section into a setting provider. Enums LogoStyle"
  },
  "api/VRBuilder.Editor.UX.ProcessControllerSceneSetup.html": {
    "href": "api/VRBuilder.Editor.UX.ProcessControllerSceneSetup.html",
    "title": "Class ProcessControllerSceneSetup | VR Builder Documentation",
    "keywords": "Class ProcessControllerSceneSetup Namespace VRBuilder.Editor.UX Assembly VRBuilder.Editor.dll Will be called on OnSceneSetup to add the process controller menu. public class ProcessControllerSceneSetup : SceneSetup Inheritance object SceneSetup ProcessControllerSceneSetup Inherited Members SceneSetup.SetupPrefab(string) SceneSetup.FindPrefab(string) SceneSetup.IsPrefabMissingInScene(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Key Identifier key for specific scene setup types, e.g. for every interaction framework. public override string Key { get; } Property Value string Priority Priority lets you tweak in which order different SceneSetups will be performed. The priority is considered from lowest to highest. public override int Priority { get; } Property Value int Methods Setup(ISceneSetupConfiguration) Setup the scene with necessary objects and/or logic. public override void Setup(ISceneSetupConfiguration configuration) Parameters configuration ISceneSetupConfiguration"
  },
  "api/VRBuilder.Editor.UX.html": {
    "href": "api/VRBuilder.Editor.UX.html",
    "title": "Namespace VRBuilder.Editor.UX | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.UX Classes ProcessControllerSceneSetup Will be called on OnSceneSetup to add the process controller menu."
  },
  "api/VRBuilder.Editor.UndoRedo.CallbackCommand.html": {
    "href": "api/VRBuilder.Editor.UndoRedo.CallbackCommand.html",
    "title": "Class CallbackCommand | VR Builder Documentation",
    "keywords": "Class CallbackCommand Namespace VRBuilder.Editor.UndoRedo Assembly VRBuilder.Editor.dll A revertable command which defines Do/Undo logic through callbacks. public class CallbackCommand : IRevertableCommand Inheritance object CallbackCommand Implements IRevertableCommand Derived ProcessCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CallbackCommand(Action, Action) public CallbackCommand(Action doCallback, Action undoCallback) Parameters doCallback Action undoCallback Action Methods Do() Perform some revertable action. public virtual void Do() Undo() Revert the changes done during by Do() method. public virtual void Undo()"
  },
  "api/VRBuilder.Editor.UndoRedo.IRevertableCommand.html": {
    "href": "api/VRBuilder.Editor.UndoRedo.IRevertableCommand.html",
    "title": "Interface IRevertableCommand | VR Builder Documentation",
    "keywords": "Interface IRevertableCommand Namespace VRBuilder.Editor.UndoRedo Assembly VRBuilder.Editor.dll An interface for a method object, public interface IRevertableCommand Methods Do() Perform some revertable action. void Do() Undo() Revert the changes done during by Do() method. void Undo()"
  },
  "api/VRBuilder.Editor.UndoRedo.ProcessCommand.html": {
    "href": "api/VRBuilder.Editor.UndoRedo.ProcessCommand.html",
    "title": "Class ProcessCommand | VR Builder Documentation",
    "keywords": "Class ProcessCommand Namespace VRBuilder.Editor.UndoRedo Assembly VRBuilder.Editor.dll A CallbackCommand which notifies the GlobalEditorHandler class that the current process was modified. public class ProcessCommand : CallbackCommand, IRevertableCommand Inheritance object CallbackCommand ProcessCommand Implements IRevertableCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProcessCommand(Action, Action) public ProcessCommand(Action doCallback, Action undoCallback) Parameters doCallback Action undoCallback Action Methods Do() Perform some revertable action. public override void Do() Undo() Revert the changes done during by Do() method. public override void Undo()"
  },
  "api/VRBuilder.Editor.UndoRedo.RevertableChangesHandler.html": {
    "href": "api/VRBuilder.Editor.UndoRedo.RevertableChangesHandler.html",
    "title": "Class RevertableChangesHandler | VR Builder Documentation",
    "keywords": "Class RevertableChangesHandler Namespace VRBuilder.Editor.UndoRedo Assembly VRBuilder.Editor.dll Utility class to hook up non-serializeable changes to Unity's Undo. public static class RevertableChangesHandler Inheritance object RevertableChangesHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CollapseUndoOperations(string) Collapses all undo operation up to group index together into the main stack. public static void CollapseUndoOperations(string groupName) Parameters groupName string Do(IRevertableCommand, string) Registers revertableCommand and executes it. public static void Do(IRevertableCommand revertableCommand, string commandGroup = \"\") Parameters revertableCommand IRevertableCommand commandGroup string Remarks If commandGroup is empty, revertableCommand will be added to the main stack, otherwise, it will remind in a group called as commandGroup content until CollapseUndoOperations(string) is called. FlushStack() Clear Unity's Undo stack and reset the command handler. public static void FlushStack()"
  },
  "api/VRBuilder.Editor.UndoRedo.html": {
    "href": "api/VRBuilder.Editor.UndoRedo.html",
    "title": "Namespace VRBuilder.Editor.UndoRedo | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.UndoRedo Classes CallbackCommand A revertable command which defines Do/Undo logic through callbacks. ProcessCommand A CallbackCommand which notifies the GlobalEditorHandler class that the current process was modified. RevertableChangesHandler Utility class to hook up non-serializeable changes to Unity's Undo. Interfaces IRevertableCommand An interface for a method object,"
  },
  "api/VRBuilder.Editor.VideoTools.UI.PlayVideoBehaviorMenuItem.html": {
    "href": "api/VRBuilder.Editor.VideoTools.UI.PlayVideoBehaviorMenuItem.html",
    "title": "Class PlayVideoBehaviorMenuItem | VR Builder Documentation",
    "keywords": "Class PlayVideoBehaviorMenuItem Namespace VRBuilder.Editor.VideoTools.UI Assembly VRBuilder.Editor.VideoTools.dll Menu item for PlayVideoBehavior. public class PlayVideoBehaviorMenuItem : MenuItem<IBehavior> Inheritance object MenuOption<IBehavior> MenuItem<IBehavior> PlayVideoBehaviorMenuItem Inherited Members MenuItem<IBehavior>.GetItemType() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayedName A name displayed in the Step Inspector. public override string DisplayedName { get; } Property Value string Methods GetNewItem() Returns a new instance of an object (behavior or condition). public override IBehavior GetNewItem() Returns IBehavior"
  },
  "api/VRBuilder.Editor.VideoTools.UI.VideoPlayerPropertyEditor.html": {
    "href": "api/VRBuilder.Editor.VideoTools.UI.VideoPlayerPropertyEditor.html",
    "title": "Class VideoPlayerPropertyEditor | VR Builder Documentation",
    "keywords": "Class VideoPlayerPropertyEditor Namespace VRBuilder.Editor.VideoTools.UI Assembly VRBuilder.Editor.VideoTools.dll Editor UI for VideoPlayerProperty. [CustomEditor(typeof(VideoPlayerProperty))] public class VideoPlayerPropertyEditor : Editor Inheritance object Object ScriptableObject Editor VideoPlayerPropertyEditor Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/VRBuilder.Editor.VideoTools.UI.html": {
    "href": "api/VRBuilder.Editor.VideoTools.UI.html",
    "title": "Namespace VRBuilder.Editor.VideoTools.UI | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.VideoTools.UI Classes PlayVideoBehaviorMenuItem Menu item for PlayVideoBehavior. VideoPlayerPropertyEditor Editor UI for VideoPlayerProperty."
  },
  "api/VRBuilder.Editor.XRInteraction.SnapZoneSettings.html": {
    "href": "api/VRBuilder.Editor.XRInteraction.SnapZoneSettings.html",
    "title": "Class SnapZoneSettings | VR Builder Documentation",
    "keywords": "Class SnapZoneSettings Namespace VRBuilder.Editor.XRInteraction Assembly VRBuilder.Editor.XRInteraction.dll Settings for SnapZones for e.g. automatic creation of such snap zones. [CreateAssetMenu(fileName = \"SnapZoneSettings\", menuName = \"VR Builder/SnapZoneSettings\", order = 1)] public class SnapZoneSettings : SettingsObject<SnapZoneSettings> Inheritance object Object ScriptableObject SettingsObject<SnapZoneSettings> SnapZoneSettings Inherited Members SettingsObject<SnapZoneSettings>.Instance SettingsObject<SnapZoneSettings>.Save() ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields HighlightColor This color is used as the snap zone highlight color when no object is hovering a SnapZone. [Tooltip(\"This color is used as the snap zone highlight color when no object is hovering but `Snap Zone Active` is true.\")] public Color HighlightColor Field Value Color InteractionLayerMask Only Interactables with this LayerMask will interact with this SnapZone. [Tooltip(\"Only Interactables with this LayerMask will interact with this SnapZone.\")] public InteractionLayerMask InteractionLayerMask Field Value InteractionLayerMask InvalidColor This color is used when an invalid InteractableObject is hovering a SnapZone. [Tooltip(\"This color is used when an invalid object is hovering the snap zone.\")] public Color InvalidColor Field Value Color ValidationColor This color is used when a valid InteractableObject is hovering a SnapZone. [Tooltip(\"This color is used when a valid object is hovering the snap zone.\")] public Color ValidationColor Field Value Color Properties HighlightMaterial The material used for drawing when an InteractableObject is hovering a SnapZone. Should be transparent. public Material HighlightMaterial { get; } Property Value Material InvalidMaterial The material used for the highlight object, when an invalid object is hovering. Should be transparent. public Material InvalidMaterial { get; } Property Value Material Settings Loads the first existing SnapZoneSettings found in the project. If non are found, it creates and saves a new instance with default values. public static SnapZoneSettings Settings { get; } Property Value SnapZoneSettings ValidationMaterial The material used for the highlight object, when a valid object is hovering. Should be transparent. public Material ValidationMaterial { get; } Property Value Material Methods ApplySettingsToSnapZone(SnapZone) Applies current settings to provided SnapZone. public void ApplySettingsToSnapZone(SnapZone snapZone) Parameters snapZone SnapZone"
  },
  "api/VRBuilder.Editor.XRInteraction.TeleportationAnchorVRBuilderEditor.html": {
    "href": "api/VRBuilder.Editor.XRInteraction.TeleportationAnchorVRBuilderEditor.html",
    "title": "Class TeleportationAnchorVRBuilderEditor | VR Builder Documentation",
    "keywords": "Class TeleportationAnchorVRBuilderEditor Namespace VRBuilder.Editor.XRInteraction Assembly VRBuilder.Editor.XRInteraction.dll [CustomEditor(typeof(TeleportationAnchorVRBuilder))] [CanEditMultipleObjects] public class TeleportationAnchorVRBuilderEditor : TeleportationAnchorEditor Inheritance object Object ScriptableObject Editor BaseInteractionEditor XRBaseInteractableEditor BaseTeleportationInteractableEditor TeleportationAnchorEditor TeleportationAnchorVRBuilderEditor Inherited Members TeleportationAnchorEditor.m_TeleportAnchorTransform TeleportationAnchorEditor.OnEnable() TeleportationAnchorEditor.DrawCoreConfiguration() BaseTeleportationInteractableEditor.m_TeleportationProvider BaseTeleportationInteractableEditor.m_MatchOrientation BaseTeleportationInteractableEditor.m_MatchDirectionalInput BaseTeleportationInteractableEditor.m_TeleportTrigger BaseTeleportationInteractableEditor.m_FilterSelectionByHitNormal BaseTeleportationInteractableEditor.m_UpNormalToleranceDegrees BaseTeleportationInteractableEditor.m_Teleporting BaseTeleportationInteractableEditor.DrawProperties() BaseTeleportationInteractableEditor.DrawTeleportationConfiguration() BaseTeleportationInteractableEditor.DrawTeleportationConfigurationNested() BaseTeleportationInteractableEditor.DrawInteractableEventsNested() XRBaseInteractableEditor.m_InteractionManager XRBaseInteractableEditor.m_Colliders XRBaseInteractableEditor.m_InteractionLayerMask XRBaseInteractableEditor.m_InteractionLayers XRBaseInteractableEditor.m_DistanceCalculationMode XRBaseInteractableEditor.m_SelectMode XRBaseInteractableEditor.m_FocusMode XRBaseInteractableEditor.m_StartingHoverFilters XRBaseInteractableEditor.m_StartingSelectFilters XRBaseInteractableEditor.m_StartingInteractionStrengthFilters XRBaseInteractableEditor.m_CustomReticle XRBaseInteractableEditor.m_AllowGazeInteraction XRBaseInteractableEditor.m_AllowGazeSelect XRBaseInteractableEditor.m_OverrideGazeTimeToSelect XRBaseInteractableEditor.m_GazeTimeToSelect XRBaseInteractableEditor.m_AllowGazeAssistance XRBaseInteractableEditor.m_OverrideTimeToAutoDeselectGaze XRBaseInteractableEditor.m_TimeToAutoDeselectGaze XRBaseInteractableEditor.m_FirstHoverEntered XRBaseInteractableEditor.m_LastHoverExited XRBaseInteractableEditor.m_HoverEntered XRBaseInteractableEditor.m_HoverExited XRBaseInteractableEditor.m_FirstSelectEntered XRBaseInteractableEditor.m_LastSelectExited XRBaseInteractableEditor.m_SelectEntered XRBaseInteractableEditor.m_SelectExited XRBaseInteractableEditor.m_FirstFocusEntered XRBaseInteractableEditor.m_LastFocusExited XRBaseInteractableEditor.m_FocusEntered XRBaseInteractableEditor.m_FocusExited XRBaseInteractableEditor.m_Activated XRBaseInteractableEditor.m_Deactivated XRBaseInteractableEditor.m_OnFirstHoverEntered XRBaseInteractableEditor.m_OnLastHoverExited XRBaseInteractableEditor.m_OnHoverEntered XRBaseInteractableEditor.m_OnHoverExited XRBaseInteractableEditor.m_OnSelectEntered XRBaseInteractableEditor.m_OnSelectExited XRBaseInteractableEditor.m_OnSelectCanceled XRBaseInteractableEditor.m_OnActivate XRBaseInteractableEditor.m_OnDeactivate XRBaseInteractableEditor.m_OnFirstHoverEnteredCalls XRBaseInteractableEditor.m_OnLastHoverExitedCalls XRBaseInteractableEditor.m_OnHoverEnteredCalls XRBaseInteractableEditor.m_OnHoverExitedCalls XRBaseInteractableEditor.m_OnSelectEnteredCalls XRBaseInteractableEditor.m_OnSelectExitedCalls XRBaseInteractableEditor.m_OnSelectCanceledCalls XRBaseInteractableEditor.m_OnActivateCalls XRBaseInteractableEditor.m_OnDeactivateCalls XRBaseInteractableEditor.selectMultipleAllowed XRBaseInteractableEditor.focusMultipleAllowed XRBaseInteractableEditor.DrawInspector() XRBaseInteractableEditor.DrawBeforeProperties() XRBaseInteractableEditor.DrawEvents() XRBaseInteractableEditor.DrawGazeConfiguration() XRBaseInteractableEditor.DrawSelectionConfiguration() XRBaseInteractableEditor.DrawFocusConfiguration() XRBaseInteractableEditor.DrawFilters() XRBaseInteractableEditor.DrawFiltersNested() XRBaseInteractableEditor.DrawInteractionManagement() XRBaseInteractableEditor.DrawDistanceCalculationMode() XRBaseInteractableEditor.DrawInteractableEvents() XRBaseInteractableEditor.IsDeprecatedEventsInUse() XRBaseInteractableEditor.MigrateEvents(SerializedObject) XRBaseInteractableEditor.MigrateEvents(Object[]) BaseInteractionEditor.knownSerializedPropertyNames BaseInteractionEditor.InitializeKnownSerializedPropertyNames() BaseInteractionEditor.GetDerivedSerializedPropertyNames() BaseInteractionEditor.DrawDerivedProperties() BaseInteractionEditor.DrawScript() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods ConfigureDefaultTeleportationAnchor(TeleportationAnchorVRBuilder) protected void ConfigureDefaultTeleportationAnchor(TeleportationAnchorVRBuilder teleportationAnchor) Parameters teleportationAnchor TeleportationAnchorVRBuilder ConfigureTeleportationProximityEntry(TeleportationAnchorVRBuilder) protected virtual void ConfigureTeleportationProximityEntry(TeleportationAnchorVRBuilder teleportationAnchor) Parameters teleportationAnchor TeleportationAnchorVRBuilder ConfigureVRBuilderDefaults(TeleportationAnchorVRBuilder) protected virtual void ConfigureVRBuilderDefaults(TeleportationAnchorVRBuilder teleportationAnchor) Parameters teleportationAnchor TeleportationAnchorVRBuilder OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/VRBuilder.Editor.XRInteraction.TeleportationAreaVRBuilderEditor.html": {
    "href": "api/VRBuilder.Editor.XRInteraction.TeleportationAreaVRBuilderEditor.html",
    "title": "Class TeleportationAreaVRBuilderEditor | VR Builder Documentation",
    "keywords": "Class TeleportationAreaVRBuilderEditor Namespace VRBuilder.Editor.XRInteraction Assembly VRBuilder.Editor.XRInteraction.dll [CustomEditor(typeof(TeleportationAreaVRBuilder))] [CanEditMultipleObjects] public class TeleportationAreaVRBuilderEditor : TeleportationAreaEditor Inheritance object Object ScriptableObject Editor BaseInteractionEditor XRBaseInteractableEditor BaseTeleportationInteractableEditor TeleportationAreaEditor TeleportationAreaVRBuilderEditor Inherited Members BaseTeleportationInteractableEditor.m_TeleportationProvider BaseTeleportationInteractableEditor.m_MatchOrientation BaseTeleportationInteractableEditor.m_MatchDirectionalInput BaseTeleportationInteractableEditor.m_TeleportTrigger BaseTeleportationInteractableEditor.m_FilterSelectionByHitNormal BaseTeleportationInteractableEditor.m_UpNormalToleranceDegrees BaseTeleportationInteractableEditor.m_Teleporting BaseTeleportationInteractableEditor.OnEnable() BaseTeleportationInteractableEditor.DrawProperties() BaseTeleportationInteractableEditor.DrawTeleportationConfiguration() BaseTeleportationInteractableEditor.DrawTeleportationConfigurationNested() BaseTeleportationInteractableEditor.DrawInteractableEventsNested() XRBaseInteractableEditor.m_InteractionManager XRBaseInteractableEditor.m_Colliders XRBaseInteractableEditor.m_InteractionLayerMask XRBaseInteractableEditor.m_InteractionLayers XRBaseInteractableEditor.m_DistanceCalculationMode XRBaseInteractableEditor.m_SelectMode XRBaseInteractableEditor.m_FocusMode XRBaseInteractableEditor.m_StartingHoverFilters XRBaseInteractableEditor.m_StartingSelectFilters XRBaseInteractableEditor.m_StartingInteractionStrengthFilters XRBaseInteractableEditor.m_CustomReticle XRBaseInteractableEditor.m_AllowGazeInteraction XRBaseInteractableEditor.m_AllowGazeSelect XRBaseInteractableEditor.m_OverrideGazeTimeToSelect XRBaseInteractableEditor.m_GazeTimeToSelect XRBaseInteractableEditor.m_AllowGazeAssistance XRBaseInteractableEditor.m_OverrideTimeToAutoDeselectGaze XRBaseInteractableEditor.m_TimeToAutoDeselectGaze XRBaseInteractableEditor.m_FirstHoverEntered XRBaseInteractableEditor.m_LastHoverExited XRBaseInteractableEditor.m_HoverEntered XRBaseInteractableEditor.m_HoverExited XRBaseInteractableEditor.m_FirstSelectEntered XRBaseInteractableEditor.m_LastSelectExited XRBaseInteractableEditor.m_SelectEntered XRBaseInteractableEditor.m_SelectExited XRBaseInteractableEditor.m_FirstFocusEntered XRBaseInteractableEditor.m_LastFocusExited XRBaseInteractableEditor.m_FocusEntered XRBaseInteractableEditor.m_FocusExited XRBaseInteractableEditor.m_Activated XRBaseInteractableEditor.m_Deactivated XRBaseInteractableEditor.m_OnFirstHoverEntered XRBaseInteractableEditor.m_OnLastHoverExited XRBaseInteractableEditor.m_OnHoverEntered XRBaseInteractableEditor.m_OnHoverExited XRBaseInteractableEditor.m_OnSelectEntered XRBaseInteractableEditor.m_OnSelectExited XRBaseInteractableEditor.m_OnSelectCanceled XRBaseInteractableEditor.m_OnActivate XRBaseInteractableEditor.m_OnDeactivate XRBaseInteractableEditor.m_OnFirstHoverEnteredCalls XRBaseInteractableEditor.m_OnLastHoverExitedCalls XRBaseInteractableEditor.m_OnHoverEnteredCalls XRBaseInteractableEditor.m_OnHoverExitedCalls XRBaseInteractableEditor.m_OnSelectEnteredCalls XRBaseInteractableEditor.m_OnSelectExitedCalls XRBaseInteractableEditor.m_OnSelectCanceledCalls XRBaseInteractableEditor.m_OnActivateCalls XRBaseInteractableEditor.m_OnDeactivateCalls XRBaseInteractableEditor.selectMultipleAllowed XRBaseInteractableEditor.focusMultipleAllowed XRBaseInteractableEditor.DrawInspector() XRBaseInteractableEditor.DrawBeforeProperties() XRBaseInteractableEditor.DrawEvents() XRBaseInteractableEditor.DrawCoreConfiguration() XRBaseInteractableEditor.DrawGazeConfiguration() XRBaseInteractableEditor.DrawSelectionConfiguration() XRBaseInteractableEditor.DrawFocusConfiguration() XRBaseInteractableEditor.DrawFilters() XRBaseInteractableEditor.DrawFiltersNested() XRBaseInteractableEditor.DrawInteractionManagement() XRBaseInteractableEditor.DrawDistanceCalculationMode() XRBaseInteractableEditor.DrawInteractableEvents() XRBaseInteractableEditor.IsDeprecatedEventsInUse() XRBaseInteractableEditor.MigrateEvents(SerializedObject) XRBaseInteractableEditor.MigrateEvents(Object[]) BaseInteractionEditor.knownSerializedPropertyNames BaseInteractionEditor.InitializeKnownSerializedPropertyNames() BaseInteractionEditor.GetDerivedSerializedPropertyNames() BaseInteractionEditor.DrawDerivedProperties() BaseInteractionEditor.DrawScript() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods ConfigureVRBuilderDefaults(TeleportationAreaVRBuilder) protected virtual void ConfigureVRBuilderDefaults(TeleportationAreaVRBuilder teleportationArea) Parameters teleportationArea TeleportationAreaVRBuilder OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/VRBuilder.Editor.XRInteraction.XRInteractionSceneSetup.html": {
    "href": "api/VRBuilder.Editor.XRInteraction.XRInteractionSceneSetup.html",
    "title": "Class XRInteractionSceneSetup | VR Builder Documentation",
    "keywords": "Class XRInteractionSceneSetup Namespace VRBuilder.Editor.XRInteraction Assembly VRBuilder.Editor.XRInteraction.dll Scene setup for XR-Interaction. public class XRInteractionSceneSetup : InteractionFrameworkSceneSetup Inheritance object SceneSetup InteractionFrameworkSceneSetup XRInteractionSceneSetup Inherited Members InteractionFrameworkSceneSetup.Priority InteractionFrameworkSceneSetup.RemoveMainCamera() SceneSetup.SetupPrefab(string) SceneSetup.FindPrefab(string) SceneSetup.IsPrefabMissingInScene(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Key Identifier key for specific scene setup types, e.g. for every interaction framework. public override string Key { get; } Property Value string Methods Setup(ISceneSetupConfiguration) Setup the scene with necessary objects and/or logic. public override void Setup(ISceneSetupConfiguration configuration) Parameters configuration ISceneSetupConfiguration"
  },
  "api/VRBuilder.Editor.XRInteraction.html": {
    "href": "api/VRBuilder.Editor.XRInteraction.html",
    "title": "Namespace VRBuilder.Editor.XRInteraction | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.XRInteraction Classes SnapZoneSettings Settings for SnapZones for e.g. automatic creation of such snap zones. TeleportationAnchorVRBuilderEditor TeleportationAreaVRBuilderEditor XRInteractionSceneSetup Scene setup for XR-Interaction."
  },
  "api/VRBuilder.Editor.XRUtils.XRLoaderHelper.XRConfiguration.html": {
    "href": "api/VRBuilder.Editor.XRUtils.XRLoaderHelper.XRConfiguration.html",
    "title": "Enum XRLoaderHelper.XRConfiguration | VR Builder Documentation",
    "keywords": "Enum XRLoaderHelper.XRConfiguration Namespace VRBuilder.Editor.XRUtils Assembly VRBuilder.Editor.dll public enum XRLoaderHelper.XRConfiguration Fields None = 0 OculusLegacy = 3 OculusXR = 5 OpenVRLegacy = 2 OpenVRXR = 4 WindowsMR = 6 XRLegacy = 7 XRManagement = 1"
  },
  "api/VRBuilder.Editor.XRUtils.XRLoaderHelper.XRSDK.html": {
    "href": "api/VRBuilder.Editor.XRUtils.XRLoaderHelper.XRSDK.html",
    "title": "Enum XRLoaderHelper.XRSDK | VR Builder Documentation",
    "keywords": "Enum XRLoaderHelper.XRSDK Namespace VRBuilder.Editor.XRUtils Assembly VRBuilder.Editor.dll public enum XRLoaderHelper.XRSDK Fields None = 0 Oculus = 2 OpenVR = 1 OpenXR = 4 WindowsMR = 3"
  },
  "api/VRBuilder.Editor.XRUtils.XRLoaderHelper.html": {
    "href": "api/VRBuilder.Editor.XRUtils.XRLoaderHelper.html",
    "title": "Class XRLoaderHelper | VR Builder Documentation",
    "keywords": "Class XRLoaderHelper Namespace VRBuilder.Editor.XRUtils Assembly VRBuilder.Editor.dll Utility class that allows to load XR packages. public class XRLoaderHelper Inheritance object XRLoaderHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetCurrentXRConfiguration() Returns a list with all XR SDKs enabled in this project. public static IEnumerable<XRLoaderHelper.XRConfiguration> GetCurrentXRConfiguration() Returns IEnumerable<XRLoaderHelper.XRConfiguration> LoadOculus() Retrieves and loads the Oculus XR package. public static void LoadOculus() LoadOpenVR() Retrieves and loads the OpenVR XR package. public static void LoadOpenVR() LoadOpenXR() Retrieves and loads the OpenXR package. public static void LoadOpenXR() LoadWindowsMR() Retrieves and loads the Windows MR package. public static void LoadWindowsMR()"
  },
  "api/VRBuilder.Editor.XRUtils.html": {
    "href": "api/VRBuilder.Editor.XRUtils.html",
    "title": "Namespace VRBuilder.Editor.XRUtils | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor.XRUtils Classes XRLoaderHelper Utility class that allows to load XR packages. Enums XRLoaderHelper.XRConfiguration XRLoaderHelper.XRSDK"
  },
  "api/VRBuilder.Editor.html": {
    "href": "api/VRBuilder.Editor.html",
    "title": "Namespace VRBuilder.Editor | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Editor Classes EditorReflectionUtils Helper class for reflection. EditorUtils Utility helper to ease up working with Unity Editor. MetadataWrapper Data structure used to draw properties in the 'Step Inspector'. PreBuildCloseProcessEditor We are closing the process editor window before the build starts. Having an open process editor window can lead to corrupt Unique Names. PreBuildLinkXMLCreator Generates a LinkXML file before the build process to preserve all Behaviors and Conditions from VR Builder add-ons. SceneSetup This base class is supposed to be implemented by classes which will be called to setup the scene. Can be used to e.g. setup process classes or interaction frameworks. TestableEditorElements TestableEditorElements.DisabledMenuItem TestableEditorElements.MenuItem TestableEditorElements.MenuOption TestableEditorElements.MenuSeparator Enums TestableEditorElements.DisplayMode"
  },
  "api/VRBuilder.ProcessController.AttachToUserView.html": {
    "href": "api/VRBuilder.ProcessController.AttachToUserView.html",
    "title": "Class AttachToUserView | VR Builder Documentation",
    "keywords": "Class AttachToUserView Namespace VRBuilder.ProcessController Assembly VRBuilder.Core.dll Puts the parent GameObject to the same position and rotation of the user camera. public class AttachToUserView : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour AttachToUserView Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields font [Tooltip(\"The font used in the spectator view.\")] [SerializeField] protected Font font Field Value Font fontSize [Tooltip(\"Size of the font used\")] [SerializeField] protected int fontSize Field Value int Methods LateUpdate() protected void LateUpdate() Start() protected void Start()"
  },
  "api/VRBuilder.ProcessController.BasicProcessLoader.html": {
    "href": "api/VRBuilder.ProcessController.BasicProcessLoader.html",
    "title": "Class BasicProcessLoader | VR Builder Documentation",
    "keywords": "Class BasicProcessLoader Namespace VRBuilder.ProcessController Assembly VRBuilder.Core.dll Loads and starts the process currently selected in the 'PROCESS_CONFIGURATION' gameObject. public class BasicProcessLoader : MonoBehaviour, IConfigurableProcessController Inheritance object Object Component Behaviour MonoBehaviour BasicProcessLoader Implements IConfigurableProcessController Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties AutoStartProcess If true, the process will start automatically as soon as the process controller is loaded. public bool AutoStartProcess { get; set; } Property Value bool"
  },
  "api/VRBuilder.ProcessController.IConfigurableProcessController.html": {
    "href": "api/VRBuilder.ProcessController.IConfigurableProcessController.html",
    "title": "Interface IConfigurableProcessController | VR Builder Documentation",
    "keywords": "Interface IConfigurableProcessController Namespace VRBuilder.ProcessController Assembly VRBuilder.Core.dll Interface for a process controller that can be configured in the setup object. public interface IConfigurableProcessController Properties AutoStartProcess If true, the process will start automatically as soon as the process controller is loaded. bool AutoStartProcess { get; set; } Property Value bool"
  },
  "api/VRBuilder.ProcessController.html": {
    "href": "api/VRBuilder.ProcessController.html",
    "title": "Namespace VRBuilder.ProcessController | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.ProcessController Classes AttachToUserView Puts the parent GameObject to the same position and rotation of the user camera. BasicProcessLoader Loads and starts the process currently selected in the 'PROCESS_CONFIGURATION' gameObject. Interfaces IConfigurableProcessController Interface for a process controller that can be configured in the setup object."
  },
  "api/VRBuilder.ProcessMenu.BaseProcessControllerMenu.html": {
    "href": "api/VRBuilder.ProcessMenu.BaseProcessControllerMenu.html",
    "title": "Class BaseProcessControllerMenu | VR Builder Documentation",
    "keywords": "Class BaseProcessControllerMenu Namespace VRBuilder.ProcessMenu Assembly VRBuilder.ProcessMenu.dll Base class for the course controller menu. public abstract class BaseProcessControllerMenu : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour BaseProcessControllerMenu Derived DesktopProcessMenu StandaloneProcessMenu Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.ProcessMenu.DesktopProcessMenu.html": {
    "href": "api/VRBuilder.ProcessMenu.DesktopProcessMenu.html",
    "title": "Class DesktopProcessMenu | VR Builder Documentation",
    "keywords": "Class DesktopProcessMenu Namespace VRBuilder.ProcessMenu Assembly VRBuilder.ProcessMenu.dll Controller class for an example of a custom overlay. public class DesktopProcessMenu : BaseProcessControllerMenu Inheritance object Object Component Behaviour MonoBehaviour BaseProcessControllerMenu DesktopProcessMenu Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields selectedLanguage protected string selectedLanguage Field Value string Methods Awake() protected virtual void Awake() OnDisable() protected virtual void OnDisable() OnProcessFinished(object, ProcessEventArgs) Is called when the process finished event is triggered. protected virtual void OnProcessFinished(object sender, ProcessEventArgs eventArgs) Parameters sender object Sender of the event. eventArgs ProcessEventArgs Event arguments. OnProcessStarted(object, ProcessEventArgs) Is called when the process started event is triggered. protected virtual void OnProcessStarted(object sender, ProcessEventArgs eventArgs) Parameters sender object Sender of the event. eventArgs ProcessEventArgs Event arguments. SetupMenu(object, ProcessEventArgs) protected virtual void SetupMenu(object sender, ProcessEventArgs e) Parameters sender object e ProcessEventArgs SubscribeToControllerEvents() Subscribes to events of the process controller. protected virtual void SubscribeToControllerEvents() SubscribeToProcessEvents() Subscribes to process events. protected virtual void SubscribeToProcessEvents() UnsubscribeFromControllerEvents() Unsubscribes from events of the process controller. protected virtual void UnsubscribeFromControllerEvents() UnsubscribeFromProcessEvents() Unsubscribes from process events. protected virtual void UnsubscribeFromProcessEvents() Update() protected virtual void Update()"
  },
  "api/VRBuilder.ProcessMenu.StandaloneMenuHandler.html": {
    "href": "api/VRBuilder.ProcessMenu.StandaloneMenuHandler.html",
    "title": "Class StandaloneMenuHandler | VR Builder Documentation",
    "keywords": "Class StandaloneMenuHandler Namespace VRBuilder.ProcessMenu Assembly VRBuilder.ProcessMenu.dll Shows and hides the StandaloneProcessController prefab. public class StandaloneMenuHandler : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour StandaloneMenuHandler Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields appearanceDistance [Tooltip(\"Initial distance between this controller and the user.\")] [SerializeField] protected float appearanceDistance Field Value float menuHiddenOnStart [SerializeField] protected bool menuHiddenOnStart Field Value bool toggleMenuAction [SerializeField] protected InputAction toggleMenuAction Field Value InputAction"
  },
  "api/VRBuilder.ProcessMenu.StandaloneProcessMenu.html": {
    "href": "api/VRBuilder.ProcessMenu.StandaloneProcessMenu.html",
    "title": "Class StandaloneProcessMenu | VR Builder Documentation",
    "keywords": "Class StandaloneProcessMenu Namespace VRBuilder.ProcessMenu Assembly VRBuilder.ProcessMenu.dll Standalone controller class for an example of a custom overlay with audio. public class StandaloneProcessMenu : BaseProcessControllerMenu Inheritance object Object Component Behaviour MonoBehaviour BaseProcessControllerMenu StandaloneProcessMenu Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnProcessFinished(object, ProcessEventArgs) Is called when the process finished event is triggered. protected virtual void OnProcessFinished(object sender, ProcessEventArgs eventArgs) Parameters sender object Sender of the event. eventArgs ProcessEventArgs Event arguments. OnProcessStarted(object, ProcessEventArgs) Is called when the process started event is triggered. protected virtual void OnProcessStarted(object sender, ProcessEventArgs eventArgs) Parameters sender object Sender of the event. eventArgs ProcessEventArgs Event arguments. SubscribeToProcessEvents() Subscribes to process events. protected virtual void SubscribeToProcessEvents() UnsubscribeFromProcessEvents() Unsubscribes from process events. protected virtual void UnsubscribeFromProcessEvents()"
  },
  "api/VRBuilder.ProcessMenu.VR_Dropdown.html": {
    "href": "api/VRBuilder.ProcessMenu.VR_Dropdown.html",
    "title": "Class VR_Dropdown | VR Builder Documentation",
    "keywords": "Class VR_Dropdown Namespace VRBuilder.ProcessMenu Assembly VRBuilder.ProcessMenu.dll Extension of the TextMeshPro Dropdown that prevents the dropdown canvas from being drawn in front of everything. public class VR_Dropdown : TMP_Dropdown, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IPointerClickHandler, ISubmitHandler, ICancelHandler, IEventSystemHandler Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable TMP_Dropdown VR_Dropdown Implements IMoveHandler IPointerDownHandler IPointerUpHandler IPointerEnterHandler IPointerExitHandler ISelectHandler IDeselectHandler IPointerClickHandler ISubmitHandler ICancelHandler IEventSystemHandler Inherited Members TMP_Dropdown.template TMP_Dropdown.captionText TMP_Dropdown.captionImage TMP_Dropdown.placeholder TMP_Dropdown.itemText TMP_Dropdown.itemImage TMP_Dropdown.options TMP_Dropdown.onValueChanged TMP_Dropdown.alphaFadeSpeed TMP_Dropdown.value TMP_Dropdown.SetValueWithoutNotify(int) TMP_Dropdown.IsExpanded TMP_Dropdown.Awake() TMP_Dropdown.Start() TMP_Dropdown.OnDisable() TMP_Dropdown.RefreshShownValue() TMP_Dropdown.AddOptions(List<TMP_Dropdown.OptionData>) TMP_Dropdown.AddOptions(List<string>) TMP_Dropdown.AddOptions(List<Sprite>) TMP_Dropdown.ClearOptions() TMP_Dropdown.Show() TMP_Dropdown.CreateBlocker(Canvas) TMP_Dropdown.DestroyBlocker(GameObject) TMP_Dropdown.CreateDropdownList(GameObject) TMP_Dropdown.DestroyDropdownList(GameObject) TMP_Dropdown.CreateItem(TMP_Dropdown.DropdownItem) TMP_Dropdown.DestroyItem(TMP_Dropdown.DropdownItem) TMP_Dropdown.Hide() Selectable.s_Selectables Selectable.s_SelectableCount Selectable.m_CurrentIndex Selectable.AllSelectablesNoAlloc(Selectable[]) Selectable.OnCanvasGroupChanged() Selectable.IsInteractable() Selectable.OnDidApplyAnimationProperties() Selectable.OnEnable() Selectable.OnTransformParentChanged() Selectable.OnValidate() Selectable.Reset() Selectable.InstantClearState() Selectable.DoStateTransition(Selectable.SelectionState, bool) Selectable.FindSelectable(Vector3) Selectable.FindSelectableOnLeft() Selectable.FindSelectableOnRight() Selectable.FindSelectableOnUp() Selectable.FindSelectableOnDown() Selectable.OnMove(AxisEventData) Selectable.IsHighlighted() Selectable.IsPressed() Selectable.OnPointerDown(PointerEventData) Selectable.OnPointerUp(PointerEventData) Selectable.OnPointerEnter(PointerEventData) Selectable.OnPointerExit(PointerEventData) Selectable.OnSelect(BaseEventData) Selectable.OnDeselect(BaseEventData) Selectable.Select() Selectable.allSelectablesArray Selectable.allSelectableCount Selectable.allSelectables Selectable.navigation Selectable.transition Selectable.colors Selectable.spriteState Selectable.animationTriggers Selectable.targetGraphic Selectable.interactable Selectable.image Selectable.animator Selectable.currentSelectionState UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnCancel(BaseEventData) This will hide the dropdown list. public override void OnCancel(BaseEventData eventData) Parameters eventData BaseEventData The associated event data. Remarks Called by a BaseInputModule when a Cancel event occurs. OnPointerClick(PointerEventData) Handling for when the dropdown is initially 'clicked'. Typically shows the dropdown public override void OnPointerClick(PointerEventData eventData) Parameters eventData PointerEventData The associated event data. OnSubmit(BaseEventData) Handling for when the dropdown is selected and a submit event is processed. Typically shows the dropdown public override void OnSubmit(BaseEventData eventData) Parameters eventData BaseEventData The associated event data."
  },
  "api/VRBuilder.ProcessMenu.html": {
    "href": "api/VRBuilder.ProcessMenu.html",
    "title": "Namespace VRBuilder.ProcessMenu | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.ProcessMenu Classes BaseProcessControllerMenu Base class for the course controller menu. DesktopProcessMenu Controller class for an example of a custom overlay. StandaloneMenuHandler Shows and hides the StandaloneProcessController prefab. StandaloneProcessMenu Standalone controller class for an example of a custom overlay with audio. VR_Dropdown Extension of the TextMeshPro Dropdown that prevents the dropdown canvas from being drawn in front of everything."
  },
  "api/VRBuilder.Randomization.Behaviors.SelectRandomTransitionBehavior.EntityData.html": {
    "href": "api/VRBuilder.Randomization.Behaviors.SelectRandomTransitionBehavior.EntityData.html",
    "title": "Class SelectRandomTransitionBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class SelectRandomTransitionBehavior.EntityData Namespace VRBuilder.Randomization.Behaviors Assembly VRBuilder.Randomization.dll The SelectRandomTransitionBehavior behavior data. [DisplayName(\"Select Random Transition\")] [DataContract(IsReference = true)] public class SelectRandomTransitionBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object SelectRandomTransitionBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. public string Name { get; set; } Property Value string"
  },
  "api/VRBuilder.Randomization.Behaviors.SelectRandomTransitionBehavior.html": {
    "href": "api/VRBuilder.Randomization.Behaviors.SelectRandomTransitionBehavior.html",
    "title": "Class SelectRandomTransitionBehavior | VR Builder Documentation",
    "keywords": "Class SelectRandomTransitionBehavior Namespace VRBuilder.Randomization.Behaviors Assembly VRBuilder.Randomization.dll A behavior that completes a random RandomlySelectedCondition on the same step. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/randomization-add-on\")] public class SelectRandomTransitionBehavior : Behavior<SelectRandomTransitionBehavior.EntityData>, IDataOwner<SelectRandomTransitionBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<SelectRandomTransitionBehavior.EntityData> Behavior<SelectRandomTransitionBehavior.EntityData> SelectRandomTransitionBehavior Implements IDataOwner<SelectRandomTransitionBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<SelectRandomTransitionBehavior.EntityData>.Clone() Entity<SelectRandomTransitionBehavior.EntityData>.Data Entity<SelectRandomTransitionBehavior.EntityData>.LifeCycle Entity<SelectRandomTransitionBehavior.EntityData>.Parent Entity<SelectRandomTransitionBehavior.EntityData>.GetActiveProcess() Entity<SelectRandomTransitionBehavior.EntityData>.GetDeactivatingProcess() Entity<SelectRandomTransitionBehavior.EntityData>.GetConfigurator() Entity<SelectRandomTransitionBehavior.EntityData>.Configure(IMode) Entity<SelectRandomTransitionBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SelectRandomTransitionBehavior() [JsonConstructor] [Preserve] public SelectRandomTransitionBehavior() Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Randomization.Behaviors.SetRandomBooleanBehavior.EntityData.html": {
    "href": "api/VRBuilder.Randomization.Behaviors.SetRandomBooleanBehavior.EntityData.html",
    "title": "Class SetRandomBooleanBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class SetRandomBooleanBehavior.EntityData Namespace VRBuilder.Randomization.Behaviors Assembly VRBuilder.Randomization.dll The SetRandomBooleanBehavior behavior data. [DisplayName(\"Set Random Boolean\")] [DataContract(IsReference = true)] public class SetRandomBooleanBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object SetRandomBooleanBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DataProperties [DataMember] [DisplayName(\"Data Properties\")] public MultipleScenePropertyReference<IDataProperty<bool>> DataProperties { get; set; } Property Value MultipleScenePropertyReference<IDataProperty<bool>> DataProperty [DataMember] [Obsolete(\"Use DataProperties instead.\")] [LegacyProperty(\"DataProperties\")] public ScenePropertyReference<IDataProperty<bool>> DataProperty { get; set; } Property Value ScenePropertyReference<IDataProperty<bool>> Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string TrueProbability [DataMember] [DisplayName(\"Probability to be True\")] [UsesSpecificProcessDrawer(\"NormalizedFloatDrawer\")] public float TrueProbability { get; set; } Property Value float"
  },
  "api/VRBuilder.Randomization.Behaviors.SetRandomBooleanBehavior.html": {
    "href": "api/VRBuilder.Randomization.Behaviors.SetRandomBooleanBehavior.html",
    "title": "Class SetRandomBooleanBehavior | VR Builder Documentation",
    "keywords": "Class SetRandomBooleanBehavior Namespace VRBuilder.Randomization.Behaviors Assembly VRBuilder.Randomization.dll A behavior that sets a boolean data property to a random value. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/randomization-add-on\")] public class SetRandomBooleanBehavior : Behavior<SetRandomBooleanBehavior.EntityData>, IDataOwner<SetRandomBooleanBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<SetRandomBooleanBehavior.EntityData> Behavior<SetRandomBooleanBehavior.EntityData> SetRandomBooleanBehavior Implements IDataOwner<SetRandomBooleanBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<SetRandomBooleanBehavior.EntityData>.Clone() Entity<SetRandomBooleanBehavior.EntityData>.Data Entity<SetRandomBooleanBehavior.EntityData>.LifeCycle Entity<SetRandomBooleanBehavior.EntityData>.Parent Entity<SetRandomBooleanBehavior.EntityData>.GetActiveProcess() Entity<SetRandomBooleanBehavior.EntityData>.GetDeactivatingProcess() Entity<SetRandomBooleanBehavior.EntityData>.GetConfigurator() Entity<SetRandomBooleanBehavior.EntityData>.Configure(IMode) Entity<SetRandomBooleanBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SetRandomBooleanBehavior() [JsonConstructor] [Preserve] public SetRandomBooleanBehavior() SetRandomBooleanBehavior(Guid, float) public SetRandomBooleanBehavior(Guid propertyGuid, float trueProbability = 0.5) Parameters propertyGuid Guid trueProbability float SetRandomBooleanBehavior(IDataProperty<bool>, float) public SetRandomBooleanBehavior(IDataProperty<bool> property, float trueProbability) Parameters property IDataProperty<bool> trueProbability float Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Randomization.Behaviors.SetRandomNumberBehavior.EntityData.html": {
    "href": "api/VRBuilder.Randomization.Behaviors.SetRandomNumberBehavior.EntityData.html",
    "title": "Class SetRandomNumberBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class SetRandomNumberBehavior.EntityData Namespace VRBuilder.Randomization.Behaviors Assembly VRBuilder.Randomization.dll The SetRandomNumberBehavior behavior data. [DisplayName(\"Set Random Number\")] [DataContract(IsReference = true)] public class SetRandomNumberBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object SetRandomNumberBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DataProperties [DataMember] [DisplayName(\"Data Property\")] public MultipleScenePropertyReference<IDataProperty<float>> DataProperties { get; set; } Property Value MultipleScenePropertyReference<IDataProperty<float>> DataProperty [DataMember] [Obsolete(\"Use DataProperties instead.\")] [LegacyProperty(\"DataProperties\")] public ScenePropertyReference<IDataProperty<float>> DataProperty { get; set; } Property Value ScenePropertyReference<IDataProperty<float>> MaxValue [DataMember] [DisplayName(\"Max Value\")] public float MaxValue { get; set; } Property Value float Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata MinValue [DataMember] [DisplayName(\"Min Value\")] public float MinValue { get; set; } Property Value float Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string RandomizeInteger [DataMember] [DisplayName(\"Randomize Integer\")] public bool RandomizeInteger { get; set; } Property Value bool"
  },
  "api/VRBuilder.Randomization.Behaviors.SetRandomNumberBehavior.html": {
    "href": "api/VRBuilder.Randomization.Behaviors.SetRandomNumberBehavior.html",
    "title": "Class SetRandomNumberBehavior | VR Builder Documentation",
    "keywords": "Class SetRandomNumberBehavior Namespace VRBuilder.Randomization.Behaviors Assembly VRBuilder.Randomization.dll A behavior that sets a boolean data property to a random value. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/randomization-add-on\")] public class SetRandomNumberBehavior : Behavior<SetRandomNumberBehavior.EntityData>, IDataOwner<SetRandomNumberBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<SetRandomNumberBehavior.EntityData> Behavior<SetRandomNumberBehavior.EntityData> SetRandomNumberBehavior Implements IDataOwner<SetRandomNumberBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<SetRandomNumberBehavior.EntityData>.Clone() Entity<SetRandomNumberBehavior.EntityData>.Data Entity<SetRandomNumberBehavior.EntityData>.LifeCycle Entity<SetRandomNumberBehavior.EntityData>.Parent Entity<SetRandomNumberBehavior.EntityData>.GetActiveProcess() Entity<SetRandomNumberBehavior.EntityData>.GetDeactivatingProcess() Entity<SetRandomNumberBehavior.EntityData>.GetConfigurator() Entity<SetRandomNumberBehavior.EntityData>.Configure(IMode) Entity<SetRandomNumberBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SetRandomNumberBehavior() [JsonConstructor] [Preserve] public SetRandomNumberBehavior() SetRandomNumberBehavior(Guid, float, float, bool) public SetRandomNumberBehavior(Guid propertyGuid, float minValue, float maxValue, bool randomizeInteger) Parameters propertyGuid Guid minValue float maxValue float randomizeInteger bool SetRandomNumberBehavior(IDataProperty<float>, float, float, bool) public SetRandomNumberBehavior(IDataProperty<float> property, float minValue, float maxValue, bool randomizeInteger) Parameters property IDataProperty<float> minValue float maxValue float randomizeInteger bool Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Randomization.Behaviors.html": {
    "href": "api/VRBuilder.Randomization.Behaviors.html",
    "title": "Namespace VRBuilder.Randomization.Behaviors | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Randomization.Behaviors Classes SelectRandomTransitionBehavior A behavior that completes a random RandomlySelectedCondition on the same step. SelectRandomTransitionBehavior.EntityData The SelectRandomTransitionBehavior behavior data. SetRandomBooleanBehavior A behavior that sets a boolean data property to a random value. SetRandomBooleanBehavior.EntityData The SetRandomBooleanBehavior behavior data. SetRandomNumberBehavior A behavior that sets a boolean data property to a random value. SetRandomNumberBehavior.EntityData The SetRandomNumberBehavior behavior data."
  },
  "api/VRBuilder.Randomization.Conditions.RandomlySelectedCondition.EntityData.html": {
    "href": "api/VRBuilder.Randomization.Conditions.RandomlySelectedCondition.EntityData.html",
    "title": "Class RandomlySelectedCondition.EntityData | VR Builder Documentation",
    "keywords": "Class RandomlySelectedCondition.EntityData Namespace VRBuilder.Randomization.Conditions Assembly VRBuilder.Randomization.dll The data for a CheckStateCondition [DisplayName(\"Randomly Selected\")] public class RandomlySelectedCondition.EntityData : IConditionData, ICompletableData, INamedData, IData Inheritance object RandomlySelectedCondition.EntityData Implements IConditionData ICompletableData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsCompleted public bool IsCompleted { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [DataMember] public string Name { get; } Property Value string Weight The higher the value, the more likely for this condition to be completed. [DataMember] public float Weight { get; set; } Property Value float"
  },
  "api/VRBuilder.Randomization.Conditions.RandomlySelectedCondition.html": {
    "href": "api/VRBuilder.Randomization.Conditions.RandomlySelectedCondition.html",
    "title": "Class RandomlySelectedCondition | VR Builder Documentation",
    "keywords": "Class RandomlySelectedCondition Namespace VRBuilder.Randomization.Conditions Assembly VRBuilder.Randomization.dll Condition that can be triggered directly. Used internally. [DataContract(IsReference = true)] public class RandomlySelectedCondition : Condition<RandomlySelectedCondition.EntityData>, IDataOwner<RandomlySelectedCondition.EntityData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider Inheritance object Entity<RandomlySelectedCondition.EntityData> CompletableEntity<RandomlySelectedCondition.EntityData> Condition<RandomlySelectedCondition.EntityData> RandomlySelectedCondition Implements IDataOwner<RandomlySelectedCondition.EntityData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Inherited Members Condition<RandomlySelectedCondition.EntityData>.Clone() Condition<RandomlySelectedCondition.EntityData>.GetLockableProperties() CompletableEntity<RandomlySelectedCondition.EntityData>.GetAutocompleter() CompletableEntity<RandomlySelectedCondition.EntityData>.IsCompleted CompletableEntity<RandomlySelectedCondition.EntityData>.Autocomplete() Entity<RandomlySelectedCondition.EntityData>.Data Entity<RandomlySelectedCondition.EntityData>.LifeCycle Entity<RandomlySelectedCondition.EntityData>.Parent Entity<RandomlySelectedCondition.EntityData>.GetActivatingProcess() Entity<RandomlySelectedCondition.EntityData>.GetDeactivatingProcess() Entity<RandomlySelectedCondition.EntityData>.GetConfigurator() Entity<RandomlySelectedCondition.EntityData>.Configure(IMode) Entity<RandomlySelectedCondition.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RandomlySelectedCondition(float) [JsonConstructor] [Preserve] public RandomlySelectedCondition(float weight = 1) Parameters weight float Properties IsSetToComplete public bool IsSetToComplete { get; set; } Property Value bool Methods GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess"
  },
  "api/VRBuilder.Randomization.Conditions.html": {
    "href": "api/VRBuilder.Randomization.Conditions.html",
    "title": "Namespace VRBuilder.Randomization.Conditions | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Randomization.Conditions Classes RandomlySelectedCondition Condition that can be triggered directly. Used internally. RandomlySelectedCondition.EntityData The data for a CheckStateCondition"
  },
  "api/VRBuilder.StatesAndData.Behaviors.MathOperationBehavior.EntityData.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.MathOperationBehavior.EntityData.html",
    "title": "Class MathOperationBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class MathOperationBehavior.EntityData Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll The MathOperationBehavior behavior data. [DisplayName(\"Math Operation\")] [DataContract(IsReference = true)] public class MathOperationBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object MathOperationBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsModifierConst [DataMember] public bool IsModifierConst { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Modified [DataMember] [UsesSpecificProcessDrawer(\"ValuePropertyDrawer\")] public SingleScenePropertyReference<IDataProperty<float>> Modified { get; set; } Property Value SingleScenePropertyReference<IDataProperty<float>> ModifiedProperty [DataMember] [Obsolete(\"Use Modified instead.\")] [LegacyProperty(\"Modified\")] public ScenePropertyReference<IDataProperty<float>> ModifiedProperty { get; set; } Property Value ScenePropertyReference<IDataProperty<float>> Modifier [DataMember] public SingleScenePropertyReference<IDataProperty<float>> Modifier { get; set; } Property Value SingleScenePropertyReference<IDataProperty<float>> ModifierConst [DataMember] public float ModifierConst { get; set; } Property Value float ModifierProperty [DataMember] [Obsolete(\"Use Modifier instead.\")] [LegacyProperty(\"Modifier\")] public ScenePropertyReference<IDataProperty<float>> ModifierProperty { get; set; } Property Value ScenePropertyReference<IDataProperty<float>> Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Operation [DataMember] public IOperationCommand<float, float> Operation { get; set; } Property Value IOperationCommand<float, float>"
  },
  "api/VRBuilder.StatesAndData.Behaviors.MathOperationBehavior.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.MathOperationBehavior.html",
    "title": "Class MathOperationBehavior | VR Builder Documentation",
    "keywords": "Class MathOperationBehavior Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll A behavior that performs an operation on a NumberDataProperty and sets it to the new value. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/states-data-add-on\")] public class MathOperationBehavior : Behavior<MathOperationBehavior.EntityData>, IDataOwner<MathOperationBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<MathOperationBehavior.EntityData> Behavior<MathOperationBehavior.EntityData> MathOperationBehavior Implements IDataOwner<MathOperationBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<MathOperationBehavior.EntityData>.Clone() Entity<MathOperationBehavior.EntityData>.Data Entity<MathOperationBehavior.EntityData>.LifeCycle Entity<MathOperationBehavior.EntityData>.Parent Entity<MathOperationBehavior.EntityData>.GetActiveProcess() Entity<MathOperationBehavior.EntityData>.GetDeactivatingProcess() Entity<MathOperationBehavior.EntityData>.GetConfigurator() Entity<MathOperationBehavior.EntityData>.Configure(IMode) Entity<MathOperationBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MathOperationBehavior() [JsonConstructor] [Preserve] public MathOperationBehavior() MathOperationBehavior(Guid, Guid, float, bool, IOperationCommand<float, float>) public MathOperationBehavior(Guid modifiedPropertyGuid, Guid modifierPropertyGuid, float modifierValue, bool isModifierConst, IOperationCommand<float, float> operation) Parameters modifiedPropertyGuid Guid modifierPropertyGuid Guid modifierValue float isModifierConst bool operation IOperationCommand<float, float> MathOperationBehavior(IDataProperty<float>, IDataProperty<float>, float, bool, IOperationCommand<float, float>) public MathOperationBehavior(IDataProperty<float> modifiedProperty, IDataProperty<float> modifierProperty, float value, bool isModifierConst, IOperationCommand<float, float> operation) Parameters modifiedProperty IDataProperty<float> modifierProperty IDataProperty<float> value float isModifierConst bool operation IOperationCommand<float, float> Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.StatesAndData.Behaviors.SetStateBehavior.EntityData.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.SetStateBehavior.EntityData.html",
    "title": "Class SetStateBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class SetStateBehavior.EntityData Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll The SetValueBehavior<T> behavior data. [DisplayName(\"Set State\")] [DataContract(IsReference = true)] public class SetStateBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object SetStateBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DataProperties [DataMember] public MultipleScenePropertyReference<StateDataPropertyBase> DataProperties { get; set; } Property Value MultipleScenePropertyReference<StateDataPropertyBase> DataProperty [DataMember] [Obsolete(\"Use DataProperties instead.\")] [LegacyProperty(\"DataProperties\")] public ScenePropertyReference<StateDataPropertyBase> DataProperty { get; set; } Property Value ScenePropertyReference<StateDataPropertyBase> Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string NewValue [DataMember] public int NewValue { get; set; } Property Value int"
  },
  "api/VRBuilder.StatesAndData.Behaviors.SetStateBehavior.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.SetStateBehavior.html",
    "title": "Class SetStateBehavior | VR Builder Documentation",
    "keywords": "Class SetStateBehavior Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll Behavior that sets a StateDataProperty<T> to a specific value. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/states-data-add-on\")] public class SetStateBehavior : Behavior<SetStateBehavior.EntityData>, IDataOwner<SetStateBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<SetStateBehavior.EntityData> Behavior<SetStateBehavior.EntityData> SetStateBehavior Implements IDataOwner<SetStateBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<SetStateBehavior.EntityData>.Clone() Entity<SetStateBehavior.EntityData>.Data Entity<SetStateBehavior.EntityData>.LifeCycle Entity<SetStateBehavior.EntityData>.Parent Entity<SetStateBehavior.EntityData>.GetActiveProcess() Entity<SetStateBehavior.EntityData>.GetDeactivatingProcess() Entity<SetStateBehavior.EntityData>.GetConfigurator() Entity<SetStateBehavior.EntityData>.Configure(IMode) Entity<SetStateBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SetStateBehavior() [JsonConstructor] [Preserve] public SetStateBehavior() SetStateBehavior(Guid, int) public SetStateBehavior(Guid propertyGuid, int value) Parameters propertyGuid Guid value int SetStateBehavior(StateDataPropertyBase, int) public SetStateBehavior(StateDataPropertyBase property, int value) Parameters property StateDataPropertyBase value int Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.StatesAndData.Behaviors.TriggerEventBehavior.EntityData.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.TriggerEventBehavior.EntityData.html",
    "title": "Class TriggerEventBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class TriggerEventBehavior.EntityData Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll The TriggerEventBehavior behavior data. [DisplayName(\"Trigger Event (Group)\")] [DataContract(IsReference = true)] public class TriggerEventBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object TriggerEventBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ExecutionStages A property that determines if the event should trigger at activation or deactivation (or both). [DataMember] [DisplayName(\"Execution stages\")] public BehaviorExecutionStages ExecutionStages { get; set; } Property Value BehaviorExecutionStages Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Targets The group of objects that will trigger the event. [DataMember] [DisplayName(\"Targets\")] public MultipleScenePropertyReference<IEventProperty> Targets { get; set; } Property Value MultipleScenePropertyReference<IEventProperty>"
  },
  "api/VRBuilder.StatesAndData.Behaviors.TriggerEventBehavior.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.TriggerEventBehavior.html",
    "title": "Class TriggerEventBehavior | VR Builder Documentation",
    "keywords": "Class TriggerEventBehavior Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll Behavior that triggers a Unity event on a property. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/states-data-add-on\")] public class TriggerEventBehavior : Behavior<TriggerEventBehavior.EntityData>, IDataOwner<TriggerEventBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<TriggerEventBehavior.EntityData> Behavior<TriggerEventBehavior.EntityData> TriggerEventBehavior Implements IDataOwner<TriggerEventBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<TriggerEventBehavior.EntityData>.Clone() Entity<TriggerEventBehavior.EntityData>.Data Entity<TriggerEventBehavior.EntityData>.LifeCycle Entity<TriggerEventBehavior.EntityData>.Parent Entity<TriggerEventBehavior.EntityData>.GetActiveProcess() Entity<TriggerEventBehavior.EntityData>.GetConfigurator() Entity<TriggerEventBehavior.EntityData>.Configure(IMode) Entity<TriggerEventBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TriggerEventBehavior() [JsonConstructor] [Preserve] public TriggerEventBehavior() TriggerEventBehavior(Guid, BehaviorExecutionStages) public TriggerEventBehavior(Guid guid, BehaviorExecutionStages executionStages) Parameters guid Guid executionStages BehaviorExecutionStages Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.StatesAndData.Behaviors.TriggerEventByRefBehavior.EntityData.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.TriggerEventByRefBehavior.EntityData.html",
    "title": "Class TriggerEventByRefBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class TriggerEventByRefBehavior.EntityData Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll The TriggerEventByRefBehavior behavior data. [DisplayName(\"Trigger Event (Ref)\")] [DataContract(IsReference = true)] public class TriggerEventByRefBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object TriggerEventByRefBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EventProperty The property that will trigger the event. [DataMember] [DisplayName(\"Event property\")] public ScenePropertyReference<IEventProperty> EventProperty { get; set; } Property Value ScenePropertyReference<IEventProperty> ExecutionStages A property that determines if the event should trigger at activation or deactivation (or both). [DataMember] [DisplayName(\"Execution stages\")] public BehaviorExecutionStages ExecutionStages { get; set; } Property Value BehaviorExecutionStages Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string"
  },
  "api/VRBuilder.StatesAndData.Behaviors.TriggerEventByRefBehavior.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.TriggerEventByRefBehavior.html",
    "title": "Class TriggerEventByRefBehavior | VR Builder Documentation",
    "keywords": "Class TriggerEventByRefBehavior Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll Behavior that triggers a Unity event on a property. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/states-data-add-on\")] [Obsolete(\"Use TriggerEventBehavior instead.\")] public class TriggerEventByRefBehavior : Behavior<TriggerEventByRefBehavior.EntityData>, IDataOwner<TriggerEventByRefBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<TriggerEventByRefBehavior.EntityData> Behavior<TriggerEventByRefBehavior.EntityData> TriggerEventByRefBehavior Implements IDataOwner<TriggerEventByRefBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<TriggerEventByRefBehavior.EntityData>.Clone() Entity<TriggerEventByRefBehavior.EntityData>.Data Entity<TriggerEventByRefBehavior.EntityData>.LifeCycle Entity<TriggerEventByRefBehavior.EntityData>.Parent Entity<TriggerEventByRefBehavior.EntityData>.GetActiveProcess() Entity<TriggerEventByRefBehavior.EntityData>.GetConfigurator() Entity<TriggerEventByRefBehavior.EntityData>.Configure(IMode) Entity<TriggerEventByRefBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TriggerEventByRefBehavior() [JsonConstructor] [Preserve] public TriggerEventByRefBehavior() TriggerEventByRefBehavior(string, BehaviorExecutionStages) public TriggerEventByRefBehavior(string propertyName, BehaviorExecutionStages executionStages) Parameters propertyName string executionStages BehaviorExecutionStages TriggerEventByRefBehavior(IEventProperty, BehaviorExecutionStages) public TriggerEventByRefBehavior(IEventProperty property, BehaviorExecutionStages executionStages) Parameters property IEventProperty executionStages BehaviorExecutionStages Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.StatesAndData.Behaviors.TriggerEventByTagBehavior.EntityData.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.TriggerEventByTagBehavior.EntityData.html",
    "title": "Class TriggerEventByTagBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class TriggerEventByTagBehavior.EntityData Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll The TriggerEventByTagBehavior behavior data. [DisplayName(\"Trigger Event (Tag)\")] [DataContract(IsReference = true)] public class TriggerEventByTagBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object TriggerEventByTagBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EventObjectTag The tag of objects that will trigger the event. [DataMember] [DisplayName(\"Tag\")] public SceneObjectTag<IEventProperty> EventObjectTag { get; set; } Property Value SceneObjectTag<IEventProperty> ExecutionStages A property that determines if the event should trigger at activation or deactivation (or both). [DataMember] [DisplayName(\"Execution stages\")] public BehaviorExecutionStages ExecutionStages { get; set; } Property Value BehaviorExecutionStages Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string"
  },
  "api/VRBuilder.StatesAndData.Behaviors.TriggerEventByTagBehavior.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.TriggerEventByTagBehavior.html",
    "title": "Class TriggerEventByTagBehavior | VR Builder Documentation",
    "keywords": "Class TriggerEventByTagBehavior Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll Behavior that triggers a Unity event on a property. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/states-data-add-on\")] [Obsolete(\"Use TriggerEventBehavior instead.\")] public class TriggerEventByTagBehavior : Behavior<TriggerEventByTagBehavior.EntityData>, IDataOwner<TriggerEventByTagBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<TriggerEventByTagBehavior.EntityData> Behavior<TriggerEventByTagBehavior.EntityData> TriggerEventByTagBehavior Implements IDataOwner<TriggerEventByTagBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<TriggerEventByTagBehavior.EntityData>.Clone() Entity<TriggerEventByTagBehavior.EntityData>.Data Entity<TriggerEventByTagBehavior.EntityData>.LifeCycle Entity<TriggerEventByTagBehavior.EntityData>.Parent Entity<TriggerEventByTagBehavior.EntityData>.GetActiveProcess() Entity<TriggerEventByTagBehavior.EntityData>.GetConfigurator() Entity<TriggerEventByTagBehavior.EntityData>.Configure(IMode) Entity<TriggerEventByTagBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TriggerEventByTagBehavior() [JsonConstructor] [Preserve] public TriggerEventByTagBehavior() TriggerEventByTagBehavior(Guid, BehaviorExecutionStages) public TriggerEventByTagBehavior(Guid guid, BehaviorExecutionStages executionStages) Parameters guid Guid executionStages BehaviorExecutionStages Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.StatesAndData.Behaviors.TriggerGenericEventBehavior-1.EntityData.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.TriggerGenericEventBehavior-1.EntityData.html",
    "title": "Class TriggerGenericEventBehavior<T>.EntityData | VR Builder Documentation",
    "keywords": "Class TriggerGenericEventBehavior<T>.EntityData Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll The TriggerGenericEventBehavior behavior data. [DisplayName(\"Trigger Event (Group)\")] [DataContract(IsReference = true)] public class TriggerGenericEventBehavior<T>.EntityData : IBehaviorData, INamedData, IData Inheritance object TriggerGenericEventBehavior<T>.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Argument The data to be passed to the event. [DataMember] public ProcessVariable<T> Argument { get; set; } Property Value ProcessVariable<T> ExecutionStages A property that determines if the event should trigger at activation or deactivation (or both). [DataMember] [DisplayName(\"Execution stages\")] public BehaviorExecutionStages ExecutionStages { get; set; } Property Value BehaviorExecutionStages Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Targets The group of objects that will trigger the event. [DataMember] public MultipleScenePropertyReference<IGenericEventProperty<T>> Targets { get; set; } Property Value MultipleScenePropertyReference<IGenericEventProperty<T>>"
  },
  "api/VRBuilder.StatesAndData.Behaviors.TriggerGenericEventBehavior-1.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.TriggerGenericEventBehavior-1.html",
    "title": "Class TriggerGenericEventBehavior<T> | VR Builder Documentation",
    "keywords": "Class TriggerGenericEventBehavior<T> Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll Behavior that triggers a Unity event on a property. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/states-data-add-on\")] public class TriggerGenericEventBehavior<T> : Behavior<TriggerGenericEventBehavior<T>.EntityData>, IDataOwner<TriggerGenericEventBehavior<T>.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Type Parameters T Inheritance object Entity<TriggerGenericEventBehavior<T>.EntityData> Behavior<TriggerGenericEventBehavior<T>.EntityData> TriggerGenericEventBehavior<T> Implements IDataOwner<TriggerGenericEventBehavior<T>.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<TriggerGenericEventBehavior<T>.EntityData>.Clone() Entity<TriggerGenericEventBehavior<T>.EntityData>.Data Entity<TriggerGenericEventBehavior<T>.EntityData>.LifeCycle Entity<TriggerGenericEventBehavior<T>.EntityData>.Parent Entity<TriggerGenericEventBehavior<T>.EntityData>.GetActiveProcess() Entity<TriggerGenericEventBehavior<T>.EntityData>.GetConfigurator() Entity<TriggerGenericEventBehavior<T>.EntityData>.Configure(IMode) Entity<TriggerGenericEventBehavior<T>.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TriggerGenericEventBehavior() [JsonConstructor] [Preserve] public TriggerGenericEventBehavior() Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.StatesAndData.Behaviors.TriggerGenericEventByRefBehavior-1.EntityData.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.TriggerGenericEventByRefBehavior-1.EntityData.html",
    "title": "Class TriggerGenericEventByRefBehavior<T>.EntityData | VR Builder Documentation",
    "keywords": "Class TriggerGenericEventByRefBehavior<T>.EntityData Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll The TriggerGenericEventByRefBehavior behavior data. [DisplayName(\"Trigger Event (Ref)\")] [DataContract(IsReference = true)] public class TriggerGenericEventByRefBehavior<T>.EntityData : IBehaviorData, INamedData, IData Inheritance object TriggerGenericEventByRefBehavior<T>.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Argument The data to be passed to the event. [DataMember] public ProcessVariable<T> Argument { get; set; } Property Value ProcessVariable<T> EventProperty The property that will trigger the event. [DataMember] [DisplayName(\"Event property\")] public ScenePropertyReference<IGenericEventProperty<T>> EventProperty { get; set; } Property Value ScenePropertyReference<IGenericEventProperty<T>> ExecutionStages A property that determines if the event should trigger at activation or deactivation (or both). [DataMember] [DisplayName(\"Execution stages\")] public BehaviorExecutionStages ExecutionStages { get; set; } Property Value BehaviorExecutionStages Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string"
  },
  "api/VRBuilder.StatesAndData.Behaviors.TriggerGenericEventByRefBehavior-1.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.TriggerGenericEventByRefBehavior-1.html",
    "title": "Class TriggerGenericEventByRefBehavior<T> | VR Builder Documentation",
    "keywords": "Class TriggerGenericEventByRefBehavior<T> Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll Behavior that triggers a Unity event on a property. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/states-data-add-on\")] [Obsolete(\"Use TriggerGenericEventBehavior instead.\")] public class TriggerGenericEventByRefBehavior<T> : Behavior<TriggerGenericEventByRefBehavior<T>.EntityData>, IDataOwner<TriggerGenericEventByRefBehavior<T>.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Type Parameters T Inheritance object Entity<TriggerGenericEventByRefBehavior<T>.EntityData> Behavior<TriggerGenericEventByRefBehavior<T>.EntityData> TriggerGenericEventByRefBehavior<T> Implements IDataOwner<TriggerGenericEventByRefBehavior<T>.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<TriggerGenericEventByRefBehavior<T>.EntityData>.Clone() Entity<TriggerGenericEventByRefBehavior<T>.EntityData>.Data Entity<TriggerGenericEventByRefBehavior<T>.EntityData>.LifeCycle Entity<TriggerGenericEventByRefBehavior<T>.EntityData>.Parent Entity<TriggerGenericEventByRefBehavior<T>.EntityData>.GetActiveProcess() Entity<TriggerGenericEventByRefBehavior<T>.EntityData>.GetConfigurator() Entity<TriggerGenericEventByRefBehavior<T>.EntityData>.Configure(IMode) Entity<TriggerGenericEventByRefBehavior<T>.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TriggerGenericEventByRefBehavior() [JsonConstructor] [Preserve] public TriggerGenericEventByRefBehavior() TriggerGenericEventByRefBehavior(string, string, T, bool, BehaviorExecutionStages) [Obsolete(\"This constructor is obsolete and will be removed in the next major version.\")] public TriggerGenericEventByRefBehavior(string propertyName, string propertyArgName, T constArg, bool isConst, BehaviorExecutionStages executionStages) Parameters propertyName string propertyArgName string constArg T isConst bool executionStages BehaviorExecutionStages TriggerGenericEventByRefBehavior(IGenericEventProperty<T>, IDataProperty<T>, T, bool, BehaviorExecutionStages) public TriggerGenericEventByRefBehavior(IGenericEventProperty<T> property, IDataProperty<T> propertyArg, T constArg, bool isConst, BehaviorExecutionStages executionStages) Parameters property IGenericEventProperty<T> propertyArg IDataProperty<T> constArg T isConst bool executionStages BehaviorExecutionStages Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.StatesAndData.Behaviors.TriggerGenericEventByTagBehavior-1.EntityData.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.TriggerGenericEventByTagBehavior-1.EntityData.html",
    "title": "Class TriggerGenericEventByTagBehavior<T>.EntityData | VR Builder Documentation",
    "keywords": "Class TriggerGenericEventByTagBehavior<T>.EntityData Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll The TriggerGenericEventByRefBehavior behavior data. [DisplayName(\"Trigger Event (Tag)\")] [DataContract(IsReference = true)] public class TriggerGenericEventByTagBehavior<T>.EntityData : IBehaviorData, INamedData, IData Inheritance object TriggerGenericEventByTagBehavior<T>.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Argument The data to be passed to the event. [DataMember] public ProcessVariable<T> Argument { get; set; } Property Value ProcessVariable<T> EventTag The tag of objects that will trigger the event. [DataMember] [DisplayName(\"Tag\")] public SceneObjectTag<IGenericEventProperty<T>> EventTag { get; set; } Property Value SceneObjectTag<IGenericEventProperty<T>> ExecutionStages A property that determines if the event should trigger at activation or deactivation (or both). [DataMember] [DisplayName(\"Execution stages\")] public BehaviorExecutionStages ExecutionStages { get; set; } Property Value BehaviorExecutionStages Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string"
  },
  "api/VRBuilder.StatesAndData.Behaviors.TriggerGenericEventByTagBehavior-1.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.TriggerGenericEventByTagBehavior-1.html",
    "title": "Class TriggerGenericEventByTagBehavior<T> | VR Builder Documentation",
    "keywords": "Class TriggerGenericEventByTagBehavior<T> Namespace VRBuilder.StatesAndData.Behaviors Assembly VRBuilder.StatesAndData.dll Behavior that triggers a Unity event on a property. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/states-data-add-on\")] [Obsolete(\"Use TriggerGenericEventBehavior instead.\")] public class TriggerGenericEventByTagBehavior<T> : Behavior<TriggerGenericEventByTagBehavior<T>.EntityData>, IDataOwner<TriggerGenericEventByTagBehavior<T>.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Type Parameters T Inheritance object Entity<TriggerGenericEventByTagBehavior<T>.EntityData> Behavior<TriggerGenericEventByTagBehavior<T>.EntityData> TriggerGenericEventByTagBehavior<T> Implements IDataOwner<TriggerGenericEventByTagBehavior<T>.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<TriggerGenericEventByTagBehavior<T>.EntityData>.Clone() Entity<TriggerGenericEventByTagBehavior<T>.EntityData>.Data Entity<TriggerGenericEventByTagBehavior<T>.EntityData>.LifeCycle Entity<TriggerGenericEventByTagBehavior<T>.EntityData>.Parent Entity<TriggerGenericEventByTagBehavior<T>.EntityData>.GetActiveProcess() Entity<TriggerGenericEventByTagBehavior<T>.EntityData>.GetConfigurator() Entity<TriggerGenericEventByTagBehavior<T>.EntityData>.Configure(IMode) Entity<TriggerGenericEventByTagBehavior<T>.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TriggerGenericEventByTagBehavior() [JsonConstructor] [Preserve] public TriggerGenericEventByTagBehavior() TriggerGenericEventByTagBehavior(Guid, string, T, bool, BehaviorExecutionStages) [Obsolete(\"This constructor is obsolete and will be removed in the next major version.\")] public TriggerGenericEventByTagBehavior(Guid guid, string argumentPropertyName, T constValue, bool isConst, BehaviorExecutionStages executionStages) Parameters guid Guid argumentPropertyName string constValue T isConst bool executionStages BehaviorExecutionStages TriggerGenericEventByTagBehavior(Guid, IDataProperty<T>, T, bool, BehaviorExecutionStages) public TriggerGenericEventByTagBehavior(Guid guid, IDataProperty<T> argumentProperty, T constValue, bool isConst, BehaviorExecutionStages executionStages) Parameters guid Guid argumentProperty IDataProperty<T> constValue T isConst bool executionStages BehaviorExecutionStages Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess GetDeactivatingProcess() Returns a new instance of a process for the Deactivating Stage. public override IStageProcess GetDeactivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.StatesAndData.Behaviors.html": {
    "href": "api/VRBuilder.StatesAndData.Behaviors.html",
    "title": "Namespace VRBuilder.StatesAndData.Behaviors | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.StatesAndData.Behaviors Classes MathOperationBehavior A behavior that performs an operation on a NumberDataProperty and sets it to the new value. MathOperationBehavior.EntityData The MathOperationBehavior behavior data. SetStateBehavior Behavior that sets a StateDataProperty<T> to a specific value. SetStateBehavior.EntityData The SetValueBehavior<T> behavior data. TriggerEventBehavior Behavior that triggers a Unity event on a property. TriggerEventBehavior.EntityData The TriggerEventBehavior behavior data. TriggerEventByRefBehavior Behavior that triggers a Unity event on a property. TriggerEventByRefBehavior.EntityData The TriggerEventByRefBehavior behavior data. TriggerEventByTagBehavior Behavior that triggers a Unity event on a property. TriggerEventByTagBehavior.EntityData The TriggerEventByTagBehavior behavior data. TriggerGenericEventBehavior<T> Behavior that triggers a Unity event on a property. TriggerGenericEventBehavior<T>.EntityData The TriggerGenericEventBehavior behavior data. TriggerGenericEventByRefBehavior<T> Behavior that triggers a Unity event on a property. TriggerGenericEventByRefBehavior<T>.EntityData The TriggerGenericEventByRefBehavior behavior data. TriggerGenericEventByTagBehavior<T> Behavior that triggers a Unity event on a property. TriggerGenericEventByTagBehavior<T>.EntityData The TriggerGenericEventByRefBehavior behavior data."
  },
  "api/VRBuilder.StatesAndData.Conditions.CheckStateCondition.EntityData.html": {
    "href": "api/VRBuilder.StatesAndData.Conditions.CheckStateCondition.EntityData.html",
    "title": "Class CheckStateCondition.EntityData | VR Builder Documentation",
    "keywords": "Class CheckStateCondition.EntityData Namespace VRBuilder.StatesAndData.Conditions Assembly VRBuilder.StatesAndData.dll The data for a CheckStateCondition [DisplayName(\"Check State\")] public class CheckStateCondition.EntityData : IConditionData, ICompletableData, INamedData, IData Inheritance object CheckStateCondition.EntityData Implements IConditionData ICompletableData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CompareValue [DataMember] public int CompareValue { get; set; } Property Value int DataProperty [DataMember] [Obsolete(\"Use StateDataProperty instead.\")] [LegacyProperty(\"StateDataProperty\")] public ScenePropertyReference<StateDataPropertyBase> DataProperty { get; set; } Property Value ScenePropertyReference<StateDataPropertyBase> IsCompleted public bool IsCompleted { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string Operation [DataMember] public IOperationCommand<int, bool> Operation { get; set; } Property Value IOperationCommand<int, bool> StateDataProperty [DataMember] public SingleScenePropertyReference<StateDataPropertyBase> StateDataProperty { get; set; } Property Value SingleScenePropertyReference<StateDataPropertyBase>"
  },
  "api/VRBuilder.StatesAndData.Conditions.CheckStateCondition.html": {
    "href": "api/VRBuilder.StatesAndData.Conditions.CheckStateCondition.html",
    "title": "Class CheckStateCondition | VR Builder Documentation",
    "keywords": "Class CheckStateCondition Namespace VRBuilder.StatesAndData.Conditions Assembly VRBuilder.StatesAndData.dll A condition that compares a StateDataProperty<T> to a specified value and completes when the comparison returns true. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/states-data-add-on\")] public class CheckStateCondition : Condition<CheckStateCondition.EntityData>, IDataOwner<CheckStateCondition.EntityData>, ICondition, ICompletableEntity, ICompletable, IEntity, IDataOwner<IConditionData>, IDataOwner, IClonable<ICondition>, ILockablePropertiesProvider Inheritance object Entity<CheckStateCondition.EntityData> CompletableEntity<CheckStateCondition.EntityData> Condition<CheckStateCondition.EntityData> CheckStateCondition Implements IDataOwner<CheckStateCondition.EntityData> ICondition ICompletableEntity ICompletable IEntity IDataOwner<IConditionData> IDataOwner IClonable<ICondition> ILockablePropertiesProvider Inherited Members Condition<CheckStateCondition.EntityData>.Clone() Condition<CheckStateCondition.EntityData>.GetLockableProperties() CompletableEntity<CheckStateCondition.EntityData>.GetAutocompleter() CompletableEntity<CheckStateCondition.EntityData>.IsCompleted CompletableEntity<CheckStateCondition.EntityData>.Autocomplete() Entity<CheckStateCondition.EntityData>.Data Entity<CheckStateCondition.EntityData>.LifeCycle Entity<CheckStateCondition.EntityData>.Parent Entity<CheckStateCondition.EntityData>.GetActivatingProcess() Entity<CheckStateCondition.EntityData>.GetDeactivatingProcess() Entity<CheckStateCondition.EntityData>.GetConfigurator() Entity<CheckStateCondition.EntityData>.Configure(IMode) Entity<CheckStateCondition.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CheckStateCondition() [JsonConstructor] [Preserve] public CheckStateCondition() CheckStateCondition(Guid, int, IOperationCommand<int, bool>) public CheckStateCondition(Guid dataProperty, int compareValue, IOperationCommand<int, bool> operation) Parameters dataProperty Guid compareValue int operation IOperationCommand<int, bool> CheckStateCondition(StateDataPropertyBase, int, IOperationCommand<int, bool>) public CheckStateCondition(StateDataPropertyBase dataProperty, int compareValue, IOperationCommand<int, bool> operation) Parameters dataProperty StateDataPropertyBase compareValue int operation IOperationCommand<int, bool> Methods GetActiveProcess() Returns a new instance of a process for the Active Stage. public override IStageProcess GetActiveProcess() Returns IStageProcess"
  },
  "api/VRBuilder.StatesAndData.Conditions.html": {
    "href": "api/VRBuilder.StatesAndData.Conditions.html",
    "title": "Namespace VRBuilder.StatesAndData.Conditions | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.StatesAndData.Conditions Classes CheckStateCondition A condition that compares a StateDataProperty<T> to a specified value and completes when the comparison returns true. CheckStateCondition.EntityData The data for a CheckStateCondition"
  },
  "api/VRBuilder.StatesAndData.ProcessUtils.DivideOperation.html": {
    "href": "api/VRBuilder.StatesAndData.ProcessUtils.DivideOperation.html",
    "title": "Class DivideOperation | VR Builder Documentation",
    "keywords": "Class DivideOperation Namespace VRBuilder.StatesAndData.ProcessUtils Assembly VRBuilder.StatesAndData.dll Divides left by right. public class DivideOperation : IOperationCommand<float, float>, IFormattable Inheritance object DivideOperation Implements IOperationCommand<float, float> IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(float, float) Executes the operation on the provided operands. public float Execute(float leftOperand, float rightOperand) Parameters leftOperand float rightOperand float Returns float ToString(string, IFormatProvider) public string ToString(string format, IFormatProvider formatProvider) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/VRBuilder.StatesAndData.ProcessUtils.MaxOperation.html": {
    "href": "api/VRBuilder.StatesAndData.ProcessUtils.MaxOperation.html",
    "title": "Class MaxOperation | VR Builder Documentation",
    "keywords": "Class MaxOperation Namespace VRBuilder.StatesAndData.ProcessUtils Assembly VRBuilder.StatesAndData.dll Multiplies left by right. public class MaxOperation : IOperationCommand<float, float>, IFormattable Inheritance object MaxOperation Implements IOperationCommand<float, float> IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(float, float) Executes the operation on the provided operands. public float Execute(float leftOperand, float rightOperand) Parameters leftOperand float rightOperand float Returns float ToString(string, IFormatProvider) public string ToString(string format, IFormatProvider formatProvider) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/VRBuilder.StatesAndData.ProcessUtils.MinOperation.html": {
    "href": "api/VRBuilder.StatesAndData.ProcessUtils.MinOperation.html",
    "title": "Class MinOperation | VR Builder Documentation",
    "keywords": "Class MinOperation Namespace VRBuilder.StatesAndData.ProcessUtils Assembly VRBuilder.StatesAndData.dll Multiplies left by right. public class MinOperation : IOperationCommand<float, float>, IFormattable Inheritance object MinOperation Implements IOperationCommand<float, float> IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(float, float) Executes the operation on the provided operands. public float Execute(float leftOperand, float rightOperand) Parameters leftOperand float rightOperand float Returns float ToString(string, IFormatProvider) public string ToString(string format, IFormatProvider formatProvider) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/VRBuilder.StatesAndData.ProcessUtils.MultiplyOperation.html": {
    "href": "api/VRBuilder.StatesAndData.ProcessUtils.MultiplyOperation.html",
    "title": "Class MultiplyOperation | VR Builder Documentation",
    "keywords": "Class MultiplyOperation Namespace VRBuilder.StatesAndData.ProcessUtils Assembly VRBuilder.StatesAndData.dll Multiplies left by right. public class MultiplyOperation : IOperationCommand<float, float>, IFormattable Inheritance object MultiplyOperation Implements IOperationCommand<float, float> IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(float, float) Executes the operation on the provided operands. public float Execute(float leftOperand, float rightOperand) Parameters leftOperand float rightOperand float Returns float ToString(string, IFormatProvider) public string ToString(string format, IFormatProvider formatProvider) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/VRBuilder.StatesAndData.ProcessUtils.SubtractOperation.html": {
    "href": "api/VRBuilder.StatesAndData.ProcessUtils.SubtractOperation.html",
    "title": "Class SubtractOperation | VR Builder Documentation",
    "keywords": "Class SubtractOperation Namespace VRBuilder.StatesAndData.ProcessUtils Assembly VRBuilder.StatesAndData.dll Subtracts right from left. public class SubtractOperation : IOperationCommand<float, float>, IFormattable Inheritance object SubtractOperation Implements IOperationCommand<float, float> IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(float, float) Executes the operation on the provided operands. public float Execute(float leftOperand, float rightOperand) Parameters leftOperand float rightOperand float Returns float ToString(string, IFormatProvider) public string ToString(string format, IFormatProvider formatProvider) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/VRBuilder.StatesAndData.ProcessUtils.SumOperation.html": {
    "href": "api/VRBuilder.StatesAndData.ProcessUtils.SumOperation.html",
    "title": "Class SumOperation | VR Builder Documentation",
    "keywords": "Class SumOperation Namespace VRBuilder.StatesAndData.ProcessUtils Assembly VRBuilder.StatesAndData.dll Sums left and right. public class SumOperation : IOperationCommand<float, float>, IFormattable Inheritance object SumOperation Implements IOperationCommand<float, float> IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(float, float) Executes the operation on the provided operands. public float Execute(float leftOperand, float rightOperand) Parameters leftOperand float rightOperand float Returns float ToString(string, IFormatProvider) public string ToString(string format, IFormatProvider formatProvider) Parameters format string formatProvider IFormatProvider Returns string"
  },
  "api/VRBuilder.StatesAndData.ProcessUtils.html": {
    "href": "api/VRBuilder.StatesAndData.ProcessUtils.html",
    "title": "Namespace VRBuilder.StatesAndData.ProcessUtils | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.StatesAndData.ProcessUtils Classes DivideOperation Divides left by right. MaxOperation Multiplies left by right. MinOperation Multiplies left by right. MultiplyOperation Multiplies left by right. SubtractOperation Subtracts right from left. SumOperation Sums left and right."
  },
  "api/VRBuilder.StatesAndData.Properties.BooleanEventProperty.html": {
    "href": "api/VRBuilder.StatesAndData.Properties.BooleanEventProperty.html",
    "title": "Class BooleanEventProperty | VR Builder Documentation",
    "keywords": "Class BooleanEventProperty Namespace VRBuilder.StatesAndData.Properties Assembly VRBuilder.StatesAndData.dll GenericEventProperty<T> implementation with boolean argument. public class BooleanEventProperty : GenericEventProperty<bool>, IGenericEventProperty<bool>, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty GenericEventProperty<bool> BooleanEventProperty Implements IGenericEventProperty<bool> ISceneObjectProperty Inherited Members GenericEventProperty<bool>.TriggerEvent(bool) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.StatesAndData.Properties.EventProperty.html": {
    "href": "api/VRBuilder.StatesAndData.Properties.EventProperty.html",
    "title": "Class EventProperty | VR Builder Documentation",
    "keywords": "Class EventProperty Namespace VRBuilder.StatesAndData.Properties Assembly VRBuilder.StatesAndData.dll public class EventProperty : ProcessSceneObjectProperty, IEventProperty, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty EventProperty Implements IEventProperty ISceneObjectProperty Inherited Members ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods TriggerEvent() Triggers the associated event. public void TriggerEvent()"
  },
  "api/VRBuilder.StatesAndData.Properties.GenericEventProperty-1.html": {
    "href": "api/VRBuilder.StatesAndData.Properties.GenericEventProperty-1.html",
    "title": "Class GenericEventProperty<T> | VR Builder Documentation",
    "keywords": "Class GenericEventProperty<T> Namespace VRBuilder.StatesAndData.Properties Assembly VRBuilder.StatesAndData.dll Abstract implementation of the generic event property. public abstract class GenericEventProperty<T> : ProcessSceneObjectProperty, IGenericEventProperty<T>, ISceneObjectProperty Type Parameters T Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty GenericEventProperty<T> Implements IGenericEventProperty<T> ISceneObjectProperty Derived BooleanEventProperty NumberEventProperty TextEventProperty Inherited Members ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods TriggerEvent(T) Triggers the associated event. public void TriggerEvent(T arg) Parameters arg T"
  },
  "api/VRBuilder.StatesAndData.Properties.IEventProperty.html": {
    "href": "api/VRBuilder.StatesAndData.Properties.IEventProperty.html",
    "title": "Interface IEventProperty | VR Builder Documentation",
    "keywords": "Interface IEventProperty Namespace VRBuilder.StatesAndData.Properties Assembly VRBuilder.StatesAndData.dll Base event property with no payload. public interface IEventProperty : ISceneObjectProperty Inherited Members ISceneObjectProperty.SceneObject Methods TriggerEvent() Triggers the associated event. void TriggerEvent()"
  },
  "api/VRBuilder.StatesAndData.Properties.IGenericEventProperty-1.html": {
    "href": "api/VRBuilder.StatesAndData.Properties.IGenericEventProperty-1.html",
    "title": "Interface IGenericEventProperty<T> | VR Builder Documentation",
    "keywords": "Interface IGenericEventProperty<T> Namespace VRBuilder.StatesAndData.Properties Assembly VRBuilder.StatesAndData.dll Event property which supports a single argument. public interface IGenericEventProperty<T> : ISceneObjectProperty Type Parameters T Inherited Members ISceneObjectProperty.SceneObject Methods TriggerEvent(T) Triggers the associated event. void TriggerEvent(T arg) Parameters arg T"
  },
  "api/VRBuilder.StatesAndData.Properties.NumberEventProperty.html": {
    "href": "api/VRBuilder.StatesAndData.Properties.NumberEventProperty.html",
    "title": "Class NumberEventProperty | VR Builder Documentation",
    "keywords": "Class NumberEventProperty Namespace VRBuilder.StatesAndData.Properties Assembly VRBuilder.StatesAndData.dll GenericEventProperty<T> implementation with numeric argument. public class NumberEventProperty : GenericEventProperty<float>, IGenericEventProperty<float>, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty GenericEventProperty<float> NumberEventProperty Implements IGenericEventProperty<float> ISceneObjectProperty Inherited Members GenericEventProperty<float>.TriggerEvent(float) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.StatesAndData.Properties.StateDataProperty-1.html": {
    "href": "api/VRBuilder.StatesAndData.Properties.StateDataProperty-1.html",
    "title": "Class StateDataProperty<T> | VR Builder Documentation",
    "keywords": "Class StateDataProperty<T> Namespace VRBuilder.StatesAndData.Properties Assembly VRBuilder.StatesAndData.dll Template class for state data properties. Override with a non-generic class to create usable state data properties. public abstract class StateDataProperty<T> : StateDataPropertyBase, IDataProperty<int>, IDataPropertyBase, ISceneObjectProperty where T : Enum Type Parameters T Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty DataProperty<int> StateDataPropertyBase StateDataProperty<T> Implements IDataProperty<int> IDataPropertyBase ISceneObjectProperty Inherited Members DataProperty<int>.storedValue DataProperty<int>.GetValue() DataProperty<int>.ResetValue() DataProperty<int>.SetValue(int) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties DefaultValue Defines a default value for the property. public override int DefaultValue { get; } Property Value int OnValueChanged Raised when the stored value changes. public override UnityEvent<int> OnValueChanged { get; } Property Value UnityEvent<int> OnValueReset Raised when the stored value is reset to the default. public override UnityEvent OnValueReset { get; } Property Value UnityEvent StateType Returns the enum type for this state. public override Type StateType { get; } Property Value Type Methods GetState() Returns the current state. public T GetState() Returns T SetState(T) Sets the current state to the specified value. public void SetState(T state) Parameters state T Start() protected void Start() ValueToString(int) protected override string ValueToString(int value) Parameters value int Returns string"
  },
  "api/VRBuilder.StatesAndData.Properties.StateDataPropertyBase.html": {
    "href": "api/VRBuilder.StatesAndData.Properties.StateDataPropertyBase.html",
    "title": "Class StateDataPropertyBase | VR Builder Documentation",
    "keywords": "Class StateDataPropertyBase Namespace VRBuilder.StatesAndData.Properties Assembly VRBuilder.StatesAndData.dll Base class for state data properties. [DisallowMultipleComponent] public abstract class StateDataPropertyBase : DataProperty<int>, IDataProperty<int>, IDataPropertyBase, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty DataProperty<int> StateDataPropertyBase Implements IDataProperty<int> IDataPropertyBase ISceneObjectProperty Derived StateDataProperty<T> Inherited Members DataProperty<int>.DefaultValue DataProperty<int>.storedValue DataProperty<int>.OnValueChanged DataProperty<int>.OnValueReset DataProperty<int>.GetValue() DataProperty<int>.ResetValue() DataProperty<int>.SetValue(int) DataProperty<int>.ValueToString(int) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties StateType Returns the enum type for this state. public abstract Type StateType { get; } Property Value Type"
  },
  "api/VRBuilder.StatesAndData.Properties.TextEventProperty.html": {
    "href": "api/VRBuilder.StatesAndData.Properties.TextEventProperty.html",
    "title": "Class TextEventProperty | VR Builder Documentation",
    "keywords": "Class TextEventProperty Namespace VRBuilder.StatesAndData.Properties Assembly VRBuilder.StatesAndData.dll GenericEventProperty<T> implementation with text argument. public class TextEventProperty : GenericEventProperty<string>, IGenericEventProperty<string>, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty GenericEventProperty<string> TextEventProperty Implements IGenericEventProperty<string> ISceneObjectProperty Inherited Members GenericEventProperty<string>.TriggerEvent(string) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.StatesAndData.Properties.html": {
    "href": "api/VRBuilder.StatesAndData.Properties.html",
    "title": "Namespace VRBuilder.StatesAndData.Properties | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.StatesAndData.Properties Classes BooleanEventProperty GenericEventProperty<T> implementation with boolean argument. EventProperty GenericEventProperty<T> Abstract implementation of the generic event property. NumberEventProperty GenericEventProperty<T> implementation with numeric argument. StateDataPropertyBase Base class for state data properties. StateDataProperty<T> Template class for state data properties. Override with a non-generic class to create usable state data properties. TextEventProperty GenericEventProperty<T> implementation with text argument. Interfaces IEventProperty Base event property with no payload. IGenericEventProperty<T> Event property which supports a single argument."
  },
  "api/VRBuilder.TextToSpeech.Audio.ITextToSpeechContent.html": {
    "href": "api/VRBuilder.TextToSpeech.Audio.ITextToSpeechContent.html",
    "title": "Interface ITextToSpeechContent | VR Builder Documentation",
    "keywords": "Interface ITextToSpeechContent Namespace VRBuilder.TextToSpeech.Audio Assembly VRBuilder.TextToSpeech.dll Interface implemented by content generated by a TTS provider. public interface ITextToSpeechContent Properties Text Text content to be fed to the TTS provider. string Text { get; } Property Value string Methods IsCached(Locale) True if a generated file for this content exists in the project. bool IsCached(Locale locale) Parameters locale Locale Returns bool"
  },
  "api/VRBuilder.TextToSpeech.Audio.TextToSpeechAudio.html": {
    "href": "api/VRBuilder.TextToSpeech.Audio.TextToSpeechAudio.html",
    "title": "Class TextToSpeechAudio | VR Builder Documentation",
    "keywords": "Class TextToSpeechAudio Namespace VRBuilder.TextToSpeech.Audio Assembly VRBuilder.TextToSpeech.dll This class retrieves and stores AudioClips generated based in a provided localized text. [DataContract(IsReference = true)] [DisplayName(\"Play Text to Speech\")] public class TextToSpeechAudio : TextToSpeechContent, ITextToSpeechContent, ILocalizedContent, IAudioData, ICanBeEmpty Inheritance object TextToSpeechContent TextToSpeechAudio Implements ITextToSpeechContent ILocalizedContent IAudioData ICanBeEmpty Inherited Members TextToSpeechContent.IsCached(Locale) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextToSpeechAudio() protected TextToSpeechAudio() TextToSpeechAudio(string) public TextToSpeechAudio(string text) Parameters text string Properties AudioClip The AudioClip of this source, can be null. Best check first with HasAudio. public AudioClip AudioClip { get; } Property Value AudioClip ClipData Data used to retrieve the audio clip. public string ClipData { get; set; } Property Value string HasAudioClip True when there is an Audio Clip loaded. public bool HasAudioClip { get; } Property Value bool IsLoading Returns true only when is busy loading an Audio Clip. public bool IsLoading { get; } Property Value bool Text Text content to be fed to the TTS provider. [DataMember] [UsesSpecificProcessDrawer(\"MultiLineStringDrawer\")] [DisplayName(\"Text/Key\")] public override string Text { get; set; } Property Value string Methods GetLocalizedContent() Returns localized content according to the localization and process configuration. public override string GetLocalizedContent() Returns string InitializeAudioClip() Creates the audio clip based on the provided parameters. public void InitializeAudioClip() IsEmpty() Returns true when this object is not properly filled. public bool IsEmpty() Returns bool"
  },
  "api/VRBuilder.TextToSpeech.Audio.TextToSpeechContent.html": {
    "href": "api/VRBuilder.TextToSpeech.Audio.TextToSpeechContent.html",
    "title": "Class TextToSpeechContent | VR Builder Documentation",
    "keywords": "Class TextToSpeechContent Namespace VRBuilder.TextToSpeech.Audio Assembly VRBuilder.TextToSpeech.dll Utility implementation of the ITextToSpeechContent interface that provides a default IsCached(Locale) method. public abstract class TextToSpeechContent : ITextToSpeechContent, ILocalizedContent Inheritance object TextToSpeechContent Implements ITextToSpeechContent ILocalizedContent Derived TextToSpeechAudio Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Text Text content to be fed to the TTS provider. public abstract string Text { get; set; } Property Value string Methods GetLocalizedContent() Returns localized content according to the localization and process configuration. public abstract string GetLocalizedContent() Returns string IsCached(Locale) True if a generated file for this content exists in the project. public virtual bool IsCached(Locale locale) Parameters locale Locale Returns bool"
  },
  "api/VRBuilder.TextToSpeech.Audio.html": {
    "href": "api/VRBuilder.TextToSpeech.Audio.html",
    "title": "Namespace VRBuilder.TextToSpeech.Audio | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.TextToSpeech.Audio Classes TextToSpeechAudio This class retrieves and stores AudioClips generated based in a provided localized text. TextToSpeechContent Utility implementation of the ITextToSpeechContent interface that provides a default IsCached(Locale) method. Interfaces ITextToSpeechContent Interface implemented by content generated by a TTS provider."
  },
  "api/VRBuilder.TextToSpeech.FileTextToSpeechProvider.CouldNotLoadAudioFileException.html": {
    "href": "api/VRBuilder.TextToSpeech.FileTextToSpeechProvider.CouldNotLoadAudioFileException.html",
    "title": "Class FileTextToSpeechProvider.CouldNotLoadAudioFileException | VR Builder Documentation",
    "keywords": "Class FileTextToSpeechProvider.CouldNotLoadAudioFileException Namespace VRBuilder.TextToSpeech Assembly VRBuilder.TextToSpeech.dll public class FileTextToSpeechProvider.CouldNotLoadAudioFileException : Exception, _Exception, ISerializable Inheritance object Exception FileTextToSpeechProvider.CouldNotLoadAudioFileException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CouldNotLoadAudioFileException(string) public CouldNotLoadAudioFileException(string msg) Parameters msg string CouldNotLoadAudioFileException(string, Exception) public CouldNotLoadAudioFileException(string msg, Exception ex) Parameters msg string ex Exception"
  },
  "api/VRBuilder.TextToSpeech.FileTextToSpeechProvider.html": {
    "href": "api/VRBuilder.TextToSpeech.FileTextToSpeechProvider.html",
    "title": "Class FileTextToSpeechProvider | VR Builder Documentation",
    "keywords": "Class FileTextToSpeechProvider Namespace VRBuilder.TextToSpeech Assembly VRBuilder.TextToSpeech.dll The disk based provider for text to speech, which is using the streaming assets folder. On the first step we check if the application has files provided on delivery. If there is no compatible file found, will download the file from the given fallback TextToSpeechProvider. public class FileTextToSpeechProvider : ITextToSpeechProvider Inheritance object FileTextToSpeechProvider Implements ITextToSpeechProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileTextToSpeechProvider(TextToSpeechConfiguration) public FileTextToSpeechProvider(TextToSpeechConfiguration configuration) Parameters configuration TextToSpeechConfiguration Fields Configuration protected TextToSpeechConfiguration Configuration Field Value TextToSpeechConfiguration Methods ConvertTextToSpeech(string, Locale) Loads the AudioClip file for the given text. public Task<AudioClip> ConvertTextToSpeech(string text, Locale locale) Parameters text string locale Locale Returns Task<AudioClip> GetCachedFile(string) Retrieves a cached file. protected virtual Task<byte[]> GetCachedFile(string filePath) Parameters filePath string Relative path where the cached file is stored. Returns Task<byte[]> A byte array containing the contents of the file. GetPathToFile(string) Returns the relative location were the file is cached. protected virtual string GetPathToFile(string filename) Parameters filename string Returns string IsFileCached(string) Returns true is a file is cached in given relative filePath. protected virtual Task<bool> IsFileCached(string filePath) Parameters filePath string Returns Task<bool> SetConfig(TextToSpeechConfiguration) Used for setting the config file. public void SetConfig(TextToSpeechConfiguration configuration) Parameters configuration TextToSpeechConfiguration"
  },
  "api/VRBuilder.TextToSpeech.IAudioConverter.html": {
    "href": "api/VRBuilder.TextToSpeech.IAudioConverter.html",
    "title": "Interface IAudioConverter | VR Builder Documentation",
    "keywords": "Interface IAudioConverter Namespace VRBuilder.TextToSpeech Assembly VRBuilder.TextToSpeech.dll Allows to convert audio into or out of AudioClips public interface IAudioConverter Methods CreateAudioClipFromMp3(byte[]) This method uses NAudio to convert a mp3 file given as byte array to an AudioClip in .wav format. AudioClip CreateAudioClipFromMp3(byte[] data) Parameters data byte[] Data are the bytes of an mp3 file Returns AudioClip CreateAudioClipFromWAVE(byte[]) This method uses NAudio to convert a wave file given as byte array to an AudioClip in .wav format. AudioClip CreateAudioClipFromWAVE(byte[] data) Parameters data byte[] Data are the bytes of a wave file Returns AudioClip TryWriteAudioClipToFile(AudioClip, string) This method uses NAudio to create .wav file from an AudioClip. bool TryWriteAudioClipToFile(AudioClip audio, string filePath) Parameters audio AudioClip AudioClip to export filePath string Path with filename Returns bool Returns if the AudioClip could wrote to an file on disk"
  },
  "api/VRBuilder.TextToSpeech.ITextToSpeechProvider.html": {
    "href": "api/VRBuilder.TextToSpeech.ITextToSpeechProvider.html",
    "title": "Interface ITextToSpeechProvider | VR Builder Documentation",
    "keywords": "Interface ITextToSpeechProvider Namespace VRBuilder.TextToSpeech Assembly VRBuilder.TextToSpeech.dll TextToSpeechProvider allows to convert text to AudioClips. public interface ITextToSpeechProvider Methods ConvertTextToSpeech(string, Locale) Loads the AudioClip file for the given text. Task<AudioClip> ConvertTextToSpeech(string text, Locale locale) Parameters text string locale Locale Returns Task<AudioClip> SetConfig(TextToSpeechConfiguration) Used for setting the config file. void SetConfig(TextToSpeechConfiguration configuration) Parameters configuration TextToSpeechConfiguration"
  },
  "api/VRBuilder.TextToSpeech.RuntimeConfigurationExtensions.html": {
    "href": "api/VRBuilder.TextToSpeech.RuntimeConfigurationExtensions.html",
    "title": "Class RuntimeConfigurationExtensions | VR Builder Documentation",
    "keywords": "Class RuntimeConfigurationExtensions Namespace VRBuilder.TextToSpeech Assembly VRBuilder.TextToSpeech.dll TextToSpeech extensions methods for BaseRuntimeConfiguration. public static class RuntimeConfigurationExtensions Inheritance object RuntimeConfigurationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetTextToSpeechConfiguration(BaseRuntimeConfiguration) Return loaded TextToSpeechConfiguration. public static TextToSpeechConfiguration GetTextToSpeechConfiguration(this BaseRuntimeConfiguration runtimeConfiguration) Parameters runtimeConfiguration BaseRuntimeConfiguration Returns TextToSpeechConfiguration SetTextToSpeechConfiguration(BaseRuntimeConfiguration, TextToSpeechConfiguration) Loads a new TextToSpeechConfiguration public static void SetTextToSpeechConfiguration(this BaseRuntimeConfiguration runtimeConfiguration, TextToSpeechConfiguration ttsConfiguration) Parameters runtimeConfiguration BaseRuntimeConfiguration ttsConfiguration TextToSpeechConfiguration"
  },
  "api/VRBuilder.TextToSpeech.TextToSpeechConfiguration.html": {
    "href": "api/VRBuilder.TextToSpeech.TextToSpeechConfiguration.html",
    "title": "Class TextToSpeechConfiguration | VR Builder Documentation",
    "keywords": "Class TextToSpeechConfiguration Namespace VRBuilder.TextToSpeech Assembly VRBuilder.TextToSpeech.dll public class TextToSpeechConfiguration : SettingsObject<TextToSpeechConfiguration> Inheritance object Object ScriptableObject SettingsObject<TextToSpeechConfiguration> TextToSpeechConfiguration Inherited Members SettingsObject<TextToSpeechConfiguration>.Instance SettingsObject<TextToSpeechConfiguration>.Save() ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods TextToSpeechUtils.GetUniqueTextToSpeechFilename(TextToSpeechConfiguration, string, Locale, string) Constructors TextToSpeechConfiguration() public TextToSpeechConfiguration() Fields Auth Used to authenticate at the provider, if required. public string Auth Field Value string Provider Name of the ITextToSpeechProvider. [HideInInspector] public string Provider Field Value string StreamingAssetCacheDirectoryName StreamingAsset directory name which is used to load/save audio files. public string StreamingAssetCacheDirectoryName Field Value string Voice Voice that should be used. public string Voice Field Value string Remarks It depends on the chosen provider. Methods LoadConfiguration() Loads the first existing TextToSpeechConfiguration found in the project. If any TextToSpeechConfiguration exist in the project it creates and saves a new instance with default values (editor only). public static TextToSpeechConfiguration LoadConfiguration() Returns TextToSpeechConfiguration Remarks When used in runtime, this method can only retrieve config files located under a Resources folder."
  },
  "api/VRBuilder.TextToSpeech.TextToSpeechProviderFactory.BaseCreator.html": {
    "href": "api/VRBuilder.TextToSpeech.TextToSpeechProviderFactory.BaseCreator.html",
    "title": "Class TextToSpeechProviderFactory.BaseCreator | VR Builder Documentation",
    "keywords": "Class TextToSpeechProviderFactory.BaseCreator Namespace VRBuilder.TextToSpeech Assembly VRBuilder.TextToSpeech.dll Non-generic TTS creator. public class TextToSpeechProviderFactory.BaseCreator : TextToSpeechProviderFactory.ITextToSpeechCreator Inheritance object TextToSpeechProviderFactory.BaseCreator Implements TextToSpeechProviderFactory.ITextToSpeechCreator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseCreator(Type) public BaseCreator(Type textToSpeechProviderType) Parameters textToSpeechProviderType Type Methods Create(TextToSpeechConfiguration) public ITextToSpeechProvider Create(TextToSpeechConfiguration configuration) Parameters configuration TextToSpeechConfiguration Returns ITextToSpeechProvider"
  },
  "api/VRBuilder.TextToSpeech.TextToSpeechProviderFactory.ITextToSpeechCreator.html": {
    "href": "api/VRBuilder.TextToSpeech.TextToSpeechProviderFactory.ITextToSpeechCreator.html",
    "title": "Interface TextToSpeechProviderFactory.ITextToSpeechCreator | VR Builder Documentation",
    "keywords": "Interface TextToSpeechProviderFactory.ITextToSpeechCreator Namespace VRBuilder.TextToSpeech Assembly VRBuilder.TextToSpeech.dll public interface TextToSpeechProviderFactory.ITextToSpeechCreator Methods Create(TextToSpeechConfiguration) ITextToSpeechProvider Create(TextToSpeechConfiguration configuration) Parameters configuration TextToSpeechConfiguration Returns ITextToSpeechProvider"
  },
  "api/VRBuilder.TextToSpeech.TextToSpeechProviderFactory.InvalidProviderException.html": {
    "href": "api/VRBuilder.TextToSpeech.TextToSpeechProviderFactory.InvalidProviderException.html",
    "title": "Class TextToSpeechProviderFactory.InvalidProviderException | VR Builder Documentation",
    "keywords": "Class TextToSpeechProviderFactory.InvalidProviderException Namespace VRBuilder.TextToSpeech Assembly VRBuilder.TextToSpeech.dll public class TextToSpeechProviderFactory.InvalidProviderException : Exception, _Exception, ISerializable Inheritance object Exception TextToSpeechProviderFactory.InvalidProviderException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidProviderException(string) public InvalidProviderException(string msg) Parameters msg string"
  },
  "api/VRBuilder.TextToSpeech.TextToSpeechProviderFactory.NoConfigurationFoundException.html": {
    "href": "api/VRBuilder.TextToSpeech.TextToSpeechProviderFactory.NoConfigurationFoundException.html",
    "title": "Class TextToSpeechProviderFactory.NoConfigurationFoundException | VR Builder Documentation",
    "keywords": "Class TextToSpeechProviderFactory.NoConfigurationFoundException Namespace VRBuilder.TextToSpeech Assembly VRBuilder.TextToSpeech.dll public class TextToSpeechProviderFactory.NoConfigurationFoundException : Exception, _Exception, ISerializable Inheritance object Exception TextToSpeechProviderFactory.NoConfigurationFoundException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NoConfigurationFoundException(string) public NoConfigurationFoundException(string msg) Parameters msg string"
  },
  "api/VRBuilder.TextToSpeech.TextToSpeechProviderFactory.NoMatchingProviderFoundException.html": {
    "href": "api/VRBuilder.TextToSpeech.TextToSpeechProviderFactory.NoMatchingProviderFoundException.html",
    "title": "Class TextToSpeechProviderFactory.NoMatchingProviderFoundException | VR Builder Documentation",
    "keywords": "Class TextToSpeechProviderFactory.NoMatchingProviderFoundException Namespace VRBuilder.TextToSpeech Assembly VRBuilder.TextToSpeech.dll public class TextToSpeechProviderFactory.NoMatchingProviderFoundException : Exception, _Exception, ISerializable Inheritance object Exception TextToSpeechProviderFactory.NoMatchingProviderFoundException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NoMatchingProviderFoundException(string) public NoMatchingProviderFoundException(string msg) Parameters msg string"
  },
  "api/VRBuilder.TextToSpeech.TextToSpeechProviderFactory.html": {
    "href": "api/VRBuilder.TextToSpeech.TextToSpeechProviderFactory.html",
    "title": "Class TextToSpeechProviderFactory | VR Builder Documentation",
    "keywords": "Class TextToSpeechProviderFactory Namespace VRBuilder.TextToSpeech Assembly VRBuilder.TextToSpeech.dll This factory creates and provides ITextToSpeechProviders. They are chosen by name, the following providers are registered by default: MicrosoftSapiTextToSpeechProvider WatsonTextToSpeechProvider GoogleTextToSpeechProvider public class TextToSpeechProviderFactory : Singleton<TextToSpeechProviderFactory> Inheritance object Singleton<TextToSpeechProviderFactory> TextToSpeechProviderFactory Inherited Members Singleton<TextToSpeechProviderFactory>.Instance object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextToSpeechProviderFactory() public TextToSpeechProviderFactory() Methods CreateProvider() Creates a provider, always loads the actual text to speech config to set it up. public ITextToSpeechProvider CreateProvider() Returns ITextToSpeechProvider CreateProvider(TextToSpeechConfiguration) Creates a provider with given config. public ITextToSpeechProvider CreateProvider(TextToSpeechConfiguration configuration) Parameters configuration TextToSpeechConfiguration Returns ITextToSpeechProvider RegisterProvider(Type) Add a provider of the specified type. public void RegisterProvider(Type textToSpeechProviderType) Parameters textToSpeechProviderType Type"
  },
  "api/VRBuilder.TextToSpeech.TextToSpeechUtils.html": {
    "href": "api/VRBuilder.TextToSpeech.TextToSpeechUtils.html",
    "title": "Class TextToSpeechUtils | VR Builder Documentation",
    "keywords": "Class TextToSpeechUtils Namespace VRBuilder.TextToSpeech Assembly VRBuilder.TextToSpeech.dll public static class TextToSpeechUtils Inheritance object TextToSpeechUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetUniqueTextToSpeechFilename(TextToSpeechConfiguration, string, Locale, string) Returns filename which uniquly identifies the audio by Backend, Language, Voice and also the text. public static string GetUniqueTextToSpeechFilename(this TextToSpeechConfiguration configuration, string text, Locale locale, string format = \"wav\") Parameters configuration TextToSpeechConfiguration text string locale Locale format string Returns string ShortsInByteArrayToFloats(byte[]) The result comes in byte array, but there are actually short values inside (ranged from short.Min to short.Max). public static float[] ShortsInByteArrayToFloats(byte[] shorts) Parameters shorts byte[] Returns float[]"
  },
  "api/VRBuilder.TextToSpeech.UnableToParseAudioFormatException.html": {
    "href": "api/VRBuilder.TextToSpeech.UnableToParseAudioFormatException.html",
    "title": "Class UnableToParseAudioFormatException | VR Builder Documentation",
    "keywords": "Class UnableToParseAudioFormatException Namespace VRBuilder.TextToSpeech Assembly VRBuilder.TextToSpeech.dll public class UnableToParseAudioFormatException : Exception, _Exception, ISerializable Inheritance object Exception UnableToParseAudioFormatException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UnableToParseAudioFormatException(string) public UnableToParseAudioFormatException(string msg) Parameters msg string"
  },
  "api/VRBuilder.TextToSpeech.html": {
    "href": "api/VRBuilder.TextToSpeech.html",
    "title": "Namespace VRBuilder.TextToSpeech | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.TextToSpeech Classes FileTextToSpeechProvider The disk based provider for text to speech, which is using the streaming assets folder. On the first step we check if the application has files provided on delivery. If there is no compatible file found, will download the file from the given fallback TextToSpeechProvider. FileTextToSpeechProvider.CouldNotLoadAudioFileException RuntimeConfigurationExtensions TextToSpeech extensions methods for BaseRuntimeConfiguration. TextToSpeechConfiguration TextToSpeechProviderFactory This factory creates and provides ITextToSpeechProviders. They are chosen by name, the following providers are registered by default: MicrosoftSapiTextToSpeechProvider WatsonTextToSpeechProvider GoogleTextToSpeechProvider TextToSpeechProviderFactory.BaseCreator Non-generic TTS creator. TextToSpeechProviderFactory.InvalidProviderException TextToSpeechProviderFactory.NoConfigurationFoundException TextToSpeechProviderFactory.NoMatchingProviderFoundException TextToSpeechUtils UnableToParseAudioFormatException Interfaces IAudioConverter Allows to convert audio into or out of AudioClips ITextToSpeechProvider TextToSpeechProvider allows to convert text to AudioClips. TextToSpeechProviderFactory.ITextToSpeechCreator"
  },
  "api/VRBuilder.TrackAndMeasure.Behaviors.StartTimerBehavior.EntityData.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Behaviors.StartTimerBehavior.EntityData.html",
    "title": "Class StartTimerBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class StartTimerBehavior.EntityData Namespace VRBuilder.TrackAndMeasure.Behaviors Assembly VRBuilder.TrackAndMeasure.dll The StartTimerBehavior behavior data. [DisplayName(\"Start Timer\")] [DataContract(IsReference = true)] public class StartTimerBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object StartTimerBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsCountdown [DataMember] [DisplayName(\"Is Countdown\")] public bool IsCountdown { get; set; } Property Value bool Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string TimerProperties [DataMember] [DisplayName(\"Timer\")] public MultipleScenePropertyReference<ITimerProperty> TimerProperties { get; set; } Property Value MultipleScenePropertyReference<ITimerProperty> TimerProperty [DataMember] [Obsolete(\"Use TimerProperties instead.\")] [LegacyProperty(\"TimerProperties\")] public ScenePropertyReference<ITimerProperty> TimerProperty { get; set; } Property Value ScenePropertyReference<ITimerProperty>"
  },
  "api/VRBuilder.TrackAndMeasure.Behaviors.StartTimerBehavior.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Behaviors.StartTimerBehavior.html",
    "title": "Class StartTimerBehavior | VR Builder Documentation",
    "keywords": "Class StartTimerBehavior Namespace VRBuilder.TrackAndMeasure.Behaviors Assembly VRBuilder.TrackAndMeasure.dll A behavior that starts a TimerProperty. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/track-measure-add-on\")] public class StartTimerBehavior : Behavior<StartTimerBehavior.EntityData>, IDataOwner<StartTimerBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<StartTimerBehavior.EntityData> Behavior<StartTimerBehavior.EntityData> StartTimerBehavior Implements IDataOwner<StartTimerBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<StartTimerBehavior.EntityData>.Clone() Entity<StartTimerBehavior.EntityData>.Data Entity<StartTimerBehavior.EntityData>.LifeCycle Entity<StartTimerBehavior.EntityData>.Parent Entity<StartTimerBehavior.EntityData>.GetActiveProcess() Entity<StartTimerBehavior.EntityData>.GetDeactivatingProcess() Entity<StartTimerBehavior.EntityData>.GetConfigurator() Entity<StartTimerBehavior.EntityData>.Configure(IMode) Entity<StartTimerBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StartTimerBehavior() [JsonConstructor] [Preserve] public StartTimerBehavior() StartTimerBehavior(Guid, bool) public StartTimerBehavior(Guid propertyGuid, bool isCountdown) Parameters propertyGuid Guid isCountdown bool StartTimerBehavior(ITimerProperty, bool) public StartTimerBehavior(ITimerProperty property, bool isCountdown) Parameters property ITimerProperty isCountdown bool Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.TrackAndMeasure.Behaviors.StopTimerBehavior.EntityData.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Behaviors.StopTimerBehavior.EntityData.html",
    "title": "Class StopTimerBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class StopTimerBehavior.EntityData Namespace VRBuilder.TrackAndMeasure.Behaviors Assembly VRBuilder.TrackAndMeasure.dll The StopTimerBehavior behavior data. [DisplayName(\"Stop Timer\")] [DataContract(IsReference = true)] public class StopTimerBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object StopTimerBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string TimerProperties [DataMember] [DisplayName(\"Timer\")] public MultipleScenePropertyReference<ITimerProperty> TimerProperties { get; set; } Property Value MultipleScenePropertyReference<ITimerProperty> TimerProperty [DataMember] [Obsolete(\"Use TimerProperties instead.\")] [LegacyProperty(\"TimerProperties\")] public ScenePropertyReference<ITimerProperty> TimerProperty { get; set; } Property Value ScenePropertyReference<ITimerProperty>"
  },
  "api/VRBuilder.TrackAndMeasure.Behaviors.StopTimerBehavior.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Behaviors.StopTimerBehavior.html",
    "title": "Class StopTimerBehavior | VR Builder Documentation",
    "keywords": "Class StopTimerBehavior Namespace VRBuilder.TrackAndMeasure.Behaviors Assembly VRBuilder.TrackAndMeasure.dll A behavior that stops a TimerProperty. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/track-measure-add-on\")] public class StopTimerBehavior : Behavior<StopTimerBehavior.EntityData>, IDataOwner<StopTimerBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<StopTimerBehavior.EntityData> Behavior<StopTimerBehavior.EntityData> StopTimerBehavior Implements IDataOwner<StopTimerBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<StopTimerBehavior.EntityData>.Clone() Entity<StopTimerBehavior.EntityData>.Data Entity<StopTimerBehavior.EntityData>.LifeCycle Entity<StopTimerBehavior.EntityData>.Parent Entity<StopTimerBehavior.EntityData>.GetActiveProcess() Entity<StopTimerBehavior.EntityData>.GetDeactivatingProcess() Entity<StopTimerBehavior.EntityData>.GetConfigurator() Entity<StopTimerBehavior.EntityData>.Configure(IMode) Entity<StopTimerBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StopTimerBehavior() [JsonConstructor] [Preserve] public StopTimerBehavior() StopTimerBehavior(Guid) public StopTimerBehavior(Guid propertyGuid) Parameters propertyGuid Guid StopTimerBehavior(ITimerProperty) public StopTimerBehavior(ITimerProperty property) Parameters property ITimerProperty Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.TrackAndMeasure.Behaviors.UpdateScoreBehavior.EntityData.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Behaviors.UpdateScoreBehavior.EntityData.html",
    "title": "Class UpdateScoreBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class UpdateScoreBehavior.EntityData Namespace VRBuilder.TrackAndMeasure.Behaviors Assembly VRBuilder.TrackAndMeasure.dll The UpdateScoreBehavior behavior data. [DisplayName(\"Update Score\")] [DataContract(IsReference = true)] public class UpdateScoreBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object UpdateScoreBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DataProperty [DataMember] [Obsolete(\"Use ScoreProperty instead.\")] [LegacyProperty(\"ScoreProperty\")] public ScenePropertyReference<IDataProperty<float>> DataProperty { get; set; } Property Value ScenePropertyReference<IDataProperty<float>> FeedbackPosition [DataMember] [DisplayName(\"Feedback position provider\")] public SingleSceneObjectReference FeedbackPosition { get; set; } Property Value SingleSceneObjectReference FeedbackPositionProvider [DataMember] [Obsolete(\"Use FeedbackPosition instead.\")] [LegacyProperty(\"FeedbackPosition\")] public SceneObjectReference FeedbackPositionProvider { get; set; } Property Value SceneObjectReference FeedbackProperties [DataMember] [DisplayName(\"Feedback properties\")] public MultipleScenePropertyReference<IScoreFeedbackProperty> FeedbackProperties { get; set; } Property Value MultipleScenePropertyReference<IScoreFeedbackProperty> FeedbackProperty [DataMember] [Obsolete(\"Use FeedbackProperties instead.\")] [LegacyProperty(\"FeedbackProperties\")] public ScenePropertyReference<IScoreFeedbackProperty> FeedbackProperty { get; set; } Property Value ScenePropertyReference<IScoreFeedbackProperty> Metadata Reference to this object's IMetadata. public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string ScoreProperty [DataMember] [DisplayName(\"Score data property\")] public SingleScenePropertyReference<IDataProperty<float>> ScoreProperty { get; set; } Property Value SingleScenePropertyReference<IDataProperty<float>> ValueDelta [DataMember] [DisplayName(\"Score increase\")] public float ValueDelta { get; set; } Property Value float"
  },
  "api/VRBuilder.TrackAndMeasure.Behaviors.UpdateScoreBehavior.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Behaviors.UpdateScoreBehavior.html",
    "title": "Class UpdateScoreBehavior | VR Builder Documentation",
    "keywords": "Class UpdateScoreBehavior Namespace VRBuilder.TrackAndMeasure.Behaviors Assembly VRBuilder.TrackAndMeasure.dll A behavior that updates a score and can provide feedback for it. [DataContract(IsReference = true)] [HelpLink(\"https://www.mindport.co/vr-builder-tutorials/track-measure-add-on\")] public class UpdateScoreBehavior : Behavior<UpdateScoreBehavior.EntityData>, IDataOwner<UpdateScoreBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<UpdateScoreBehavior.EntityData> Behavior<UpdateScoreBehavior.EntityData> UpdateScoreBehavior Implements IDataOwner<UpdateScoreBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<UpdateScoreBehavior.EntityData>.Clone() Entity<UpdateScoreBehavior.EntityData>.Data Entity<UpdateScoreBehavior.EntityData>.LifeCycle Entity<UpdateScoreBehavior.EntityData>.Parent Entity<UpdateScoreBehavior.EntityData>.GetActiveProcess() Entity<UpdateScoreBehavior.EntityData>.GetDeactivatingProcess() Entity<UpdateScoreBehavior.EntityData>.GetConfigurator() Entity<UpdateScoreBehavior.EntityData>.Configure(IMode) Entity<UpdateScoreBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateScoreBehavior() [JsonConstructor] [Preserve] public UpdateScoreBehavior() UpdateScoreBehavior(Guid, Guid, float, Guid) public UpdateScoreBehavior(Guid feedbackPropertyGuid, Guid dataPropertyGuid, float pointDelta, Guid positionProviderGuid) Parameters feedbackPropertyGuid Guid dataPropertyGuid Guid pointDelta float positionProviderGuid Guid UpdateScoreBehavior(IScoreFeedbackProperty, IDataProperty<float>, float, ISceneObject) public UpdateScoreBehavior(IScoreFeedbackProperty feedbackProperty, IDataProperty<float> dataProperty, float pointDelta, ISceneObject positionProvider) Parameters feedbackProperty IScoreFeedbackProperty dataProperty IDataProperty<float> pointDelta float positionProvider ISceneObject Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.TrackAndMeasure.Behaviors.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Behaviors.html",
    "title": "Namespace VRBuilder.TrackAndMeasure.Behaviors | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.TrackAndMeasure.Behaviors Classes StartTimerBehavior A behavior that starts a TimerProperty. StartTimerBehavior.EntityData The StartTimerBehavior behavior data. StopTimerBehavior A behavior that stops a TimerProperty. StopTimerBehavior.EntityData The StopTimerBehavior behavior data. UpdateScoreBehavior A behavior that updates a score and can provide feedback for it. UpdateScoreBehavior.EntityData The UpdateScoreBehavior behavior data."
  },
  "api/VRBuilder.TrackAndMeasure.Components.AudioScoreFeedback.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Components.AudioScoreFeedback.html",
    "title": "Class AudioScoreFeedback | VR Builder Documentation",
    "keywords": "Class AudioScoreFeedback Namespace VRBuilder.TrackAndMeasure.Components Assembly VRBuilder.TrackAndMeasure.dll Provides score feedback by playing a sound at the provided location. public class AudioScoreFeedback : MonoBehaviour, IScoreFeedbackProvider Inheritance object Object Component Behaviour MonoBehaviour AudioScoreFeedback Implements IScoreFeedbackProvider Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods TriggerFeedback(float, float, Transform) Triggers the implemented feedback. public void TriggerFeedback(float scoreDelta, float finalScore, Transform positionProvider) Parameters scoreDelta float finalScore float positionProvider Transform"
  },
  "api/VRBuilder.TrackAndMeasure.Components.BooleanDisplay.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Components.BooleanDisplay.html",
    "title": "Class BooleanDisplay | VR Builder Documentation",
    "keywords": "Class BooleanDisplay Namespace VRBuilder.TrackAndMeasure.Components Assembly VRBuilder.TrackAndMeasure.dll Displays a BooleanDataProperty on a text mesh. public class BooleanDisplay : DataPropertyDisplay<bool> Inheritance object Object Component Behaviour MonoBehaviour DataPropertyDisplay<bool> BooleanDisplay Inherited Members DataPropertyDisplay<bool>.text DataPropertyDisplay<bool>.textMesh DataPropertyDisplay<bool>.OnEnable() DataPropertyDisplay<bool>.OnDisable() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties DataProperty IDataProperty<T> to be displayed. public override IDataProperty<bool> DataProperty { get; } Property Value IDataProperty<bool> Methods UpdateText() Updates the displayed text. protected override void UpdateText()"
  },
  "api/VRBuilder.TrackAndMeasure.Components.DataPropertyDisplay-1.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Components.DataPropertyDisplay-1.html",
    "title": "Class DataPropertyDisplay<T> | VR Builder Documentation",
    "keywords": "Class DataPropertyDisplay<T> Namespace VRBuilder.TrackAndMeasure.Components Assembly VRBuilder.TrackAndMeasure.dll Displays a data property's value on a TMPro.TextMeshPro component. [RequireComponent(typeof(TextMeshPro))] public abstract class DataPropertyDisplay<T> : MonoBehaviour Type Parameters T Inheritance object Object Component Behaviour MonoBehaviour DataPropertyDisplay<T> Derived BooleanDisplay NumberDisplay TextDisplay TimeDisplay Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields text [SerializeField] [TextArea] [Tooltip(\"These variables are supported with standard string formatting rules:\\n{0} - The value stored in the data property\\n{1} - The name of the game object the property is on\")] protected string text Field Value string textMesh protected TextMeshPro textMesh Field Value TextMeshPro Properties DataProperty IDataProperty<T> to be displayed. public abstract IDataProperty<T> DataProperty { get; } Property Value IDataProperty<T> Methods OnDisable() protected virtual void OnDisable() OnEnable() protected virtual void OnEnable() UpdateText() Updates the displayed text. protected virtual void UpdateText()"
  },
  "api/VRBuilder.TrackAndMeasure.Components.FloatingTextMesh.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Components.FloatingTextMesh.html",
    "title": "Class FloatingTextMesh | VR Builder Documentation",
    "keywords": "Class FloatingTextMesh Namespace VRBuilder.TrackAndMeasure.Components Assembly VRBuilder.TrackAndMeasure.dll Makes the game object float up and destroy itself after a time. Configures a TMPro.TextMeshPro on the same object. [RequireComponent(typeof(TextMeshPro))] public class FloatingTextMesh : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour FloatingTextMesh Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Initialize(string) public void Initialize(string text) Parameters text string"
  },
  "api/VRBuilder.TrackAndMeasure.Components.FloatingTextScoreFeedback.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Components.FloatingTextScoreFeedback.html",
    "title": "Class FloatingTextScoreFeedback | VR Builder Documentation",
    "keywords": "Class FloatingTextScoreFeedback Namespace VRBuilder.TrackAndMeasure.Components Assembly VRBuilder.TrackAndMeasure.dll Provides score feedback by displaying a floating text showing the score increase. public class FloatingTextScoreFeedback : MonoBehaviour, IScoreFeedbackProvider Inheritance object Object Component Behaviour MonoBehaviour FloatingTextScoreFeedback Implements IScoreFeedbackProvider Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields textMeshPrefab [SerializeField] protected FloatingTextMesh textMeshPrefab Field Value FloatingTextMesh Methods TriggerFeedback(float, float, Transform) Triggers the implemented feedback. public void TriggerFeedback(float scoreDelta, float finalScore, Transform positionProvider) Parameters scoreDelta float finalScore float positionProvider Transform"
  },
  "api/VRBuilder.TrackAndMeasure.Components.IScoreFeedbackProvider.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Components.IScoreFeedbackProvider.html",
    "title": "Interface IScoreFeedbackProvider | VR Builder Documentation",
    "keywords": "Interface IScoreFeedbackProvider Namespace VRBuilder.TrackAndMeasure.Components Assembly VRBuilder.TrackAndMeasure.dll An object implementing this interface can provide feedback when a numerical score is updated. public interface IScoreFeedbackProvider Methods TriggerFeedback(float, float, Transform) Triggers the implemented feedback. void TriggerFeedback(float scoreDelta, float finalScore, Transform positionProvider) Parameters scoreDelta float finalScore float positionProvider Transform"
  },
  "api/VRBuilder.TrackAndMeasure.Components.NumberDisplay.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Components.NumberDisplay.html",
    "title": "Class NumberDisplay | VR Builder Documentation",
    "keywords": "Class NumberDisplay Namespace VRBuilder.TrackAndMeasure.Components Assembly VRBuilder.TrackAndMeasure.dll Displays a NumberDataProperty on a text mesh. public class NumberDisplay : DataPropertyDisplay<float> Inheritance object Object Component Behaviour MonoBehaviour DataPropertyDisplay<float> NumberDisplay Inherited Members DataPropertyDisplay<float>.text DataPropertyDisplay<float>.textMesh DataPropertyDisplay<float>.UpdateText() DataPropertyDisplay<float>.OnEnable() DataPropertyDisplay<float>.OnDisable() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties DataProperty IDataProperty<T> to be displayed. public override IDataProperty<float> DataProperty { get; } Property Value IDataProperty<float>"
  },
  "api/VRBuilder.TrackAndMeasure.Components.TextDisplay.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Components.TextDisplay.html",
    "title": "Class TextDisplay | VR Builder Documentation",
    "keywords": "Class TextDisplay Namespace VRBuilder.TrackAndMeasure.Components Assembly VRBuilder.TrackAndMeasure.dll Displays a TextDataProperty on a text mesh. public class TextDisplay : DataPropertyDisplay<string> Inheritance object Object Component Behaviour MonoBehaviour DataPropertyDisplay<string> TextDisplay Inherited Members DataPropertyDisplay<string>.text DataPropertyDisplay<string>.textMesh DataPropertyDisplay<string>.UpdateText() DataPropertyDisplay<string>.OnEnable() DataPropertyDisplay<string>.OnDisable() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties DataProperty IDataProperty<T> to be displayed. public override IDataProperty<string> DataProperty { get; } Property Value IDataProperty<string>"
  },
  "api/VRBuilder.TrackAndMeasure.Components.TimeDisplay.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Components.TimeDisplay.html",
    "title": "Class TimeDisplay | VR Builder Documentation",
    "keywords": "Class TimeDisplay Namespace VRBuilder.TrackAndMeasure.Components Assembly VRBuilder.TrackAndMeasure.dll Displays a NumberDataProperty representing a value in seconds as time on a text mesh. public class TimeDisplay : DataPropertyDisplay<float> Inheritance object Object Component Behaviour MonoBehaviour DataPropertyDisplay<float> TimeDisplay Inherited Members DataPropertyDisplay<float>.text DataPropertyDisplay<float>.textMesh DataPropertyDisplay<float>.OnEnable() DataPropertyDisplay<float>.OnDisable() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties DataProperty IDataProperty<T> to be displayed. public override IDataProperty<float> DataProperty { get; } Property Value IDataProperty<float> Methods UpdateText() Updates the displayed text. protected override void UpdateText()"
  },
  "api/VRBuilder.TrackAndMeasure.Components.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Components.html",
    "title": "Namespace VRBuilder.TrackAndMeasure.Components | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.TrackAndMeasure.Components Classes AudioScoreFeedback Provides score feedback by playing a sound at the provided location. BooleanDisplay Displays a BooleanDataProperty on a text mesh. DataPropertyDisplay<T> Displays a data property's value on a TMPro.TextMeshPro component. FloatingTextMesh Makes the game object float up and destroy itself after a time. Configures a TMPro.TextMeshPro on the same object. FloatingTextScoreFeedback Provides score feedback by displaying a floating text showing the score increase. NumberDisplay Displays a NumberDataProperty on a text mesh. TextDisplay Displays a TextDataProperty on a text mesh. TimeDisplay Displays a NumberDataProperty representing a value in seconds as time on a text mesh. Interfaces IScoreFeedbackProvider An object implementing this interface can provide feedback when a numerical score is updated."
  },
  "api/VRBuilder.TrackAndMeasure.Properties.IScoreFeedbackProperty.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Properties.IScoreFeedbackProperty.html",
    "title": "Interface IScoreFeedbackProperty | VR Builder Documentation",
    "keywords": "Interface IScoreFeedbackProperty Namespace VRBuilder.TrackAndMeasure.Properties Assembly VRBuilder.TrackAndMeasure.dll Property for an object providing feedback over a numerical score. public interface IScoreFeedbackProperty : ISceneObjectProperty Inherited Members ISceneObjectProperty.SceneObject Methods TriggerFeedback(float, float, Transform) Triggers the feedback. void TriggerFeedback(float scoreDelta, float finalScore, Transform position) Parameters scoreDelta float finalScore float position Transform"
  },
  "api/VRBuilder.TrackAndMeasure.Properties.ITimerProperty.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Properties.ITimerProperty.html",
    "title": "Interface ITimerProperty | VR Builder Documentation",
    "keywords": "Interface ITimerProperty Namespace VRBuilder.TrackAndMeasure.Properties Assembly VRBuilder.TrackAndMeasure.dll Property that acts as a timer. public interface ITimerProperty : ISceneObjectProperty Inherited Members ISceneObjectProperty.SceneObject Properties IsCountdown If true, the timer will count down instead of up. bool IsCountdown { get; set; } Property Value bool IsRunning True when the timer is active. bool IsRunning { get; } Property Value bool TimerStart Raised when the timer starts. UnityEvent<TimerPropertyEventArgs> TimerStart { get; } Property Value UnityEvent<TimerPropertyEventArgs> TimerStop Raised when the timer is paused. UnityEvent<TimerPropertyEventArgs> TimerStop { get; } Property Value UnityEvent<TimerPropertyEventArgs> TimerZero Raised when a timer reaches zero. UnityEvent<TimerPropertyEventArgs> TimerZero { get; } Property Value UnityEvent<TimerPropertyEventArgs> Methods StartTimer() Starts the timer. void StartTimer() StopTimer() Stops the timer. void StopTimer() Events TimerAtZero Raised when a timer reaches zero. [Obsolete(\"Use TimerZero instead.\")] event EventHandler<EventArgs> TimerAtZero Event Type EventHandler<EventArgs> TimerStarted Raised when the timer starts. [Obsolete(\"Use TimerStart instead.\")] event EventHandler<EventArgs> TimerStarted Event Type EventHandler<EventArgs> TimerStopped Raised when the timer is paused. [Obsolete(\"Use TimerStop instead.\")] event EventHandler<EventArgs> TimerStopped Event Type EventHandler<EventArgs>"
  },
  "api/VRBuilder.TrackAndMeasure.Properties.ScoreFeedbackProperty.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Properties.ScoreFeedbackProperty.html",
    "title": "Class ScoreFeedbackProperty | VR Builder Documentation",
    "keywords": "Class ScoreFeedbackProperty Namespace VRBuilder.TrackAndMeasure.Properties Assembly VRBuilder.TrackAndMeasure.dll Implementation that triggers feedback by iterating through all IScoreFeedbackProviders on the game object or its children. public class ScoreFeedbackProperty : ProcessSceneObjectProperty, IScoreFeedbackProperty, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty ScoreFeedbackProperty Implements IScoreFeedbackProperty ISceneObjectProperty Inherited Members ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods TriggerFeedback(float, float, Transform) Triggers the feedback. public void TriggerFeedback(float scoreDelta, float finalScore, Transform position) Parameters scoreDelta float finalScore float position Transform"
  },
  "api/VRBuilder.TrackAndMeasure.Properties.TimerProperty.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Properties.TimerProperty.html",
    "title": "Class TimerProperty | VR Builder Documentation",
    "keywords": "Class TimerProperty Namespace VRBuilder.TrackAndMeasure.Properties Assembly VRBuilder.TrackAndMeasure.dll Property that acts as a timer and stores time on the required NumberDataProperty. [RequireComponent(typeof(NumberDataProperty))] public class TimerProperty : ProcessSceneObjectProperty, ITimerProperty, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty TimerProperty Implements ITimerProperty ISceneObjectProperty Inherited Members ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties IsCountdown If true, the timer will count down instead of up. public bool IsCountdown { get; set; } Property Value bool IsRunning True when the timer is active. public bool IsRunning { get; } Property Value bool TimerStart Raised when the timer starts. public UnityEvent<TimerPropertyEventArgs> TimerStart { get; } Property Value UnityEvent<TimerPropertyEventArgs> TimerStop Raised when the timer is paused. public UnityEvent<TimerPropertyEventArgs> TimerStop { get; } Property Value UnityEvent<TimerPropertyEventArgs> TimerZero Raised when a timer reaches zero. public UnityEvent<TimerPropertyEventArgs> TimerZero { get; } Property Value UnityEvent<TimerPropertyEventArgs> Methods StartTimer() Starts the timer. public void StartTimer() StopTimer() Stops the timer. public void StopTimer() Events TimerAtZero Raised when a timer reaches zero. public event EventHandler<EventArgs> TimerAtZero Event Type EventHandler<EventArgs> TimerStarted Raised when the timer starts. public event EventHandler<EventArgs> TimerStarted Event Type EventHandler<EventArgs> TimerStopped Raised when the timer is paused. public event EventHandler<EventArgs> TimerStopped Event Type EventHandler<EventArgs>"
  },
  "api/VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs.html",
    "title": "Class TimerPropertyEventArgs | VR Builder Documentation",
    "keywords": "Class TimerPropertyEventArgs Namespace VRBuilder.TrackAndMeasure.Properties Assembly VRBuilder.TrackAndMeasure.dll Event args for TimerProperty. public class TimerPropertyEventArgs : EventArgs Inheritance object EventArgs TimerPropertyEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/VRBuilder.TrackAndMeasure.Properties.html": {
    "href": "api/VRBuilder.TrackAndMeasure.Properties.html",
    "title": "Namespace VRBuilder.TrackAndMeasure.Properties | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.TrackAndMeasure.Properties Classes ScoreFeedbackProperty Implementation that triggers feedback by iterating through all IScoreFeedbackProviders on the game object or its children. TimerProperty Property that acts as a timer and stores time on the required NumberDataProperty. TimerPropertyEventArgs Event args for TimerProperty. Interfaces IScoreFeedbackProperty Property for an object providing feedback over a numerical score. ITimerProperty Property that acts as a timer."
  },
  "api/VRBuilder.UX.BaseProcessController.html": {
    "href": "api/VRBuilder.UX.BaseProcessController.html",
    "title": "Class BaseProcessController | VR Builder Documentation",
    "keywords": "Class BaseProcessController Namespace VRBuilder.UX Assembly VRBuilder.Core.dll Base process controller which instantiates a defined prefab. public abstract class BaseProcessController : IProcessController Inheritance object BaseProcessController Implements IProcessController Derived SpectatorProcessController StandardProcessController Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Prettified name. public abstract string Name { get; } Property Value string PrefabName Name of the process controller prefab. protected abstract string PrefabName { get; } Property Value string Priority Priority of the controller. public abstract int Priority { get; } Property Value int Methods GetProcessControllerPrefab() Gets a process controller game object. public virtual GameObject GetProcessControllerPrefab() Returns GameObject GetRequiredSetupComponents() List of component types which are required on the setup object. public virtual List<Type> GetRequiredSetupComponents() Returns List<Type> List of component types. HandlePostSetup(GameObject) Handles post-setup logic. Should be called after all components are added and object is initialized. public virtual void HandlePostSetup(GameObject processControllerObject) Parameters processControllerObject GameObject Actual process controller object"
  },
  "api/VRBuilder.UX.IProcessController.html": {
    "href": "api/VRBuilder.UX.IProcessController.html",
    "title": "Interface IProcessController | VR Builder Documentation",
    "keywords": "Interface IProcessController Namespace VRBuilder.UX Assembly VRBuilder.Core.dll Controller for managing the process. Can for example instantiate a controller menu and a spectator camera. public interface IProcessController Properties Name Prettified name. string Name { get; } Property Value string Priority Priority of the controller. int Priority { get; } Property Value int Methods GetProcessControllerPrefab() Gets a process controller game object. GameObject GetProcessControllerPrefab() Returns GameObject GetRequiredSetupComponents() List of component types which are required on the setup object. List<Type> GetRequiredSetupComponents() Returns List<Type> List of component types. HandlePostSetup(GameObject) Handles post-setup logic. Should be called after all components are added and object is initialized. void HandlePostSetup(GameObject processControllerObject) Parameters processControllerObject GameObject Actual process controller object"
  },
  "api/VRBuilder.UX.InitProcessOnSceneLoad.html": {
    "href": "api/VRBuilder.UX.InitProcessOnSceneLoad.html",
    "title": "Class InitProcessOnSceneLoad | VR Builder Documentation",
    "keywords": "Class InitProcessOnSceneLoad Namespace VRBuilder.UX Assembly VRBuilder.Core.dll Initializes the ProcessRunner with the current selected process on scene start. public class InitProcessOnSceneLoad : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour InitProcessOnSceneLoad Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.UX.ProcessControllerSetup.html": {
    "href": "api/VRBuilder.UX.ProcessControllerSetup.html",
    "title": "Class ProcessControllerSetup | VR Builder Documentation",
    "keywords": "Class ProcessControllerSetup Namespace VRBuilder.UX Assembly VRBuilder.Core.dll Manages the setup of the process controller and lets the developer choose the IProcessController. [DefaultExecutionOrder(1000)] public class ProcessControllerSetup : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ProcessControllerSetup Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields enforcedProcessController Enforced process controller will be use. protected static IProcessController enforcedProcessController Field Value IProcessController Properties CurrentProcessController Current used process controller. public IProcessController CurrentProcessController { get; protected set; } Property Value IProcessController Methods OnEnable() protected virtual void OnEnable() ResetToDefault() Resets the to the name of the process controller with the highest priority. public void ResetToDefault() Remarks This may be used when instantiating a process controller prefab to make sure the default process controller is used. SetEnforcedProcessController(IProcessController) Enforces the given controller to be used, if possible. public static void SetEnforcedProcessController(IProcessController processController) Parameters processController IProcessController Controller to be used. Remarks Scene has to be reloaded to use enforced ProcessController. SetProcessControllerQualifiedName(string) public void SetProcessControllerQualifiedName(string processControllerQualifiedName) Parameters processControllerQualifiedName string"
  },
  "api/VRBuilder.UX.SpectatorCamera.html": {
    "href": "api/VRBuilder.UX.SpectatorCamera.html",
    "title": "Class SpectatorCamera | VR Builder Documentation",
    "keywords": "Class SpectatorCamera Namespace VRBuilder.UX Assembly VRBuilder.Core.dll Spectator camera which sets its viewpoint to the one of the user. [RequireComponent(typeof(Camera))] public class SpectatorCamera : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SpectatorCamera Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Start() protected virtual void Start() Update() protected virtual void Update() UpdateCameraPositionAndRotation() Sets the position and rotation of the spectator camera to the one of the user. protected virtual void UpdateCameraPositionAndRotation()"
  },
  "api/VRBuilder.UX.SpectatorCameraDummy.html": {
    "href": "api/VRBuilder.UX.SpectatorCameraDummy.html",
    "title": "Class SpectatorCameraDummy | VR Builder Documentation",
    "keywords": "Class SpectatorCameraDummy Namespace VRBuilder.UX Assembly VRBuilder.Core.dll Dummy object which can be used to set viewpoints into the scene. Will remove its camera component on runtime and can be used in combination with SpectatorCamera. [ExecuteInEditMode] public class SpectatorCameraDummy : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SpectatorCameraDummy Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields CameraName [SerializeField] public string CameraName Field Value string Methods Awake() public void Awake()"
  },
  "api/VRBuilder.UX.SpectatorController.html": {
    "href": "api/VRBuilder.UX.SpectatorController.html",
    "title": "Class SpectatorController | VR Builder Documentation",
    "keywords": "Class SpectatorController Namespace VRBuilder.UX Assembly VRBuilder.Core.dll Controller for a spectator to toggle UI visibility. public class SpectatorController : InputActionListener, IInputActionListener Inheritance object Object Component Behaviour MonoBehaviour InputActionListener SpectatorController Implements IInputActionListener Inherited Members InputActionListener.Priority InputActionListener.IgnoreFocus InputActionListener.RegisterInputEvent(Action<InputController.InputEventArgs>) InputActionListener.UnregisterInputEvent(Action<InputController.InputEventArgs>) MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnDisable() protected void OnDisable() OnEnable() protected void OnEnable() ToggleOverlay(InputEventArgs) protected void ToggleOverlay(InputController.InputEventArgs args) Parameters args InputController.InputEventArgs Events ToggleUIOverlayVisibility Event fired when UI visibility is toggled. public event EventHandler ToggleUIOverlayVisibility Event Type EventHandler"
  },
  "api/VRBuilder.UX.SpectatorProcessController.html": {
    "href": "api/VRBuilder.UX.SpectatorProcessController.html",
    "title": "Class SpectatorProcessController | VR Builder Documentation",
    "keywords": "Class SpectatorProcessController Namespace VRBuilder.UX Assembly VRBuilder.Core.dll Default process controller. public class SpectatorProcessController : BaseProcessController, IProcessController Inheritance object BaseProcessController SpectatorProcessController Implements IProcessController Inherited Members BaseProcessController.GetProcessControllerPrefab() BaseProcessController.HandlePostSetup(GameObject) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Prettified name. public override string Name { get; } Property Value string PrefabName Name of the process controller prefab. protected override string PrefabName { get; } Property Value string Priority Priority of the controller. public override int Priority { get; } Property Value int Methods GetRequiredSetupComponents() List of component types which are required on the setup object. public override List<Type> GetRequiredSetupComponents() Returns List<Type> List of component types."
  },
  "api/VRBuilder.UX.StandardProcessController.html": {
    "href": "api/VRBuilder.UX.StandardProcessController.html",
    "title": "Class StandardProcessController | VR Builder Documentation",
    "keywords": "Class StandardProcessController Namespace VRBuilder.UX Assembly VRBuilder.Core.dll Process controller for standalone devices like the Oculus Quest. public class StandardProcessController : BaseProcessController, IProcessController Inheritance object BaseProcessController StandardProcessController Implements IProcessController Inherited Members BaseProcessController.GetProcessControllerPrefab() BaseProcessController.HandlePostSetup(GameObject) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Prettified name. public override string Name { get; } Property Value string PrefabName Name of the process controller prefab. protected override string PrefabName { get; } Property Value string Priority Priority of the controller. public override int Priority { get; } Property Value int Methods GetRequiredSetupComponents() List of component types which are required on the setup object. public override List<Type> GetRequiredSetupComponents() Returns List<Type> List of component types."
  },
  "api/VRBuilder.UX.html": {
    "href": "api/VRBuilder.UX.html",
    "title": "Namespace VRBuilder.UX | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.UX Classes BaseProcessController Base process controller which instantiates a defined prefab. InitProcessOnSceneLoad Initializes the ProcessRunner with the current selected process on scene start. ProcessControllerSetup Manages the setup of the process controller and lets the developer choose the IProcessController. SpectatorCamera Spectator camera which sets its viewpoint to the one of the user. SpectatorCameraDummy Dummy object which can be used to set viewpoints into the scene. Will remove its camera component on runtime and can be used in combination with SpectatorCamera. SpectatorController Controller for a spectator to toggle UI visibility. SpectatorProcessController Default process controller. StandardProcessController Process controller for standalone devices like the Oculus Quest. Interfaces IProcessController Controller for managing the process. Can for example instantiate a controller menu and a spectator camera."
  },
  "api/VRBuilder.Unity.CoroutineDispatcher.html": {
    "href": "api/VRBuilder.Unity.CoroutineDispatcher.html",
    "title": "Class CoroutineDispatcher | VR Builder Documentation",
    "keywords": "Class CoroutineDispatcher Namespace VRBuilder.Unity Assembly VRBuilder.Core.dll Auxiliary class that allows starting UnityCoroutines from a context that is not itself a MonoBehaviour. public class CoroutineDispatcher : UnitySingleton<CoroutineDispatcher> Inheritance object Object Component Behaviour MonoBehaviour UnitySingleton<CoroutineDispatcher> CoroutineDispatcher Inherited Members UnitySingleton<CoroutineDispatcher>.Instance UnitySingleton<CoroutineDispatcher>.Awake() UnitySingleton<CoroutineDispatcher>.OnDestroy() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.Unity.SceneUtils.html": {
    "href": "api/VRBuilder.Unity.SceneUtils.html",
    "title": "Class SceneUtils | VR Builder Documentation",
    "keywords": "Class SceneUtils Namespace VRBuilder.Unity Assembly VRBuilder.Core.dll public static class SceneUtils Inheritance object SceneUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ContainsMissingScripts(GameObject) Checks whether a gameObject contains missing scripts. public static bool ContainsMissingScripts(GameObject gameObject) Parameters gameObject GameObject GameObject to check. Returns bool True, if scripts are missing. GetActiveAndInactiveComponents<T>() Get all loaded components, both active and inactive. public static IEnumerable<T> GetActiveAndInactiveComponents<T>() where T : Component Returns IEnumerable<T> Type Parameters T GetActiveAndInactiveGameObjects() Get all loaded game objects, both active and inactive. public static IEnumerable<GameObject> GetActiveAndInactiveGameObjects() Returns IEnumerable<GameObject> GetComponentInParentIncludingInactive<T>(GameObject) Returns the component of Type T in the gameObject or any of its parents, null if there isn't one. In contrast to GetComponentInParent(Type, bool) this method also includes inactive components. public static T GetComponentInParentIncludingInactive<T>(this GameObject gameObject) where T : Component Parameters gameObject GameObject Returns T Type Parameters T GetOrAddComponent<T>(GameObject) Returns an instance of the component of type T. If no instance of the component exists on the gameObject yet, a new instance will be created. Otherwise, the behaviour is identical to that of GameObject.GetComponent<T>. public static T GetOrAddComponent<T>(this GameObject gameObject) where T : Component Parameters gameObject GameObject Returns T Type Parameters T"
  },
  "api/VRBuilder.Unity.Singleton-1.html": {
    "href": "api/VRBuilder.Unity.Singleton-1.html",
    "title": "Class Singleton<T> | VR Builder Documentation",
    "keywords": "Class Singleton<T> Namespace VRBuilder.Unity Assembly VRBuilder.Core.dll public abstract class Singleton<T> where T : Singleton<T>, new() Type Parameters T Inheritance object Singleton<T> Derived TextToSpeechProviderFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance public static T Instance { get; } Property Value T"
  },
  "api/VRBuilder.Unity.UnityDebugLogErrorWriter.html": {
    "href": "api/VRBuilder.Unity.UnityDebugLogErrorWriter.html",
    "title": "Class UnityDebugLogErrorWriter | VR Builder Documentation",
    "keywords": "Class UnityDebugLogErrorWriter Namespace VRBuilder.Unity Assembly VRBuilder.Core.dll A TextWriter implementation that outputs any added text to Unity's DebugLogger public class UnityDebugLogErrorWriter : TextWriter, IDisposable, IAsyncDisposable Inheritance object MarshalByRefObject TextWriter UnityDebugLogErrorWriter Implements IDisposable IAsyncDisposable Inherited Members TextWriter.CoreNewLine TextWriter.Null TextWriter.Close() TextWriter.Dispose() TextWriter.Dispose(bool) TextWriter.FlushAsync() TextWriter.Synchronized(TextWriter) TextWriter.Write(bool) TextWriter.Write(char[]) TextWriter.Write(decimal) TextWriter.Write(double) TextWriter.Write(int) TextWriter.Write(long) TextWriter.Write(object) TextWriter.Write(float) TextWriter.Write(string, object) TextWriter.Write(string, object, object) TextWriter.Write(string, object, object, object) TextWriter.Write(string, params object[]) TextWriter.Write(uint) TextWriter.Write(ulong) TextWriter.WriteAsync(char) TextWriter.WriteAsync(char[]) TextWriter.WriteAsync(char[], int, int) TextWriter.WriteAsync(string) TextWriter.WriteLine() TextWriter.WriteLine(bool) TextWriter.WriteLine(char) TextWriter.WriteLine(char[]) TextWriter.WriteLine(char[], int, int) TextWriter.WriteLine(decimal) TextWriter.WriteLine(double) TextWriter.WriteLine(int) TextWriter.WriteLine(long) TextWriter.WriteLine(object) TextWriter.WriteLine(float) TextWriter.WriteLine(string) TextWriter.WriteLine(string, object) TextWriter.WriteLine(string, object, object) TextWriter.WriteLine(string, object, object, object) TextWriter.WriteLine(string, params object[]) TextWriter.WriteLine(uint) TextWriter.WriteLine(ulong) TextWriter.WriteLineAsync() TextWriter.WriteLineAsync(char) TextWriter.WriteLineAsync(char[]) TextWriter.WriteLineAsync(char[], int, int) TextWriter.WriteLineAsync(string) TextWriter.DisposeAsync() TextWriter.Write(ReadOnlySpan<char>) TextWriter.WriteAsync(ReadOnlyMemory<char>, CancellationToken) TextWriter.WriteLine(ReadOnlySpan<char>) TextWriter.WriteLineAsync(ReadOnlyMemory<char>, CancellationToken) TextWriter.FormatProvider TextWriter.NewLine MarshalByRefObject.CreateObjRef(Type) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Encoding public override Encoding Encoding { get; } Property Value Encoding Methods Flush() public override void Flush() Write(char) public override void Write(char value) Parameters value char Write(char[], int, int) public override void Write(char[] value, int index, int count) Parameters value char[] index int count int Write(string) public override void Write(string value) Parameters value string"
  },
  "api/VRBuilder.Unity.UnitySceneSingleton-1.html": {
    "href": "api/VRBuilder.Unity.UnitySceneSingleton-1.html",
    "title": "Class UnitySceneSingleton<T> | VR Builder Documentation",
    "keywords": "Class UnitySceneSingleton<T> Namespace VRBuilder.Unity Assembly VRBuilder.Core.dll An UnitySceneSingleton is intended to be destroyed on scene change. public abstract class UnitySceneSingleton<T> : MonoBehaviour where T : UnitySceneSingleton<T> Type Parameters T Inheritance object Object Component Behaviour MonoBehaviour UnitySceneSingleton<T> Derived InputController Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ConcreteType Concrete Implementation of the given class T, this also allows abstract classes as singletons. public static Type ConcreteType { get; } Property Value Type Exists public static bool Exists { get; } Property Value bool Instance Public accessor for the singleton object, will create a new instance if necessary. public static T Instance { get; protected set; } Property Value T Methods Awake() protected virtual void Awake() GetName() protected virtual string GetName() Returns string OnDestroy() protected virtual void OnDestroy()"
  },
  "api/VRBuilder.Unity.UnitySingleton-1.html": {
    "href": "api/VRBuilder.Unity.UnitySingleton-1.html",
    "title": "Class UnitySingleton<T> | VR Builder Documentation",
    "keywords": "Class UnitySingleton<T> Namespace VRBuilder.Unity Assembly VRBuilder.Core.dll Make sure we always have one and only one instance of this class when we need it. public class UnitySingleton<T> : MonoBehaviour where T : UnitySingleton<T> Type Parameters T Inheritance object Object Component Behaviour MonoBehaviour UnitySingleton<T> Derived CoroutineDispatcher Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Instance Public accessor for the singleton object. Will create a new instance if necessary. public static T Instance { get; protected set; } Property Value T Methods Awake() protected virtual void Awake() OnDestroy() protected virtual void OnDestroy()"
  },
  "api/VRBuilder.Unity.html": {
    "href": "api/VRBuilder.Unity.html",
    "title": "Namespace VRBuilder.Unity | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.Unity Classes CoroutineDispatcher Auxiliary class that allows starting UnityCoroutines from a context that is not itself a MonoBehaviour. SceneUtils Singleton<T> UnityDebugLogErrorWriter A TextWriter implementation that outputs any added text to Unity's DebugLogger UnitySceneSingleton<T> An UnitySceneSingleton is intended to be destroyed on scene change. UnitySingleton<T> Make sure we always have one and only one instance of this class when we need it."
  },
  "api/VRBuilder.VideoTools.Behaviors.PlayVideoBehavior.ActivatingProcess.html": {
    "href": "api/VRBuilder.VideoTools.Behaviors.PlayVideoBehavior.ActivatingProcess.html",
    "title": "Class PlayVideoBehavior.ActivatingProcess | VR Builder Documentation",
    "keywords": "Class PlayVideoBehavior.ActivatingProcess Namespace VRBuilder.VideoTools.Behaviors Assembly VRBuilder.VideoTools.dll public class PlayVideoBehavior.ActivatingProcess : StageProcess<PlayVideoBehavior.EntityData>, IStageProcess Inheritance object StageProcess<PlayVideoBehavior.EntityData> PlayVideoBehavior.ActivatingProcess Implements IStageProcess Inherited Members StageProcess<PlayVideoBehavior.EntityData>.Data StageProcess<PlayVideoBehavior.EntityData>.Outer object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ActivatingProcess(EntityData) public ActivatingProcess(PlayVideoBehavior.EntityData data) Parameters data PlayVideoBehavior.EntityData Methods End() This method is invoked immediately after the Update() was iterated over completely, or after the FastForward() was called. The invocation is guaranteed. Use it for deinitialization. public override void End() FastForward() This method is called when the process was not completed yet. It must \"fake\" normal execution of the process and handle the cases when the Update() is not iterated over completely. public override void FastForward() Start() This method is invoked immediately when entity enters the stage. The invocation is guaranteed. Use it for initialization. public override void Start() Update() This method will be iterated over while the entity is in this stage, one iteration step per frame, starting from the second frame. public override IEnumerator Update() Returns IEnumerator"
  },
  "api/VRBuilder.VideoTools.Behaviors.PlayVideoBehavior.EntityData.html": {
    "href": "api/VRBuilder.VideoTools.Behaviors.PlayVideoBehavior.EntityData.html",
    "title": "Class PlayVideoBehavior.EntityData | VR Builder Documentation",
    "keywords": "Class PlayVideoBehavior.EntityData Namespace VRBuilder.VideoTools.Behaviors Assembly VRBuilder.VideoTools.dll Entity data for PlayVideoBehavior. [DataContract(IsReference = true)] public class PlayVideoBehavior.EntityData : IBehaviorData, INamedData, IData Inheritance object PlayVideoBehavior.EntityData Implements IBehaviorData INamedData IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Metadata Reference to this object's IMetadata. [DataMember] public Metadata Metadata { get; set; } Property Value Metadata Name Name of the entity. [IgnoreDataMember] public string Name { get; } Property Value string VideoPlayer Video player which will play the video. [DataMember] [DisplayName(\"Video player\")] public ScenePropertyReference<IVideoPlayerProperty> VideoPlayer { get; set; } Property Value ScenePropertyReference<IVideoPlayerProperty> VideoSource Video asset source. First value is an asset path, second value is a URL. [DataMember] [UsesSpecificProcessDrawer(\"StringsSelectableValueDrawer\")] [DisplayName(\"Video clip\")] public VideoClipOrURLSelectableValue VideoSource { get; set; } Property Value VideoClipOrURLSelectableValue"
  },
  "api/VRBuilder.VideoTools.Behaviors.PlayVideoBehavior.html": {
    "href": "api/VRBuilder.VideoTools.Behaviors.PlayVideoBehavior.html",
    "title": "Class PlayVideoBehavior | VR Builder Documentation",
    "keywords": "Class PlayVideoBehavior Namespace VRBuilder.VideoTools.Behaviors Assembly VRBuilder.VideoTools.dll Plays a videoclip and ends when the clip is over. public class PlayVideoBehavior : Behavior<PlayVideoBehavior.EntityData>, IDataOwner<PlayVideoBehavior.EntityData>, IBehavior, IEntity, IDataOwner<IBehaviorData>, IDataOwner, IClonable<IBehavior> Inheritance object Entity<PlayVideoBehavior.EntityData> Behavior<PlayVideoBehavior.EntityData> PlayVideoBehavior Implements IDataOwner<PlayVideoBehavior.EntityData> IBehavior IEntity IDataOwner<IBehaviorData> IDataOwner IClonable<IBehavior> Inherited Members Behavior<PlayVideoBehavior.EntityData>.Clone() Entity<PlayVideoBehavior.EntityData>.Data Entity<PlayVideoBehavior.EntityData>.LifeCycle Entity<PlayVideoBehavior.EntityData>.Parent Entity<PlayVideoBehavior.EntityData>.GetActiveProcess() Entity<PlayVideoBehavior.EntityData>.GetDeactivatingProcess() Entity<PlayVideoBehavior.EntityData>.GetConfigurator() Entity<PlayVideoBehavior.EntityData>.Configure(IMode) Entity<PlayVideoBehavior.EntityData>.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayVideoBehavior() [JsonConstructor] public PlayVideoBehavior() Methods GetActivatingProcess() Returns a new instance of a process for the Activating Stage. public override IStageProcess GetActivatingProcess() Returns IStageProcess"
  },
  "api/VRBuilder.VideoTools.Behaviors.html": {
    "href": "api/VRBuilder.VideoTools.Behaviors.html",
    "title": "Namespace VRBuilder.VideoTools.Behaviors | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.VideoTools.Behaviors Classes PlayVideoBehavior Plays a videoclip and ends when the clip is over. PlayVideoBehavior.ActivatingProcess PlayVideoBehavior.EntityData Entity data for PlayVideoBehavior."
  },
  "api/VRBuilder.VideoTools.Properties.IVideoPlayerProperty.html": {
    "href": "api/VRBuilder.VideoTools.Properties.IVideoPlayerProperty.html",
    "title": "Interface IVideoPlayerProperty | VR Builder Documentation",
    "keywords": "Interface IVideoPlayerProperty Namespace VRBuilder.VideoTools.Properties Assembly VRBuilder.VideoTools.dll Property that controls a video player. public interface IVideoPlayerProperty : ISceneObjectProperty Inherited Members ISceneObjectProperty.SceneObject Properties IsPlaying True while the video is playing. bool IsPlaying { get; } Property Value bool Methods Play() Starts playback of the selected video. void Play() SetVideoResourcePath(string) Sets the source video to the specified Resources path. void SetVideoResourcePath(string path) Parameters path string SetVideoURL(string) Sets the source video to the specified URL. void SetVideoURL(string url) Parameters url string Stop() Stops playback of the currently playing video. void Stop()"
  },
  "api/VRBuilder.VideoTools.Properties.html": {
    "href": "api/VRBuilder.VideoTools.Properties.html",
    "title": "Namespace VRBuilder.VideoTools.Properties | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.VideoTools.Properties Interfaces IVideoPlayerProperty Property that controls a video player."
  },
  "api/VRBuilder.VideoTools.VideoPlayerProperty.html": {
    "href": "api/VRBuilder.VideoTools.VideoPlayerProperty.html",
    "title": "Class VideoPlayerProperty | VR Builder Documentation",
    "keywords": "Class VideoPlayerProperty Namespace VRBuilder.VideoTools Assembly VRBuilder.VideoTools.dll Property that controls a VideoPlayer. [RequireComponent(typeof(VideoPlayer))] public class VideoPlayerProperty : ProcessSceneObjectProperty, IVideoPlayerProperty, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty VideoPlayerProperty Implements IVideoPlayerProperty ISceneObjectProperty Inherited Members ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.OnEnable() ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Is360Video True if the video should be played as a 360° video. public bool Is360Video { get; set; } Property Value bool IsPlaying True while the video is playing. public bool IsPlaying { get; } Property Value bool VideoPlayer The VideoPlayer associated with this property. public VideoPlayer VideoPlayer { get; } Property Value VideoPlayer Methods Play() Starts playback of the selected video. public void Play() SetVideoResourcePath(string) Sets the source video to the specified Resources path. public void SetVideoResourcePath(string path) Parameters path string SetVideoURL(string) Sets the source video to the specified URL. public void SetVideoURL(string url) Parameters url string Stop() Stops playback of the currently playing video. public void Stop()"
  },
  "api/VRBuilder.VideoTools.html": {
    "href": "api/VRBuilder.VideoTools.html",
    "title": "Namespace VRBuilder.VideoTools | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.VideoTools Classes VideoPlayerProperty Property that controls a VideoPlayer."
  },
  "api/VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.html": {
    "href": "api/VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.html",
    "title": "Class ActionBasedControllerManager.ControllerState | VR Builder Documentation",
    "keywords": "Class ActionBasedControllerManager.ControllerState Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Use this class to create a controller state and set up its enter, update, and exit events. [Serializable] public class ActionBasedControllerManager.ControllerState Inheritance object ActionBasedControllerManager.ControllerState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ControllerState(StateID) public ControllerState(ActionBasedControllerManager.StateID defaultId = StateID.None) Parameters defaultId ActionBasedControllerManager.StateID Properties Enabled Sets the controller state to be active. For the default states, setting this value to true will automatically update their ActionBasedControllerManager.StateUpdateEvent. public bool Enabled { get; set; } Property Value bool ID Sets the identifier of the ActionBasedControllerManager.ControllerState from all the optional Controller States that the ActionBasedControllerManager holds. public ActionBasedControllerManager.StateID ID { get; set; } Property Value ActionBasedControllerManager.StateID OnEnter The ActionBasedControllerManager.StateEnterEvent that will be invoked when entering the controller state. public ActionBasedControllerManager.StateEnterEvent OnEnter { get; set; } Property Value ActionBasedControllerManager.StateEnterEvent OnExit The ActionBasedControllerManager.StateExitEvent that will be invoked when exiting the controller state. public ActionBasedControllerManager.StateExitEvent OnExit { get; set; } Property Value ActionBasedControllerManager.StateExitEvent OnUpdate The ActionBasedControllerManager.StateUpdateEvent that will be invoked when updating the controller state. public ActionBasedControllerManager.StateUpdateEvent OnUpdate { get; set; } Property Value ActionBasedControllerManager.StateUpdateEvent"
  },
  "api/VRBuilder.XRInteraction.ActionBasedControllerManager.StateEnterEvent.html": {
    "href": "api/VRBuilder.XRInteraction.ActionBasedControllerManager.StateEnterEvent.html",
    "title": "Class ActionBasedControllerManager.StateEnterEvent | VR Builder Documentation",
    "keywords": "Class ActionBasedControllerManager.StateEnterEvent Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll [Serializable] public class ActionBasedControllerManager.StateEnterEvent : UnityEvent<ActionBasedControllerManager.StateID>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<ActionBasedControllerManager.StateID> ActionBasedControllerManager.StateEnterEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<ActionBasedControllerManager.StateID>.AddListener(UnityAction<ActionBasedControllerManager.StateID>) UnityEvent<ActionBasedControllerManager.StateID>.RemoveListener(UnityAction<ActionBasedControllerManager.StateID>) UnityEvent<ActionBasedControllerManager.StateID>.FindMethod_Impl(string, Type) UnityEvent<ActionBasedControllerManager.StateID>.Invoke(ActionBasedControllerManager.StateID) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.XRInteraction.ActionBasedControllerManager.StateExitEvent.html": {
    "href": "api/VRBuilder.XRInteraction.ActionBasedControllerManager.StateExitEvent.html",
    "title": "Class ActionBasedControllerManager.StateExitEvent | VR Builder Documentation",
    "keywords": "Class ActionBasedControllerManager.StateExitEvent Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll [Serializable] public class ActionBasedControllerManager.StateExitEvent : UnityEvent<ActionBasedControllerManager.StateID>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<ActionBasedControllerManager.StateID> ActionBasedControllerManager.StateExitEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<ActionBasedControllerManager.StateID>.AddListener(UnityAction<ActionBasedControllerManager.StateID>) UnityEvent<ActionBasedControllerManager.StateID>.RemoveListener(UnityAction<ActionBasedControllerManager.StateID>) UnityEvent<ActionBasedControllerManager.StateID>.FindMethod_Impl(string, Type) UnityEvent<ActionBasedControllerManager.StateID>.Invoke(ActionBasedControllerManager.StateID) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.XRInteraction.ActionBasedControllerManager.StateID.html": {
    "href": "api/VRBuilder.XRInteraction.ActionBasedControllerManager.StateID.html",
    "title": "Enum ActionBasedControllerManager.StateID | VR Builder Documentation",
    "keywords": "Enum ActionBasedControllerManager.StateID Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Reference to an interaction state. public enum ActionBasedControllerManager.StateID Fields Interact = 3 None = 0 Select = 1 Teleport = 2 UI = 4"
  },
  "api/VRBuilder.XRInteraction.ActionBasedControllerManager.StateUpdateEvent.html": {
    "href": "api/VRBuilder.XRInteraction.ActionBasedControllerManager.StateUpdateEvent.html",
    "title": "Class ActionBasedControllerManager.StateUpdateEvent | VR Builder Documentation",
    "keywords": "Class ActionBasedControllerManager.StateUpdateEvent Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll [Serializable] public class ActionBasedControllerManager.StateUpdateEvent : UnityEvent, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent ActionBasedControllerManager.StateUpdateEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent.AddListener(UnityAction) UnityEvent.RemoveListener(UnityAction) UnityEvent.FindMethod_Impl(string, Type) UnityEvent.Invoke() UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.XRInteraction.ActionBasedControllerManager.html": {
    "href": "api/VRBuilder.XRInteraction.ActionBasedControllerManager.html",
    "title": "Class ActionBasedControllerManager | VR Builder Documentation",
    "keywords": "Class ActionBasedControllerManager Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Use this class to map input actions to each controller state (mode) and set up the transitions between controller states (modes). [AddComponentMenu(\"XR/Action Based Controller Manager\")] [DefaultExecutionOrder(10)] public class ActionBasedControllerManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ActionBasedControllerManager Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties BaseController The base controller UnityEngine.GameObject, used for changing default settings on its components during state transitions. public GameObject BaseController { get; set; } Property Value GameObject InteractState (Read Only) The default Interact state. public ActionBasedControllerManager.ControllerState InteractState { get; } Property Value ActionBasedControllerManager.ControllerState Move The reference to the action of moving the XR rig with this controller. public InputActionReference Move { get; set; } Property Value InputActionReference RotateAnchor The reference to the action of rotating the selected object of this controller. public InputActionReference RotateAnchor { get; set; } Property Value InputActionReference SelectState (Read Only) The default Select state. public ActionBasedControllerManager.ControllerState SelectState { get; } Property Value ActionBasedControllerManager.ControllerState TeleportController The teleport controller UnityEngine.GameObject, used for changing default settings on its components during state transitions. public GameObject TeleportController { get; set; } Property Value GameObject TeleportModeActivate The reference to the action of activating the teleport mode for this controller.\" public InputActionReference TeleportModeActivate { get; set; } Property Value InputActionReference TeleportModeCancel The reference to the action of canceling the teleport mode for this controller.\" public InputActionReference TeleportModeCancel { get; set; } Property Value InputActionReference TeleportState (Read Only) The default Teleport state. public ActionBasedControllerManager.ControllerState TeleportState { get; } Property Value ActionBasedControllerManager.ControllerState TranslateAnchor The reference to the action of translating the selected object of this controller. public InputActionReference TranslateAnchor { get; set; } Property Value InputActionReference Turn The reference to the action of turning the XR rig with this controller. public InputActionReference Turn { get; set; } Property Value InputActionReference UIController The UI controller UnityEngine.GameObject, used for changing default settings on its components during state transitions. public GameObject UIController { get; set; } Property Value GameObject UIModeActivate The reference to the action of activating the teleport mode for this controller.\" public InputActionReference UIModeActivate { get; set; } Property Value InputActionReference UIState (Read Only) The default Interact state. public ActionBasedControllerManager.ControllerState UIState { get; } Property Value ActionBasedControllerManager.ControllerState Methods ForceLockControllerState(StateID) Forces a transition to the desired state, bypassing the provided input actions. The controller will be locked in the specified state until manually unlocked. public void ForceLockControllerState(ActionBasedControllerManager.StateID stateID) Parameters stateID ActionBasedControllerManager.StateID ID of the state to switch to. OnDisable() protected void OnDisable() OnEnable() protected void OnEnable() Start() protected void Start() UnlockControllerState() Transitions to the default state and allows regular state switching via input actions. public void UnlockControllerState() Update() protected void Update()"
  },
  "api/VRBuilder.XRInteraction.Animation.HandAnimatorController.html": {
    "href": "api/VRBuilder.XRInteraction.Animation.HandAnimatorController.html",
    "title": "Class HandAnimatorController | VR Builder Documentation",
    "keywords": "Class HandAnimatorController Namespace VRBuilder.XRInteraction.Animation Assembly VRBuilder.XRInteraction.dll Reads values on current controller Select and Activate actions and uses them to drive hand animations. [RequireComponent(typeof(Animator))] public class HandAnimatorController : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour HandAnimatorController Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ActivateValue Current controller activate value. public float ActivateValue { get; } Property Value float IsTeleportMode True if the controller is in teleport mode. public bool IsTeleportMode { get; } Property Value bool IsUIMode True if the controller is in UI mode. public bool IsUIMode { get; } Property Value bool SelectValue Current controller select value. public float SelectValue { get; } Property Value float"
  },
  "api/VRBuilder.XRInteraction.Animation.html": {
    "href": "api/VRBuilder.XRInteraction.Animation.html",
    "title": "Namespace VRBuilder.XRInteraction.Animation | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.XRInteraction.Animation Classes HandAnimatorController Reads values on current controller Select and Activate actions and uses them to drive hand animations."
  },
  "api/VRBuilder.XRInteraction.Configuration.XRInteractionComponentConfiguration.html": {
    "href": "api/VRBuilder.XRInteraction.Configuration.XRInteractionComponentConfiguration.html",
    "title": "Class XRInteractionComponentConfiguration | VR Builder Documentation",
    "keywords": "Class XRInteractionComponentConfiguration Namespace VRBuilder.XRInteraction.Configuration Assembly VRBuilder.XRInteraction.dll Configuration for the default XR interaction component. public class XRInteractionComponentConfiguration : IInteractionComponentConfiguration Inheritance object XRInteractionComponentConfiguration Implements IInteractionComponentConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DefaultRigPrefab Name of the prefab to be spawned as user rig. public string DefaultRigPrefab { get; } Property Value string DisplayName Display name of the interaction component. public string DisplayName { get; } Property Value string IsXRInteractionComponent True if the interaction component is meant to work with XR. public bool IsXRInteractionComponent { get; } Property Value bool"
  },
  "api/VRBuilder.XRInteraction.Configuration.html": {
    "href": "api/VRBuilder.XRInteraction.Configuration.html",
    "title": "Namespace VRBuilder.XRInteraction.Configuration | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.XRInteraction.Configuration Classes XRInteractionComponentConfiguration Configuration for the default XR interaction component."
  },
  "api/VRBuilder.XRInteraction.ControllerManager.ControllerState.html": {
    "href": "api/VRBuilder.XRInteraction.ControllerManager.ControllerState.html",
    "title": "Struct ControllerManager.ControllerState | VR Builder Documentation",
    "keywords": "Struct ControllerManager.ControllerState Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Current status of a controller. there will be two instances of this (for left/right). and this allows the system to change between different states on each controller independently. public struct ControllerManager.ControllerState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods ClearAll() Exits from all states that are in the list, basically a reset. public void ClearAll() Initialize() Sets up the controller public void Initialize() IsControllerInteracting(ControllerStates) True if the interactor from given controller is either touching or grabbing an interactable. public bool IsControllerInteracting(ControllerManager.ControllerStates controller) Parameters controller ControllerManager.ControllerStates Returns bool SetGameObject(ControllerStates, GameObject) Attaches a game object that represents an interactor for a state, to a state. public void SetGameObject(ControllerManager.ControllerStates state, GameObject parentGamObject) Parameters state ControllerManager.ControllerStates The state that we're attaching the game object to parentGamObject GameObject The game object that represents the interactor for that state. SetState(ControllerStates) Attempts to set the current state of a controller. public void SetState(ControllerManager.ControllerStates nextState) Parameters nextState ControllerManager.ControllerStates The state that we wish to transition to"
  },
  "api/VRBuilder.XRInteraction.ControllerManager.ControllerStates.html": {
    "href": "api/VRBuilder.XRInteraction.ControllerManager.ControllerStates.html",
    "title": "Enum ControllerManager.ControllerStates | VR Builder Documentation",
    "keywords": "Enum ControllerManager.ControllerStates Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll public enum ControllerManager.ControllerStates Fields Interaction = 0 The Interaction state is used to interact with interactables. Max = 3 Maximum sentinel. Teleport = 1 The Teleport state is used to interact with teleport interactors and queue teleportations. UI = 2 The UI state is used to interact with Unity.UI elements."
  },
  "api/VRBuilder.XRInteraction.ControllerManager.InteractorController.html": {
    "href": "api/VRBuilder.XRInteraction.ControllerManager.InteractorController.html",
    "title": "Struct ControllerManager.InteractorController | VR Builder Documentation",
    "keywords": "Struct ControllerManager.InteractorController Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll A simple state machine which manages the three pieces of content that are used to represent a controller state within the XR Interaction Toolkit. public struct ControllerManager.InteractorController Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods Attach(GameObject) When passed a gameObject, this function will scrape the game object for all valid components that we will interact with by enabling/disabling as the state changes public void Attach(GameObject gameObject) Parameters gameObject GameObject The game object to scrape the various components from Enter() Enter this state, performs a set of changes to the associated components to enable things public void Enter() IsInteractorInteracting() True if the interactor is either touching or grabbing an interactable. public bool IsInteractorInteracting() Returns bool Leave() Leaves this state, performs a set of changes to the associate components to disable things. public void Leave()"
  },
  "api/VRBuilder.XRInteraction.ControllerManager.html": {
    "href": "api/VRBuilder.XRInteraction.ControllerManager.html",
    "title": "Class ControllerManager | VR Builder Documentation",
    "keywords": "Class ControllerManager Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Handles controller states interactions. Contains all methods for performing basic math functions. [DefaultExecutionOrder(10)] public class ControllerManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ControllerManager Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CancelTeleportButton The buttons on the controller that will trigger a transition to the Teleport Controller. public InputHelpers.Button CancelTeleportButton { get; set; } Property Value InputHelpers.Button LeftBaseController The Game Object which represents the left hand for normal interaction purposes. public GameObject LeftBaseController { get; set; } Property Value GameObject LeftTeleportController The Game Object which represents the left hand when teleporting. public GameObject LeftTeleportController { get; set; } Property Value GameObject RightBaseController The Game Object which represents the right hand for normal interaction purposes. public GameObject RightBaseController { get; set; } Property Value GameObject RightTeleportController The Game Object which represents the right hand when teleporting. public GameObject RightTeleportController { get; set; } Property Value GameObject TeleportButton The buttons on the controller that will trigger a transition to the Teleport Controller. public InputHelpers.Button TeleportButton { get; set; } Property Value InputHelpers.Button"
  },
  "api/VRBuilder.XRInteraction.DirectInteractor.html": {
    "href": "api/VRBuilder.XRInteraction.DirectInteractor.html",
    "title": "Class DirectInteractor | VR Builder Documentation",
    "keywords": "Class DirectInteractor Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Interactor used for directly interacting with interactables that are touching. This is handled via trigger volumes that update the current set of valid targets for this interactor. This component must have a collision volume that is set to be a trigger to work. public class DirectInteractor : XRDirectInteractor, IXRHoverInteractor, IXRSelectInteractor, IXRTargetPriorityInteractor, IXRGroupMember, IXRInteractionStrengthInteractor, IXRActivateInteractor, IXRInteractor Inheritance object Object Component Behaviour MonoBehaviour XRBaseInteractor XRBaseControllerInteractor XRDirectInteractor DirectInteractor Implements IXRHoverInteractor IXRSelectInteractor IXRTargetPriorityInteractor IXRGroupMember IXRInteractionStrengthInteractor IXRActivateInteractor IXRInteractor Inherited Members XRDirectInteractor.CanHover(XRBaseInteractable) XRDirectInteractor.CanSelect(XRBaseInteractable) XRDirectInteractor.improveAccuracyWithSphereCollider XRDirectInteractor.usingSphereColliderAccuracyImprovement XRDirectInteractor.physicsLayerMask XRDirectInteractor.physicsTriggerInteraction XRDirectInteractor.unsortedValidTargets XRDirectInteractor.OnEnable() XRDirectInteractor.OnDisable() XRDirectInteractor.OnTriggerEnter(Collider) XRDirectInteractor.OnTriggerStay(Collider) XRDirectInteractor.OnTriggerExit(Collider) XRDirectInteractor.PreprocessInteractor(XRInteractionUpdateOrder.UpdatePhase) XRDirectInteractor.ProcessInteractor(XRInteractionUpdateOrder.UpdatePhase) XRDirectInteractor.GetValidTargets(List<IXRInteractable>) XRDirectInteractor.CanHover(IXRHoverInteractable) XRDirectInteractor.CanSelect(IXRSelectInteractable) XRDirectInteractor.OnRegistered(InteractorRegisteredEventArgs) XRDirectInteractor.OnUnregistered(InteractorUnregisteredEventArgs) XRBaseControllerInteractor.selectActionTrigger XRBaseControllerInteractor.hideControllerOnSelect XRBaseControllerInteractor.allowHoveredActivate XRBaseControllerInteractor.targetPriorityMode XRBaseControllerInteractor.playAudioClipOnSelectEntered XRBaseControllerInteractor.audioClipForOnSelectEntered XRBaseControllerInteractor.playAudioClipOnSelectExited XRBaseControllerInteractor.audioClipForOnSelectExited XRBaseControllerInteractor.playAudioClipOnSelectCanceled XRBaseControllerInteractor.audioClipForOnSelectCanceled XRBaseControllerInteractor.playAudioClipOnHoverEntered XRBaseControllerInteractor.audioClipForOnHoverEntered XRBaseControllerInteractor.playAudioClipOnHoverExited XRBaseControllerInteractor.audioClipForOnHoverExited XRBaseControllerInteractor.playAudioClipOnHoverCanceled XRBaseControllerInteractor.audioClipForOnHoverCanceled XRBaseControllerInteractor.allowHoverAudioWhileSelecting XRBaseControllerInteractor.playHapticsOnSelectEntered XRBaseControllerInteractor.hapticSelectEnterIntensity XRBaseControllerInteractor.hapticSelectEnterDuration XRBaseControllerInteractor.playHapticsOnSelectExited XRBaseControllerInteractor.hapticSelectExitIntensity XRBaseControllerInteractor.hapticSelectExitDuration XRBaseControllerInteractor.playHapticsOnSelectCanceled XRBaseControllerInteractor.hapticSelectCancelIntensity XRBaseControllerInteractor.hapticSelectCancelDuration XRBaseControllerInteractor.playHapticsOnHoverEntered XRBaseControllerInteractor.hapticHoverEnterIntensity XRBaseControllerInteractor.hapticHoverEnterDuration XRBaseControllerInteractor.playHapticsOnHoverExited XRBaseControllerInteractor.hapticHoverExitIntensity XRBaseControllerInteractor.hapticHoverExitDuration XRBaseControllerInteractor.playHapticsOnHoverCanceled XRBaseControllerInteractor.hapticHoverCancelIntensity XRBaseControllerInteractor.hapticHoverCancelDuration XRBaseControllerInteractor.allowHoverHapticsWhileSelecting XRBaseControllerInteractor.allowActivate XRBaseControllerInteractor.xrController XRBaseControllerInteractor.isUISelectActive XRBaseControllerInteractor.uiScrollValue XRBaseControllerInteractor.shouldActivate XRBaseControllerInteractor.shouldDeactivate XRBaseControllerInteractor.GetActivateTargets(List<IXRActivateInteractable>) XRBaseControllerInteractor.OnHoverEntering(HoverEnterEventArgs) XRBaseControllerInteractor.OnHoverExiting(HoverExitEventArgs) XRBaseControllerInteractor.SendHapticImpulse(float, float) XRBaseControllerInteractor.PlayAudio(AudioClip) XRBaseControllerInteractor.playAudioClipOnSelectEnter XRBaseControllerInteractor.audioClipForOnSelectEnter XRBaseControllerInteractor.AudioClipForOnSelectEnter XRBaseControllerInteractor.playAudioClipOnSelectExit XRBaseControllerInteractor.audioClipForOnSelectExit XRBaseControllerInteractor.AudioClipForOnSelectExit XRBaseControllerInteractor.playAudioClipOnHoverEnter XRBaseControllerInteractor.audioClipForOnHoverEnter XRBaseControllerInteractor.AudioClipForOnHoverEnter XRBaseControllerInteractor.playAudioClipOnHoverExit XRBaseControllerInteractor.audioClipForOnHoverExit XRBaseControllerInteractor.AudioClipForOnHoverExit XRBaseControllerInteractor.playHapticsOnSelectEnter XRBaseControllerInteractor.playHapticsOnSelectExit XRBaseControllerInteractor.playHapticsOnHoverEnter XRBaseControllerInteractor.validTargets XRBaseInteractor.registered XRBaseInteractor.unregistered XRBaseInteractor.interactionManager XRBaseInteractor.containingGroup XRBaseInteractor.interactionLayers XRBaseInteractor.attachTransform XRBaseInteractor.keepSelectedTargetValid XRBaseInteractor.disableVisualsWhenBlockedInGroup XRBaseInteractor.startingSelectedInteractable XRBaseInteractor.startingTargetFilter XRBaseInteractor.hoverEntered XRBaseInteractor.hoverExited XRBaseInteractor.selectEntered XRBaseInteractor.selectExited XRBaseInteractor.targetFilter XRBaseInteractor.allowHover XRBaseInteractor.allowSelect XRBaseInteractor.isPerformingManualInteraction XRBaseInteractor.interactablesHovered XRBaseInteractor.hasHover XRBaseInteractor.interactablesSelected XRBaseInteractor.firstInteractableSelected XRBaseInteractor.hasSelection XRBaseInteractor.startingHoverFilters XRBaseInteractor.hoverFilters XRBaseInteractor.startingSelectFilters XRBaseInteractor.selectFilters XRBaseInteractor.largestInteractionStrength XRBaseInteractor.Reset() XRBaseInteractor.Start() XRBaseInteractor.OnDestroy() XRBaseInteractor.GetAttachTransform(IXRInteractable) XRBaseInteractor.GetAttachPoseOnSelect(IXRSelectInteractable) XRBaseInteractor.GetLocalAttachPoseOnSelect(IXRSelectInteractable) XRBaseInteractor.isHoverActive XRBaseInteractor.targetsForSelection XRBaseInteractor.IsHovering(IXRHoverInteractable) XRBaseInteractor.IsSelecting(IXRSelectInteractable) XRBaseInteractor.IsHovering(IXRInteractable) XRBaseInteractor.IsSelecting(IXRInteractable) XRBaseInteractor.selectedInteractableMovementTypeOverride XRBaseInteractor.CaptureAttachPose(IXRSelectInteractable) XRBaseInteractor.CreateAttachTransform() XRBaseInteractor.GetInteractionStrength(IXRInteractable) XRBaseInteractor.OnHoverEntered(HoverEnterEventArgs) XRBaseInteractor.OnHoverExited(HoverExitEventArgs) XRBaseInteractor.OnSelectEntered(SelectEnterEventArgs) XRBaseInteractor.OnSelectExited(SelectExitEventArgs) XRBaseInteractor.ProcessInteractionStrength(XRInteractionUpdateOrder.UpdatePhase) XRBaseInteractor.StartManualInteraction(IXRSelectInteractable) XRBaseInteractor.EndManualInteraction() XRBaseInteractor.ProcessHoverFilters(IXRHoverInteractable) XRBaseInteractor.ProcessSelectFilters(IXRSelectInteractable) XRBaseInteractor.interactionLayerMask XRBaseInteractor.enableInteractions XRBaseInteractor.onHoverEntered XRBaseInteractor.onHoverExited XRBaseInteractor.onSelectEntered XRBaseInteractor.onSelectExited XRBaseInteractor.onHoverEnter XRBaseInteractor.onHoverExit XRBaseInteractor.onSelectEnter XRBaseInteractor.onSelectExit XRBaseInteractor.OnHoverEntering(XRBaseInteractable) XRBaseInteractor.OnHoverEntered(XRBaseInteractable) XRBaseInteractor.OnHoverExiting(XRBaseInteractable) XRBaseInteractor.OnHoverExited(XRBaseInteractable) XRBaseInteractor.OnSelectEntering(XRBaseInteractable) XRBaseInteractor.OnSelectEntered(XRBaseInteractable) XRBaseInteractor.OnSelectExiting(XRBaseInteractable) XRBaseInteractor.OnSelectExited(XRBaseInteractable) XRBaseInteractor.selectTarget XRBaseInteractor.hoverTargets XRBaseInteractor.GetHoverTargets(List<XRBaseInteractable>) XRBaseInteractor.GetValidTargets(List<XRBaseInteractable>) XRBaseInteractor.requireSelectExclusive XRBaseInteractor.StartManualInteraction(XRBaseInteractable) MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Adds extra control over applicable interactions. Properties PrecisionGrab Toggles precision grab on this interactor. public bool PrecisionGrab { get; set; } Property Value bool isSelectActive Gets whether the selection state is active for this interactor. This will check if the controller has a valid selection state or whether toggle selection is currently on and active. public override bool isSelectActive { get; } Property Value bool Methods AttemptGrab() Attempts to grab an interactable hovering this interactor without needing to press the grab button on the controller. public virtual void AttemptGrab() Awake() See UnityEngine.MonoBehaviour. protected override void Awake() OnSelectEntering(SelectEnterEventArgs) This method is called by the Interaction Manager right before the Interactor first initiates selection of an Interactable in a first pass. protected override void OnSelectEntering(SelectEnterEventArgs arguments) Parameters arguments SelectEnterEventArgs Event data containing the Interactable that is being selected. Remarks arguments is only valid during this method call, do not hold a reference to it. OnSelectExiting(SelectExitEventArgs) This method is called by the Interaction Manager right before the Interactor ends selection of an Interactable in a first pass. protected override void OnSelectExiting(SelectExitEventArgs arguments) Parameters arguments SelectExitEventArgs Event data containing the Interactable that is no longer selected. Remarks arguments is only valid during this method call, do not hold a reference to it."
  },
  "api/VRBuilder.XRInteraction.InteractableHighlighter.html": {
    "href": "api/VRBuilder.XRInteraction.InteractableHighlighter.html",
    "title": "Class InteractableHighlighter | VR Builder Documentation",
    "keywords": "Class InteractableHighlighter Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Handles highlighting for attached InteractableObject. [RequireComponent(typeof(InteractableObject))] public sealed class InteractableHighlighter : DefaultHighlighter, IHighlighter Inheritance object Object Component Behaviour MonoBehaviour AbstractHighlighter DefaultHighlighter InteractableHighlighter Implements IHighlighter Inherited Members DefaultHighlighter.IsHighlighting DefaultHighlighter.StartHighlighting(Color, string) DefaultHighlighter.StartHighlighting(Material, string) DefaultHighlighter.StartHighlighting(Texture, string) DefaultHighlighter.StartHighlighting(Material) DefaultHighlighter.StopHighlighting() DefaultHighlighter.StopHighlighting(string) DefaultHighlighter.GetHighlightMaterial() DefaultHighlighter.ForceRefreshCachedRenderers() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties AllowOnGrabHighlight Determines if this InteractableObject should be highlighted when grabbed. public bool AllowOnGrabHighlight { get; set; } Property Value bool AllowOnTouchHighlight Determines if this InteractableObject should be highlighted when touched. public bool AllowOnTouchHighlight { get; set; } Property Value bool AllowOnUseHighlight Determines if this InteractableObject should be highlighted when used. public bool AllowOnUseHighlight { get; set; } Property Value bool InteractableObject Reference to the InteractableObject. public InteractableObject InteractableObject { get; } Property Value InteractableObject Methods OnDisable() protected override void OnDisable()"
  },
  "api/VRBuilder.XRInteraction.InteractableObject.html": {
    "href": "api/VRBuilder.XRInteraction.InteractableObject.html",
    "title": "Class InteractableObject | VR Builder Documentation",
    "keywords": "Class InteractableObject Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Interactable component that allows basic \"grab\" functionality. Can attach to selecting interactor and follow it around while obeying physics (and inherit velocity when released). [AddComponentMenu(\"VR Builder/Interactables/Interactable Object (VR Builder)\")] public class InteractableObject : XRGrabInteractable, IXRActivateInteractable, IXRHoverInteractable, IXRSelectInteractable, IXRFocusInteractable, IXRInteractionStrengthInteractable, IXRInteractable, IXROverridesGazeAutoSelect, IInteractableObject Inheritance object Object Component Behaviour MonoBehaviour XRBaseInteractable XRGrabInteractable InteractableObject Implements IXRActivateInteractable IXRHoverInteractable IXRSelectInteractable IXRFocusInteractable IXRInteractionStrengthInteractable IXRInteractable IXROverridesGazeAutoSelect IInteractableObject Inherited Members XRGrabInteractable.gravityOnDetach XRGrabInteractable.attachTransform XRGrabInteractable.secondaryAttachTransform XRGrabInteractable.useDynamicAttach XRGrabInteractable.matchAttachPosition XRGrabInteractable.matchAttachRotation XRGrabInteractable.snapToColliderVolume XRGrabInteractable.reinitializeDynamicAttachEverySingleGrab XRGrabInteractable.attachEaseInTime XRGrabInteractable.movementType XRGrabInteractable.velocityDamping XRGrabInteractable.velocityScale XRGrabInteractable.angularVelocityDamping XRGrabInteractable.angularVelocityScale XRGrabInteractable.trackPosition XRGrabInteractable.smoothPosition XRGrabInteractable.smoothPositionAmount XRGrabInteractable.tightenPosition XRGrabInteractable.trackRotation XRGrabInteractable.smoothRotation XRGrabInteractable.smoothRotationAmount XRGrabInteractable.tightenRotation XRGrabInteractable.trackScale XRGrabInteractable.smoothScale XRGrabInteractable.smoothScaleAmount XRGrabInteractable.tightenScale XRGrabInteractable.throwOnDetach XRGrabInteractable.throwSmoothingDuration XRGrabInteractable.throwSmoothingCurve XRGrabInteractable.throwVelocityScale XRGrabInteractable.throwAngularVelocityScale XRGrabInteractable.forceGravityOnDetach XRGrabInteractable.retainTransformParent XRGrabInteractable.attachPointCompatibilityMode XRGrabInteractable.startingSingleGrabTransformers XRGrabInteractable.startingMultipleGrabTransformers XRGrabInteractable.addDefaultGrabTransformers XRGrabInteractable.singleGrabTransformersCount XRGrabInteractable.multipleGrabTransformersCount XRGrabInteractable.OnDestroy() XRGrabInteractable.ProcessInteractable(XRInteractionUpdateOrder.UpdatePhase) XRGrabInteractable.GetAttachTransform(IXRInteractor) XRGrabInteractable.AddSingleGrabTransformer(IXRGrabTransformer) XRGrabInteractable.AddMultipleGrabTransformer(IXRGrabTransformer) XRGrabInteractable.RemoveSingleGrabTransformer(IXRGrabTransformer) XRGrabInteractable.RemoveMultipleGrabTransformer(IXRGrabTransformer) XRGrabInteractable.ClearSingleGrabTransformers() XRGrabInteractable.ClearMultipleGrabTransformers() XRGrabInteractable.GetSingleGrabTransformers(List<IXRGrabTransformer>) XRGrabInteractable.GetMultipleGrabTransformers(List<IXRGrabTransformer>) XRGrabInteractable.GetSingleGrabTransformerAt(int) XRGrabInteractable.GetMultipleGrabTransformerAt(int) XRGrabInteractable.MoveSingleGrabTransformerTo(IXRGrabTransformer, int) XRGrabInteractable.MoveMultipleGrabTransformerTo(IXRGrabTransformer, int) XRGrabInteractable.GetTargetPose() XRGrabInteractable.SetTargetPose(Pose) XRGrabInteractable.GetTargetLocalScale() XRGrabInteractable.SetTargetLocalScale(Vector3) XRGrabInteractable.AddDefaultSingleGrabTransformer() XRGrabInteractable.AddDefaultMultipleGrabTransformer() XRGrabInteractable.OnSelectExited(SelectExitEventArgs) XRGrabInteractable.ShouldMatchAttachPosition(IXRSelectInteractor) XRGrabInteractable.ShouldMatchAttachRotation(IXRSelectInteractor) XRGrabInteractable.ShouldSnapToColliderVolume(IXRSelectInteractor) XRGrabInteractable.InitializeDynamicAttachPose(IXRSelectInteractor, Transform) XRGrabInteractable.Grab() XRGrabInteractable.Drop() XRGrabInteractable.Detach() XRGrabInteractable.SetupRigidbodyGrab(Rigidbody) XRGrabInteractable.SetupRigidbodyDrop(Rigidbody) XRBaseInteractable.interactionLayerMask XRBaseInteractable.onFirstHoverEntered XRBaseInteractable.onLastHoverExited XRBaseInteractable.onHoverEntered XRBaseInteractable.onHoverExited XRBaseInteractable.onSelectEntered XRBaseInteractable.onSelectExited XRBaseInteractable.onSelectCanceled XRBaseInteractable.onActivate XRBaseInteractable.onDeactivate XRBaseInteractable.onFirstHoverEnter XRBaseInteractable.onHoverEnter XRBaseInteractable.onHoverExit XRBaseInteractable.onLastHoverExit XRBaseInteractable.onSelectEnter XRBaseInteractable.onSelectExit XRBaseInteractable.onSelectCancel XRBaseInteractable.OnHoverEntering(XRBaseInteractor) XRBaseInteractable.OnHoverEntered(XRBaseInteractor) XRBaseInteractable.OnHoverExiting(XRBaseInteractor) XRBaseInteractable.OnHoverExited(XRBaseInteractor) XRBaseInteractable.OnSelectEntering(XRBaseInteractor) XRBaseInteractable.OnSelectEntered(XRBaseInteractor) XRBaseInteractable.OnSelectExiting(XRBaseInteractor) XRBaseInteractable.OnSelectExited(XRBaseInteractor) XRBaseInteractable.OnSelectCanceling(XRBaseInteractor) XRBaseInteractable.OnSelectCanceled(XRBaseInteractor) XRBaseInteractable.OnActivate(XRBaseInteractor) XRBaseInteractable.OnDeactivate(XRBaseInteractor) XRBaseInteractable.GetDistanceSqrToInteractor(XRBaseInteractor) XRBaseInteractable.AttachCustomReticle(XRBaseInteractor) XRBaseInteractable.RemoveCustomReticle(XRBaseInteractor) XRBaseInteractable.hoveringInteractors XRBaseInteractable.selectingInteractor XRBaseInteractable.IsHoverableBy(XRBaseInteractor) XRBaseInteractable.IsSelectableBy(XRBaseInteractor) XRBaseInteractable.registered XRBaseInteractable.unregistered XRBaseInteractable.getDistanceOverride XRBaseInteractable.interactionManager XRBaseInteractable.colliders XRBaseInteractable.interactionLayers XRBaseInteractable.distanceCalculationMode XRBaseInteractable.selectMode XRBaseInteractable.focusMode XRBaseInteractable.customReticle XRBaseInteractable.allowGazeInteraction XRBaseInteractable.allowGazeSelect XRBaseInteractable.overrideGazeTimeToSelect XRBaseInteractable.gazeTimeToSelect XRBaseInteractable.overrideTimeToAutoDeselectGaze XRBaseInteractable.timeToAutoDeselectGaze XRBaseInteractable.allowGazeAssistance XRBaseInteractable.firstHoverEntered XRBaseInteractable.lastHoverExited XRBaseInteractable.hoverEntered XRBaseInteractable.hoverExited XRBaseInteractable.firstSelectEntered XRBaseInteractable.lastSelectExited XRBaseInteractable.selectEntered XRBaseInteractable.selectExited XRBaseInteractable.firstFocusEntered XRBaseInteractable.lastFocusExited XRBaseInteractable.focusEntered XRBaseInteractable.focusExited XRBaseInteractable.activated XRBaseInteractable.deactivated XRBaseInteractable.interactorsHovering XRBaseInteractable.isHovered XRBaseInteractable.interactorsSelecting XRBaseInteractable.firstInteractorSelecting XRBaseInteractable.isSelected XRBaseInteractable.interactionGroupsFocusing XRBaseInteractable.firstInteractionGroupFocusing XRBaseInteractable.isFocused XRBaseInteractable.canFocus XRBaseInteractable.startingHoverFilters XRBaseInteractable.hoverFilters XRBaseInteractable.startingSelectFilters XRBaseInteractable.selectFilters XRBaseInteractable.startingInteractionStrengthFilters XRBaseInteractable.interactionStrengthFilters XRBaseInteractable.largestInteractionStrength XRBaseInteractable.OnEnable() XRBaseInteractable.OnDisable() XRBaseInteractable.GetAttachPoseOnSelect(IXRSelectInteractor) XRBaseInteractable.GetLocalAttachPoseOnSelect(IXRSelectInteractor) XRBaseInteractable.GetDistanceSqrToInteractor(IXRInteractor) XRBaseInteractable.GetDistance(Vector3) XRBaseInteractable.GetInteractionStrength(IXRInteractor) XRBaseInteractable.IsHovered(IXRHoverInteractor) XRBaseInteractable.IsSelected(IXRSelectInteractor) XRBaseInteractable.IsHovered(IXRInteractor) XRBaseInteractable.IsSelected(IXRInteractor) XRBaseInteractable.GetCustomReticle(IXRInteractor) XRBaseInteractable.AttachCustomReticle(IXRInteractor) XRBaseInteractable.RemoveCustomReticle(IXRInteractor) XRBaseInteractable.CaptureAttachPose(IXRSelectInteractor) XRBaseInteractable.OnRegistered(InteractableRegisteredEventArgs) XRBaseInteractable.OnUnregistered(InteractableUnregisteredEventArgs) XRBaseInteractable.OnHoverEntering(HoverEnterEventArgs) XRBaseInteractable.OnHoverEntered(HoverEnterEventArgs) XRBaseInteractable.OnHoverExiting(HoverExitEventArgs) XRBaseInteractable.OnHoverExited(HoverExitEventArgs) XRBaseInteractable.OnSelectEntered(SelectEnterEventArgs) XRBaseInteractable.OnFocusEntering(FocusEnterEventArgs) XRBaseInteractable.OnFocusEntered(FocusEnterEventArgs) XRBaseInteractable.OnFocusExiting(FocusExitEventArgs) XRBaseInteractable.OnFocusExited(FocusExitEventArgs) XRBaseInteractable.ProcessInteractionStrength(XRInteractionUpdateOrder.UpdatePhase) XRBaseInteractable.ProcessHoverFilters(IXRHoverInteractor) XRBaseInteractable.ProcessSelectFilters(IXRSelectInteractor) XRBaseInteractable.ProcessInteractionStrengthFilters(IXRInteractor, float) MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Adds extra control over applicable interactions. Properties GameObject GameObject this interactable object is attached to. public GameObject GameObject { get; } Property Value GameObject IsActivated Gets whether this InteractableObject is currently being activated. public bool IsActivated { get; } Property Value bool IsGrabbable Determines if this InteractableObject can be grabbed. public bool IsGrabbable { set; } Property Value bool IsInSocket Gets whether this InteractableObject is currently being selected by any 'XRSocketInteractor'. public bool IsInSocket { get; } Property Value bool IsTouchable Determines if this InteractableObject can be touched. public bool IsTouchable { set; } Property Value bool IsUsable Determines if this InteractableObject can be used. public bool IsUsable { set; } Property Value bool Rigidbody This interactable's rigidbody. public Rigidbody Rigidbody { get; } Property Value Rigidbody SelectingSocket Get the current selecting 'XRSocketInteractor' for this InteractableObject. public XRSocketInteractor SelectingSocket { get; } Property Value XRSocketInteractor Methods Awake() See UnityEngine.MonoBehaviour. protected override void Awake() ForceStopInteracting() Forces all hovering and selecting interactors to not have interactions with this InteractableObject for one frame. public virtual void ForceStopInteracting() Remarks Interactions are not disabled immediately. ForceUse() Attempts to use this InteractableObject. public virtual void ForceUse() IsHoverableBy(IXRHoverInteractor) Determines if this InteractableObject can be hovered by a given interactor. public override bool IsHoverableBy(IXRHoverInteractor interactor) Parameters interactor IXRHoverInteractor Interactor to check for a valid hover state with. Returns bool True if hovering is valid this frame, False if not. Remarks It always returns false when IsTouchable is false. IsSelectableBy(IXRSelectInteractor) Determines if this InteractableObject can be selected by a given interactor. public override bool IsSelectableBy(IXRSelectInteractor interactor) Parameters interactor IXRSelectInteractor Interactor to check for a valid selection with. Returns bool True if selection is valid this frame, False if not. Remarks It always returns false when IsGrabbable is false. OnActivated(ActivateEventArgs) This method is called by the UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor when the Interactor begins an activation event on this selected Interactable. protected override void OnActivated(ActivateEventArgs arguments) Parameters arguments ActivateEventArgs Event data containing the Interactor that is sending the activate event. Remarks arguments is only valid during this method call, do not hold a reference to it. See Also OnDeactivated(DeactivateEventArgs) OnDeactivated(DeactivateEventArgs) This method is called by the UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor when the Interactor ends an activation event on this selected Interactable. protected override void OnDeactivated(DeactivateEventArgs arguments) Parameters arguments DeactivateEventArgs Event data containing the Interactor that is sending the deactivate event. Remarks arguments is only valid during this method call, do not hold a reference to it. See Also OnActivated(ActivateEventArgs) OnSelectEntering(SelectEnterEventArgs) This method is called by the Interaction Manager right before the Interactor first initiates selection of an Interactable in a first pass. protected override void OnSelectEntering(SelectEnterEventArgs arguments) Parameters arguments SelectEnterEventArgs Event data containing the Interactor that is initiating the selection. Remarks arguments is only valid during this method call, do not hold a reference to it. OnSelectExiting(SelectExitEventArgs) This method is called by the Interaction Manager right before the Interactor ends selection of an Interactable in a first pass. protected override void OnSelectExiting(SelectExitEventArgs arguments) Parameters arguments SelectExitEventArgs Event data containing the Interactor that is ending the selection. Remarks arguments is only valid during this method call, do not hold a reference to it. Reset() Reset to default values. protected override void Reset()"
  },
  "api/VRBuilder.XRInteraction.LocomotionSchemeManager.MoveForwardSourceType.html": {
    "href": "api/VRBuilder.XRInteraction.LocomotionSchemeManager.MoveForwardSourceType.html",
    "title": "Enum LocomotionSchemeManager.MoveForwardSourceType | VR Builder Documentation",
    "keywords": "Enum LocomotionSchemeManager.MoveForwardSourceType Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Sets which orientation the forward direction of continuous movement is relative to. public enum LocomotionSchemeManager.MoveForwardSourceType Fields Head = 0 Use to continuously move in a direction based on the head orientation. LeftHand = 1 Use to continuously move in a direction based on the left hand orientation. RightHand = 2 Use to continuously move in a direction based on the right hand orientation. See Also moveForwardSource forwardSource"
  },
  "api/VRBuilder.XRInteraction.LocomotionSchemeManager.MoveSchemeType.html": {
    "href": "api/VRBuilder.XRInteraction.LocomotionSchemeManager.MoveSchemeType.html",
    "title": "Enum LocomotionSchemeManager.MoveSchemeType | VR Builder Documentation",
    "keywords": "Enum LocomotionSchemeManager.MoveSchemeType Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Sets which movement control scheme to use. public enum LocomotionSchemeManager.MoveSchemeType Fields Continuous = 1 Use continuous movement control scheme. Noncontinuous = 0 Use noncontinuous movement control scheme. See Also moveScheme"
  },
  "api/VRBuilder.XRInteraction.LocomotionSchemeManager.TurnStyleType.html": {
    "href": "api/VRBuilder.XRInteraction.LocomotionSchemeManager.TurnStyleType.html",
    "title": "Enum LocomotionSchemeManager.TurnStyleType | VR Builder Documentation",
    "keywords": "Enum LocomotionSchemeManager.TurnStyleType Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Sets which turn style of locomotion to use. public enum LocomotionSchemeManager.TurnStyleType Fields Continuous = 1 Use continuous turning to smoothly rotate the direction you are facing by a specified speed. Snap = 0 Use snap turning to rotate the direction you are facing by snapping by a specified angle. See Also turnStyle"
  },
  "api/VRBuilder.XRInteraction.LocomotionSchemeManager.html": {
    "href": "api/VRBuilder.XRInteraction.LocomotionSchemeManager.html",
    "title": "Class LocomotionSchemeManager | VR Builder Documentation",
    "keywords": "Class LocomotionSchemeManager Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Use this class as a central manager to configure locomotion control schemes and configuration preferences. public class LocomotionSchemeManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour LocomotionSchemeManager Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Input bindings will often overlap between different locomotion methods, and this class can be used to set binding masks which are used to determine which bindings of an action to enable and which to ignore. Teleport (Input Action) (1) Binding <XRController>{LeftHand}/PrimaryButton (Use in control scheme \"Generic XR\") (2) Binding <XRController>{LeftHand}/Primary2DAxis (Use in control scheme \"Noncontinuous Move\") Move (Input Action) (3) Binding <XRController>{LeftHand}/Primary2DAxis (Use in control scheme \"Continuous Move\") Set baseControlScheme=\"Generic XR\" Set noncontinuousControlScheme=\"Noncontinuous Move\" Set continuousControlScheme=\"Continuous Move\" Set actions to be both input actions (Teleport and Move). When moveScheme=Noncontinuous, bindings (1) and (2) will be enabled, but binding (3) will be disabled. When moveScheme=Continuous, bindings (1) and (3) will be enabled, but binding (2) will be disabled. Properties ActionAssets Input action assets associated with locomotion to affect when the active movement control scheme is set. Can use this list by itself or together with the Action Maps list to set control scheme masks by Asset or Map. public List<InputActionAsset> ActionAssets { get; set; } Property Value List<InputActionAsset> See Also actionMaps ActionMaps Input action maps associated with locomotion to affect when the active movement control scheme is set. Can use this list together with the Action Assets list to set control scheme masks by Map instead of the whole Asset. public List<string> ActionMaps { get; set; } Property Value List<string> See Also actionAssets Actions Input actions associated with locomotion that are affected by the active movement control scheme. Can use this list to select exactly the actions to affect instead of setting control scheme masks by Asset or Map. public List<InputActionReference> Actions { get; set; } Property Value List<InputActionReference> See Also actionAssets actionMaps BaseControlScheme Name of an input control scheme that defines the grouping of bindings that should remain enabled when applying any movement control scheme. Control schemes are created and named in the Input Actions window. The other movement control schemes are applied additively to this scheme. Can be an empty string, which means only bindings that match the specified movement control scheme will be enabled. public string BaseControlScheme { get; set; } Property Value string ContinuousControlScheme Name of an input control scheme that defines the grouping of bindings that should remain enabled when applying the continuous movement control scheme. Control schemes are created and named in the Input Actions window. Can be an empty string, which means only bindings that match the base control scheme will be enabled. public string ContinuousControlScheme { get; set; } Property Value string ContinuousMoveProvider Stores the locomotion provider for continuous movement. public ContinuousMoveProviderBase ContinuousMoveProvider { get; set; } Property Value ContinuousMoveProviderBase See Also ContinuousMoveProviderBase ContinuousTurnProvider Stores the locomotion provider for continuous turning. public ContinuousTurnProviderBase ContinuousTurnProvider { get; set; } Property Value ContinuousTurnProviderBase See Also ContinuousTurnProviderBase HeadForwardSource Stores the \"Head\" UnityEngine.Transform used with continuous movement when inputs should be relative to head orientation (usually the main camera). public Transform HeadForwardSource { get; set; } Property Value Transform LeftHandForwardSource Stores the \"Left Hand\" UnityEngine.Transform used with continuous movement when inputs should be relative to the left hand's orientation. public Transform LeftHandForwardSource { get; set; } Property Value Transform MoveForwardSource Controls which orientation the forward direction of continuous movement is relative to. public LocomotionSchemeManager.MoveForwardSourceType MoveForwardSource { get; set; } Property Value LocomotionSchemeManager.MoveForwardSourceType See Also LocomotionSchemeManager.MoveForwardSourceType MoveScheme Controls which movement control scheme to use. public LocomotionSchemeManager.MoveSchemeType MoveScheme { get; set; } Property Value LocomotionSchemeManager.MoveSchemeType See Also LocomotionSchemeManager.MoveSchemeType NoncontinuousControlScheme Name of an input control scheme that defines the grouping of bindings that should remain enabled when applying the noncontinuous movement control scheme. Control schemes are created and named in the Input Actions window. Can be an empty string, which means only bindings that match the base control scheme will be enabled. public string NoncontinuousControlScheme { get; set; } Property Value string RightHandForwardSource Stores the \"Right Hand\" UnityEngine.Transform used with continuous movement when inputs should be relative to the right hand's orientation. public Transform RightHandForwardSource { get; set; } Property Value Transform SnapTurnProvider Stores the locomotion provider for snap turning. public SnapTurnProviderBase SnapTurnProvider { get; set; } Property Value SnapTurnProviderBase See Also SnapTurnProviderBase TurnStyle Controls which turn style of locomotion to use. public LocomotionSchemeManager.TurnStyleType TurnStyle { get; set; } Property Value LocomotionSchemeManager.TurnStyleType See Also LocomotionSchemeManager.TurnStyleType"
  },
  "api/VRBuilder.XRInteraction.Properties.GrabbableProperty.html": {
    "href": "api/VRBuilder.XRInteraction.Properties.GrabbableProperty.html",
    "title": "Class GrabbableProperty | VR Builder Documentation",
    "keywords": "Class GrabbableProperty Namespace VRBuilder.XRInteraction.Properties Assembly VRBuilder.XRInteraction.dll XR implementation of IGrabbableProperty. [RequireComponent(typeof(TouchableProperty))] public class GrabbableProperty : LockableProperty, IGrabbableProperty, ISceneObjectProperty, ILockable Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty LockableProperty GrabbableProperty Implements IGrabbableProperty ISceneObjectProperty ILockable Inherited Members LockableProperty.Locked LockableProperty.Unlocked LockableProperty.LockOnParentObjectLock LockableProperty.IsLocked LockableProperty.EndStepLocked LockableProperty.SetLocked(bool) LockableProperty.RequestLocked(bool, IStepData) LockableProperty.RemoveUnlocker(IStepData) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties GrabEnded Called when ungrabbed. public UnityEvent<GrabbablePropertyEventArgs> GrabEnded { get; } Property Value UnityEvent<GrabbablePropertyEventArgs> GrabStarted Called when grabbed. public UnityEvent<GrabbablePropertyEventArgs> GrabStarted { get; } Property Value UnityEvent<GrabbablePropertyEventArgs> Interactable Reference to attached InteractableObject. protected InteractableObject Interactable { get; } Property Value InteractableObject IsGrabbed Returns true if the Interactable of this property is grabbed. public virtual bool IsGrabbed { get; protected set; } Property Value bool Methods EmitGrabbed() protected void EmitGrabbed() EmitUngrabbed() protected void EmitUngrabbed() FastForwardGrab() Instantaneously simulate that the object was grabbed. public void FastForwardGrab() FastForwardUngrab() Instantaneously simulate that the object was ungrabbed. public void FastForwardUngrab() ForceSetGrabbed(bool) Force this property to a specified grabbed state. public void ForceSetGrabbed(bool isGrabbed) Parameters isGrabbed bool InternalSetLocked(bool) Handle your internal locking affairs here. protected override void InternalSetLocked(bool lockState) Parameters lockState bool OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() Reset() protected override void Reset()"
  },
  "api/VRBuilder.XRInteraction.Properties.HighlightProperty.html": {
    "href": "api/VRBuilder.XRInteraction.Properties.HighlightProperty.html",
    "title": "Class HighlightProperty | VR Builder Documentation",
    "keywords": "Class HighlightProperty Namespace VRBuilder.XRInteraction.Properties Assembly VRBuilder.XRInteraction.dll Highlight property which enables an attached InteractableObject. public class HighlightProperty : BaseHighlightProperty, IHighlightProperty, ISceneObjectProperty Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty BaseHighlightProperty HighlightProperty Implements IHighlightProperty ISceneObjectProperty Inherited Members BaseHighlightProperty.IsHighlighted BaseHighlightProperty.HighlightStarted BaseHighlightProperty.HighlightEnded BaseHighlightProperty.EmitHighlightEvent(HighlightPropertyEventArgs) BaseHighlightProperty.EmitUnhighlightEvent(HighlightPropertyEventArgs) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields DefaultHighlighter The DefaultHighlighter which is used to highlight the ProcessSceneObject. protected DefaultHighlighter DefaultHighlighter Field Value DefaultHighlighter Properties CurrentHighlightColor Returns the highlight color, if the object is currently highlighted. Returns null, otherwise. public Color? CurrentHighlightColor { get; protected set; } Property Value Color? Methods Highlight(Color) Highlight this object and use highlightColor. public override void Highlight(Color highlightColor) Parameters highlightColor Color Color to use for highlighting. Initialize() protected void Initialize() OnEnable() protected override void OnEnable() Reset() protected override void Reset() Unhighlight() Disable highlight. public override void Unhighlight()"
  },
  "api/VRBuilder.XRInteraction.Properties.SnapZoneProperty.html": {
    "href": "api/VRBuilder.XRInteraction.Properties.SnapZoneProperty.html",
    "title": "Class SnapZoneProperty | VR Builder Documentation",
    "keywords": "Class SnapZoneProperty Namespace VRBuilder.XRInteraction.Properties Assembly VRBuilder.XRInteraction.dll XR implementation of ISnapZoneProperty. [RequireComponent(typeof(SnapZone))] public class SnapZoneProperty : LockableProperty, ISnapZoneProperty, ISceneObjectProperty, ILockable Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty LockableProperty SnapZoneProperty Implements ISnapZoneProperty ISceneObjectProperty ILockable Inherited Members LockableProperty.Locked LockableProperty.Unlocked LockableProperty.LockOnParentObjectLock LockableProperty.IsLocked LockableProperty.EndStepLocked LockableProperty.SetLocked(bool) LockableProperty.RequestLocked(bool, IStepData) LockableProperty.RemoveUnlocker(IStepData) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties HighlightMaterial public ModeParameter<Material> HighlightMaterial { get; } Property Value ModeParameter<Material> IsObjectSnapped Currently has an object snapped into this snap zone. public bool IsObjectSnapped { get; } Property Value bool IsShowingHighlightObject public ModeParameter<bool> IsShowingHighlightObject { get; } Property Value ModeParameter<bool> IsShowingHoverMeshes public ModeParameter<bool> IsShowingHoverMeshes { get; } Property Value ModeParameter<bool> LockOnUnsnap If true, the snap zone locks as soon as an object is unsnapped. public bool LockOnUnsnap { get; set; } Property Value bool ObjectAttached Called when an object is snapped to the snap zone. public UnityEvent<SnapZonePropertyEventArgs> ObjectAttached { get; } Property Value UnityEvent<SnapZonePropertyEventArgs> ObjectDetached Called when an object is unsnapped from the snap zone. public UnityEvent<SnapZonePropertyEventArgs> ObjectDetached { get; } Property Value UnityEvent<SnapZonePropertyEventArgs> SnapZone Returns the SnapZone component. public SnapZone SnapZone { get; } Property Value SnapZone SnapZoneObject Snap zone object. public GameObject SnapZoneObject { get; } Property Value GameObject SnappedObject Object which is snapped into this snap zone. public ISnappableProperty SnappedObject { get; set; } Property Value ISnappableProperty Methods Configure(IMode) Configure snap zone properties according to the provided mode. public void Configure(IMode mode) Parameters mode IMode The current mode with the parameters to be changed. EmitSnapped() Invokes the EmitSnapped() event. protected void EmitSnapped() EmitUnsnapped() Invokes the EmitUnsnapped() event. protected void EmitUnsnapped() InternalSetLocked(bool) Locks or unlocks the snap zone according to the provided lockState. protected override void InternalSetLocked(bool lockState) Parameters lockState bool OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable()"
  },
  "api/VRBuilder.XRInteraction.Properties.SnappableProperty.html": {
    "href": "api/VRBuilder.XRInteraction.Properties.SnappableProperty.html",
    "title": "Class SnappableProperty | VR Builder Documentation",
    "keywords": "Class SnappableProperty Namespace VRBuilder.XRInteraction.Properties Assembly VRBuilder.XRInteraction.dll XR implementation of ISnappableProperty. [RequireComponent(typeof(GrabbableProperty))] public class SnappableProperty : LockableProperty, ISnappableProperty, ISceneObjectProperty, ILockable Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty LockableProperty SnappableProperty Implements ISnappableProperty ISceneObjectProperty ILockable Inherited Members LockableProperty.Locked LockableProperty.Unlocked LockableProperty.LockOnParentObjectLock LockableProperty.IsLocked LockableProperty.EndStepLocked LockableProperty.SetLocked(bool) LockableProperty.RequestLocked(bool, IStepData) LockableProperty.RemoveUnlocker(IStepData) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.Reset() ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties AttachedToSnapZone Called when the object is snapped to a snap zone. public UnityEvent<SnappablePropertyEventArgs> AttachedToSnapZone { get; } Property Value UnityEvent<SnappablePropertyEventArgs> DetachedFromSnapZone Called when the object is unsnapped from a snap zone. public UnityEvent<SnappablePropertyEventArgs> DetachedFromSnapZone { get; } Property Value UnityEvent<SnappablePropertyEventArgs> Interactable Reference to attached InteractableObject. public XRBaseInteractable Interactable { get; } Property Value XRBaseInteractable IsSnapped Returns true if the snappable object is snapped. public bool IsSnapped { get; } Property Value bool LockObjectOnSnap Will object be locked when it has been snapped. public bool LockObjectOnSnap { get; set; } Property Value bool SnappedZone Will return the SnapZoneProperty of the SnapZone which snapped this object. public ISnapZoneProperty SnappedZone { get; set; } Property Value ISnapZoneProperty Methods EmitSnapped(ISnapZoneProperty) Invokes the EmitSnapped(ISnapZoneProperty) event. protected void EmitSnapped(ISnapZoneProperty snapZone) Parameters snapZone ISnapZoneProperty EmitUnsnapped(ISnapZoneProperty) Invokes the EmitUnsnapped(ISnapZoneProperty) event. protected void EmitUnsnapped(ISnapZoneProperty snapZone) Parameters snapZone ISnapZoneProperty FastForwardSnapInto(ISnapZoneProperty) Instantaneously snap the object into snapZone public void FastForwardSnapInto(ISnapZoneProperty snapZone) Parameters snapZone ISnapZoneProperty InternalSetLocked(bool) Handle your internal locking affairs here. protected override void InternalSetLocked(bool lockState) Parameters lockState bool OnDisable() protected virtual void OnDisable() OnEnable() protected virtual void OnEnable()"
  },
  "api/VRBuilder.XRInteraction.Properties.TouchableProperty.html": {
    "href": "api/VRBuilder.XRInteraction.Properties.TouchableProperty.html",
    "title": "Class TouchableProperty | VR Builder Documentation",
    "keywords": "Class TouchableProperty Namespace VRBuilder.XRInteraction.Properties Assembly VRBuilder.XRInteraction.dll XR implementation of ITouchableProperty. [RequireComponent(typeof(InteractableObject))] public class TouchableProperty : LockableProperty, ITouchableProperty, ISceneObjectProperty, ILockable Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty LockableProperty TouchableProperty Implements ITouchableProperty ISceneObjectProperty ILockable Inherited Members LockableProperty.Locked LockableProperty.Unlocked LockableProperty.LockOnParentObjectLock LockableProperty.IsLocked LockableProperty.EndStepLocked LockableProperty.SetLocked(bool) LockableProperty.RequestLocked(bool, IStepData) LockableProperty.RemoveUnlocker(IStepData) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Interactable Reference to attached InteractableObject. protected InteractableObject Interactable { get; } Property Value InteractableObject IsBeingTouched Returns true if the GameObject is touched. public virtual bool IsBeingTouched { get; protected set; } Property Value bool TouchEnded Called when stopped touching. public UnityEvent<TouchablePropertyEventArgs> TouchEnded { get; } Property Value UnityEvent<TouchablePropertyEventArgs> TouchStarted Called when touched. public UnityEvent<TouchablePropertyEventArgs> TouchStarted { get; } Property Value UnityEvent<TouchablePropertyEventArgs> Methods EmitTouched() protected void EmitTouched() EmitUntouched() protected void EmitUntouched() FastForwardTouch() Instantaneously simulate that the object was touched. public void FastForwardTouch() ForceSetTouched(bool) Force this property to a specified touched state. public void ForceSetTouched(bool isTouched) Parameters isTouched bool InternalSetLocked(bool) Handle your internal locking affairs here. protected override void InternalSetLocked(bool lockState) Parameters lockState bool OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() Reset() protected override void Reset()"
  },
  "api/VRBuilder.XRInteraction.Properties.UsableProperty.html": {
    "href": "api/VRBuilder.XRInteraction.Properties.UsableProperty.html",
    "title": "Class UsableProperty | VR Builder Documentation",
    "keywords": "Class UsableProperty Namespace VRBuilder.XRInteraction.Properties Assembly VRBuilder.XRInteraction.dll XR implementation of IUsableProperty. [RequireComponent(typeof(GrabbableProperty))] public class UsableProperty : LockableProperty, IUsableProperty, ISceneObjectProperty, ILockable Inheritance object Object Component Behaviour MonoBehaviour ProcessSceneObjectProperty LockableProperty UsableProperty Implements IUsableProperty ISceneObjectProperty ILockable Inherited Members LockableProperty.Locked LockableProperty.Unlocked LockableProperty.LockOnParentObjectLock LockableProperty.IsLocked LockableProperty.EndStepLocked LockableProperty.SetLocked(bool) LockableProperty.RequestLocked(bool, IStepData) LockableProperty.RemoveUnlocker(IStepData) ProcessSceneObjectProperty.SceneObject ProcessSceneObjectProperty.ToString() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Interactable Reference to attached InteractableObject. protected InteractableObject Interactable { get; } Property Value InteractableObject IsBeingUsed Returns true if the GameObject is being used. public virtual bool IsBeingUsed { get; protected set; } Property Value bool UseEnded Called when object use has ended. public UnityEvent<UsablePropertyEventArgs> UseEnded { get; } Property Value UnityEvent<UsablePropertyEventArgs> UseStarted Called when the object is used. public UnityEvent<UsablePropertyEventArgs> UseStarted { get; } Property Value UnityEvent<UsablePropertyEventArgs> Methods EmitUsageStarted() protected void EmitUsageStarted() EmitUsageStopped() protected void EmitUsageStopped() FastForwardUse() Instantaneously simulate that the object was used. public void FastForwardUse() ForceSetUsed(bool) Force this property to a specified use state. public void ForceSetUsed(bool isUsed) Parameters isUsed bool InternalSetLocked(bool) Handle your internal locking affairs here. protected override void InternalSetLocked(bool lockState) Parameters lockState bool OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() Reset() protected override void Reset()"
  },
  "api/VRBuilder.XRInteraction.Properties.html": {
    "href": "api/VRBuilder.XRInteraction.Properties.html",
    "title": "Namespace VRBuilder.XRInteraction.Properties | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.XRInteraction.Properties Classes GrabbableProperty XR implementation of IGrabbableProperty. HighlightProperty Highlight property which enables an attached InteractableObject. SnapZoneProperty XR implementation of ISnapZoneProperty. SnappableProperty XR implementation of ISnappableProperty. TouchableProperty XR implementation of ITouchableProperty. UsableProperty XR implementation of IUsableProperty."
  },
  "api/VRBuilder.XRInteraction.RayInteractor.html": {
    "href": "api/VRBuilder.XRInteraction.RayInteractor.html",
    "title": "Class RayInteractor | VR Builder Documentation",
    "keywords": "Class RayInteractor Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Interactor used for interacting with interactables at a distance. This is handled via raycasts that update the current set of valid targets for this interactor. public class RayInteractor : XRRayInteractor, IXRHoverInteractor, IXRSelectInteractor, IXRTargetPriorityInteractor, IXRGroupMember, IXRInteractionStrengthInteractor, IXRActivateInteractor, IXRInteractor, IAdvancedLineRenderable, ILineRenderable, IUIHoverInteractor, IUIInteractor, IXRRayProvider, IXRScaleValueProvider Inheritance object Object Component Behaviour MonoBehaviour XRBaseInteractor XRBaseControllerInteractor XRRayInteractor RayInteractor Implements IXRHoverInteractor IXRSelectInteractor IXRTargetPriorityInteractor IXRGroupMember IXRInteractionStrengthInteractor IXRActivateInteractor IXRInteractor IAdvancedLineRenderable ILineRenderable IUIHoverInteractor IUIInteractor IXRRayProvider IXRScaleValueProvider Inherited Members XRRayInteractor.Velocity XRRayInteractor.Acceleration XRRayInteractor.AdditionalFlightTime XRRayInteractor.Angle XRRayInteractor.originalAttachTransform XRRayInteractor.GetLinePoints(ref Vector3[], ref int, int) XRRayInteractor.TryGetHitInfo(ref Vector3, ref Vector3, ref int, ref bool, int) XRRayInteractor.GetCurrentRaycastHit(out RaycastHit) XRRayInteractor.CanHover(XRBaseInteractable) XRRayInteractor.CanSelect(XRBaseInteractable) XRRayInteractor.lineType XRRayInteractor.blendVisualLinePoints XRRayInteractor.maxRaycastDistance XRRayInteractor.rayOriginTransform XRRayInteractor.referenceFrame XRRayInteractor.velocity XRRayInteractor.acceleration XRRayInteractor.additionalGroundHeight XRRayInteractor.additionalFlightTime XRRayInteractor.endPointDistance XRRayInteractor.endPointHeight XRRayInteractor.controlPointDistance XRRayInteractor.controlPointHeight XRRayInteractor.sampleFrequency XRRayInteractor.hitDetectionType XRRayInteractor.sphereCastRadius XRRayInteractor.coneCastAngle XRRayInteractor.raycastMask XRRayInteractor.raycastTriggerInteraction XRRayInteractor.raycastSnapVolumeInteraction XRRayInteractor.hitClosestOnly XRRayInteractor.hoverToSelect XRRayInteractor.hoverTimeToSelect XRRayInteractor.autoDeselect XRRayInteractor.timeToAutoDeselect XRRayInteractor.enableUIInteraction XRRayInteractor.blockUIOnInteractableSelection XRRayInteractor.allowAnchorControl XRRayInteractor.useForceGrab XRRayInteractor.rotateSpeed XRRayInteractor.translateSpeed XRRayInteractor.anchorRotateReferenceFrame XRRayInteractor.anchorRotationMode XRRayInteractor.uiHoverEntered XRRayInteractor.uiHoverExited XRRayInteractor.enableARRaycasting XRRayInteractor.occludeARHitsWith3DObjects XRRayInteractor.occludeARHitsWith2DObjects XRRayInteractor.angle XRRayInteractor.currentNearestValidTarget XRRayInteractor.rayEndPoint XRRayInteractor.rayEndTransform XRRayInteractor.scaleMode XRRayInteractor.scaleValue XRRayInteractor.OnValidate() XRRayInteractor.Awake() XRRayInteractor.OnEnable() XRRayInteractor.OnDisable() XRRayInteractor.OnDrawGizmosSelected() XRRayInteractor.IsOverUIGameObject() XRRayInteractor.GetLinePoints(ref NativeArray<Vector3>, out int, Ray?) XRRayInteractor.GetLinePoints(ref Vector3[], out int) XRRayInteractor.GetLineOriginAndDirection(out Vector3, out Vector3) XRRayInteractor.TryGetHitInfo(out Vector3, out Vector3, out int, out bool) XRRayInteractor.UpdateUIModel(ref TrackedDeviceModel) XRRayInteractor.TryGetUIModel(out TrackedDeviceModel) XRRayInteractor.TryGetCurrent3DRaycastHit(out RaycastHit) XRRayInteractor.TryGetCurrent3DRaycastHit(out RaycastHit, out int) XRRayInteractor.TryGetCurrentUIRaycastResult(out RaycastResult) XRRayInteractor.TryGetCurrentUIRaycastResult(out RaycastResult, out int) XRRayInteractor.TryGetCurrentRaycast(out RaycastHit?, out int, out RaycastResult?, out int, out bool) XRRayInteractor.RotateAnchor(Transform, float) XRRayInteractor.RotateAnchor(Transform, Vector2, Quaternion) XRRayInteractor.TranslateAnchor(Transform, Transform, float) XRRayInteractor.PreprocessInteractor(XRInteractionUpdateOrder.UpdatePhase) XRRayInteractor.ProcessInteractor(XRInteractionUpdateOrder.UpdatePhase) XRRayInteractor.GetValidTargets(List<IXRInteractable>) XRRayInteractor.isUISelectActive XRRayInteractor.CanHover(IXRHoverInteractable) XRRayInteractor.CanSelect(IXRSelectInteractable) XRRayInteractor.GetHoverTimeToSelect(IXRInteractable) XRRayInteractor.GetTimeToAutoDeselect(IXRInteractable) XRRayInteractor.OnSelectEntering(SelectEnterEventArgs) XRRayInteractor.OnSelectExiting(SelectExitEventArgs) XRRayInteractor.OnUIHoverEntered(UIHoverEventArgs) XRRayInteractor.OnUIHoverExited(UIHoverEventArgs) XRBaseControllerInteractor.selectActionTrigger XRBaseControllerInteractor.hideControllerOnSelect XRBaseControllerInteractor.allowHoveredActivate XRBaseControllerInteractor.targetPriorityMode XRBaseControllerInteractor.playAudioClipOnSelectEntered XRBaseControllerInteractor.audioClipForOnSelectEntered XRBaseControllerInteractor.playAudioClipOnSelectExited XRBaseControllerInteractor.audioClipForOnSelectExited XRBaseControllerInteractor.playAudioClipOnSelectCanceled XRBaseControllerInteractor.audioClipForOnSelectCanceled XRBaseControllerInteractor.playAudioClipOnHoverEntered XRBaseControllerInteractor.audioClipForOnHoverEntered XRBaseControllerInteractor.playAudioClipOnHoverExited XRBaseControllerInteractor.audioClipForOnHoverExited XRBaseControllerInteractor.playAudioClipOnHoverCanceled XRBaseControllerInteractor.audioClipForOnHoverCanceled XRBaseControllerInteractor.allowHoverAudioWhileSelecting XRBaseControllerInteractor.playHapticsOnSelectEntered XRBaseControllerInteractor.hapticSelectEnterIntensity XRBaseControllerInteractor.hapticSelectEnterDuration XRBaseControllerInteractor.playHapticsOnSelectExited XRBaseControllerInteractor.hapticSelectExitIntensity XRBaseControllerInteractor.hapticSelectExitDuration XRBaseControllerInteractor.playHapticsOnSelectCanceled XRBaseControllerInteractor.hapticSelectCancelIntensity XRBaseControllerInteractor.hapticSelectCancelDuration XRBaseControllerInteractor.playHapticsOnHoverEntered XRBaseControllerInteractor.hapticHoverEnterIntensity XRBaseControllerInteractor.hapticHoverEnterDuration XRBaseControllerInteractor.playHapticsOnHoverExited XRBaseControllerInteractor.hapticHoverExitIntensity XRBaseControllerInteractor.hapticHoverExitDuration XRBaseControllerInteractor.playHapticsOnHoverCanceled XRBaseControllerInteractor.hapticHoverCancelIntensity XRBaseControllerInteractor.hapticHoverCancelDuration XRBaseControllerInteractor.allowHoverHapticsWhileSelecting XRBaseControllerInteractor.allowActivate XRBaseControllerInteractor.xrController XRBaseControllerInteractor.uiScrollValue XRBaseControllerInteractor.shouldActivate XRBaseControllerInteractor.shouldDeactivate XRBaseControllerInteractor.GetActivateTargets(List<IXRActivateInteractable>) XRBaseControllerInteractor.OnHoverEntering(HoverEnterEventArgs) XRBaseControllerInteractor.OnHoverExiting(HoverExitEventArgs) XRBaseControllerInteractor.SendHapticImpulse(float, float) XRBaseControllerInteractor.PlayAudio(AudioClip) XRBaseControllerInteractor.playAudioClipOnSelectEnter XRBaseControllerInteractor.audioClipForOnSelectEnter XRBaseControllerInteractor.AudioClipForOnSelectEnter XRBaseControllerInteractor.playAudioClipOnSelectExit XRBaseControllerInteractor.audioClipForOnSelectExit XRBaseControllerInteractor.AudioClipForOnSelectExit XRBaseControllerInteractor.playAudioClipOnHoverEnter XRBaseControllerInteractor.audioClipForOnHoverEnter XRBaseControllerInteractor.AudioClipForOnHoverEnter XRBaseControllerInteractor.playAudioClipOnHoverExit XRBaseControllerInteractor.audioClipForOnHoverExit XRBaseControllerInteractor.AudioClipForOnHoverExit XRBaseControllerInteractor.playHapticsOnSelectEnter XRBaseControllerInteractor.playHapticsOnSelectExit XRBaseControllerInteractor.playHapticsOnHoverEnter XRBaseControllerInteractor.validTargets XRBaseInteractor.registered XRBaseInteractor.unregistered XRBaseInteractor.interactionManager XRBaseInteractor.containingGroup XRBaseInteractor.interactionLayers XRBaseInteractor.attachTransform XRBaseInteractor.keepSelectedTargetValid XRBaseInteractor.disableVisualsWhenBlockedInGroup XRBaseInteractor.startingSelectedInteractable XRBaseInteractor.startingTargetFilter XRBaseInteractor.hoverEntered XRBaseInteractor.hoverExited XRBaseInteractor.selectEntered XRBaseInteractor.selectExited XRBaseInteractor.targetFilter XRBaseInteractor.allowHover XRBaseInteractor.allowSelect XRBaseInteractor.isPerformingManualInteraction XRBaseInteractor.interactablesHovered XRBaseInteractor.hasHover XRBaseInteractor.interactablesSelected XRBaseInteractor.firstInteractableSelected XRBaseInteractor.hasSelection XRBaseInteractor.startingHoverFilters XRBaseInteractor.hoverFilters XRBaseInteractor.startingSelectFilters XRBaseInteractor.selectFilters XRBaseInteractor.largestInteractionStrength XRBaseInteractor.Reset() XRBaseInteractor.Start() XRBaseInteractor.OnDestroy() XRBaseInteractor.GetAttachTransform(IXRInteractable) XRBaseInteractor.GetAttachPoseOnSelect(IXRSelectInteractable) XRBaseInteractor.GetLocalAttachPoseOnSelect(IXRSelectInteractable) XRBaseInteractor.isHoverActive XRBaseInteractor.targetsForSelection XRBaseInteractor.IsHovering(IXRHoverInteractable) XRBaseInteractor.IsSelecting(IXRSelectInteractable) XRBaseInteractor.IsHovering(IXRInteractable) XRBaseInteractor.IsSelecting(IXRInteractable) XRBaseInteractor.selectedInteractableMovementTypeOverride XRBaseInteractor.CaptureAttachPose(IXRSelectInteractable) XRBaseInteractor.CreateAttachTransform() XRBaseInteractor.GetInteractionStrength(IXRInteractable) XRBaseInteractor.OnRegistered(InteractorRegisteredEventArgs) XRBaseInteractor.OnUnregistered(InteractorUnregisteredEventArgs) XRBaseInteractor.OnHoverEntered(HoverEnterEventArgs) XRBaseInteractor.OnHoverExited(HoverExitEventArgs) XRBaseInteractor.OnSelectEntered(SelectEnterEventArgs) XRBaseInteractor.OnSelectExited(SelectExitEventArgs) XRBaseInteractor.ProcessInteractionStrength(XRInteractionUpdateOrder.UpdatePhase) XRBaseInteractor.StartManualInteraction(IXRSelectInteractable) XRBaseInteractor.EndManualInteraction() XRBaseInteractor.ProcessHoverFilters(IXRHoverInteractable) XRBaseInteractor.ProcessSelectFilters(IXRSelectInteractable) XRBaseInteractor.interactionLayerMask XRBaseInteractor.enableInteractions XRBaseInteractor.onHoverEntered XRBaseInteractor.onHoverExited XRBaseInteractor.onSelectEntered XRBaseInteractor.onSelectExited XRBaseInteractor.onHoverEnter XRBaseInteractor.onHoverExit XRBaseInteractor.onSelectEnter XRBaseInteractor.onSelectExit XRBaseInteractor.OnHoverEntering(XRBaseInteractable) XRBaseInteractor.OnHoverEntered(XRBaseInteractable) XRBaseInteractor.OnHoverExiting(XRBaseInteractable) XRBaseInteractor.OnHoverExited(XRBaseInteractable) XRBaseInteractor.OnSelectEntering(XRBaseInteractable) XRBaseInteractor.OnSelectEntered(XRBaseInteractable) XRBaseInteractor.OnSelectExiting(XRBaseInteractable) XRBaseInteractor.OnSelectExited(XRBaseInteractable) XRBaseInteractor.selectTarget XRBaseInteractor.hoverTargets XRBaseInteractor.GetHoverTargets(List<XRBaseInteractable>) XRBaseInteractor.GetValidTargets(List<XRBaseInteractable>) XRBaseInteractor.requireSelectExclusive XRBaseInteractor.StartManualInteraction(XRBaseInteractable) MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Adds extra control over applicable interactions. Properties isSelectActive Gets whether the selection state is active for this interactor. This will check if the controller has a valid selection state or whether toggle selection is currently on and active. public override bool isSelectActive { get; } Property Value bool Methods AttemptGrab() Attempts to grab an interactable hovering this interactor without needing to press the grab button on the controller. public virtual void AttemptGrab()"
  },
  "api/VRBuilder.XRInteraction.RigManipulationProvider.html": {
    "href": "api/VRBuilder.XRInteraction.RigManipulationProvider.html",
    "title": "Class RigManipulationProvider | VR Builder Documentation",
    "keywords": "Class RigManipulationProvider Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Locomotion provider to directly manipulate the XRRig's position and rotation. public class RigManipulationProvider : LocomotionProvider Inheritance object Object Component Behaviour MonoBehaviour LocomotionProvider RigManipulationProvider Inherited Members LocomotionProvider.startLocomotion LocomotionProvider.beginLocomotion LocomotionProvider.endLocomotion LocomotionProvider.system LocomotionProvider.locomotionPhase LocomotionProvider.Awake() LocomotionProvider.CanBeginLocomotion() LocomotionProvider.BeginLocomotion() LocomotionProvider.EndLocomotion() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods SetRigPositionAndRotation(Vector3, Quaternion) Sets a new position and rotation for the XR Rig. public void SetRigPositionAndRotation(Vector3 destinationPosition, Quaternion destinationRotation) Parameters destinationPosition Vector3 Target position. destinationRotation Quaternion Target rotation."
  },
  "api/VRBuilder.XRInteraction.SnapZone.html": {
    "href": "api/VRBuilder.XRInteraction.SnapZone.html",
    "title": "Class SnapZone | VR Builder Documentation",
    "keywords": "Class SnapZone Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Interactor used for holding interactables via a socket. This component is not designed to be attached to a controller (thus does not derive from XRBaseControllerInteractor) and instead will always attempt to select an interactable that it is hovering (though will not perform exclusive selection of that interactable). public class SnapZone : XRSocketInteractor, IXRHoverInteractor, IXRSelectInteractor, IXRTargetPriorityInteractor, IXRGroupMember, IXRInteractionStrengthInteractor, IXRInteractor, ISnapZone Inheritance object Object Component Behaviour MonoBehaviour XRBaseInteractor XRSocketInteractor SnapZone Implements IXRHoverInteractor IXRSelectInteractor IXRTargetPriorityInteractor IXRGroupMember IXRInteractionStrengthInteractor IXRInteractor ISnapZone Inherited Members XRSocketInteractor.CanHover(XRBaseInteractable) XRSocketInteractor.CanSelect(XRBaseInteractable) XRSocketInteractor.showInteractableHoverMeshes XRSocketInteractor.interactableHoverMeshMaterial XRSocketInteractor.interactableCantHoverMeshMaterial XRSocketInteractor.socketActive XRSocketInteractor.interactableHoverScale XRSocketInteractor.recycleDelayTime XRSocketInteractor.hoverSocketSnapping XRSocketInteractor.socketSnappingRadius XRSocketInteractor.socketScaleMode XRSocketInteractor.fixedScale XRSocketInteractor.targetBoundsSize XRSocketInteractor.unsortedValidTargets XRSocketInteractor.socketSnappingLimit XRSocketInteractor.ejectExistingSocketsWhenSnapping XRSocketInteractor.OnValidate() XRSocketInteractor.OnTriggerEnter(Collider) XRSocketInteractor.OnTriggerStay(Collider) XRSocketInteractor.OnTriggerExit(Collider) XRSocketInteractor.CreateDefaultHoverMaterials() XRSocketInteractor.OnHoverEntering(HoverEnterEventArgs) XRSocketInteractor.OnHoverEntered(HoverEnterEventArgs) XRSocketInteractor.CanHoverSnap(IXRInteractable) XRSocketInteractor.OnHoverExiting(HoverExitEventArgs) XRSocketInteractor.OnSelectEntered(SelectEnterEventArgs) XRSocketInteractor.OnSelectExiting(SelectExitEventArgs) XRSocketInteractor.OnSelectExited(SelectExitEventArgs) XRSocketInteractor.DrawHoveredInteractables() XRSocketInteractor.GetHoveredInteractableMaterial(IXRHoverInteractable) XRSocketInteractor.GetValidTargets(List<IXRInteractable>) XRSocketInteractor.isHoverActive XRSocketInteractor.isSelectActive XRSocketInteractor.selectedInteractableMovementTypeOverride XRSocketInteractor.CanHover(IXRHoverInteractable) XRSocketInteractor.ShouldDrawHoverMesh(MeshFilter, Renderer, Camera) XRSocketInteractor.OnRegistered(InteractorRegisteredEventArgs) XRSocketInteractor.OnUnregistered(InteractorUnregisteredEventArgs) XRSocketInteractor.StartSocketSnapping(XRGrabInteractable) XRSocketInteractor.EndSocketSnapping(XRGrabInteractable) XRBaseInteractor.registered XRBaseInteractor.unregistered XRBaseInteractor.interactionManager XRBaseInteractor.containingGroup XRBaseInteractor.interactionLayers XRBaseInteractor.attachTransform XRBaseInteractor.keepSelectedTargetValid XRBaseInteractor.disableVisualsWhenBlockedInGroup XRBaseInteractor.startingSelectedInteractable XRBaseInteractor.startingTargetFilter XRBaseInteractor.hoverEntered XRBaseInteractor.hoverExited XRBaseInteractor.selectEntered XRBaseInteractor.selectExited XRBaseInteractor.targetFilter XRBaseInteractor.allowHover XRBaseInteractor.allowSelect XRBaseInteractor.isPerformingManualInteraction XRBaseInteractor.interactablesHovered XRBaseInteractor.hasHover XRBaseInteractor.interactablesSelected XRBaseInteractor.firstInteractableSelected XRBaseInteractor.hasSelection XRBaseInteractor.startingHoverFilters XRBaseInteractor.hoverFilters XRBaseInteractor.startingSelectFilters XRBaseInteractor.selectFilters XRBaseInteractor.largestInteractionStrength XRBaseInteractor.Reset() XRBaseInteractor.Start() XRBaseInteractor.OnDestroy() XRBaseInteractor.GetAttachTransform(IXRInteractable) XRBaseInteractor.GetAttachPoseOnSelect(IXRSelectInteractable) XRBaseInteractor.GetLocalAttachPoseOnSelect(IXRSelectInteractable) XRBaseInteractor.targetPriorityMode XRBaseInteractor.targetsForSelection XRBaseInteractor.IsHovering(IXRHoverInteractable) XRBaseInteractor.IsSelecting(IXRSelectInteractable) XRBaseInteractor.IsHovering(IXRInteractable) XRBaseInteractor.IsSelecting(IXRInteractable) XRBaseInteractor.CaptureAttachPose(IXRSelectInteractable) XRBaseInteractor.CreateAttachTransform() XRBaseInteractor.PreprocessInteractor(XRInteractionUpdateOrder.UpdatePhase) XRBaseInteractor.GetInteractionStrength(IXRInteractable) XRBaseInteractor.OnHoverExited(HoverExitEventArgs) XRBaseInteractor.OnSelectEntering(SelectEnterEventArgs) XRBaseInteractor.ProcessInteractionStrength(XRInteractionUpdateOrder.UpdatePhase) XRBaseInteractor.StartManualInteraction(IXRSelectInteractable) XRBaseInteractor.EndManualInteraction() XRBaseInteractor.ProcessHoverFilters(IXRHoverInteractable) XRBaseInteractor.ProcessSelectFilters(IXRSelectInteractable) XRBaseInteractor.interactionLayerMask XRBaseInteractor.enableInteractions XRBaseInteractor.onHoverEntered XRBaseInteractor.onHoverExited XRBaseInteractor.onSelectEntered XRBaseInteractor.onSelectExited XRBaseInteractor.onHoverEnter XRBaseInteractor.onHoverExit XRBaseInteractor.onSelectEnter XRBaseInteractor.onSelectExit XRBaseInteractor.OnHoverEntering(XRBaseInteractable) XRBaseInteractor.OnHoverEntered(XRBaseInteractable) XRBaseInteractor.OnHoverExiting(XRBaseInteractable) XRBaseInteractor.OnHoverExited(XRBaseInteractable) XRBaseInteractor.OnSelectEntering(XRBaseInteractable) XRBaseInteractor.OnSelectEntered(XRBaseInteractable) XRBaseInteractor.OnSelectExiting(XRBaseInteractable) XRBaseInteractor.OnSelectExited(XRBaseInteractable) XRBaseInteractor.selectTarget XRBaseInteractor.hoverTargets XRBaseInteractor.GetHoverTargets(List<XRBaseInteractable>) XRBaseInteractor.GetValidTargets(List<XRBaseInteractable>) XRBaseInteractor.requireSelectExclusive XRBaseInteractor.StartManualInteraction(XRBaseInteractable) MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Adds the functionality to force the selection and unselection of specific interactables. It also adds a highlighter to emphasize the position of the socket. Fields ShowHighlightInEditor Shows the highlight public bool ShowHighlightInEditor Field Value bool Properties Anchor Position where the object is snapped. public Transform Anchor { get; } Property Value Transform ForceSelectInteractable Forces the socket interactor to unselect the given target, if it is not null. protected IXRSelectInteractable ForceSelectInteractable { get; set; } Property Value IXRSelectInteractable ForceUnselectInteractable Forces the socket interactor to unselect the given target, if it is not null. protected IXRSelectInteractable ForceUnselectInteractable { get; set; } Property Value IXRSelectInteractable HighlightMeshMaterial The material used for drawing the mesh of the ShownHighlightObject. public Material HighlightMeshMaterial { get; set; } Property Value Material InvalidMaterial The material used for drawing when an invalid InteractableObject is hovering this SnapZone. public Material InvalidMaterial { get; set; } Property Value Material IsEmpty Returns if the SnapZone is empty. public bool IsEmpty { get; } Property Value bool IsSnapping True when an object is about to be snapped to the snapzone. public bool IsSnapping { get; } Property Value bool IsUnsnapping True when an object is about to be unsnapped from the snapzone. public bool IsUnsnapping { get; } Property Value bool PreviewMesh Returns the preview mesh used for this SnapZone. public Mesh PreviewMesh { get; set; } Property Value Mesh ShowHighlightObject Gets or sets whether ShownHighlightObject is shown or not. public bool ShowHighlightObject { get; set; } Property Value bool ShownHighlightObject The 'GameObject' whose mesh is drawn to emphasize the position of the snap zone. If none is supplied, no highlight object is shown. public GameObject ShownHighlightObject { get; set; } Property Value GameObject SnappedObject Returns the snapped object, can be null. public ISnappableProperty SnappedObject { get; } Property Value ISnappableProperty ValidationMaterial The material used for drawing when an InteractableObject is hovering this SnapZone. public Material ValidationMaterial { get; set; } Property Value Material Methods Awake() See UnityEngine.MonoBehaviour. protected override void Awake() CanSelect(IXRSelectInteractable) Determines if the interactable is valid for selection this frame. public override bool CanSelect(IXRSelectInteractable interactable) Parameters interactable IXRSelectInteractable Interactable to check. Returns bool true if the interactable can be selected this frame. Remarks Adds the functionality of selecting and unselecting specific interactables. CanSnap(ISnappableProperty) Returns if the object can be snapped at all. public bool CanSnap(ISnappableProperty target) Parameters target ISnappableProperty Returns bool CreateFallbackMaterial() Creates a transparent UnityEngine.Material using Unity's \"Standard\" shader. protected virtual Material CreateFallbackMaterial() Returns Material A transparent UnityEngine.Material. Null, otherwise, if Unity's \"Standard\" shader cannot be found. DrawHighlightMesh() Draws a highlight mesh. protected virtual void DrawHighlightMesh() ForceRelease() Forces release the snapped object, will return false when there is no object. public bool ForceRelease() Returns bool ForceSelect(IXRSelectInteractable) Unselects any selected interactable object and forces the provided interactable object to be selected if it is selectable. public virtual void ForceSelect(IXRSelectInteractable interactable) Parameters interactable IXRSelectInteractable Interactable object to be selected. ForceSnap(ISnappableProperty) Forces the object to be snapped, returns true when it was snapped successfully. public bool ForceSnap(ISnappableProperty target) Parameters target ISnappableProperty Returns bool ForceUnselect() Forces to unselect any selected interactable object. public virtual void ForceUnselect() IsValidSnapTarget(IXRSelectInteractable) protected bool IsValidSnapTarget(IXRSelectInteractable interactable) Parameters interactable IXRSelectInteractable Returns bool OnDisable() See UnityEngine.MonoBehaviour. protected override void OnDisable() OnEnable() See UnityEngine.MonoBehaviour. protected override void OnEnable() ProcessInteractor(UpdatePhase) This method is called by the interaction manager to update the interactor. Please see the interaction manager documentation for more details on update order. public override void ProcessInteractor(XRInteractionUpdateOrder.UpdatePhase updatePhase) Parameters updatePhase XRInteractionUpdateOrder.UpdatePhase Update() protected virtual void Update() UpdateHighlightMeshFilterCache() Updates the previewMesh property using the current ShownHighlightObject. protected virtual void UpdateHighlightMeshFilterCache()"
  },
  "api/VRBuilder.XRInteraction.SnapZonePreviewDrawer.html": {
    "href": "api/VRBuilder.XRInteraction.SnapZonePreviewDrawer.html",
    "title": "Class SnapZonePreviewDrawer | VR Builder Documentation",
    "keywords": "Class SnapZonePreviewDrawer Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Draws a preview of SnapZone highlight. [ExecuteInEditMode] public class SnapZonePreviewDrawer : MonoBehaviour, IExcludeFromHighlightMesh Inheritance object Object Component Behaviour MonoBehaviour SnapZonePreviewDrawer Implements IExcludeFromHighlightMesh Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods UpdateMesh() Forces an update of the mesh. public void UpdateMesh()"
  },
  "api/VRBuilder.XRInteraction.TeleportationAnchorProximityEntry.html": {
    "href": "api/VRBuilder.XRInteraction.TeleportationAnchorProximityEntry.html",
    "title": "Class TeleportationAnchorProximityEntry | VR Builder Documentation",
    "keywords": "Class TeleportationAnchorProximityEntry Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll This adds the possibility to move the user into a UnityEngine.XR.Interaction.Toolkit.TeleportationAnchor and trigger the teleport event without teleporting. It will not change the users position or rotation set in the UnityEngine.XR.Interaction.Toolkit.TeleportationAnchor. public class TeleportationAnchorProximityEntry : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour TeleportationAnchorProximityEntry Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/VRBuilder.XRInteraction.TeleportationAnchorVRBuilder.html": {
    "href": "api/VRBuilder.XRInteraction.TeleportationAnchorVRBuilder.html",
    "title": "Class TeleportationAnchorVRBuilder | VR Builder Documentation",
    "keywords": "Class TeleportationAnchorVRBuilder Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Teleportation anchor override that ensures a teleport provider is found even when the rig has been spawned after loading the scene. [AddComponentMenu(\"VR Builder/Interactables/Teleportation Anchor (VR Builder)\")] public class TeleportationAnchorVRBuilder : TeleportationAnchor, IXRActivateInteractable, IXRHoverInteractable, IXRSelectInteractable, IXRFocusInteractable, IXRInteractionStrengthInteractable, IXRInteractable, IXROverridesGazeAutoSelect, IXRReticleDirectionProvider, ILayerConfigurator Inheritance object Object Component Behaviour MonoBehaviour XRBaseInteractable BaseTeleportationInteractable TeleportationAnchor TeleportationAnchorVRBuilder Implements IXRActivateInteractable IXRHoverInteractable IXRSelectInteractable IXRFocusInteractable IXRInteractionStrengthInteractable IXRInteractable IXROverridesGazeAutoSelect IXRReticleDirectionProvider ILayerConfigurator Inherited Members TeleportationAnchor.teleportAnchorTransform TeleportationAnchor.OnValidate() TeleportationAnchor.Reset() TeleportationAnchor.OnDrawGizmos() TeleportationAnchor.GetAttachTransform(IXRInteractor) TeleportationAnchor.GenerateTeleportRequest(IXRInteractor, RaycastHit, ref TeleportRequest) BaseTeleportationInteractable.GenerateTeleportRequest(XRBaseInteractor, RaycastHit, ref TeleportRequest) BaseTeleportationInteractable.teleportationProvider BaseTeleportationInteractable.matchOrientation BaseTeleportationInteractable.matchDirectionalInput BaseTeleportationInteractable.teleportTrigger BaseTeleportationInteractable.filterSelectionByHitNormal BaseTeleportationInteractable.upNormalToleranceDegrees BaseTeleportationInteractable.teleporting BaseTeleportationInteractable.Awake() BaseTeleportationInteractable.ProcessInteractable(XRInteractionUpdateOrder.UpdatePhase) BaseTeleportationInteractable.IsSelectableBy(IXRSelectInteractor) BaseTeleportationInteractable.GetReticleDirection(IXRInteractor, Vector3, out Vector3, out Vector3?) XRBaseInteractable.interactionLayerMask XRBaseInteractable.onFirstHoverEntered XRBaseInteractable.onLastHoverExited XRBaseInteractable.onHoverEntered XRBaseInteractable.onHoverExited XRBaseInteractable.onSelectEntered XRBaseInteractable.onSelectExited XRBaseInteractable.onSelectCanceled XRBaseInteractable.onActivate XRBaseInteractable.onDeactivate XRBaseInteractable.onFirstHoverEnter XRBaseInteractable.onHoverEnter XRBaseInteractable.onHoverExit XRBaseInteractable.onLastHoverExit XRBaseInteractable.onSelectEnter XRBaseInteractable.onSelectExit XRBaseInteractable.onSelectCancel XRBaseInteractable.OnHoverEntering(XRBaseInteractor) XRBaseInteractable.OnHoverEntered(XRBaseInteractor) XRBaseInteractable.OnHoverExiting(XRBaseInteractor) XRBaseInteractable.OnHoverExited(XRBaseInteractor) XRBaseInteractable.OnSelectEntering(XRBaseInteractor) XRBaseInteractable.OnSelectEntered(XRBaseInteractor) XRBaseInteractable.OnSelectExiting(XRBaseInteractor) XRBaseInteractable.OnSelectExited(XRBaseInteractor) XRBaseInteractable.OnSelectCanceling(XRBaseInteractor) XRBaseInteractable.OnSelectCanceled(XRBaseInteractor) XRBaseInteractable.OnActivate(XRBaseInteractor) XRBaseInteractable.OnDeactivate(XRBaseInteractor) XRBaseInteractable.GetDistanceSqrToInteractor(XRBaseInteractor) XRBaseInteractable.AttachCustomReticle(XRBaseInteractor) XRBaseInteractable.RemoveCustomReticle(XRBaseInteractor) XRBaseInteractable.hoveringInteractors XRBaseInteractable.selectingInteractor XRBaseInteractable.IsHoverableBy(XRBaseInteractor) XRBaseInteractable.IsSelectableBy(XRBaseInteractor) XRBaseInteractable.registered XRBaseInteractable.unregistered XRBaseInteractable.getDistanceOverride XRBaseInteractable.interactionManager XRBaseInteractable.colliders XRBaseInteractable.interactionLayers XRBaseInteractable.distanceCalculationMode XRBaseInteractable.selectMode XRBaseInteractable.focusMode XRBaseInteractable.customReticle XRBaseInteractable.allowGazeInteraction XRBaseInteractable.allowGazeSelect XRBaseInteractable.overrideGazeTimeToSelect XRBaseInteractable.gazeTimeToSelect XRBaseInteractable.overrideTimeToAutoDeselectGaze XRBaseInteractable.timeToAutoDeselectGaze XRBaseInteractable.allowGazeAssistance XRBaseInteractable.firstHoverEntered XRBaseInteractable.lastHoverExited XRBaseInteractable.hoverEntered XRBaseInteractable.hoverExited XRBaseInteractable.firstSelectEntered XRBaseInteractable.lastSelectExited XRBaseInteractable.selectEntered XRBaseInteractable.selectExited XRBaseInteractable.firstFocusEntered XRBaseInteractable.lastFocusExited XRBaseInteractable.focusEntered XRBaseInteractable.focusExited XRBaseInteractable.activated XRBaseInteractable.deactivated XRBaseInteractable.interactorsHovering XRBaseInteractable.isHovered XRBaseInteractable.interactorsSelecting XRBaseInteractable.firstInteractorSelecting XRBaseInteractable.isSelected XRBaseInteractable.interactionGroupsFocusing XRBaseInteractable.firstInteractionGroupFocusing XRBaseInteractable.isFocused XRBaseInteractable.canFocus XRBaseInteractable.startingHoverFilters XRBaseInteractable.hoverFilters XRBaseInteractable.startingSelectFilters XRBaseInteractable.selectFilters XRBaseInteractable.startingInteractionStrengthFilters XRBaseInteractable.interactionStrengthFilters XRBaseInteractable.largestInteractionStrength XRBaseInteractable.OnEnable() XRBaseInteractable.OnDisable() XRBaseInteractable.OnDestroy() XRBaseInteractable.GetAttachPoseOnSelect(IXRSelectInteractor) XRBaseInteractable.GetLocalAttachPoseOnSelect(IXRSelectInteractor) XRBaseInteractable.GetDistanceSqrToInteractor(IXRInteractor) XRBaseInteractable.GetDistance(Vector3) XRBaseInteractable.GetInteractionStrength(IXRInteractor) XRBaseInteractable.IsHoverableBy(IXRHoverInteractor) XRBaseInteractable.IsHovered(IXRHoverInteractor) XRBaseInteractable.IsSelected(IXRSelectInteractor) XRBaseInteractable.IsHovered(IXRInteractor) XRBaseInteractable.IsSelected(IXRInteractor) XRBaseInteractable.GetCustomReticle(IXRInteractor) XRBaseInteractable.AttachCustomReticle(IXRInteractor) XRBaseInteractable.RemoveCustomReticle(IXRInteractor) XRBaseInteractable.CaptureAttachPose(IXRSelectInteractor) XRBaseInteractable.OnRegistered(InteractableRegisteredEventArgs) XRBaseInteractable.OnUnregistered(InteractableUnregisteredEventArgs) XRBaseInteractable.OnHoverEntering(HoverEnterEventArgs) XRBaseInteractable.OnHoverEntered(HoverEnterEventArgs) XRBaseInteractable.OnHoverExiting(HoverExitEventArgs) XRBaseInteractable.OnHoverExited(HoverExitEventArgs) XRBaseInteractable.OnSelectEntering(SelectEnterEventArgs) XRBaseInteractable.OnSelectExiting(SelectExitEventArgs) XRBaseInteractable.OnFocusEntering(FocusEnterEventArgs) XRBaseInteractable.OnFocusEntered(FocusEnterEventArgs) XRBaseInteractable.OnFocusExiting(FocusExitEventArgs) XRBaseInteractable.OnFocusExited(FocusExitEventArgs) XRBaseInteractable.ProcessInteractionStrength(XRInteractionUpdateOrder.UpdatePhase) XRBaseInteractable.ProcessHoverFilters(IXRHoverInteractor) XRBaseInteractable.ProcessSelectFilters(IXRSelectInteractor) XRBaseInteractable.ProcessInteractionStrengthFilters(IXRInteractor, float) MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties LayerSet The layer set to be used on this configurator. public LayerSet LayerSet { get; } Property Value LayerSet Methods ConfigureLayers(string, string) Set up the layer masks to the specified layer names. public void ConfigureLayers(string interactionLayerName, string raycastLayerName) Parameters interactionLayerName string raycastLayerName string OnActivated(ActivateEventArgs) UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor calls this method when the Interactor begins an activation event on this Interactable. protected override void OnActivated(ActivateEventArgs args) Parameters args ActivateEventArgs Event data containing the Interactor that is sending the activate event. Remarks args is only valid during this method call, do not hold a reference to it. See Also OnDeactivated(DeactivateEventArgs) OnDeactivated(DeactivateEventArgs) UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor calls this method when the Interactor ends an activation event on this Interactable. protected override void OnDeactivated(DeactivateEventArgs args) Parameters args DeactivateEventArgs Event data containing the Interactor that is sending the deactivate event. Remarks args is only valid during this method call, do not hold a reference to it. See Also OnActivated(ActivateEventArgs) OnSelectEntered(SelectEnterEventArgs) The UnityEngine.XR.Interaction.Toolkit.XRInteractionManager calls this method when the Interactor first initiates selection of an Interactable in a second pass. protected override void OnSelectEntered(SelectEnterEventArgs args) Parameters args SelectEnterEventArgs Event data containing the Interactor that is initiating the selection. Remarks args is only valid during this method call, do not hold a reference to it. See Also OnSelectExited(SelectExitEventArgs) OnSelectExited(SelectExitEventArgs) The UnityEngine.XR.Interaction.Toolkit.XRInteractionManager calls this method when the Interactor ends selection of an Interactable in a second pass. protected override void OnSelectExited(SelectExitEventArgs args) Parameters args SelectExitEventArgs Event data containing the Interactor that is ending the selection. Remarks args is only valid during this method call, do not hold a reference to it. See Also OnSelectEntered(SelectEnterEventArgs)"
  },
  "api/VRBuilder.XRInteraction.TeleportationAreaVRBuilder.html": {
    "href": "api/VRBuilder.XRInteraction.TeleportationAreaVRBuilder.html",
    "title": "Class TeleportationAreaVRBuilder | VR Builder Documentation",
    "keywords": "Class TeleportationAreaVRBuilder Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Teleportation area override that ensures a teleport provider is found even when the rig has been spawned after loading the scene. [AddComponentMenu(\"VR Builder/Interactables/Teleportation Area (VR Builder)\")] public class TeleportationAreaVRBuilder : TeleportationArea, IXRActivateInteractable, IXRHoverInteractable, IXRSelectInteractable, IXRFocusInteractable, IXRInteractionStrengthInteractable, IXRInteractable, IXROverridesGazeAutoSelect, IXRReticleDirectionProvider, ILayerConfigurator Inheritance object Object Component Behaviour MonoBehaviour XRBaseInteractable BaseTeleportationInteractable TeleportationArea TeleportationAreaVRBuilder Implements IXRActivateInteractable IXRHoverInteractable IXRSelectInteractable IXRFocusInteractable IXRInteractionStrengthInteractable IXRInteractable IXROverridesGazeAutoSelect IXRReticleDirectionProvider ILayerConfigurator Inherited Members TeleportationArea.GenerateTeleportRequest(IXRInteractor, RaycastHit, ref TeleportRequest) BaseTeleportationInteractable.GenerateTeleportRequest(XRBaseInteractor, RaycastHit, ref TeleportRequest) BaseTeleportationInteractable.teleportationProvider BaseTeleportationInteractable.matchOrientation BaseTeleportationInteractable.matchDirectionalInput BaseTeleportationInteractable.teleportTrigger BaseTeleportationInteractable.filterSelectionByHitNormal BaseTeleportationInteractable.upNormalToleranceDegrees BaseTeleportationInteractable.teleporting BaseTeleportationInteractable.Awake() BaseTeleportationInteractable.ProcessInteractable(XRInteractionUpdateOrder.UpdatePhase) BaseTeleportationInteractable.IsSelectableBy(IXRSelectInteractor) BaseTeleportationInteractable.GetReticleDirection(IXRInteractor, Vector3, out Vector3, out Vector3?) XRBaseInteractable.interactionLayerMask XRBaseInteractable.onFirstHoverEntered XRBaseInteractable.onLastHoverExited XRBaseInteractable.onHoverEntered XRBaseInteractable.onHoverExited XRBaseInteractable.onSelectEntered XRBaseInteractable.onSelectExited XRBaseInteractable.onSelectCanceled XRBaseInteractable.onActivate XRBaseInteractable.onDeactivate XRBaseInteractable.onFirstHoverEnter XRBaseInteractable.onHoverEnter XRBaseInteractable.onHoverExit XRBaseInteractable.onLastHoverExit XRBaseInteractable.onSelectEnter XRBaseInteractable.onSelectExit XRBaseInteractable.onSelectCancel XRBaseInteractable.OnHoverEntering(XRBaseInteractor) XRBaseInteractable.OnHoverEntered(XRBaseInteractor) XRBaseInteractable.OnHoverExiting(XRBaseInteractor) XRBaseInteractable.OnHoverExited(XRBaseInteractor) XRBaseInteractable.OnSelectEntering(XRBaseInteractor) XRBaseInteractable.OnSelectEntered(XRBaseInteractor) XRBaseInteractable.OnSelectExiting(XRBaseInteractor) XRBaseInteractable.OnSelectExited(XRBaseInteractor) XRBaseInteractable.OnSelectCanceling(XRBaseInteractor) XRBaseInteractable.OnSelectCanceled(XRBaseInteractor) XRBaseInteractable.OnActivate(XRBaseInteractor) XRBaseInteractable.OnDeactivate(XRBaseInteractor) XRBaseInteractable.GetDistanceSqrToInteractor(XRBaseInteractor) XRBaseInteractable.AttachCustomReticle(XRBaseInteractor) XRBaseInteractable.RemoveCustomReticle(XRBaseInteractor) XRBaseInteractable.hoveringInteractors XRBaseInteractable.selectingInteractor XRBaseInteractable.IsHoverableBy(XRBaseInteractor) XRBaseInteractable.IsSelectableBy(XRBaseInteractor) XRBaseInteractable.registered XRBaseInteractable.unregistered XRBaseInteractable.getDistanceOverride XRBaseInteractable.interactionManager XRBaseInteractable.colliders XRBaseInteractable.interactionLayers XRBaseInteractable.distanceCalculationMode XRBaseInteractable.selectMode XRBaseInteractable.focusMode XRBaseInteractable.customReticle XRBaseInteractable.allowGazeInteraction XRBaseInteractable.allowGazeSelect XRBaseInteractable.overrideGazeTimeToSelect XRBaseInteractable.gazeTimeToSelect XRBaseInteractable.overrideTimeToAutoDeselectGaze XRBaseInteractable.timeToAutoDeselectGaze XRBaseInteractable.allowGazeAssistance XRBaseInteractable.firstHoverEntered XRBaseInteractable.lastHoverExited XRBaseInteractable.hoverEntered XRBaseInteractable.hoverExited XRBaseInteractable.firstSelectEntered XRBaseInteractable.lastSelectExited XRBaseInteractable.selectEntered XRBaseInteractable.selectExited XRBaseInteractable.firstFocusEntered XRBaseInteractable.lastFocusExited XRBaseInteractable.focusEntered XRBaseInteractable.focusExited XRBaseInteractable.activated XRBaseInteractable.deactivated XRBaseInteractable.interactorsHovering XRBaseInteractable.isHovered XRBaseInteractable.interactorsSelecting XRBaseInteractable.firstInteractorSelecting XRBaseInteractable.isSelected XRBaseInteractable.interactionGroupsFocusing XRBaseInteractable.firstInteractionGroupFocusing XRBaseInteractable.isFocused XRBaseInteractable.canFocus XRBaseInteractable.startingHoverFilters XRBaseInteractable.hoverFilters XRBaseInteractable.startingSelectFilters XRBaseInteractable.selectFilters XRBaseInteractable.startingInteractionStrengthFilters XRBaseInteractable.interactionStrengthFilters XRBaseInteractable.largestInteractionStrength XRBaseInteractable.OnEnable() XRBaseInteractable.OnDisable() XRBaseInteractable.OnDestroy() XRBaseInteractable.GetAttachTransform(IXRInteractor) XRBaseInteractable.GetAttachPoseOnSelect(IXRSelectInteractor) XRBaseInteractable.GetLocalAttachPoseOnSelect(IXRSelectInteractor) XRBaseInteractable.GetDistanceSqrToInteractor(IXRInteractor) XRBaseInteractable.GetDistance(Vector3) XRBaseInteractable.GetInteractionStrength(IXRInteractor) XRBaseInteractable.IsHoverableBy(IXRHoverInteractor) XRBaseInteractable.IsHovered(IXRHoverInteractor) XRBaseInteractable.IsSelected(IXRSelectInteractor) XRBaseInteractable.IsHovered(IXRInteractor) XRBaseInteractable.IsSelected(IXRInteractor) XRBaseInteractable.GetCustomReticle(IXRInteractor) XRBaseInteractable.AttachCustomReticle(IXRInteractor) XRBaseInteractable.RemoveCustomReticle(IXRInteractor) XRBaseInteractable.CaptureAttachPose(IXRSelectInteractor) XRBaseInteractable.OnRegistered(InteractableRegisteredEventArgs) XRBaseInteractable.OnUnregistered(InteractableUnregisteredEventArgs) XRBaseInteractable.OnHoverEntering(HoverEnterEventArgs) XRBaseInteractable.OnHoverExiting(HoverExitEventArgs) XRBaseInteractable.OnHoverExited(HoverExitEventArgs) XRBaseInteractable.OnSelectEntering(SelectEnterEventArgs) XRBaseInteractable.OnSelectExiting(SelectExitEventArgs) XRBaseInteractable.OnFocusEntering(FocusEnterEventArgs) XRBaseInteractable.OnFocusEntered(FocusEnterEventArgs) XRBaseInteractable.OnFocusExiting(FocusExitEventArgs) XRBaseInteractable.OnFocusExited(FocusExitEventArgs) XRBaseInteractable.ProcessInteractionStrength(XRInteractionUpdateOrder.UpdatePhase) XRBaseInteractable.ProcessHoverFilters(IXRHoverInteractor) XRBaseInteractable.ProcessSelectFilters(IXRSelectInteractor) XRBaseInteractable.ProcessInteractionStrengthFilters(IXRInteractor, float) MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties LayerSet The layer set to be used on this configurator. public LayerSet LayerSet { get; } Property Value LayerSet Methods ConfigureLayers(string, string) Set up the layer masks to the specified layer names. public void ConfigureLayers(string interactionLayerName, string raycastLayerName) Parameters interactionLayerName string raycastLayerName string OnActivated(ActivateEventArgs) UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor calls this method when the Interactor begins an activation event on this Interactable. protected override void OnActivated(ActivateEventArgs args) Parameters args ActivateEventArgs Event data containing the Interactor that is sending the activate event. Remarks args is only valid during this method call, do not hold a reference to it. See Also OnDeactivated(DeactivateEventArgs) OnDeactivated(DeactivateEventArgs) UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor calls this method when the Interactor ends an activation event on this Interactable. protected override void OnDeactivated(DeactivateEventArgs args) Parameters args DeactivateEventArgs Event data containing the Interactor that is sending the deactivate event. Remarks args is only valid during this method call, do not hold a reference to it. See Also OnActivated(ActivateEventArgs) OnHoverEntered(HoverEnterEventArgs) The UnityEngine.XR.Interaction.Toolkit.XRInteractionManager calls this method when the Interactor first initiates hovering over an Interactable in a second pass. protected override void OnHoverEntered(HoverEnterEventArgs args) Parameters args HoverEnterEventArgs Event data containing the Interactor that is initiating the hover. Remarks args is only valid during this method call, do not hold a reference to it. See Also OnHoverExited(HoverExitEventArgs) OnSelectEntered(SelectEnterEventArgs) The UnityEngine.XR.Interaction.Toolkit.XRInteractionManager calls this method when the Interactor first initiates selection of an Interactable in a second pass. protected override void OnSelectEntered(SelectEnterEventArgs args) Parameters args SelectEnterEventArgs Event data containing the Interactor that is initiating the selection. Remarks args is only valid during this method call, do not hold a reference to it. See Also OnSelectExited(SelectExitEventArgs) OnSelectExited(SelectExitEventArgs) The UnityEngine.XR.Interaction.Toolkit.XRInteractionManager calls this method when the Interactor ends selection of an Interactable in a second pass. protected override void OnSelectExited(SelectExitEventArgs args) Parameters args SelectExitEventArgs Event data containing the Interactor that is ending the selection. Remarks args is only valid during this method call, do not hold a reference to it. See Also OnSelectEntered(SelectEnterEventArgs) Reset() See UnityEngine.MonoBehaviour. protected override void Reset()"
  },
  "api/VRBuilder.XRInteraction.User.InteractorLayerConfigurator.html": {
    "href": "api/VRBuilder.XRInteraction.User.InteractorLayerConfigurator.html",
    "title": "Class InteractorLayerConfigurator | VR Builder Documentation",
    "keywords": "Class InteractorLayerConfigurator Namespace VRBuilder.XRInteraction.User Assembly VRBuilder.XRInteraction.dll Configures interaction and/or raycast layers of a list of interactors to layers with the specified names. public class InteractorLayerConfigurator : MonoBehaviour, ILayerConfigurator Inheritance object Object Component Behaviour MonoBehaviour InteractorLayerConfigurator Implements ILayerConfigurator Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties LayerSet The layer set to be used on this configurator. public LayerSet LayerSet { get; } Property Value LayerSet Methods ConfigureLayers(string, string) Set up the layer masks to the specified layer names. public void ConfigureLayers(string interactionLayerName, string raycastLayerName) Parameters interactionLayerName string raycastLayerName string"
  },
  "api/VRBuilder.XRInteraction.User.html": {
    "href": "api/VRBuilder.XRInteraction.User.html",
    "title": "Namespace VRBuilder.XRInteraction.User | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.XRInteraction.User Classes InteractorLayerConfigurator Configures interaction and/or raycast layers of a list of interactors to layers with the specified names."
  },
  "api/VRBuilder.XRInteraction.XRLocomotionHandler.html": {
    "href": "api/VRBuilder.XRInteraction.XRLocomotionHandler.html",
    "title": "Class XRLocomotionHandler | VR Builder Documentation",
    "keywords": "Class XRLocomotionHandler Namespace VRBuilder.XRInteraction Assembly VRBuilder.XRInteraction.dll Locomotion handler for Unity XR. [RequireComponent(typeof(RigManipulationProvider))] public class XRLocomotionHandler : BaseLocomotionHandler Inheritance object Object Component Behaviour MonoBehaviour BaseLocomotionHandler XRLocomotionHandler Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CurrentPosition Current position of the XR Rig. public override Vector3 CurrentPosition { get; } Property Value Vector3 CurrentRotation Current rotation of the XR Rig. public override Quaternion CurrentRotation { get; } Property Value Quaternion RigManipulationProvider Locomotion provider to directly manipulate the XR Rig. protected RigManipulationProvider RigManipulationProvider { get; } Property Value RigManipulationProvider Methods SetPositionAndRotation(Vector3, Quaternion) Sets a new position and rotation for the rig or camera. public override void SetPositionAndRotation(Vector3 destinationPosition, Quaternion destinationRotation) Parameters destinationPosition Vector3 Target position. destinationRotation Quaternion Target rotation."
  },
  "api/VRBuilder.XRInteraction.html": {
    "href": "api/VRBuilder.XRInteraction.html",
    "title": "Namespace VRBuilder.XRInteraction | VR Builder Documentation",
    "keywords": "Namespace VRBuilder.XRInteraction Classes ActionBasedControllerManager Use this class to map input actions to each controller state (mode) and set up the transitions between controller states (modes). ActionBasedControllerManager.ControllerState Use this class to create a controller state and set up its enter, update, and exit events. ActionBasedControllerManager.StateEnterEvent ActionBasedControllerManager.StateExitEvent ActionBasedControllerManager.StateUpdateEvent ControllerManager Handles controller states interactions. Contains all methods for performing basic math functions. DirectInteractor Interactor used for directly interacting with interactables that are touching. This is handled via trigger volumes that update the current set of valid targets for this interactor. This component must have a collision volume that is set to be a trigger to work. InteractableHighlighter Handles highlighting for attached InteractableObject. InteractableObject Interactable component that allows basic \"grab\" functionality. Can attach to selecting interactor and follow it around while obeying physics (and inherit velocity when released). LocomotionSchemeManager Use this class as a central manager to configure locomotion control schemes and configuration preferences. RayInteractor Interactor used for interacting with interactables at a distance. This is handled via raycasts that update the current set of valid targets for this interactor. RigManipulationProvider Locomotion provider to directly manipulate the XRRig's position and rotation. SnapZone Interactor used for holding interactables via a socket. This component is not designed to be attached to a controller (thus does not derive from XRBaseControllerInteractor) and instead will always attempt to select an interactable that it is hovering (though will not perform exclusive selection of that interactable). SnapZonePreviewDrawer Draws a preview of SnapZone highlight. TeleportationAnchorProximityEntry This adds the possibility to move the user into a UnityEngine.XR.Interaction.Toolkit.TeleportationAnchor and trigger the teleport event without teleporting. It will not change the users position or rotation set in the UnityEngine.XR.Interaction.Toolkit.TeleportationAnchor. TeleportationAnchorVRBuilder Teleportation anchor override that ensures a teleport provider is found even when the rig has been spawned after loading the scene. TeleportationAreaVRBuilder Teleportation area override that ensures a teleport provider is found even when the rig has been spawned after loading the scene. XRLocomotionHandler Locomotion handler for Unity XR. Structs ControllerManager.ControllerState Current status of a controller. there will be two instances of this (for left/right). and this allows the system to change between different states on each controller independently. ControllerManager.InteractorController A simple state machine which manages the three pieces of content that are used to represent a controller state within the XR Interaction Toolkit. Enums ActionBasedControllerManager.StateID Reference to an interaction state. ControllerManager.ControllerStates LocomotionSchemeManager.MoveForwardSourceType Sets which orientation the forward direction of continuous movement is relative to. LocomotionSchemeManager.MoveSchemeType Sets which movement control scheme to use. LocomotionSchemeManager.TurnStyleType Sets which turn style of locomotion to use."
  },
  "articles/animations-manual.html": {
    "href": "articles/animations-manual.html",
    "title": "Animations for VR Builder | VR Builder Documentation",
    "keywords": "Animations for VR Builder Table of Contents Animations for VR Builder Table of Contents Introduction Quick Start Behaviors Animation Animate Transform Introduction Inspector Follow Path Introduction Inspector The Bezier Spline Path Property Rotate Around Axis Introduction Inspector Set Animator Parameter Introduction Inspector Show Exploded View Introduction Inspector Contact Introduction This add-on contains a collection of animation behaviors that allow VR Builder to display more complex animations than what is possible with the built-in tools. When installed, the Move Object core behavior will be disabled in the menu, as its functionality is 100% included in the new Animate Transform behavior. To manually enable it, go to Tools > VR Builder > Developer > Allowed Menu Items Configuration. Quick Start The easiest way to get started with this add-on is to check out the included demo scene. If it is the first time you open the demo scene, you will have to do it through the menu: Tools > VR Builder > Demo Scenes > Animations. This is necessary as a script will copy the demo course in the StreamingAssets folder. After the first time, the demo scene can be opened normally. Press Play to try out the behaviors included in this add-on. The demo scene includes a station for every behavior. You can teleport there and check out some practical uses of the included behaviors. Behaviors Animation Animate Transform Introduction This behavior animates a game object by changing its position, rotation and scale over time until it matches those of a \"transform provider\" game object. It is possible to set how position, rotation and scale are animated over time through separate animation curves. The behavior can be found under Animation > Animate Transform. Inspector The Animate Transform behavior accepts the following parameters. Object: The game object to be moved. Final transform provider: The game object which provides the final position, rotation and scale of the animation. Duration (in seconds): Duration in seconds of the animation. Position curve, Rotation curve, Scale curve: These animation curves determine the object's transform at a given point in time. The curve can have values from 0 (the object's original position, rotation or scale) to 1 (the transform provider's position, rotation or scale). Note that the length of the curves is normalized: while it is possible to have the time axis greater or lesser than 1, this won't affect the duration of the animation - it is recommended to leave the time axis to the default length of 0 to 1. Ping pong: If this is checked, the animation will play backwards after finishing, resulting in the object animating and then returning to the original position. Note the total duration will be twice the value in the Duration field. This is similar to creating a symmetrical velocity curve, like for example a bell shape. Repeats: The number of times the animation will repeat. Note that each repeat will increase the duration of the animation by its full amount. If ping pong is set, it will be included in every repeat. Follow Path Introduction This behavior animates a game object so that it follows a path, for example a spline. It is possible to set a curve determining how fast the object moves along the path, plus a number of options described below. The behavior can be found under Animation > Follow Path. Inspector The Follow Path behavior accepts the following parameters. Object: The game object to be moved. Path: The path the object will follow. This needs to be an IPathProperty, like the BezierSplinePathProperty provided in VR Builder Core. Keep relative position: If unchecked, the object will be teleported on the path when the animation starts, and its position throughout the animation will be on the path itself. If checked, the object will retain its current position and move parallel to the path while animating. Keep relative rotation: If unchecked, the object will rotate so that its forward vector follows the direction of the path throughout the animation. If checked, the object will retain its current orientation, but still rotate following the direction of the path. Duration (in seconds): Duration in seconds of the animation. Velocity curve: This animation curve determines the object's position on the path at a given point in time. The position on the path can be a value from 0 (start) to 1 (end). Note that the curve length is normalized: while it is possible to have the time axis greater or lesser than 1, this won't affect the duration of the animation - the curve will be extended or compressed to fit the provided time duration. The first key of the curve should always be at 0 on the horizontal axis. Disable Rotation: If enabled, the object will not rotate while following the path and the settings on Keep relative rotation will be ignored. Reverse: Utility checkbox that plays the animation backwards. It is equivalent to mirroring the velocity curve. Ping pong: If this is checked, the animation will play backwards after finishing, resulting in the object animating and then returning to the original position. Note the total duration will be twice the value in the Duration field. This is similar to creating a symmetrical velocity curve, like for example a bell shape. Repeats: The number of times the animation will repeat. Note that each repeat will increase the duration of the animation by its full amount. The Bezier Spline Path Property The BezierSplinePathProperty is an implementation of the IPathProperty interface included in VR Builder core, and can thus be used to create paths for the Follow Path behavior. It's recommended to add it to an empty game object. It will automatically add a BezierSpline component, which will display a default 4 point Bezier curve in the scene. It is possible to select and move the points in 3D space to manipulate the curve. We can see the position of the currently selected point in the inspector. By clicking Add Curve in the BezierSpline inspector, we can add a second bezier curve connected to the current one. With a point selected in the inspector, it is possible to change the point mode. The color of the point changes depending on the mode selected. The following modes are available. Free (Magenta): The handles of the adjacent curves are independent, and can form a sharp angle if not aligned. Aligned (Yellow): The handles of the adjacent curves are aligned, so there will be a smooth transition, but their length can be set individually. Mirrored (Cyan): The handles of the adjacent curves are aligned and of equal length. Other options are: Loop: Will close the path to form a loop. Especially useful with repeats, as the object will keep going around the path. Approximate Linear Velocity: Normally, velocities on a Bezier curve are non-linear. This means that, by default, the object's speed will change depending on where it is on the path and which curve it is on. Enabling this option will make the object approximate a linear speed, which means that the animation speed will be actually more faithful to the animation curve. Granularity of Approximation: This parameter is only exposed if Approximate Linear Velocity is selected. It determines the number of segments each curve will be subdivided in, a higher value will result in a more constant speed along the path, very low values (less than 10) can cause the object to change speed in a strange way. Lowering the value can increase performance. Rotate Around Axis Introduction This behavior rotates an object around a given axis. The object rotates a specified amount of degrees in a given time. The axis can be represented by a second transform, and it is possible to choose whether the object will rotate around the X, Y or Z axis of that object. Inspector It is possible to configure the following parameters. Object: The object to be rotated. Rotation Axis Provider: The object defining the position of the rotation axis. If none is selected, the axis will pass through the origin of the rotating object, which in most cases means that the object will rotate on itself. Rotation Axis: The local axis of the provider object which will be used to rotate around. Duration (in seconds): The total duration of the animation. Animation Curve: Defines the state of the animation over time. The X axis represents the duration of the animation (normalized), while the Y axis represents values from the object's initial rotation (0) and the object's target rotation defined above (1). Set Animator Parameter Introduction This set of behaviors allow to control the parameters of multiple Animator components from within VR Builder. The included behaviors are: Set Animator Trigger Parameter Set Animator Boolean Parameter Set Animator Integer Parameter Set Animator Float Parameter These behaviors set the specified parameter to the desired value immediately. The float variant can additionally change the parameter over time, following an animation curve. Inspector The inspector for these behaviors works similarly for all variants, although not all variants have all options. The behavior makes use of the following parameters. Animator: Process Scene Objects containing an Animator Property. As usual, it is possible to automatically add the property, but the user should ensure there is a configured Animator component present on the same game object as the property. Parameter name: The name of the parameters in the Animator as a string. Target value (not present on trigger): The desired new value for the parameter. It is not present on the Set Animator Trigger behavior as triggers don't store values. Duration (in seconds) (float only): The amount of time in seconds before the float parameter reaches its final value. If set to 0, the value will change instantly like in the other behaviors. Animation curve (float only): Describes how the float value changes over time. The X axis represents the duration of the transition, while the Y axis represents the current value, with 0 being the initial value and 1 the target value. Show Exploded View Introduction This behavior lets you easily create an exploded view of an object with a number of child objects. By default, all immediate children of the specified game objects will be displaced by the specified factor relative to their current local position. This means that children with a local position of zero will not be displaced. Note that you can create empty objects with the desired relative positions in order to achieve the desired effect. It is also possible to manually set which child objects will be displaced. You can do so by adding them to the Explodable Child Objects list on the Explodable Property of the target object. If the list is not empty, only the objects in the list will be exploded, otherwise all first-level children will be selected. Inspector Object: The game object to be exploded. Scale: How much the children will displace themselves from their initial position. A scale of 1 represent the initial position and can be used to un-explode the view. Values above 1 will explode the view, and below 1 will implode. Duration (in seconds): Duration in seconds of the animation. Explosion curve: This curve determines the object's position at a given point in time. The curve can have values from 0 (the child's original position) to 1 (the final position). Note that the length of the curves is normalized: while it is possible to have the time axis greater or lesser than 1, this won't affect the duration of the animation - it is recommended to leave the time axis to the default length of 0 to 1. Ping pong: If this is checked, the animation will play backwards after finishing, resulting in the object animating and then returning to the original position. Note the total duration will be twice the value in the Duration field. This is similar to creating a symmetrical velocity curve, like for example a bell shape. Repeats: The number of times the animation will repeat. Note that each repeat will increase the duration of the animation by its full amount. If ping pong is set, it will be included in every repeat. Contact Join our official Discord server for quick support from the developer and fellow users. Suggest and vote on new ideas to influence the future of the VR Builder. Make sure to review our asset if you like it. It will help us immensely. If you have any issues, please contact contact@mindport.co. We’d love to get your feedback, both positive and constructive. By sharing your feedback you help us improve - thank you in advance! Let’s build something extraordinary! You can also visit our website at mindport.co."
  },
  "articles/process-menu-manual.html": {
    "href": "articles/process-menu-manual.html",
    "title": "Menus for VR Builder | VR Builder Documentation",
    "keywords": "Menus for VR Builder Table of Contents Menus for VR Builder Table of Contents Introduction Quick Start How to Use the Menu Desktop Process Menu Standalone Process Menu Customizing the Process Controller Contact Introduction This add-on provides examples on how to build a menu that allows to control the process execution in VR Builder. The menu allows to display the current step and its description, skip it by choosing a transition, switch chapters or restart the process. Two prefabs are included. One displays the menu on the desktop screen, allowing an external person to control the process. This can be useful for example in training scenarios with a trainee in VR and a trainer at the computer. The other displays the menu in VR, floating in front of the user. This can be useful for standalone headsets, which lack a flat screen view, or in cases where the user is supposed to control the process themselves. Quick Start Drag one of the prefabs in the Prefabs folder in your process scene. The menu will appear when pressing Play. Feel free to try it out with the demo scene included in VR Builder! The process starts automatically in VR Builder. If you want the process to be started from the menu, you will have to provide a custom [PROCESS_CONTROLLER]. You can find more information on how to do so here. How to Use the Menu Desktop Process Menu The desktop process menu is laid out as follows. VR Builder logo. Feel free to replace it with your own! Current chapter. You can use the drop-down to skip to a later chapter. Process state indicator. It appears when the process is running. Name of the current step. Info button. Click it to see the description of the current step. Skip Step button. Clicking this button will fast-forward to the following step. If the process is not running, it is replaced by the Start Process button. Restart process button. Clicking it will restart the process from the beginning. Audio toggle. Enables/disables process audio. The desktop menu can be used by clicking with the mouse on the desired option. Standalone Process Menu The standalone process menu is laid out as follows. VR Builder logo. Feel free to replace it with your own! Current chapter. You can use the drop-down to skip to a later chapter. Process state indicator. It appears when the process is running. Name of the current step. Info button. Click it to see the description of the current step. Skip Step button. Clicking this button will fast-forward to the following step. If the process is not running, it is replaced by the Start Process button. Restart process button. Clicking it will restart the process from the beginning. Audio toggle. Enables/disables process audio. The standalone menu is designed to be opened through user input. By default, the primary button on the right controller opens the menu. This can be changed on the Standalone Menu Handler component on the menu prefab. In case you want the menu to be permanently present in the scene, remove the Standalone Menu Handler component from the prefab. In the inspector, it is possible to select which button can be used to open and close the menu. The Standalone Menu Handler also takes care of repositioning the menu in front of the user every time it is opened. The standalone menu can be interacted with by pointing at it with a ray and pressing the trigger button. Customizing the Process Controller The process controller can be configured on the [PROCESS_CONTROLLER] game object in a VR Builder scene. This object handles running the process and a few configuration parameters. The Process Controller Setup script lets you choose which process controller prefab is spawned when the scene runs. It is possible to select one of the default process controller prefabs, or use a custom one by ticking the Use custom prefab box. It is also possible to select whether to auto start the process, or start it manually, for example through one of the menus provided in this add-on. Both default process controllers automatically start the process when the scene runs. If you want to avoid that, so the process can be started from the menu, you'll have to create a custom process controller prefab. You can use one of the default ones found in Assets\\MindPort\\VR Builder\\Core\\Source\\Basic-UI-Component\\Runtime\\ProcessController\\Resources\\Prefabs as a baseline. The Basic Process Loader component ensures the process runs on scene start. To prevent this behavior, do not include this script in your custom controller. Contact Join our official Discord server for quick support from the developer and fellow users. Suggest and vote on new ideas to influence the future of the VR Builder. Make sure to review VR Builder and this asset if you like it. It will help us immensely. If you have any issues, please contact contact@mindport.co. We'd love to get your feedback, both positive and constructive. By sharing your feedback you help us improve - thank you in advance! Let's build something extraordinary! You can also visit our website at mindport.co."
  },
  "articles/randomization-manual.html": {
    "href": "articles/randomization-manual.html",
    "title": "Randomization for VR Builder | VR Builder Documentation",
    "keywords": "Randomization for VR Builder Table of Contents Randomization for VR Builder Table of Contents Introduction Quick Start The Random Branch Node Logging the Random Branch node Data Properties Creating Data Properties Working with Data Properties Set Value Behaviors Reset Value Behavior Compare Values Conditions Logging Data Properties Set Random Boolean Behavior Configuration Set Random Number Behavior Configuration Contact Introduction The Randomization add-on makes it easy to add unpredictability to a VR Builder process. It includes a new type of node, called Random Branch, which allows to add random events and alternative paths with zero effort. Additionally, there are a couple tools to work with data properties: behaviors to set random booleans and numbers. You can use these to set random values for the process, and compare those values in condition, to make sure that every run of a process will be different than last time. Quick Start You can check out the main features of this add-on in the provided demo scene. After importing the package in a properly set-up VR Builder project, you can access the demo scene from the menu Tools > VR Builder > Demo Scenes > Randomization. It is necessary to open the demo scene from the menu at least the first time, so a script will copy the required process file in the StreamingAssets folder. In the demo scene, the user must check and change the pressure of the tires of a car by using a provided tool. It is a freeform process, where the user can check the tires in any order and even go back to previous ones. Once done, putting the tool in the box triggers the final evaluation. This scene uses the Random Branch node to randomly select a scenario when the process starts, and the Set Random Number behavior to set the initial tire pressure to random values. You can press Play to try out the scene, or open the Process Editor to check out how the process is made. Additionally, you can find a tutorial on how this demo scene was created on our website. The Random Branch Node The Randomization add-on introduces a new type of node in addition to the standard step: the Random Branch node. This is a special kind of step that immediately routes the process to a random transition. This can be useful to add random events to your process. To create it, select the new Create Random Branch option in the context menu. The Random Branch node is designed so it can be configured directly in the Process Editor window. You can add and remove transitions at will, like any step. The fields to the left of the output port can be used to specify a weight, so it is possible for some transitions to be more probable than others. By default, all weights are 1 and all transitions have equal chance to trigger. The weight can be any arbitrary number above or equal to zero. In the example above, the weights have a total of 5. This means that the Very Probable Step has a a 50% chance to be selected, while the Improbable Step only has one chance in ten. Note that it can be useful to set a weight to zero for debugging purposes - such a transition will never be selected, so it is possible to steer the process through the desired nodes. If all weights in a node are equal to zero, however, the first transition will be selected. Logging the Random Branch node If VR Builder is set to log step output in the Project Settings, Random Branch nodes will create a log entry stating which transition has been selected. Data Properties This add-on makes use of data properties to store values. A data property is a VR Builder property that stores one value of a defined data type, for example a number or a boolean. It is then possible to access those in the process steps to read or change the values. This add-on supports two types of data properties. Number Data Property: Stores a single number (C# type: float). Boolean Data Property: Stores a true/false value (C# type: bool). Creating Data Properties We consider good practice to have each data property on a different, appropriately named empty game object, e.g. \"Total Points\". This way it is easy to keep track of them and drag them in the step inspector when needed. To create the property itself, just add a Data Property component of the required type to the game object, or do it directly in the step inspector through \"Fix it\" button. In the inspector, it is possible to type a default value for the data property. The property will have that value at the start of the process, and the Reset Value behavior will reset the property to its default. Working with Data Properties There are some standard tools to work with data properties. These are the Set/Reset Value behaviors, which are used to change the value stored in a data property, and the Compare Values conditions, which compare two values (from data properties or constant) to check if they are fulfilled. Set Value Behaviors These behaviors set the value of a data property to a value specified in the step inspector. There is one behavior for each data property type. In the Randomization add-on, it is possible to set data properties of type Boolean and Number. Reset Value Behavior This behavior resets a data property's value to its default. This is zero for numerical values and false for booleans, but a different default can be specified in the inspector of the data property. The property needs to be referenced in the step inspector, and will reset when the behavior is triggered. Compare Values Conditions In the Randomization add-on it is possible to use a Compare Numbers or Compare Booleans condition. These can for example compare a random value to a constant in order to branch a process a certain way. They work in a similar way, but the comparison operators differ. You'll need to select two values and the operation between them. Use the radio buttons to select if a value comes from a data property or is a constant entered in the step inspector. In the example below, the condition will be fulfilled when the RandomNumber property is greater than 5. Logging Data Properties It can be useful to log value changes to data properties in the console for debugging purposes. This can be enabled globally by ticking the relevant box in Project Settings -> VR Builder -> Settings. ] If the Log Data Property changes checkbox is enabled, changes to the value of the data property will be logged in the console like the following example. Note that the name provided is the game object's name. Set Random Boolean Behavior This behavior works similarly to the Set Boolean behavior, except the property is not set to a specific value. Instead, it will be randomly set to true or false at runtime. It is possible to specify the probability of it to be true by moving the slider from 0 (always false) to 1 (always true). Configuration Data Property: The boolean data property to set to a random value. Probability to be True: The probability of the randomized value to be true measured from 0 (always false) to 1 (always true). Set Random Number Behavior This behavior sets a number data property to a random value within a range. Configuration Data Property: The number data property to set to a random value. Min Value: The minimum value the randomized number can have. Max Value: The maximum value the randomized number can have. Randomize Integer: If checked, the randomized number will be an integer within the range. Otherwise it can be any float in the range. Contact Join our official Discord server for quick support from the developer and fellow users. Suggest and vote on new ideas to influence the future of the VR Builder. Make sure to review VR Builder and this asset if you like it. It will help us immensely. If you have any issues, please contact contact@mindport.co. We'd love to get your feedback, both positive and constructive. By sharing your feedback you help us improve - thank you in advance! Let's build something extraordinary! You can also visit our website at mindport.co."
  },
  "articles/states-and-data-manual.html": {
    "href": "articles/states-and-data-manual.html",
    "title": "States and Data for VR Builder | VR Builder Documentation",
    "keywords": "States and Data for VR Builder Table of Contents States and Data for VR Builder Table of Contents Introduction Quick Start Data Properties Creating Data Properties Working with Data Properties Set Value Behaviors Reset Value Behavior Compare Values Conditions Utilities Logging Data Properties Math Operation Behavior Trigger Event Behaviors Trigger Event Behavior Parameters State Data Properties Creating a State Data Property Handling States in Code Set State Behavior Check State Condition Contact Introduction The States and Data add-on provides developers the tools to create processes more complex and customized than before. Thanks to the support of variables in the VR Builder process, it is possible to store values to create triggers or track performance, and to create branching processes with a variety of outcomes. The states feature allows VR Builder process to interact with objects in the scene by changing and reading states instead of handling all the object's logic. This allows the user to quickly write custom code and easily integrate it in the VR Builder process, opening the way to endless customization and better performance. Quick Start You can check out the main features of this add-on in the provided demo scene. After importing the package in a properly set-up VR Builder project, you can access the demo scene from the menu Tools > VR Builder > Demo Scenes > States and Data. It is necessary to open the demo scene from the menu at least the first time, so a script will copy the required process file in the StreamingAssets folder. The demo scene consists of a color mixing machine. The user adds bottles of color in the machine to mix a new color, then can press the button to spawn a ball of the created color. It uses the data properties included in this add-on for storing and calculating the mixed color, while the machine is controlled by states. You can press Play to try out the scene, or open the Process Editor to check out how the process is made. Additionally, you can find a tutorial on how this demo scene was created on our website. Data Properties This add-on makes use of data properties to store values. A data property is a VR Builder property that stores one value of a defined data type, for example a number or a boolean. It is then possible to access those in the process steps to read or change the values. There are four types of data properties in this add-on. Number Data Property: Stores a single number (C# type: float). Text Data Property: Stores a string of text (C# type: string). Boolean Data Property: Stores a true/false value (C# type: bool). State Data Property: Stores a state value. More detailed information below (C# type: int, exposed as enum). Creating Data Properties We consider good practice to have each data property on a different, appropriately named empty game object, e.g. \"Total Points\". This way it is easy to keep track of them and drag them in the step inspector when needed. To create the property itself, just add a Data Property component of the required type to the game object, or do it directly in the step inspector through \"Fix it\" button. In the inspector, it is possible to type a default value for the data property. The property will have that value at the start of the process, and the Reset Value behavior will reset the property to its default. Additionally, it is possible to subscribe to the property events. Working with Data Properties There are some standard tools to work with data properties. These are the Set/Reset Value behaviors, which are used to change the value stored in a data property, and the Compare Values conditions, which compare two values (from data properties or constant) to check if they are fulfilled. Set Value Behaviors These behaviors set the value of a data property to a value specified in the step inspector. There is one behavior for each data property type. The available behaviors are listed here. Set Number Set Boolean Set Text Set State Reset Value Behavior This behavior resets a data property's value to its default. This is zero for numerical values, false for booleans and an empty string for text, but a different default can be specified in the inspector of the data property. The property needs to be referenced in the step inspector, and will reset when the behavior is triggered. Compare Values Conditions In States and Data it is possible to use a Compare Numbers, Compare Text or Compare Booleans condition. They work in a similar way, but the comparison operators differ. You'll need to select two values and the operation between them. Use the radio buttons to select if a value comes from a data property or is a constant entered in the step inspector. In the example below, the condition will be fulfilled when the Score Tracker value is equal or greater than the Point Threshold value. Utilities Some data properties can have utility functions to make them handier to use with Unity events. At the moment the following utility functions are available: Number Data Property: You can use the IncreaseValue(float) function to increase or decrease the value of the data property. Boolean Data Property: you can use the InvertValue() function to switch it from true to false, or viceversa. Logging Data Properties It can be useful to log value changes to data properties in the console for debugging purposes. This can be enabled globally by ticking the relevant box in Project Settings -> VR Builder -> Settings. ] If the Log Data Property changes checkbox is enabled, changes to the value of the data property will be logged in the console like the following example. Note that the name provided is the game object's name. Math Operation Behavior The Math Operation behavior performs an operation on a data property and updates it with the result of the operation. It takes three parameters, Left Operand, Right Operand and Operator. Left operand is the data property that will be changed by the operation. Right Operand can either be another data property or a constant value entered in the inspector. Operator defines the type of operation to perform. The operators currently available are listed here. Add: left + right Subtract: left - right Multiply: left * right Divide: left / right Min: change left to the lowest value between left and right Max: change left to the highest value between left and right For example, the operation in the image will add 1 to the Blue data property. Trigger Event Behaviors This collection of behaviors let VR Builder trigger a Unity event on multiple scene objects. This gives you the freedom to bind your own functions to the event and execute custom code like it was a VR Builder behavior (although note that the behavior will end right after calling the event, so the next step could be activated immediately). This is achieved through an event property which is added to the desired process scene object. There are various permutations available for this behavior. It is possible to pass the following data to the event. No data Number (float) Text (string) Boolean These value can be set in the behavior itself and can either be constant or data properties. Trigger Event Behavior Parameters Targets References to the scene objects holding the event property we want to trigger. Argument (Behaviors with data only): Lets you specify a parameter to pass to the event. The type of the parameter (or corresponding data property) can be Number (float), Text (string) or Boolean (bool). Execution stages: Lets you select if the event is triggered as soon as the step starts, just before the step ends or both. State Data Properties Sometimes we need to simulate a complex behavior that is part of the environment rather than the process. For example, a machinery that can be idle, running, blocked or broken, or a door that can be locked, unlocked or open. In these case, it might make sense to code the object's logic directly with Unity Monobehaviors rather than trying to write very complex custom behaviors. This can also make sense if the object is independent from the process - for example, the machine will keep running regardless of the user's position in the process, or is designed to break randomly. Maybe we only want VR Builder to decide when the machine starts running, or to trigger a step when it breaks, but we don't need it to be in control of what exact animation the object is into, or what sound it plays - these are characteristics that are intrinsical to the machine, so we shouldn't care about them in the process. We can use a State Data Property as a communication layer between our VR Builder process and some custom logic we have written for an object. This is a data property which contains an enum listing all the states an object can be in. Like all data properties, it can be read and set both from the Step Inspector and from code. This allows your custom logic and the VR Builder process to interact with each other. Creating a State Data Property You will need to define your enum and create a state data property specific to it. For the machinery described above, it could look like this. public enum MachineState { Idle, Running, Blocked, Broken, } We then need to create a data property component using this enum from the generic state data property. This is just a couple lines. using VRBuilder.StatesAndData.Properties; public class MachineStateDataProperty : StateDataProperty<MachineState> { } We'll now be able to add this as a component to a game object. As it can be seen from the drop-down for the default value, it makes use of the MachineState enum. Handling States in Code We can read and modify states from code calling the GetState and SetState methods on the data property component. MachineStateDataProperty stateDataProperty = GetComponent<MachineStateDataProperty>(); // Set a state to a specified value. stateDataProperty.SetState(MachineState.Running); // Read the current state. MachineState state = stateDataProperty.GetState(); It is also possible to subscribe to the standard data property events ValueChanged and ValueReset, respectively called when the data property value changes or is reset to its default value. MachineStateDataProperty stateDataProperty = GetComponent<MachineStateDataProperty>(); // Subscribe to the value changed event. dataProperty.ValueChanged += OnValueChanged; // Function to be called when the event is triggered. private void OnValueChanged(object sender, EventArgs e) { // Code to be executed on value changed. } Set State Behavior The Set State behavior can be used to change the property's state from the VR Builder process. It works very similarly to the Set Value behavior, the only difference being that the state drop-down will not be visible until a State Data Property is dragged in the inspector, as it depends on the provided enum. It is also possible to use the Reset Value behavior on a State Data Property, it will work like any other data property. Check State Condition It is possible for a process to read a state and react accordingly using the Check State condition. This condition compares a State Data Property to a specified value, in a way similar to other conditions comparing values. A number of operations are available. Since enum values can be ordered, it is also possible to check if the state precedes or follows the specified one. Contact Join our official Discord server for quick support from the developer and fellow users. Suggest and vote on new ideas to influence the future of the VR Builder. Make sure to review VR Builder and this asset if you like it. It will help us immensely. If you have any issues, please contact contact@mindport.co. We'd love to get your feedback, both positive and constructive. By sharing your feedback you help us improve - thank you in advance! Let's build something extraordinary! You can also visit our website at mindport.co."
  },
  "articles/track-and-measure-manual.html": {
    "href": "articles/track-and-measure-manual.html",
    "title": "Track and Measure for VR Builder | VR Builder Documentation",
    "keywords": "Track and Measure for VR Builder Table of Contents Track and Measure for VR Builder Table of Contents Introduction Quick Start Data Properties Creating Data Properties Data Property Displays Working with Data Properties Set Value Behaviors Reset Value Behavior Compare Values Conditions Score Tracking Update Score Behavior Feedback Providers Creating Custom Score Feedback Providers Time Tracking Start Timer Behavior Stop Timer Behavior Resetting a Timer Timer at Zero Condition Displaying Time Contact Introduction This add-on for VR Builder focuses on tracking performance of the VR user, and provides tools like timers and point trackers. With it, it is easy to measure the time taken to perform tasks and to assign scores while providing feedback to the user. Quick Start You can check out the main features of this add-on in the provided demo scene. After importing the package in a properly set-up VR Builder project, you can access the demo scene from the menu Tools > VR Builder > Demo Scenes > Track and Measure. It is necessary to open the demo scene from the menu at least the first time, so a script will copy the required process file in the StreamingAssets folder. The demo scene includes two stations, which highlight respectively point tracking and time tracking. Feel free to try those in VR. You can also open the Process Editor to see an example of how the provided conditions and behaviors can be used in a process. Data Properties This add-on makes use of data properties to store data values. A data property is a VR Builder property that stores one value of a defined data type, for example a number or a boolean. It is then possible to access those in the process steps to read or change the values. Creating Data Properties We consider good practice to have each data property on a different, appropriately named empty game object, e.g. \"Total Points\" or \"Assembly Time\". This way it is easy to keep track of them and drag them in the step inspector when needed. To create the property itself, just add a Data Property component of the required type to the game object, or do it directly in the step inspector through the usual \"Fix it\" button. In the inspector, it is possible to type a default value for the data property. The property will have that value at the start of the process, and the Reset Value behavior will reset the property to that value. Data Property Displays While data properties are assigned to game objects, they are just abstract values, and they are not visible in the scene. Yet, it can be useful to make them visible to the user. This add-on includes a few prefabs which can visualize the contents of data properties on a text mesh. They can be used as they are, or edited and combined with your own prefabs. Start by dragging in the scene a display of the appropriate type (number, text, boolean or time). Then reference the desired data property in the Data Property field of the display component on the prefab. The display should already work when the process is started. It is possible to configure the displayed text by editing the Text field of the display component. The following variables can be used: {0}: The value stored in the data property. {1}: The name of the game object the property is on. These variables support the .NET string formatting rules as detailed here. For example, you might want to limit the fractional digits of a number data property. Writing the variable as {0:f2} will always show two fractional digits, while writing it as {0:f0} will display only the integer part. It is also possible to format time in the time display this way, for instance {0:mm}:{0:ss}.{0:fff} will display minutes, seconds and fractional digits formatted like \"02:34.673\". Working with Data Properties There are some standard tools to work with data properties. These are the Set/Reset Value behaviors, which are used to change the value stored in a data property, and the Compare Values conditions, which compare two values (from data properties or constant) to check fulfillment. Set Value Behaviors The Track and Measure add-on provides this behavior in two flavors: Set Number and Set Boolean. They work the same way: reference an object with a data property of the corresponding type, and input the new value. The value will change when the behavior is triggered. Reset Value Behavior This behavior resets a data property's value to its default. This is zero for numerical values, false for booleans and an empty string for text, but a different default can be specified in the inspector of the data property. The property needs to be referenced in the step inspector, and will reset when the behavior is triggered. This can be useful for example for resetting a timer. Compare Values Conditions In Track and Measure it is possible to use a Compare Numbers condition or a Compare Booleans condition. They work in a similar way, but the comparison operators differ. You'll need to select two values and the operation between them. Use the radio buttons to select if a value comes from a data property or is a constant entered in the step inspector. In the example below, the condition will be fulfilled when the Score Tracker value is equal or greater than the Point Threshold value. Score Tracking One of the aims of this add-on is to provide an easy way to track scores and quantify performance in a VR process. For this, the main tool is the Update Score behavior, which can add or subtract from a numerical data property and trigger relevant user feedback. Update Score Behavior The Update Score behavior requires you to specify a Number Data Property holding the score and the amount increase. Note that this can be a negative amount. When the behavior is triggered, the value in the data property will be updated accordingly. Additionally, you can add feedback to the score increase by referencing a feedback provider object in the Feedback property field. If you do, you can also specify a process scene object which will provide the position for position-dependent feedback, like the floating text in our default implementation.If no position provider is referenced, feedback using a position parameter will default to the feedback provider object’s position. Feedback Providers You can customize the user feedback for a score increase by adding score feedback components to a game object with a Score Feedback Property. When the Update Score behavior triggers, every component on the game object will trigger its feedback. For example, we offer two prefabs, one for providing positive feedback, one for negative. Both play a sound and display a floating number showing the score increase when triggered. If a position provider is specified in the behavior, both the floating number and the sound will trigger at the specified position, else it will trigger at the feedback object's position. This happens because the game object includes both a Floating Text Score Feedback component and an Audio Score Feedback component. These can be further configured by changing the prefabs they spawn, and new components can be added. Creating Custom Score Feedback Providers Creating your own score feedback provider components requires minimal coding skills. Just create a component implementing the IScoreFeedbackProvider interface and trigger your logic in the TriggerFeedback method. public class MyScoreFeedbackProvider : MonoBehaviour, IScoreFeedbackProvider { public void TriggerFeedback(float scoreDelta, float finalScore, Transform positionProvider) { // TODO Implement feedback logic. } } To customize your feedback, you can use the following parameters. scoreDelta: The score increase. finalScore: The total score after the increase. positionProvider: The transform where to trigger the feedback. Time Tracking This add-on allows creating and managing timers which can be used for tracking performance or changing the state of the process. This is done mostly through the Start Timer and Stop Timer behaviors. Those interact with a Timer Property on a game object, which in turn stores the elapsed time (in seconds) in a Number Data Property. Since the time is stored in a standard property, it is possible to use it as any numerical data, for example by dragging the timer game object in a Compare Values condition, and to display it in the scene like other data properties. Start Timer Behavior This behavior tells a Timer Property to start counting time in the attached Number Data Property, adding to the value already stored there. If Is countdown is selected, the timer will count down instead, and stop when zero is reached. Stop Timer Behavior This behavior stops a running timer. It does nothing on a Timer Property that is not running. The Number Data Property will store the time at which the timer was stopped, and if the timer starts again it will start counting from that value. Resetting a Timer Since a timer stores its data in a Number Data Property, a timer can be reset to 0 (or whatever default) by executing the Reset Value (or the Set Number) behavior on the timer's game object. Timer at Zero Condition It may be common to need a condition that completes when a timer reaches zero. Since the time is stored in a Number Data Property, no specific tool is needed - simply use a Compare Numbers Condition to check if the time is equal to zero. In fact, you can compare the stored time to any value, keeping in mind that the time is stored in seconds. Displaying Time Timers store their value in seconds in a Number Data Property. This means that of course a Number Display prefab will show that value. There is however one more prefab created specifically to show time: the Time Display shares many similarities with the Number Display but treats the value as time. By default it displays time in the mm:ss format, but that can be changed by editing the Text field. Since the field uses .NET formatting rules, it is possible to customize the time format as detailed here. Contact Join our official Discord server for quick support from the developer and fellow users. Suggest and vote on new ideas to influence the future of the VR Builder. Make sure to review VR Builder and this asset if you like it. It will help us immensely. If you have any issues, please contact contact@mindport.co. We’d love to get your feedback, both positive and constructive. By sharing your feedback you help us improve - thank you in advance! Let’s build something extraordinary! You can also visit our website at mindport.co."
  },
  "articles/vr-builder-manual.html": {
    "href": "articles/vr-builder-manual.html",
    "title": "VR Builder Manual | VR Builder Documentation",
    "keywords": "VR Builder Manual Table of Contents VR Builder Manual Introduction Requirements Installation Guide Through the Project Setup Wizard Welcome Interaction Settings XR Hardware Setup Unity Localization Help & Documentation Quick Start Demo Scene Overview Demo Scene Hierarchy Customizing the Rig Process Editor Chapters view Graph view Step Nodes Step Step Group Parallel Execution End Chapter Process Scene Objects Locomotion Continuous Movement Teleportation Behaviors Guidance Play Audio File Description Configuration Play TextToSpeech Audio Description Configuration Highlight Object Description Configuration Spawn Confetti Description Configuration Utility Behavior Sequence Description Configuration Example Delay Description Configuration Set Parent Description Configuration Load Scene Description Configuration Environment Disable Objects Description Configuration Enable Objects Description Configuration Disable Components Description Configuration Enable Components Description Configuration Unsnap Object Description Configuration Animation Move Object Description Configuration Conditions Environment Move Objects in Collider Description Configuration Object Nearby Description Configuration Interaction Grab Objects Description Configuration Release Objects Description Configuration Snap Objects Description Configuration Touch Objects Description Configuration Use Objects Description Configuration Utility Timeout Description Configuration Locomotion Teleport Description Configuration Online Documentation Acknowledgements Contact and Support Introduction VR Builder helps you create interactive VR applications better and faster. By setting up a Unity scene for VR Builder, you will pair it with a VR Builder process. Through the VR Builder process, you can define a sequence of actions the user can take in the scene and the resulting consequences. You can easily edit a process without coding through VR Builder's process editor. The process editor is a node editor where the user can arrange and connect the steps of the process. Each step is a different node and can include any number of behaviors, which make things happen in the scene. Likewise, a step will have at least one transition leading to another step. Every transition can list several conditions which have to be completed for the transition to trigger. For example, step B can be reached only after the user has grabbed the object specified in step A. Behaviors and conditions are the \"building blocks\" of VR Builder. Several of them are provided in the free version already. Additional behaviors and conditions are available in our paid add-ons. Since VR Builder is open source, you can always write your own behaviors and conditions as well. Behaviors and conditions can interact only with process scene objects. These are game objects in the scene which have a Process Scene Object component on them. The interaction capabilities of a process scene object can be increased by adding scene object properties to it. For example, adding a Grabbable Property component to a game object will let VR Builder know that the object is grabbable, and when it is grabbed. Normally it is not necessary to add properties manually to an object. When an object is dragged in the inspector of a condition or behavior, the user has the option to automatically configure it with a single click. Where possible, properties try to add and configure required components by themselves. If you add a Grabbable Property to a game object, this will automatically be made grabbable in VR (it still needs to have a collider and a mesh, of course). This makes it very easy to start from some generic assets and build a fully interactive scene. Requirements VR Builder is supported on Unity 2021.3 or later. It uses the built-in render pipeline by default, but URP is supported as well and existing materials can be easily converted. VR Builder works out of the box with any headset compatible with Unity's XR Interaction Toolkit. Installation You can get VR Builder from the Unity Asset Store or from our GitHub. In the first case, you will be able to download and import the VR Builder package from the package manager. If you have downloaded a .unitypackage from GitHub, just import it in the project. If you are creating a new project, select the 3D or 3D (URP) template. Note that it is not necessary to choose the VR template as VR Builder will configure the project for VR automatically. After importing, VR Builder will compile and import some dependencies. For older Unity versions, a dialog from Unity's XR Interaction Component appears. VR Builder should work with either choice, so select the option that better suits your existing project. Use I Made a Backup, Go Ahead! if you are starting a new project. This will trigger an automated restart. For newer Unity versions the Samples of the XR Interaction Toolkit might need an update. After these notifications the Project Setup Wizard will appear. Guide Through the Project Setup Wizard The Setup Wizard helps to get new or existing Unity scenes set up and ready to be used with VR Builder. Welcome In the following we will guide you through the different tabs of the VR Builder Setup Wizard. Click Next to proceed to the interaction settings page setup page. Interaction Settings Here you can configure some default settings related to VR Builder interactions. Right now, the only available setting will determine whether a newly created grabbable object will use physics or not. You can also change these options at any time in Project Settings > VR Builder > Settings. XR Hardware Setup Then, if it's not configured already, you will be able to configure your project to work with your VR hardware. If your hardware is not listed but supports OpenXR, select Other. You might need to finish the configuration under Project Settings -> XR Plug-in Management. If your device is not supported, please reach out to us in the VR Builder Community. The packages for the selected hardware will be imported after closing the wizard. Unity Localization Finally you must choose whether to set up localization support or skip it for now. VR Builder supports localization through the Unity Localization package. When setting up localization, the wizard will guide you through the manual steps required for a localized project. It provides a useful checklist and some shortcuts to make the task easier. It also has links that redirect to the relevant Unity documentation. If you decide to skip this setup, VR Builder will work in a single language. You can perform localization setup at any time. We encourage you to use Unity Localization, even if you use just one language. With Unity Localization, you will have all your texts in one place inside the Unity Localization Tables, which in turn will give you the possibility to export and refine them and import them back into Unity. Note that as of January 2024, we do not support asset localization tables. See Resources path/Key in the Documentation on how to localize audio files. Help & Documentation This page lists some useful resources to get you started with VR Builder. There is also a checkbox which lets you choose if the demo scene should be loaded after closing the wizard.After clicking Finish, VR Builder is set up! You will need to wait a few seconds for packages to import if you selected a headset from the hardware list. Then, feel free to try out the demo scene or create your own scene by selecting Tools > VR Builder > Scene Setup Wizard…. Note that if you selected the Unity URP template in the beginning, the materials on the avatar hands and demo scene will look solid magenta. That's Unity's way to tell you that the materials are not compatible with the current render pipeline. You can rectify this by selecting all materials (by filtering them in the project window), then click Edit > Rendering > Materials > Convert Selected Built-in Materials to URP. You can of course ignore this step if you don't plan to use the provided hand models or the demo scene. Quick Start You can get a first impression of VR Builder and its features by accessing the provided demo scene. This sample scene contains a pre-built process that showcases some of the interactions provided in VR Builder. You can automatically open the demo scene at the end of the setup wizard, or use the shortcut in Tools > VR Builder > Demo Scenes > Core. Note that, while the scene can be found and opened from disk, it is necessary to use one of the above methods at least once in order to automatically copy the process file to the StreamingAssets folder, where VR Builder processes are saved. Demo Scene Overview The demo scene showcases how to assemble a process with the building blocks included in VR Builder. More building blocks and features are available as separate add-ons. These building blocks are either conditions or behaviors. Conditions check if the user or the world is in a certain state, and behaviors modify the world state when activated. The process in the demo scene is linear, and will guide the user through different steps. To try out the demo scene, ensure audio volume is up, or you won't be able to hear the spoken instructions! Demo Scene Hierarchy In the hierarchy there are three game objects in parentheses. They are automatically added to every VR Builder scene. [PROCESS_CONFIGURATION] allows to select the process for the current scene from a list of processes saved in the project. [PROCESS_CONTROLLER] defines some parameters for processes in this scene like the spectator input bindings and camera. [XR_Setup_Action_Based_Hands] is the VR rig used by the default XR interaction component. If you are using a different interaction component, for example to use VR Builder in conjunction with Interhaptics or VRIF, you might see a different rig here. By looking at the other objects in the scene, we can see that some have a Process Scene Object component and possibly some \"property\" component. A Process Scene Object has a unique object ID that can be accessed by the process. Properties define how the process can interact with the object. For example, a Grabbable Property will let VR Builder recognize if an object is being grabbed. Adding a Grabbable Property to an object will automatically make it a Process Scene Object and add a few components so you can interact with the object in VR. If these properties are not added manually you will usually be prompted to add them automatically when building the process of your VR application. Customizing the Rig Since VR Builder 2.2.0, the rig system has been simplified by removing the [INTERACTION_RIG_LOADER] and dummy rig. The default rig is created directly in the scene and can be edited or replaced like any game object. If you plan to use the same rig in multiple scenes, just create a prefab of it and manually replace the default rig. The only requirement every VR Builder rig has, independent of the interaction system, is that it must contain a User Scene Object component. This component identifies the rig as the user, and is usually placed on the root of the rig. It should reference the head and hand transforms, so that VR Builder can access those positions when needed. If left empty, it will attempt to find the head by itself by looking for the camera's transform. It is also possible to add other Process Scene Objects on the rig in order to use hands, backpacks, toolbelts and so on in behaviors and conditions, depending on the use case. Process Editor The process editor lets you design the process of your VR application. You can open the process editor from Tools > VR Builder > Process Editor or Window > VR Builder > Process Editor. The process editor for the demo scene should look like this. Chapters view On the left, there is a list of chapters. Every chapter is a separate section of the process. They are useful to separate a process in its logical steps and avoid too much clutter in a single graph. You can click on the different chapters to visualize the corresponding graphs. Next to the chapter name, there are icons that allow you to move the chapter up and down in the list, rename it or delete it. Underneath, you can see the Connections breakdown foldout. Expand it to see incoming and outgoing connections for the current chapter. That is, which chapters lead here and to which chapter it is possible to go from this one. The number next to each connection represents the amount of steps that connect to the chapter. When \"Next Chapter\" or \"Previous Chapter\" is listed as a connection, it means the connection is implicit: a path ends with an empty transition, which by default ends the current chapter and starts the next one in order. The demo scene is linear, meaning that each chapter will lead directly to the next and the connection overview only contains implicit connections, but it is possible to create more complex processes that don't follow the chapter list linearly. Graph view On the right, there is a graphical representation of the current chapter. Every node is called a Step. Every step can include a number of Behaviors which can happen when the node is triggered or before leaving it. In the demo scene, those are mostly text to speech instructions. A step can have as many exit points, called Transitions, as needed. Every transition can list a number of Conditions which, if fulfilled, make the transition valid. Select the \"Welcome\" node in the first chapter. This will open the Step Inspector. The window should look like the following. The only behavior is a text to speech instruction that will be triggered when the node is entered. Click on the \"Transitions\" tab. There is a single transition. A step can have multiple transitions, each leading to a different step. In this case, the transition is connected to no other step, so it will end the chapter. The next chapter, \"The magic cube\", will then start. Transitions can include conditions. If they do, they will trigger only when the attached conditions are completed. This transition has no conditions, so it will trigger immediately after the current step has ended, without any input from the user. We encourage you to investigate the other nodes to understand how the demo scene is built. Step Nodes You can create a node by right clicking anywhere in the graph and selecting New, then the type of node you want to create. There are four types of node available in VR Builder core: Step This is the default step node, the main building block for your process. By default, it is empty. This means that nothing will happen, and the execution will immediately proceed to the next node, if present. You will need to add behaviors and conditions to it in the Step Inspector in order to customize it and build your process logic. Step Group This node doesn't let you set conditions and behaviors, but instead can be expanded in a new node graph. It can be populated with other step nodes and act as a \"sub-chapter\" with some self contained logic. This can help keeping the process tidy. You can access the node's graph by clicking the Expand button or double clicking on the node itself. There are also context menu options for expanding the node or ungrouping it - that is, replacing it in the main graph with the logic it contains. This node only has one entry and one exit point. This means that after the contained logic has ended executing, the process will always continue executing from the exit transition of the group node. If you are in a step group graph, it will be indicated on the top left of the process editor. You can click on a parent to return to it. For example, clicking on \"Chapter 1\" will get you back to the main chapter graph. You can also create a group by selecting a sequence of nodes, right clicking and selecting Make group. Since the step group node only has one input and one output, this works best when selecting linked nodes only. Edge cases are resolved as follows: If there are two or more inbound connections in the group, all will lead to the group's input. The first valid node will be chosen as starting step for the group, while the others will have their connection severed. All outgoing connections will be deleted, meaning that the process will continue from the output of the group node after the group has processed. This means that if the selected nodes lead to multiple other nodes, now they will all go through the group's output. The step group output will be connected to the previous target of the first valid grouped node. Other external targets in grouped nodes are ignored, which means that when the group ends it will always go to the same following node. If you encounter one of these edge case, make sure to review your process logic after grouping, as it may have changed. Parallel Execution The parallel execution node lets you execute two or more step sequences at the same time. Execution will continue to the next node once all parallel sequences have completed. Clicking on a Parallel Path button will open a new graph where the path can be edited. This is very similar to a step group, with the difference that there can be multiple parallel paths and they are all executed at the same time. Like with step groups, it is possible to return to the main process by clicking the root chapter on the top left of the process editor. The buttons next to a parallel path let you rename or delete it. The \"+\" button at the bottom lets you add more parallel paths. There is no theoretical limit to the number of paths in a parallel execution node, but performance might suffer. End Chapter You can use this node as the last node on a sequence. It will end the current chapter and start a new specified chapter, which can be selected from a drop-down list. This is useful to move through the chapters in a non-linear fashion. Note that you are not required to use this node for linear processes, as a chapter will automatically end when an empty transition is reached. In that case, the process will simply proceed to the following chapter. Note: It is not recommended to use this node inside a step group as it will behave slightly differently (the nodes following the step group will be fast-forwarded before ending the chapter). It is currently not possible to create this node inside a step group. Process Scene Objects The Process Scene Object component acts as a bridge between the VR Builder process and a Unity game object. If the process needs to observe or interact with a game object, it does so through this component. This means that every game object referenced in the process is required to have this component. If a more detailed interaction is needed, property components can be added to provide VR Builder more control on the object. For example, adding a Grabbable Property component will make the object grabbable, and VR Builder will be able to check if the object has been grabbed. The Process Scene Object generates a hidden object ID which identifies the object internally in the VR Builder process. In addition, it is possible to associate an arbitrary number of groups to every scene object. Some behaviors and conditions can interact with unspecified objects within a certain group rather than a specific object with a given object ID. You can select and assign an existing group from the list, or create and directly assign a new group. You can unassign a group from an object by clicking the X button next to it. Groups are stored on a per-project basis and can be created, edited or deleted from Project Settings > VR Builder > Scene Object Groups. It is possible to edit multiple Process Scene Objects at the same time to add or remove groups in bulk. When multiple objects are selected, all groups on all objects are listed. If a group is present only on some of the selected objects, it will be displayed in italics. A default text style means that the group is present on all selected objects. Locomotion The default rig supports locomotion by teleportation or continuous movement. By default, the rig is set to work with teleportation only, you can change this settings on the Locomotion Scheme Manager component on the XR Rig child object. Continuous Movement Continuous movement is controlled by default with the thumbsticks. Left to move around, right to turn on the spot. In general, we don't recommend this locomotion solution as it can cause motion sickness in inexperienced users, however it can still be useful for specific use cases, precision adjustments or testing. Teleportation Teleportation requires the user to hold the trigger, then release while pointing at a teleportable surface or anchor. Teleportation requires a little more setup to work properly, but most of it is handled automatically by VR Builder. It is recommended for teleportation to work on different layer than normal interactions. By default, VR Builder uses the XR Teleport raycast layer for raycasts from the teleportation controllers, and the XR Teleport XRI interaction layer for teleportation interaction. This means that interactors and interactables need to be configured with these layers in order to work. When a new scene is created, the teleport interactors on the default rig are automatically configured to raycast and interact on these layers. Likewise, when creating a teleportation anchor or area, you should use the Teleportation Anchor (VR Builder) or Teleportation Area (VR Builder) components instead of the XRI versions. These include a button in the inspector which automatically configures them to settings compatible with the VR Builder rig, including layer settings. The teleportation anchor in particular also include two more options: you can create a default anchor complete with graphics and collider, and you can enable proximity detection (see Teleport condition). Given this, teleportation should be easy to setup and just work out of the box. In case something does not, for example when editing an old scene or after changing the position of the XR Teleport layer, it is possible to reset the layers on the rig and all anchors and areas in the scene. To do so, select Tools > VR Builder > Developer > Configure Teleportation Layers. Note that this will overwrite your existing layer masks and select the XR Teleport layer on all of them. Behaviors Behaviors are used to make something happen in the process. Behaviors can be as simple as giving instructions and hints, making new objects visible, or animating an object in the scene. What they have in common is that something happens without requiring an intervention by the user. This section lists the behaviors included in VR Builder. Guidance Play Audio File Description The Play Audio File behavior plays an audio clip loaded from the Resources folder in your project’s asset folder. VR Builder supports all audio file formats supported by Unity, which are: aif wav mp3 ogg Configuration Resources path/Key Insert the relative file path from the Resources folder. Please note that you have to omit the file extension, as shown in the example. You can find more information about this on https://docs.unity3d.com/ScriptReference/Resources.Load.html. If localization is enabled, this should instead be a key in the localization table associated with the process, which contains the localized resources path. Example without localization File to be played: Assets/.../Resources/Sounds/click-sound.ogg Text/Key: Sounds/click-sound Example with localization File to be played: Assets/.../Resources/Sounds/click-sound.ogg Text/Key: click-sound-key Localization table translation: Sounds/click-sound Volume The volume at which the audio should be played. Execution stages By default, steps execute behaviors in the beginning, in their activation stage. This can be changed with the Execution stages dropdown menu: Before Step Execution: The step invokes the behavior during its activation. After Step Execution: Once a transition to another step has been selected and the current step starts deactivating, the behavior is invoked. Before and After Step Execution: Execution at activation and deactivation of a step. Wait for completion By default, the step waits for the audio file to finish. If you want the step to interrupt the audio in case the step is completed, uncheck this option. Note: this might lead to an audio file not even being started, in case the step ends immediately. Play TextToSpeech Audio Description The Play TextToSpeech Audio behavior uses a synthesized voice to read text. It supports localized text through Unity's Localization package. By default, VR Builder works with a single language. In Project Settings > VR Builder > Language you can specify which language will be used by the TTS engine. VR Builder can also be configured to use the Localization package from Unity to provide localized text. The Project Setup Wizard can guide you through the steps, which are the same as outlined in the official documentation. VR Builder will automatically switch to localized mode when a Localization Settings object has been created. Configuration Text/Key If the project is not configured for localization, this field can be used to enter the text that will be spoken in the language configured in the Project Settings. If localization is configured, meaning that a Localization Settings object has been created, you need instead to enter the key to look for in the localization table associated with the process. Volume The volume at which the audio should be played. Execution stages By default, steps execute behaviors in the beginning, in their activation stage. This can be changed with the Execution stages dropdown menu: Before Step Execution: The step invokes the behavior during its activation. After Step Execution: Once a transition to another step has been selected and the current step starts deactivating, the behavior is invoked. Before and After Step Execution: Execution at activation and deactivation of a step. Wait for completion By default, the step waits for the audio file to finish. If you want the step to interrupt the audio in case the trainee completes the conditions, uncheck this option. Note: this might lead to an audio file not even being started, in case the step ends immediately. Highlight Object Description The Highlight Object behavior visually highlights the selected object until the end of a step. For additional highting features you can replace the Default Highlighter with a Interactable Highlighter Script. Select the highlighted Object in the Unity Hierarchy. In the Unity Inspector replace the DefaultHighlighter with a Interactable Highlighter Script. You can define the Color and Material for On Touch Highlight, On Grab Highlight, and On Use Highlight. The object will show the highlight color configured in the Highlight behavior by default. As soon as the object is touched it will change to the color configured in On Touch Highlight. The same happens when the object is grabbed or used. It will display the configured color in ‘On Grab Highlight’ or ‘On Use Highlight’. Configuration Color Color in which the target object will be highlighted. Colors are defined in the RGBA or HSV color channel. By configuring the alpha (A) value, highlights can be translucent. Object The Process Scene Object which should be highlighted. Spawn Confetti Description The Spawn Confetti behavior causes confetti to fall above the selected Object. It can be useful as visual feedback or celebration for completing a task successfully. Configuration Spawn Above User If checked, the spawn position will be above the user rather than on the specified Process Scene Object. Position Provider Specifies where the confetti should spawn if not set to spawn above the user. Confetti Machine Path Path to the confetti machine prefab, relative to a Resources folder. Use the default one or point to your custom confetti machine. Area Radius Radius around the position provider in which confetti will be spawned. Duration Duration of the visual effect in seconds. Execution stages By default, steps execute behaviors in the beginning, in their activation stage. This can be changed with the Execution stages dropdown menu: Before Step Execution: The step invokes the behavior during its activation. After Step Execution: Once a transition to another step has been selected and the current step starts deactivating, the behavior is invoked. Before and After Step Execution: Execution at activation and deactivation of a step. Utility Behavior Sequence Description The Behavior Sequence contains a list of child behaviors which will be activated one after another. A child behavior in the list will not be activated until the previous child behavior has finished its life cycle. Configuration Repeat If checked, the behavior sequence restarts from the top of the child behavior list as soon as the life cycle of the last child behavior in the list has finished. Child behaviors List of all queued behaviors. Add behaviors to the list using the \"Add Behavior\" button. Wait for completion If checked, the behavior sequence will finish the life cycle of each child behavior in the list before it transitions to another step. Even when the \"Repeat\" option is enabled, the execution will transition to the next step after the child behavior list has been completed. Uncheck this option if you want to interrupt the sequence as soon as all conditions of a transition are fulfilled. Example Play an audio file after a set time, for example to give the user some delayed hints. This is a sequence combining a Delay and a Play Audio File behavior. Refer to the documentation for the Delay behavior and the Play Audio File behavior. Delay Description The Delay behavior completes after the specified amount of time. This step will wait for the duration configured in Delay (in seconds), even when the user fulfills the required conditions to transition to the next step. Configuration Delay (in seconds) Configure the behavior’s delay duration in seconds. Example Delay (in seconds) = 1.3 Set Parent Description The Set Parent behavior parents an Object to another one in the Unity hierarchy. Configuration Target The Process Scene Object to be parented. Parent The new parent for the target object. Note this can be null, in which case the object will be unparented. Snap to parent transform If checked, the target object will snap to the same position and rotation as the parent object. Load Scene Description The Load Scene behavior loads a new scene, either additively or not. If a scene is loaded additively, it should not contain a VR Builder process as that could interfere with the process running in the main scene. It still can contain process scene objects which can be interacted with. If a scene is loaded non-additively, this behavior will effectively interrupt the process as the current scene is unloaded and a new one is loaded. Configuration Scene to load Select the scene to be loaded from this dropdown. Note that the scene needs to be added to the Build Settings in order to show in the dropdown. The scene is serialized by path in the process JSON, so moving or renaming it might break this parameter. Load additively If checked, the scene will be loaded additively and the process will keep running. If unchecked, the current scene will be unloaded and thus interrupt the current process. Load asynchronously If checked, the scene will be loaded asynchronously. This can result in smoother performance while loading. A scene is loaded synchronously in the Start phase of the activating process, while asynchronous loading will happen in the Update phase. Environment Disable Objects Description The Disable Objects behavior makes the selected Objects invisible and non-interactive until they are specifically set back to \"enabled\" in a future step. Put into Unity terms, it deactivates the selected Game Objects. Configuration Objects The Process Scene Objects to be disabled. Enable Objects Description The Enable Objects behavior makes the selected Objects visible and interactive until it is specifically set back to \"disabled\" in a future step. Put into Unity terms, it activates the selected Game Objects. Configuration Object The Process Scene Objects to be enabled. Disable Components Description The Disable Components behavior disables all components of the specified type on the given Process Scene Objects. Configuration Object The Process Scene Objects the component is on. Component type A drop-down list allowing to select the component type that will be disabled. Enable at end of step If checked, the components will be enabled again at the end of the step. Enable Components Description The Enable Components behavior enables all components of a specified type on the given Process Scene Objects. Configuration Object The Process Scene Objects the component is on. Component type A drop-down list allowing to select the component type that will be enabled. Disable at end of step If checked, the components will be disabled again at the end of the step. Unsnap Object Description The Unsnap Object behavior unsnaps a snapped object from a snap zone. This can be useful in case the object needs to be further manipulated by the process. Configuration Either the object or the snap zone can be left null. This will result in either the object unsnapping from any snap zone it is in, or in the unsnapping of whatever object is snapped to the specified snap zone. If both are specified, the unsnap will occur only if the specified object is snapped to the specified snap zone. Object to unsnap The Process Scene Object to unsnap. Snap zone to unsnap The Snap Zone from which the object will be unsnapped. Animation Move Object Description The Move Object behavior animates the Object to move and rotate (no scaling) to the position and rotation of the Final Position Provider in the time specified in the Duration (in seconds) parameter. Note: If Object was affected by gravity before, it will continue to be affected after this behavior. Configuration Object The Process Scene Object to be moved and rotated (no scaling). Final position provider The Process Scene Object used as the position provider object. It should be placed at the destination position and rotation. Animation duration (in seconds) Time in seconds the animation takes to move and rotate Object to the Final position provider. Example Duration (in seconds) = 1.3 Conditions Conditions are used to determine which transition is used to exit a step. Transitions are evaluated top to bottom, and the first valid one will be selected. To be valid means to have only fulfilled conditions or no conditions at all. A condition usually requires the user's intervention, for example grabbing an object. However this is not always the case: conditions like the timeout condition will trigger regardless of the user’s activity. There may also be cases in which other factors in the environment determine if a condition is fulfilled. Conditions need to be active in order to be fulfilled. As soon as a step is active, all containing Conditions are active as well. This section lists the conditions included in VR Builder. Environment Move Objects in Collider Description The Move Objects in Collider condition is fulfilled when the Objects are within the specified Collider for the required amount of time (Required seconds inside) while this condition is active. Configuration Object The Process Scene Objects to move. If the objects need to be grabbed, they need to have the Grabbable Property and a collider component configured. The collider defines the area where the user can grab an object. Collider The Process Scene Object with the destination collider. Make sure that a collider is present and that the option Is Trigger is enabled. Required seconds inside Set the time in seconds that the Objects should stay inside the Collider. Object Nearby Description The Object Nearby condition is fulfilled when the Object is within the specified Range of a Reference object. Configuration Object The Process Scene Object that should be in the radius of the Reference Object. Reference Object The Process Scene Object from which you want to measure the distance. Range In this field, you can set the maximum distance between the Object and the Reference object required to fulfill this condition. Required seconds inside In this field, you can set the time in seconds the Object should stay within the radius Range of the Reference Object. Interaction Grab Objects Description The Grab Object condition is fulfilled when the user grabs any of the Objects. The condition is also fulfilled if the user already grabbed any of Objects before the step was activated, that is, if the user is already holding the specified object. Configuration Objects The Process Scene Objects to grab. The objects needs to have the Grabbable Property and a collider component configured. The collider defines the area where the user can grab an object. Release Objects Description The Release Objects condition is fulfilled when all of the Objects are released by the user's controller. If the user is not already holding any of the specified objects in hand while this condition is active, it is fulfilled immediately. Configuration Objects The Process Scene Objects to release. The objects need to have the Grabbable Property and a collider component configured. Snap Objects Description The Snap Object condition is fulfilled when any of the Objects is released into the Zone to snap into, which means the collider of any of the Objects and collider of the Zone overlap. Adapt the collider size of the snap zone to increase or decrease the area where the user can release an Object. Increasing the collider size of the snap zone decreases the required snap precision and simplifies the user's interaction in VR. After the user releases an Object, this is moved to the snap zone's SnapPoint. To adjust this position, change the position of the SnapPoint child object of the Zone to snap into object. Snap Zone Generator For any snappable object you can generate a snap zone that can snap this object and can be used as a Zone to snap into. To do so, navigate to the Snappable Property in Unity's Inspector. You will see two buttons. Clicking on the button Create Snap Zone for this object, you will create a snap zone that only accepts this exact object. Clicking on Create Snap Zone for objects in the same groups will instead create a snap zone that accepts every object that shares at least a group with the current object. Note that the current object will still determine the shape of the snap zone's ghost object. If you want a specific snap zone behavior, like for example accepting only one group of the source object instead of all of them, you'll have to manually change that. Select the snap zone and find the Has Guid Validation component. If you manually created your snap zone, you might have to add this component manually as well. Add to the list the objects you want to be valid for this snap zone. You can reference single objects by object ID, or entire categories of objects via groups. Manual Snap Zone Creation Instead of the automatic generation as described above, you can do those steps also manually. Please refer to available documentation on the XRSocketInteractor from Unity or related sources. You can also make changes to the automatically created snap zone to adapt it to your needs. Please note that these changes might impact the process logic. Feed Forward for Snap Zones Snap zones are restricted to which objects can be snapped. This means every object can be valid (i.e. it can be snapped to this zone) or invalid (it can not be snapped to this zone) for a snap zone. This is achieved with validation components on the snap zone, for example the Has Guid Validation component. You can use this component to configure which specific objects or groups are accepted by the snap zone. In case you are moving a valid object into a zone, the snap zone color changes to ‘Validation Color’ (green), providing the user in VR with positive feedback. In case you are moving an invalid object into a zone, the snap zone color changes to ‘Invalid Color’ (red), giving the user the feedback that this is the wrong object for this zone. You can modify the colors and materials to be used in the Snap Zones parameters and settings. Snap Zone Parameters and Settings To change the highlight color or validation hover material of a dedicated snap zone, navigate to the snap zone object in the Unity Inspector. You will find the Snap Zone Parameters and Settings in the script Snap Zone. To change the colors and materials of all snap zones in the scene, select them in the VR Builder snap zone settings and press 'Apply settings in current scene'. The snap zone settings can be found in the project settings in tab VR Builder > Settings > Snap Zones. Configuration Objects The Process Scene Objects to place (snap). The objects needs to have the Snappable Property and a collider component configured. Zone to snap into This field contains the Process Scene Object where any of the Objects are required to be snapped. Make sure the object has a collider component with the Is Trigger property enabled. Touch Objects Description The Touch Object condition is fulfilled when any of the Objects is touched by the user's controller. If a user is already touching the any of the objects while this condition is active, this condition is fulfilled immediately. Configuration Object The Process Scene Objects to be touched. The objects needs to have the Touchable Property and a collider component configured. Use Objects Description The Use Objects condition is fulfilled when any of the Objects are used by pressing the Use button of the controller while being touched or grabbed. Configuration Objects The Process Scene Objects of which one is required to be used. The Objects need to have the Usable Property and a collider component configured. Utility Timeout Description The Timeout condition is fulfilled when the time specified in Wait (in seconds) has elapsed. This can make sense as a \"fallback\" condition. For example, if the user does not complete condition X in the allotted amount of time, the timeout condition will trigger leading to a different step with different consequences. Configuration Wait (in seconds) Set the time in seconds that should elapse before this condition is fulfilled. Locomotion Teleport Description The Teleport condition is fulfilled when the user teleports to any of the referenced Teleportation Points. Previous teleportation actions made into a Teleportation Point are not considered. If an anchor used as Teleportation Point has proximity detection enabled, the condition will be fulfilled not only if the user teleports to it, but also if they move close to it with continuous movement or by walking in the room. You can activate proximity detection when you need the user to be in a specific location, regardless of whether they teleport or arrive there by other locomotion types. The provided Teleportation Property is based on the Unity XR Interaction Toolkit's Teleportation Anchor. For further reference, please check out the XR Interaction Toolkit documentation. Configuring a Teleportation Point The Teleportation Property can be set as a Default Teleportation Anchor by clicking on the Set Default Teleportation Anchor button. You can find it when selecting the Teleportation Point and viewing it in the Unity Inspector. This will configure the attached Teleportation Anchor. It will provide a visual element in the Unity Editor that helps placing the Teleportation Point in the scene. This visual element will also be shown in the virtual world during training execution to guide the user. Configuration Teleportation Points The Teleportation Properties of which one, the user should teleport to. Online Documentation We offer a constantly expanding list of guides and tutorials on our website. We encourage you to check them out to improve your VR Builder skills. If this is your first time with VR Builder, you should start from the Process Editor and Step Inspector tutorials, which explain the basics of working with VR Builder. In addition,you might also want to check out the guides on how to build standalone VR Builder apps on the Oculus Quest or Pico Neo 3. You can also check out some guides on the more advanced interactions, like the series on snap zones. Lastly, there are some step-by-step tutorials explaining how to work with our latest paid add-ons. Even if you don't intend to buy the relevant content, they can provide a good overview on how to build a functional process with VR Builder from scratch. Acknowledgements VR Builder is based on the open source edition of the Innoactive Creator. While Innoactive helps enterprises to scale VR training, we adopted this tool to provide value for smaller content creators looking to streamline their VR development processes. Like Innoactive, we believe in the value of open source and will continue to support this approach together with them and the open source community. This means you are welcome to contribute to the VR Builder GitHub repositories. Contact and Support Join our official Discord server for quick support from the developer and fellow users. Suggest and vote on new ideas to influence the future of the VR Builder. Make sure to review VR Builder on the Unity Asset Store if you like it. This will help us sustain the development of VR Builder. If you have any issues, please contact contact@mindport.co. We'd love to get your feedback, both positive and constructive. By sharing your feedback you help us improve - thank you in advance! Let's build something extraordinary! You can also visit our website at mindport.co."
  },
  "index.html": {
    "href": "index.html",
    "title": "VR Builder Documentation | VR Builder Documentation",
    "keywords": "VR Builder Documentation Here you can access documentation for VR Builder and its add-on packages. VR Builder Animations Menus Randomization States and Data Track and Measure"
  }
}