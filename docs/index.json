{
  "articles/animations-manual.html": {
    "href": "articles/animations-manual.html",
    "title": "Animations for VR Builder | VR Builder Documentation",
    "keywords": "Animations for VR Builder Table of Contents Animations for VR Builder Table of Contents Introduction Quick Start Behaviors Animation Animate Transform Introduction Inspector Follow Path Introduction Inspector The Bezier Spline Path Property Rotate Around Axis Introduction Inspector Set Animator Parameter Introduction Inspector Show Exploded View Introduction Inspector Contact Introduction This add-on contains a collection of animation behaviors that allow VR Builder to display more complex animations than what is possible with the built-in tools. When installed, the Move Object core behavior will be disabled in the menu, as its functionality is 100% included in the new Animate Transform behavior. To manually enable it, go to Tools > VR Builder > Developer > Allowed Menu Items Configuration. Quick Start The easiest way to get started with this add-on is to check out the included demo scene. If it is the first time you open the demo scene, you will have to do it through the menu: Tools > VR Builder > Demo Scenes > Animations. This is necessary as a script will copy the demo course in the StreamingAssets folder. After the first time, the demo scene can be opened normally. Press Play to try out the behaviors included in this add-on. The demo scene includes a station for every behavior. You can teleport there and check out some practical uses of the included behaviors. Behaviors Animation Animate Transform Introduction This behavior animates a game object by changing its position, rotation and scale over time until it matches those of a \"transform provider\" game object. It is possible to set how position, rotation and scale are animated over time through separate animation curves. The behavior can be found under Animation > Animate Transform. Inspector The Animate Transform behavior accepts the following parameters. Object: The game object to be moved. Final transform provider: The game object which provides the final position, rotation and scale of the animation. Duration (in seconds): Duration in seconds of the animation. Position curve, Rotation curve, Scale curve: These animation curves determine the object's transform at a given point in time. The curve can have values from 0 (the object's original position, rotation or scale) to 1 (the transform provider's position, rotation or scale). Note that the length of the curves is normalized: while it is possible to have the time axis greater or lesser than 1, this won't affect the duration of the animation - it is recommended to leave the time axis to the default length of 0 to 1. Ping pong: If this is checked, the animation will play backwards after finishing, resulting in the object animating and then returning to the original position. Note the total duration will be twice the value in the Duration field. This is similar to creating a symmetrical velocity curve, like for example a bell shape. Repeats: The number of times the animation will repeat. Note that each repeat will increase the duration of the animation by its full amount. If ping pong is set, it will be included in every repeat. Follow Path Introduction This behavior animates a game object so that it follows a path, for example a spline. It is possible to set a curve determining how fast the object moves along the path, plus a number of options described below. The behavior can be found under Animation > Follow Path. Inspector The Follow Path behavior accepts the following parameters. Object: The game object to be moved. Path: The path the object will follow. This needs to be an IPathProperty, like the BezierSplinePathProperty provided in VR Builder Core. Keep relative position: If unchecked, the object will be teleported on the path when the animation starts, and its position throughout the animation will be on the path itself. If checked, the object will retain its current position and move parallel to the path while animating. Keep relative rotation: If unchecked, the object will rotate so that its forward vector follows the direction of the path throughout the animation. If checked, the object will retain its current orientation, but still rotate following the direction of the path. Duration (in seconds): Duration in seconds of the animation. Velocity curve: This animation curve determines the object's position on the path at a given point in time. The position on the path can be a value from 0 (start) to 1 (end). Note that the curve length is normalized: while it is possible to have the time axis greater or lesser than 1, this won't affect the duration of the animation - the curve will be extended or compressed to fit the provided time duration. The first key of the curve should always be at 0 on the horizontal axis. Disable Rotation: If enabled, the object will not rotate while following the path and the settings on Keep relative rotation will be ignored. Reverse: Utility checkbox that plays the animation backwards. It is equivalent to mirroring the velocity curve. Ping pong: If this is checked, the animation will play backwards after finishing, resulting in the object animating and then returning to the original position. Note the total duration will be twice the value in the Duration field. This is similar to creating a symmetrical velocity curve, like for example a bell shape. Repeats: The number of times the animation will repeat. Note that each repeat will increase the duration of the animation by its full amount. The Bezier Spline Path Property The BezierSplinePathProperty is an implementation of the IPathProperty interface included in VR Builder core, and can thus be used to create paths for the Follow Path behavior. It's recommended to add it to an empty game object. It will automatically add a BezierSpline component, which will display a default 4 point Bezier curve in the scene. It is possible to select and move the points in 3D space to manipulate the curve. We can see the position of the currently selected point in the inspector. By clicking Add Curve in the BezierSpline inspector, we can add a second bezier curve connected to the current one. With a point selected in the inspector, it is possible to change the point mode. The color of the point changes depending on the mode selected. The following modes are available. Free (Magenta): The handles of the adjacent curves are independent, and can form a sharp angle if not aligned. Aligned (Yellow): The handles of the adjacent curves are aligned, so there will be a smooth transition, but their length can be set individually. Mirrored (Cyan): The handles of the adjacent curves are aligned and of equal length. Other options are: Loop: Will close the path to form a loop. Especially useful with repeats, as the object will keep going around the path. Approximate Linear Velocity: Normally, velocities on a Bezier curve are non-linear. This means that, by default, the object's speed will change depending on where it is on the path and which curve it is on. Enabling this option will make the object approximate a linear speed, which means that the animation speed will be actually more faithful to the animation curve. Granularity of Approximation: This parameter is only exposed if Approximate Linear Velocity is selected. It determines the number of segments each curve will be subdivided in, a higher value will result in a more constant speed along the path, very low values (less than 10) can cause the object to change speed in a strange way. Lowering the value can increase performance. Rotate Around Axis Introduction This behavior rotates an object around a given axis. The object rotates a specified amount of degrees in a given time. The axis can be represented by a second transform, and it is possible to choose whether the object will rotate around the X, Y or Z axis of that object. Inspector It is possible to configure the following parameters. Object: The object to be rotated. Rotation Axis Provider: The object defining the position of the rotation axis. If none is selected, the axis will pass through the origin of the rotating object, which in most cases means that the object will rotate on itself. Rotation Axis: The local axis of the provider object which will be used to rotate around. Duration (in seconds): The total duration of the animation. Animation Curve: Defines the state of the animation over time. The X axis represents the duration of the animation (normalized), while the Y axis represents values from the object's initial rotation (0) and the object's target rotation defined above (1). Set Animator Parameter Introduction This set of behaviors allow to control the parameters of multiple Animator components from within VR Builder. The included behaviors are: Set Animator Trigger Parameter Set Animator Boolean Parameter Set Animator Integer Parameter Set Animator Float Parameter These behaviors set the specified parameter to the desired value immediately. The float variant can additionally change the parameter over time, following an animation curve. Inspector The inspector for these behaviors works similarly for all variants, although not all variants have all options. The behavior makes use of the following parameters. Animator: Process Scene Objects containing an Animator Property. As usual, it is possible to automatically add the property, but the user should ensure there is a configured Animator component present on the same game object as the property. Parameter name: The name of the parameters in the Animator as a string. Target value (not present on trigger): The desired new value for the parameter. It is not present on the Set Animator Trigger behavior as triggers don't store values. Duration (in seconds) (float only): The amount of time in seconds before the float parameter reaches its final value. If set to 0, the value will change instantly like in the other behaviors. Animation curve (float only): Describes how the float value changes over time. The X axis represents the duration of the transition, while the Y axis represents the current value, with 0 being the initial value and 1 the target value. Show Exploded View Introduction This behavior lets you easily create an exploded view of an object with a number of child objects. By default, all immediate children of the specified game objects will be displaced by the specified factor relative to their current local position. This means that children with a local position of zero will not be displaced. Note that you can create empty objects with the desired relative positions in order to achieve the desired effect. It is also possible to manually set which child objects will be displaced. You can do so by adding them to the Explodable Child Objects list on the Explodable Property of the target object. If the list is not empty, only the objects in the list will be exploded, otherwise all first-level children will be selected. Inspector Object: The game object to be exploded. Scale: How much the children will displace themselves from their initial position. A scale of 1 represent the initial position and can be used to un-explode the view. Values above 1 will explode the view, and below 1 will implode. Duration (in seconds): Duration in seconds of the animation. Explosion curve: This curve determines the object's position at a given point in time. The curve can have values from 0 (the child's original position) to 1 (the final position). Note that the length of the curves is normalized: while it is possible to have the time axis greater or lesser than 1, this won't affect the duration of the animation - it is recommended to leave the time axis to the default length of 0 to 1. Ping pong: If this is checked, the animation will play backwards after finishing, resulting in the object animating and then returning to the original position. Note the total duration will be twice the value in the Duration field. This is similar to creating a symmetrical velocity curve, like for example a bell shape. Repeats: The number of times the animation will repeat. Note that each repeat will increase the duration of the animation by its full amount. If ping pong is set, it will be included in every repeat. Contact Join our official Discord server for quick support from the developer and fellow users. Suggest and vote on new ideas to influence the future of the VR Builder. Make sure to review our asset if you like it. It will help us immensely. If you have any issues, please contact contact@mindport.co. We’d love to get your feedback, both positive and constructive. By sharing your feedback you help us improve - thank you in advance! Let’s build something extraordinary! You can also visit our website at mindport.co."
  },
  "articles/process-menu-manual.html": {
    "href": "articles/process-menu-manual.html",
    "title": "Menus for VR Builder | VR Builder Documentation",
    "keywords": "Menus for VR Builder Table of Contents Menus for VR Builder Table of Contents Introduction Quick Start How to Use the Menu Desktop Process Menu Standalone Process Menu Customizing the Process Controller Contact Introduction This add-on provides examples on how to build a menu that allows to control the process execution in VR Builder. The menu allows to display the current step and its description, skip it by choosing a transition, switch chapters or restart the process. Two prefabs are included. One displays the menu on the desktop screen, allowing an external person to control the process. This can be useful for example in training scenarios with a trainee in VR and a trainer at the computer. The other displays the menu in VR, floating in front of the user. This can be useful for standalone headsets, which lack a flat screen view, or in cases where the user is supposed to control the process themselves. Quick Start Drag one of the prefabs in the Prefabs folder in your process scene. The menu will appear when pressing Play. Feel free to try it out with the demo scene included in VR Builder! The process starts automatically in VR Builder. If you want the process to be started from the menu, you will have to provide a custom [PROCESS_CONTROLLER]. You can find more information on how to do so here. How to Use the Menu Desktop Process Menu The desktop process menu is laid out as follows. VR Builder logo. Feel free to replace it with your own! Current chapter. You can use the drop-down to skip to a later chapter. Process state indicator. It appears when the process is running. Name of the current step. Info button. Click it to see the description of the current step. Skip Step button. Clicking this button will fast-forward to the following step. If the process is not running, it is replaced by the Start Process button. Restart process button. Clicking it will restart the process from the beginning. Audio toggle. Enables/disables process audio. The desktop menu can be used by clicking with the mouse on the desired option. Standalone Process Menu The standalone process menu is laid out as follows. VR Builder logo. Feel free to replace it with your own! Current chapter. You can use the drop-down to skip to a later chapter. Process state indicator. It appears when the process is running. Name of the current step. Info button. Click it to see the description of the current step. Skip Step button. Clicking this button will fast-forward to the following step. If the process is not running, it is replaced by the Start Process button. Restart process button. Clicking it will restart the process from the beginning. Audio toggle. Enables/disables process audio. The standalone menu is designed to be opened through user input. By default, the primary button on the right controller opens the menu. This can be changed on the Standalone Menu Handler component on the menu prefab. In case you want the menu to be permanently present in the scene, remove the Standalone Menu Handler component from the prefab. In the inspector, it is possible to select which button can be used to open and close the menu. The Standalone Menu Handler also takes care of repositioning the menu in front of the user every time it is opened. The standalone menu can be interacted with by pointing at it with a ray and pressing the trigger button. Customizing the Process Controller The process controller can be configured on the [PROCESS_CONTROLLER] game object in a VR Builder scene. This object handles running the process and a few configuration parameters. The Process Controller Setup script lets you choose which process controller prefab is spawned when the scene runs. It is possible to select one of the default process controller prefabs, or use a custom one by ticking the Use custom prefab box. It is also possible to select whether to auto start the process, or start it manually, for example through one of the menus provided in this add-on. Both default process controllers automatically start the process when the scene runs. If you want to avoid that, so the process can be started from the menu, you'll have to create a custom process controller prefab. You can use one of the default ones found in Assets\\MindPort\\VR Builder\\Core\\Source\\Basic-UI-Component\\Runtime\\ProcessController\\Resources\\Prefabs as a baseline. The Basic Process Loader component ensures the process runs on scene start. To prevent this behavior, do not include this script in your custom controller. Contact Join our official Discord server for quick support from the developer and fellow users. Suggest and vote on new ideas to influence the future of the VR Builder. Make sure to review VR Builder and this asset if you like it. It will help us immensely. If you have any issues, please contact contact@mindport.co. We'd love to get your feedback, both positive and constructive. By sharing your feedback you help us improve - thank you in advance! Let's build something extraordinary! You can also visit our website at mindport.co."
  },
  "articles/randomization-manual.html": {
    "href": "articles/randomization-manual.html",
    "title": "Randomization for VR Builder | VR Builder Documentation",
    "keywords": "Randomization for VR Builder Table of Contents Randomization for VR Builder Table of Contents Introduction Quick Start The Random Branch Node Logging the Random Branch node Data Properties Creating Data Properties Working with Data Properties Set Value Behaviors Reset Value Behavior Compare Values Conditions Logging Data Properties Set Random Boolean Behavior Configuration Set Random Number Behavior Configuration Contact Introduction The Randomization add-on makes it easy to add unpredictability to a VR Builder process. It includes a new type of node, called Random Branch, which allows to add random events and alternative paths with zero effort. Additionally, there are a couple tools to work with data properties: behaviors to set random booleans and numbers. You can use these to set random values for the process, and compare those values in condition, to make sure that every run of a process will be different than last time. Quick Start You can check out the main features of this add-on in the provided demo scene. After importing the package in a properly set-up VR Builder project, you can access the demo scene from the menu Tools > VR Builder > Demo Scenes > Randomization. It is necessary to open the demo scene from the menu at least the first time, so a script will copy the required process file in the StreamingAssets folder. In the demo scene, the user must check and change the pressure of the tires of a car by using a provided tool. It is a freeform process, where the user can check the tires in any order and even go back to previous ones. Once done, putting the tool in the box triggers the final evaluation. This scene uses the Random Branch node to randomly select a scenario when the process starts, and the Set Random Number behavior to set the initial tire pressure to random values. You can press Play to try out the scene, or open the Process Editor to check out how the process is made. Additionally, you can find a tutorial on how this demo scene was created on our website. The Random Branch Node The Randomization add-on introduces a new type of node in addition to the standard step: the Random Branch node. This is a special kind of step that immediately routes the process to a random transition. This can be useful to add random events to your process. To create it, select the new Create Random Branch option in the context menu. The Random Branch node is designed so it can be configured directly in the Process Editor window. You can add and remove transitions at will, like any step. The fields to the left of the output port can be used to specify a weight, so it is possible for some transitions to be more probable than others. By default, all weights are 1 and all transitions have equal chance to trigger. The weight can be any arbitrary number above or equal to zero. In the example above, the weights have a total of 5. This means that the Very Probable Step has a a 50% chance to be selected, while the Improbable Step only has one chance in ten. Note that it can be useful to set a weight to zero for debugging purposes - such a transition will never be selected, so it is possible to steer the process through the desired nodes. If all weights in a node are equal to zero, however, the first transition will be selected. Logging the Random Branch node If VR Builder is set to log step output in the Project Settings, Random Branch nodes will create a log entry stating which transition has been selected. Data Properties This add-on makes use of data properties to store values. A data property is a VR Builder property that stores one value of a defined data type, for example a number or a boolean. It is then possible to access those in the process steps to read or change the values. This add-on supports two types of data properties. Number Data Property: Stores a single number (C# type: float). Boolean Data Property: Stores a true/false value (C# type: bool). Creating Data Properties We consider good practice to have each data property on a different, appropriately named empty game object, e.g. \"Total Points\". This way it is easy to keep track of them and drag them in the step inspector when needed. To create the property itself, just add a Data Property component of the required type to the game object, or do it directly in the step inspector through \"Fix it\" button. In the inspector, it is possible to type a default value for the data property. The property will have that value at the start of the process, and the Reset Value behavior will reset the property to its default. Working with Data Properties There are some standard tools to work with data properties. These are the Set/Reset Value behaviors, which are used to change the value stored in a data property, and the Compare Values conditions, which compare two values (from data properties or constant) to check if they are fulfilled. Set Value Behaviors These behaviors set the value of a data property to a value specified in the step inspector. There is one behavior for each data property type. In the Randomization add-on, it is possible to set data properties of type Boolean and Number. Reset Value Behavior This behavior resets a data property's value to its default. This is zero for numerical values and false for booleans, but a different default can be specified in the inspector of the data property. The property needs to be referenced in the step inspector, and will reset when the behavior is triggered. Compare Values Conditions In the Randomization add-on it is possible to use a Compare Numbers or Compare Booleans condition. These can for example compare a random value to a constant in order to branch a process a certain way. They work in a similar way, but the comparison operators differ. You'll need to select two values and the operation between them. Use the radio buttons to select if a value comes from a data property or is a constant entered in the step inspector. In the example below, the condition will be fulfilled when the RandomNumber property is greater than 5. Logging Data Properties It can be useful to log value changes to data properties in the console for debugging purposes. This can be enabled globally by ticking the relevant box in Project Settings -> VR Builder -> Settings. ] If the Log Data Property changes checkbox is enabled, changes to the value of the data property will be logged in the console like the following example. Note that the name provided is the game object's name. Set Random Boolean Behavior This behavior works similarly to the Set Boolean behavior, except the property is not set to a specific value. Instead, it will be randomly set to true or false at runtime. It is possible to specify the probability of it to be true by moving the slider from 0 (always false) to 1 (always true). Configuration Data Property: The boolean data property to set to a random value. Probability to be True: The probability of the randomized value to be true measured from 0 (always false) to 1 (always true). Set Random Number Behavior This behavior sets a number data property to a random value within a range. Configuration Data Property: The number data property to set to a random value. Min Value: The minimum value the randomized number can have. Max Value: The maximum value the randomized number can have. Randomize Integer: If checked, the randomized number will be an integer within the range. Otherwise it can be any float in the range. Contact Join our official Discord server for quick support from the developer and fellow users. Suggest and vote on new ideas to influence the future of the VR Builder. Make sure to review VR Builder and this asset if you like it. It will help us immensely. If you have any issues, please contact contact@mindport.co. We'd love to get your feedback, both positive and constructive. By sharing your feedback you help us improve - thank you in advance! Let's build something extraordinary! You can also visit our website at mindport.co."
  },
  "articles/states-and-data-manual.html": {
    "href": "articles/states-and-data-manual.html",
    "title": "States and Data for VR Builder | VR Builder Documentation",
    "keywords": "States and Data for VR Builder Table of Contents States and Data for VR Builder Table of Contents Introduction Quick Start Data Properties Creating Data Properties Working with Data Properties Set Value Behaviors Reset Value Behavior Compare Values Conditions Utilities Logging Data Properties Math Operation Behavior Trigger Event Behaviors Trigger Event Behavior Parameters State Data Properties Creating a State Data Property Handling States in Code Set State Behavior Check State Condition Contact Introduction The States and Data add-on provides developers the tools to create processes more complex and customized than before. Thanks to the support of variables in the VR Builder process, it is possible to store values to create triggers or track performance, and to create branching processes with a variety of outcomes. The states feature allows VR Builder process to interact with objects in the scene by changing and reading states instead of handling all the object's logic. This allows the user to quickly write custom code and easily integrate it in the VR Builder process, opening the way to endless customization and better performance. Quick Start You can check out the main features of this add-on in the provided demo scene. After importing the package in a properly set-up VR Builder project, you can access the demo scene from the menu Tools > VR Builder > Demo Scenes > States and Data. It is necessary to open the demo scene from the menu at least the first time, so a script will copy the required process file in the StreamingAssets folder. The demo scene consists of a color mixing machine. The user adds bottles of color in the machine to mix a new color, then can press the button to spawn a ball of the created color. It uses the data properties included in this add-on for storing and calculating the mixed color, while the machine is controlled by states. You can press Play to try out the scene, or open the Process Editor to check out how the process is made. Additionally, you can find a tutorial on how this demo scene was created on our website. Data Properties This add-on makes use of data properties to store values. A data property is a VR Builder property that stores one value of a defined data type, for example a number or a boolean. It is then possible to access those in the process steps to read or change the values. There are four types of data properties in this add-on. Number Data Property: Stores a single number (C# type: float). Text Data Property: Stores a string of text (C# type: string). Boolean Data Property: Stores a true/false value (C# type: bool). State Data Property: Stores a state value. More detailed information below (C# type: int, exposed as enum). Creating Data Properties We consider good practice to have each data property on a different, appropriately named empty game object, e.g. \"Total Points\". This way it is easy to keep track of them and drag them in the step inspector when needed. To create the property itself, just add a Data Property component of the required type to the game object, or do it directly in the step inspector through \"Fix it\" button. In the inspector, it is possible to type a default value for the data property. The property will have that value at the start of the process, and the Reset Value behavior will reset the property to its default. Additionally, it is possible to subscribe to the property events. Working with Data Properties There are some standard tools to work with data properties. These are the Set/Reset Value behaviors, which are used to change the value stored in a data property, and the Compare Values conditions, which compare two values (from data properties or constant) to check if they are fulfilled. Set Value Behaviors These behaviors set the value of a data property to a value specified in the step inspector. There is one behavior for each data property type. The available behaviors are listed here. Set Number Set Boolean Set Text Set State Reset Value Behavior This behavior resets a data property's value to its default. This is zero for numerical values, false for booleans and an empty string for text, but a different default can be specified in the inspector of the data property. The property needs to be referenced in the step inspector, and will reset when the behavior is triggered. Compare Values Conditions In States and Data it is possible to use a Compare Numbers, Compare Text or Compare Booleans condition. They work in a similar way, but the comparison operators differ. You'll need to select two values and the operation between them. Use the radio buttons to select if a value comes from a data property or is a constant entered in the step inspector. In the example below, the condition will be fulfilled when the Score Tracker value is equal or greater than the Point Threshold value. Utilities Some data properties can have utility functions to make them handier to use with Unity events. At the moment the following utility functions are available: Number Data Property: You can use the IncreaseValue(float) function to increase or decrease the value of the data property. Boolean Data Property: you can use the InvertValue() function to switch it from true to false, or viceversa. Logging Data Properties It can be useful to log value changes to data properties in the console for debugging purposes. This can be enabled globally by ticking the relevant box in Project Settings -> VR Builder -> Settings. ] If the Log Data Property changes checkbox is enabled, changes to the value of the data property will be logged in the console like the following example. Note that the name provided is the game object's name. Math Operation Behavior The Math Operation behavior performs an operation on a data property and updates it with the result of the operation. It takes three parameters, Left Operand, Right Operand and Operator. Left operand is the data property that will be changed by the operation. Right Operand can either be another data property or a constant value entered in the inspector. Operator defines the type of operation to perform. The operators currently available are listed here. Add: left + right Subtract: left - right Multiply: left * right Divide: left / right Min: change left to the lowest value between left and right Max: change left to the highest value between left and right For example, the operation in the image will add 1 to the Blue data property. Trigger Event Behaviors This collection of behaviors let VR Builder trigger a Unity event on multiple scene objects. This gives you the freedom to bind your own functions to the event and execute custom code like it was a VR Builder behavior (although note that the behavior will end right after calling the event, so the next step could be activated immediately). This is achieved through an event property which is added to the desired process scene object. There are various permutations available for this behavior. It is possible to pass the following data to the event. No data Number (float) Text (string) Boolean These value can be set in the behavior itself and can either be constant or data properties. Trigger Event Behavior Parameters Targets References to the scene objects holding the event property we want to trigger. Argument (Behaviors with data only): Lets you specify a parameter to pass to the event. The type of the parameter (or corresponding data property) can be Number (float), Text (string) or Boolean (bool). Execution stages: Lets you select if the event is triggered as soon as the step starts, just before the step ends or both. State Data Properties Sometimes we need to simulate a complex behavior that is part of the environment rather than the process. For example, a machinery that can be idle, running, blocked or broken, or a door that can be locked, unlocked or open. In these case, it might make sense to code the object's logic directly with Unity Monobehaviors rather than trying to write very complex custom behaviors. This can also make sense if the object is independent from the process - for example, the machine will keep running regardless of the user's position in the process, or is designed to break randomly. Maybe we only want VR Builder to decide when the machine starts running, or to trigger a step when it breaks, but we don't need it to be in control of what exact animation the object is into, or what sound it plays - these are characteristics that are intrinsical to the machine, so we shouldn't care about them in the process. We can use a State Data Property as a communication layer between our VR Builder process and some custom logic we have written for an object. This is a data property which contains an enum listing all the states an object can be in. Like all data properties, it can be read and set both from the Step Inspector and from code. This allows your custom logic and the VR Builder process to interact with each other. Creating a State Data Property You will need to define your enum and create a state data property specific to it. For the machinery described above, it could look like this. public enum MachineState { Idle, Running, Blocked, Broken, } We then need to create a data property component using this enum from the generic state data property. This is just a couple lines. using VRBuilder.StatesAndData.Properties; public class MachineStateDataProperty : StateDataProperty<MachineState> { } We'll now be able to add this as a component to a game object. As it can be seen from the drop-down for the default value, it makes use of the MachineState enum. Handling States in Code We can read and modify states from code calling the GetState and SetState methods on the data property component. MachineStateDataProperty stateDataProperty = GetComponent<MachineStateDataProperty>(); // Set a state to a specified value. stateDataProperty.SetState(MachineState.Running); // Read the current state. MachineState state = stateDataProperty.GetState(); It is also possible to subscribe to the standard data property events ValueChanged and ValueReset, respectively called when the data property value changes or is reset to its default value. MachineStateDataProperty stateDataProperty = GetComponent<MachineStateDataProperty>(); // Subscribe to the value changed event. dataProperty.ValueChanged += OnValueChanged; // Function to be called when the event is triggered. private void OnValueChanged(object sender, EventArgs e) { // Code to be executed on value changed. } Set State Behavior The Set State behavior can be used to change the property's state from the VR Builder process. It works very similarly to the Set Value behavior, the only difference being that the state drop-down will not be visible until a State Data Property is dragged in the inspector, as it depends on the provided enum. It is also possible to use the Reset Value behavior on a State Data Property, it will work like any other data property. Check State Condition It is possible for a process to read a state and react accordingly using the Check State condition. This condition compares a State Data Property to a specified value, in a way similar to other conditions comparing values. A number of operations are available. Since enum values can be ordered, it is also possible to check if the state precedes or follows the specified one. Contact Join our official Discord server for quick support from the developer and fellow users. Suggest and vote on new ideas to influence the future of the VR Builder. Make sure to review VR Builder and this asset if you like it. It will help us immensely. If you have any issues, please contact contact@mindport.co. We'd love to get your feedback, both positive and constructive. By sharing your feedback you help us improve - thank you in advance! Let's build something extraordinary! You can also visit our website at mindport.co."
  },
  "articles/track-and-measure-manual.html": {
    "href": "articles/track-and-measure-manual.html",
    "title": "Track and Measure for VR Builder | VR Builder Documentation",
    "keywords": "Track and Measure for VR Builder Table of Contents Track and Measure for VR Builder Table of Contents Introduction Quick Start Data Properties Creating Data Properties Data Property Displays Working with Data Properties Set Value Behaviors Reset Value Behavior Compare Values Conditions Score Tracking Update Score Behavior Feedback Providers Creating Custom Score Feedback Providers Time Tracking Start Timer Behavior Stop Timer Behavior Resetting a Timer Timer at Zero Condition Displaying Time Contact Introduction This add-on for VR Builder focuses on tracking performance of the VR user, and provides tools like timers and point trackers. With it, it is easy to measure the time taken to perform tasks and to assign scores while providing feedback to the user. Quick Start You can check out the main features of this add-on in the provided demo scene. After importing the package in a properly set-up VR Builder project, you can access the demo scene from the menu Tools > VR Builder > Demo Scenes > Track and Measure. It is necessary to open the demo scene from the menu at least the first time, so a script will copy the required process file in the StreamingAssets folder. The demo scene includes two stations, which highlight respectively point tracking and time tracking. Feel free to try those in VR. You can also open the Process Editor to see an example of how the provided conditions and behaviors can be used in a process. Data Properties This add-on makes use of data properties to store data values. A data property is a VR Builder property that stores one value of a defined data type, for example a number or a boolean. It is then possible to access those in the process steps to read or change the values. Creating Data Properties We consider good practice to have each data property on a different, appropriately named empty game object, e.g. \"Total Points\" or \"Assembly Time\". This way it is easy to keep track of them and drag them in the step inspector when needed. To create the property itself, just add a Data Property component of the required type to the game object, or do it directly in the step inspector through the usual \"Fix it\" button. In the inspector, it is possible to type a default value for the data property. The property will have that value at the start of the process, and the Reset Value behavior will reset the property to that value. Data Property Displays While data properties are assigned to game objects, they are just abstract values, and they are not visible in the scene. Yet, it can be useful to make them visible to the user. This add-on includes a few prefabs which can visualize the contents of data properties on a text mesh. They can be used as they are, or edited and combined with your own prefabs. Start by dragging in the scene a display of the appropriate type (number, text, boolean or time). Then reference the desired data property in the Data Property field of the display component on the prefab. The display should already work when the process is started. It is possible to configure the displayed text by editing the Text field of the display component. The following variables can be used: {0}: The value stored in the data property. {1}: The name of the game object the property is on. These variables support the .NET string formatting rules as detailed here. For example, you might want to limit the fractional digits of a number data property. Writing the variable as {0:f2} will always show two fractional digits, while writing it as {0:f0} will display only the integer part. It is also possible to format time in the time display this way, for instance {0:mm}:{0:ss}.{0:fff} will display minutes, seconds and fractional digits formatted like \"02:34.673\". Working with Data Properties There are some standard tools to work with data properties. These are the Set/Reset Value behaviors, which are used to change the value stored in a data property, and the Compare Values conditions, which compare two values (from data properties or constant) to check fulfillment. Set Value Behaviors The Track and Measure add-on provides this behavior in two flavors: Set Number and Set Boolean. They work the same way: reference an object with a data property of the corresponding type, and input the new value. The value will change when the behavior is triggered. Reset Value Behavior This behavior resets a data property's value to its default. This is zero for numerical values, false for booleans and an empty string for text, but a different default can be specified in the inspector of the data property. The property needs to be referenced in the step inspector, and will reset when the behavior is triggered. This can be useful for example for resetting a timer. Compare Values Conditions In Track and Measure it is possible to use a Compare Numbers condition or a Compare Booleans condition. They work in a similar way, but the comparison operators differ. You'll need to select two values and the operation between them. Use the radio buttons to select if a value comes from a data property or is a constant entered in the step inspector. In the example below, the condition will be fulfilled when the Score Tracker value is equal or greater than the Point Threshold value. Score Tracking One of the aims of this add-on is to provide an easy way to track scores and quantify performance in a VR process. For this, the main tool is the Update Score behavior, which can add or subtract from a numerical data property and trigger relevant user feedback. Update Score Behavior The Update Score behavior requires you to specify a Number Data Property holding the score and the amount increase. Note that this can be a negative amount. When the behavior is triggered, the value in the data property will be updated accordingly. Additionally, you can add feedback to the score increase by referencing a feedback provider object in the Feedback property field. If you do, you can also specify a process scene object which will provide the position for position-dependent feedback, like the floating text in our default implementation.If no position provider is referenced, feedback using a position parameter will default to the feedback provider object’s position. Feedback Providers You can customize the user feedback for a score increase by adding score feedback components to a game object with a Score Feedback Property. When the Update Score behavior triggers, every component on the game object will trigger its feedback. For example, we offer two prefabs, one for providing positive feedback, one for negative. Both play a sound and display a floating number showing the score increase when triggered. If a position provider is specified in the behavior, both the floating number and the sound will trigger at the specified position, else it will trigger at the feedback object's position. This happens because the game object includes both a Floating Text Score Feedback component and an Audio Score Feedback component. These can be further configured by changing the prefabs they spawn, and new components can be added. Creating Custom Score Feedback Providers Creating your own score feedback provider components requires minimal coding skills. Just create a component implementing the IScoreFeedbackProvider interface and trigger your logic in the TriggerFeedback method. public class MyScoreFeedbackProvider : MonoBehaviour, IScoreFeedbackProvider { public void TriggerFeedback(float scoreDelta, float finalScore, Transform positionProvider) { // TODO Implement feedback logic. } } To customize your feedback, you can use the following parameters. scoreDelta: The score increase. finalScore: The total score after the increase. positionProvider: The transform where to trigger the feedback. Time Tracking This add-on allows creating and managing timers which can be used for tracking performance or changing the state of the process. This is done mostly through the Start Timer and Stop Timer behaviors. Those interact with a Timer Property on a game object, which in turn stores the elapsed time (in seconds) in a Number Data Property. Since the time is stored in a standard property, it is possible to use it as any numerical data, for example by dragging the timer game object in a Compare Values condition, and to display it in the scene like other data properties. Start Timer Behavior This behavior tells a Timer Property to start counting time in the attached Number Data Property, adding to the value already stored there. If Is countdown is selected, the timer will count down instead, and stop when zero is reached. Stop Timer Behavior This behavior stops a running timer. It does nothing on a Timer Property that is not running. The Number Data Property will store the time at which the timer was stopped, and if the timer starts again it will start counting from that value. Resetting a Timer Since a timer stores its data in a Number Data Property, a timer can be reset to 0 (or whatever default) by executing the Reset Value (or the Set Number) behavior on the timer's game object. Timer at Zero Condition It may be common to need a condition that completes when a timer reaches zero. Since the time is stored in a Number Data Property, no specific tool is needed - simply use a Compare Numbers Condition to check if the time is equal to zero. In fact, you can compare the stored time to any value, keeping in mind that the time is stored in seconds. Displaying Time Timers store their value in seconds in a Number Data Property. This means that of course a Number Display prefab will show that value. There is however one more prefab created specifically to show time: the Time Display shares many similarities with the Number Display but treats the value as time. By default it displays time in the mm:ss format, but that can be changed by editing the Text field. Since the field uses .NET formatting rules, it is possible to customize the time format as detailed here. Contact Join our official Discord server for quick support from the developer and fellow users. Suggest and vote on new ideas to influence the future of the VR Builder. Make sure to review VR Builder and this asset if you like it. It will help us immensely. If you have any issues, please contact contact@mindport.co. We’d love to get your feedback, both positive and constructive. By sharing your feedback you help us improve - thank you in advance! Let’s build something extraordinary! You can also visit our website at mindport.co."
  },
  "articles/vr-builder-manual.html": {
    "href": "articles/vr-builder-manual.html",
    "title": "VR Builder Manual | VR Builder Documentation",
    "keywords": "VR Builder Manual Table of Contents VR Builder Manual Introduction Requirements Installation Guide Through the Project Setup Wizard Welcome Interaction Settings XR Hardware Setup Unity Localization Help & Documentation Quick Start Demo Scene Overview Demo Scene Hierarchy Customizing the Rig Process Editor Chapters view Graph view Step Nodes Step Step Group Parallel Execution End Chapter Process Scene Objects Locomotion Continuous Movement Teleportation Behaviors Guidance Play Audio File Description Configuration Play TextToSpeech Audio Description Configuration Highlight Object Description Configuration Spawn Confetti Description Configuration Utility Behavior Sequence Description Configuration Example Delay Description Configuration Set Parent Description Configuration Environment Disable Objects Description Configuration Enable Objects Description Configuration Disable Components Description Configuration Enable Components Description Configuration Unsnap Object Description Configuration Animation Move Object Description Configuration Conditions Environment Move Objects in Collider Description Configuration Object Nearby Description Configuration Interaction Grab Objects Description Configuration Release Objects Description Configuration Snap Objects Description Configuration Touch Objects Description Configuration Use Objects Description Configuration Utility Timeout Description Configuration Locomotion Teleport Description Configuration Online Documentation Acknowledgements Contact and Support Introduction VR Builder helps you create interactive VR applications better and faster. By setting up a Unity scene for VR Builder, you will pair it with a VR Builder process. Through the VR Builder process, you can define a sequence of actions the user can take in the scene and the resulting consequences. You can easily edit a process without coding through VR Builder's process editor. The process editor is a node editor where the user can arrange and connect the steps of the process. Each step is a different node and can include any number of behaviors, which make things happen in the scene. Likewise, a step will have at least one transition leading to another step. Every transition can list several conditions which have to be completed for the transition to trigger. For example, step B can be reached only after the user has grabbed the object specified in step A. Behaviors and conditions are the \"building blocks\" of VR Builder. Several of them are provided in the free version already. Additional behaviors and conditions are available in our paid add-ons. Since VR Builder is open source, you can always write your own behaviors and conditions as well. Behaviors and conditions can interact only with process scene objects. These are game objects in the scene which have a Process Scene Object component on them. The interaction capabilities of a process scene object can be increased by adding scene object properties to it. For example, adding a Grabbable Property component to a game object will let VR Builder know that the object is grabbable, and when it is grabbed. Normally it is not necessary to add properties manually to an object. When an object is dragged in the inspector of a condition or behavior, the user has the option to automatically configure it with a single click. Where possible, properties try to add and configure required components by themselves. If you add a Grabbable Property to a game object, this will automatically be made grabbable in VR (it still needs to have a collider and a mesh, of course). This makes it very easy to start from some generic assets and build a fully interactive scene. Requirements VR Builder is supported on Unity 2021.3 or later. It uses the built-in render pipeline by default, but URP is supported as well and existing materials can be easily converted. VR Builder works out of the box with any headset compatible with Unity's XR Interaction Toolkit. Installation You can get VR Builder from the Unity Asset Store or from our GitHub. In the first case, you will be able to download and import the VR Builder package from the package manager. If you have downloaded a .unitypackage from GitHub, just import it in the project. If you are creating a new project, select the 3D or 3D (URP) template. Note that it is not necessary to choose the VR template as VR Builder will configure the project for VR automatically. After importing, VR Builder will compile and import some dependencies. For older Unity versions, a dialog from Unity's XR Interaction Component appears. VR Builder should work with either choice, so select the option that better suits your existing project. Use I Made a Backup, Go Ahead! if you are starting a new project. This will trigger an automated restart. For newer Unity versions the Samples of the XR Interaction Toolkit might need an update. After these notifications the Project Setup Wizard will appear. Guide Through the Project Setup Wizard The Setup Wizard helps to get new or existing Unity scenes set up and ready to be used with VR Builder. Welcome In the following we will guide you through the different tabs of the VR Builder Setup Wizard. Click Next to proceed to the interaction settings page setup page. Interaction Settings Here you can configure some default settings related to VR Builder interactions. Right now, the only available setting will determine whether a newly created grabbable object will use physics or not. You can also change these options at any time in Project Settings > VR Builder > Settings. XR Hardware Setup Then, if it's not configured already, you will be able to configure your project to work with your VR hardware. If your hardware is not listed but supports OpenXR, select Other. You might need to finish the configuration under Project Settings -> XR Plug-in Management. If your device is not supported, please reach out to us in the VR Builder Community. The packages for the selected hardware will be imported after closing the wizard. Unity Localization Finally you must choose whether to set up localization support or skip it for now. VR Builder supports localization through the Unity Localization package. When setting up localization, the wizard will guide you through the manual steps required for a localized project. It provides a useful checklist and some shortcuts to make the task easier. It also has links that redirect to the relevant Unity documentation. If you decide to skip this setup, VR Builder will work in a single language. You can perform localization setup at any time. We encourage you to use Unity Localization, even if you use just one language. With Unity Localization, you will have all your texts in one place inside the Unity Localization Tables, which in turn will give you the possibility to export and refine them and import them back into Unity. Note that as of January 2024, we do not support asset localization tables. See Resources path/Key in the Documentation on how to localize audio files. Help & Documentation This page lists some useful resources to get you started with VR Builder. There is also a checkbox which lets you choose if the demo scene should be loaded after closing the wizard.After clicking Finish, VR Builder is set up! You will need to wait a few seconds for packages to import if you selected a headset from the hardware list. Then, feel free to try out the demo scene or create your own scene by selecting Tools > VR Builder > Scene Setup Wizard…. Note that if you selected the Unity URP template in the beginning, the materials on the avatar hands and demo scene will look solid magenta. That's Unity's way to tell you that the materials are not compatible with the current render pipeline. You can rectify this by selecting all materials (by filtering them in the project window), then click Edit > Rendering > Materials > Convert Selected Built-in Materials to URP. You can of course ignore this step if you don't plan to use the provided hand models or the demo scene. Quick Start You can get a first impression of VR Builder and its features by accessing the provided demo scene. This sample scene contains a pre-built process that showcases some of the interactions provided in VR Builder. You can automatically open the demo scene at the end of the setup wizard, or use the shortcut in Tools > VR Builder > Demo Scenes > Core. Note that, while the scene can be found and opened from disk, it is necessary to use one of the above methods at least once in order to automatically copy the process file to the StreamingAssets folder, where VR Builder processes are saved. Demo Scene Overview The demo scene showcases how to assemble a process with the building blocks included in VR Builder. More building blocks and features are available as separate add-ons. These building blocks are either conditions or behaviors. Conditions check if the user or the world is in a certain state, and behaviors modify the world state when activated. The process in the demo scene is linear, and will guide the user through different steps. To try out the demo scene, ensure audio volume is up, or you won't be able to hear the spoken instructions! Demo Scene Hierarchy In the hierarchy there are three game objects in parentheses. They are automatically added to every VR Builder scene. [PROCESS_CONFIGURATION] allows to select the process for the current scene from a list of processes saved in the project. [PROCESS_CONTROLLER] defines some parameters for processes in this scene like the spectator input bindings and camera. [XR_Setup_Action_Based_Hands] is the VR rig used by the default XR interaction component. If you are using a different interaction component, for example to use VR Builder in conjunction with Interhaptics or VRIF, you might see a different rig here. By looking at the other objects in the scene, we can see that some have a Process Scene Object component and possibly some \"property\" component. A Process Scene Object has a unique object ID that can be accessed by the process. Properties define how the process can interact with the object. For example, a Grabbable Property will let VR Builder recognize if an object is being grabbed. Adding a Grabbable Property to an object will automatically make it a Process Scene Object and add a few components so you can interact with the object in VR. If these properties are not added manually you will usually be prompted to add them automatically when building the process of your VR application. Customizing the Rig Since VR Builder 2.2.0, the rig system has been simplified by removing the [INTERACTION_RIG_LOADER] and dummy rig. The default rig is created directly in the scene and can be edited or replaced like any game object. If you plan to use the same rig in multiple scenes, just create a prefab of it and manually replace the default rig. The only requirement every VR Builder rig has, independent of the interaction system, is that it must contain a User Scene Object component. This component identifies the rig as the user, and is usually placed on the root of the rig. It should reference the head and hand transforms, so that VR Builder can access those positions when needed. If left empty, it will attempt to find the head by itself by looking for the camera's transform. It is also possible to add other Process Scene Objects on the rig in order to use hands, backpacks, toolbelts and so on in behaviors and conditions, depending on the use case. Process Editor The process editor lets you design the process of your VR application. You can open the process editor from Tools > VR Builder > Process Editor or Window > VR Builder > Process Editor. The process editor for the demo scene should look like this. Chapters view On the left, there is a list of chapters. Every chapter is a separate section of the process. They are useful to separate a process in its logical steps and avoid too much clutter in a single graph. You can click on the different chapters to visualize the corresponding graphs. Next to the chapter name, there are icons that allow you to move the chapter up and down in the list, rename it or delete it. Underneath, you can see the Connections breakdown foldout. Expand it to see incoming and outgoing connections for the current chapter. That is, which chapters lead here and to which chapter it is possible to go from this one. The number next to each connection represents the amount of steps that connect to the chapter. When \"Next Chapter\" or \"Previous Chapter\" is listed as a connection, it means the connection is implicit: a path ends with an empty transition, which by default ends the current chapter and starts the next one in order. The demo scene is linear, meaning that each chapter will lead directly to the next and the connection overview only contains implicit connections, but it is possible to create more complex processes that don't follow the chapter list linearly. Graph view On the right, there is a graphical representation of the current chapter. Every node is called a Step. Every step can include a number of Behaviors which can happen when the node is triggered or before leaving it. In the demo scene, those are mostly text to speech instructions. A step can have as many exit points, called Transitions, as needed. Every transition can list a number of Conditions which, if fulfilled, make the transition valid. Select the \"Welcome\" node in the first chapter. This will open the Step Inspector. The window should look like the following. The only behavior is a text to speech instruction that will be triggered when the node is entered. Click on the \"Transitions\" tab. There is a single transition. A step can have multiple transitions, each leading to a different step. In this case, the transition is connected to no other step, so it will end the chapter. The next chapter, \"The magic cube\", will then start. Transitions can include conditions. If they do, they will trigger only when the attached conditions are completed. This transition has no conditions, so it will trigger immediately after the current step has ended, without any input from the user. We encourage you to investigate the other nodes to understand how the demo scene is built. Step Nodes You can create a node by right clicking anywhere in the graph and selecting New, then the type of node you want to create. There are four types of node available in VR Builder core: Step This is the default step node, the main building block for your process. By default, it is empty. This means that nothing will happen, and the execution will immediately proceed to the next node, if present. You will need to add behaviors and conditions to it in the Step Inspector in order to customize it and build your process logic. Step Group This node doesn't let you set conditions and behaviors, but instead can be expanded in a new node graph. It can be populated with other step nodes and act as a \"sub-chapter\" with some self contained logic. This can help keeping the process tidy. You can access the node's graph by clicking the Expand button or double clicking on the node itself. There are also context menu options for expanding the node or ungrouping it - that is, replacing it in the main graph with the logic it contains. This node only has one entry and one exit point. This means that after the contained logic has ended executing, the process will always continue executing from the exit transition of the group node. If you are in a step group graph, it will be indicated on the top left of the process editor. You can click on a parent to return to it. For example, clicking on \"Chapter 1\" will get you back to the main chapter graph. You can also create a group by selecting a sequence of nodes, right clicking and selecting Make group. Since the step group node only has one input and one output, this works best when selecting linked nodes only. Edge cases are resolved as follows: If there are two or more inbound connections in the group, all will lead to the group's input. The first valid node will be chosen as starting step for the group, while the others will have their connection severed. All outgoing connections will be deleted, meaning that the process will continue from the output of the group node after the group has processed. This means that if the selected nodes lead to multiple other nodes, now they will all go through the group's output. The step group output will be connected to the previous target of the first valid grouped node. Other external targets in grouped nodes are ignored, which means that when the group ends it will always go to the same following node. If you encounter one of these edge case, make sure to review your process logic after grouping, as it may have changed. Parallel Execution The parallel execution node lets you execute two or more step sequences at the same time. Execution will continue to the next node once all parallel sequences have completed. Clicking on a Parallel Path button will open a new graph where the path can be edited. This is very similar to a step group, with the difference that there can be multiple parallel paths and they are all executed at the same time. Like with step groups, it is possible to return to the main process by clicking the root chapter on the top left of the process editor. The buttons next to a parallel path let you rename or delete it. The \"+\" button at the bottom lets you add more parallel paths. There is no theoretical limit to the number of paths in a parallel execution node, but performance might suffer. End Chapter You can use this node as the last node on a sequence. It will end the current chapter and start a new specified chapter, which can be selected from a drop-down list. This is useful to move through the chapters in a non-linear fashion. Note that you are not required to use this node for linear processes, as a chapter will automatically end when an empty transition is reached. In that case, the process will simply proceed to the following chapter. Note: It is not recommended to use this node inside a step group as it will behave slightly differently (the nodes following the step group will be fast-forwarded before ending the chapter). It is currently not possible to create this node inside a step group. Process Scene Objects The Process Scene Object component acts as a bridge between the VR Builder process and a Unity game object. If the process needs to observe or interact with a game object, it does so through this component. This means that every game object referenced in the process is required to have this component. If a more detailed interaction is needed, property components can be added to provide VR Builder more control on the object. For example, adding a Grabbable Property component will make the object grabbable, and VR Builder will be able to check if the object has been grabbed. The Process Scene Object generates a hidden object ID which identifies the object internally in the VR Builder process. In addition, it is possible to associate an arbitrary number of groups to every scene object. Some behaviors and conditions can interact with unspecified objects within a certain group rather than a specific object with a given object ID. You can select and assign an existing group from the list, or create and directly assign a new group. You can unassign a group from an object by clicking the X button next to it. Groups are stored on a per-project basis and can be created, edited or deleted from Project Settings > VR Builder > Scene Object Groups. It is possible to edit multiple Process Scene Objects at the same time to add or remove groups in bulk. When multiple objects are selected, all groups on all objects are listed. If a group is present only on some of the selected objects, it will be displayed in italics. A default text style means that the group is present on all selected objects. Locomotion The default rig supports locomotion by teleportation or continuous movement. By default, the rig is set to work with teleportation only, you can change this settings on the Locomotion Scheme Manager component on the XR Rig child object. Continuous Movement Continuous movement is controlled by default with the thumbsticks. Left to move around, right to turn on the spot. In general, we don't recommend this locomotion solution as it can cause motion sickness in inexperienced users, however it can still be useful for specific use cases, precision adjustments or testing. Teleportation Teleportation requires the user to hold the trigger, then release while pointing at a teleportable surface or anchor. Teleportation requires a little more setup to work properly, but most of it is handled automatically by VR Builder. It is recommended for teleportation to work on different layer than normal interactions. By default, VR Builder uses the XR Teleport raycast layer for raycasts from the teleportation controllers, and the XR Teleport XRI interaction layer for teleportation interaction. This means that interactors and interactables need to be configured with these layers in order to work. When a new scene is created, the teleport interactors on the default rig are automatically configured to raycast and interact on these layers. Likewise, when creating a teleportation anchor or area, you should use the Teleportation Anchor (VR Builder) or Teleportation Area (VR Builder) components instead of the XRI versions. These include a button in the inspector which automatically configures them to settings compatible with the VR Builder rig, including layer settings. The teleportation anchor in particular also include two more options: you can create a default anchor complete with graphics and collider, and you can enable proximity detection (see Teleport condition). Given this, teleportation should be easy to setup and just work out of the box. In case something does not, for example when editing an old scene or after changing the position of the XR Teleport layer, it is possible to reset the layers on the rig and all anchors and areas in the scene. To do so, select Tools > VR Builder > Developer > Configure Teleportation Layers. Note that this will overwrite your existing layer masks and select the XR Teleport layer on all of them. Behaviors Behaviors are used to make something happen in the process. Behaviors can be as simple as giving instructions and hints, making new objects visible, or animating an object in the scene. What they have in common is that something happens without requiring an intervention by the user. This section lists the behaviors included in VR Builder. Guidance Play Audio File Description The Play Audio File behavior plays an audio clip loaded from the Resources folder in your project’s asset folder. VR Builder supports all audio file formats supported by Unity, which are: aif wav mp3 ogg Configuration Resources path/Key Insert the relative file path from the Resources folder. Please note that you have to omit the file extension, as shown in the example. You can find more information about this on https://docs.unity3d.com/ScriptReference/Resources.Load.html. If localization is enabled, this should instead be a key in the localization table associated with the process, which contains the localized resources path. Example without localization File to be played: Assets/.../Resources/Sounds/click-sound.ogg Text/Key: Sounds/click-sound Example with localization File to be played: Assets/.../Resources/Sounds/click-sound.ogg Text/Key: click-sound-key Localization table translation: Sounds/click-sound Volume The volume at which the audio should be played. Execution stages By default, steps execute behaviors in the beginning, in their activation stage. This can be changed with the Execution stages dropdown menu: Before Step Execution: The step invokes the behavior during its activation. After Step Execution: Once a transition to another step has been selected and the current step starts deactivating, the behavior is invoked. Before and After Step Execution: Execution at activation and deactivation of a step. Wait for completion By default, the step waits for the audio file to finish. If you want the step to interrupt the audio in case the step is completed, uncheck this option. Note: this might lead to an audio file not even being started, in case the step ends immediately. Play TextToSpeech Audio Description The Play TextToSpeech Audio behavior uses a synthesized voice to read text. It supports localized text through Unity's Localization package. By default, VR Builder works with a single language. In Project Settings > VR Builder > Language you can specify which language will be used by the TTS engine. VR Builder can also be configured to use the Localization package from Unity to provide localized text. The Project Setup Wizard can guide you through the steps, which are the same as outlined in the official documentation. VR Builder will automatically switch to localized mode when a Localization Settings object has been created. Configuration Text/Key If the project is not configured for localization, this field can be used to enter the text that will be spoken in the language configured in the Project Settings. If localization is configured, meaning that a Localization Settings object has been created, you need instead to enter the key to look for in the localization table associated with the process. Volume The volume at which the audio should be played. Execution stages By default, steps execute behaviors in the beginning, in their activation stage. This can be changed with the Execution stages dropdown menu: Before Step Execution: The step invokes the behavior during its activation. After Step Execution: Once a transition to another step has been selected and the current step starts deactivating, the behavior is invoked. Before and After Step Execution: Execution at activation and deactivation of a step. Wait for completion By default, the step waits for the audio file to finish. If you want the step to interrupt the audio in case the trainee completes the conditions, uncheck this option. Note: this might lead to an audio file not even being started, in case the step ends immediately. Highlight Object Description The Highlight Object behavior visually highlights the selected object until the end of a step. For additional highting features you can replace the Default Highlighter with a Interactable Highlighter Script. Select the highlighted Object in the Unity Hierarchy. In the Unity Inspector replace the DefaultHighlighter with a Interactable Highlighter Script. You can define the Color and Material for On Touch Highlight, On Grab Highlight, and On Use Highlight. The object will show the highlight color configured in the Highlight behavior by default. As soon as the object is touched it will change to the color configured in On Touch Highlight. The same happens when the object is grabbed or used. It will display the configured color in ‘On Grab Highlight’ or ‘On Use Highlight’. Configuration Color Color in which the target object will be highlighted. Colors are defined in the RGBA or HSV color channel. By configuring the alpha (A) value, highlights can be translucent. Object The Process Scene Object which should be highlighted. Spawn Confetti Description The Spawn Confetti behavior causes confetti to fall above the selected Object. It can be useful as visual feedback or celebration for completing a task successfully. Configuration Spawn Above User If checked, the spawn position will be above the user rather than on the specified Process Scene Object. Position Provider Specifies where the confetti should spawn if not set to spawn above the user. Confetti Machine Path Path to the confetti machine prefab, relative to a Resources folder. Use the default one or point to your custom confetti machine. Area Radius Radius around the position provider in which confetti will be spawned. Duration Duration of the visual effect in seconds. Execution stages By default, steps execute behaviors in the beginning, in their activation stage. This can be changed with the Execution stages dropdown menu: Before Step Execution: The step invokes the behavior during its activation. After Step Execution: Once a transition to another step has been selected and the current step starts deactivating, the behavior is invoked. Before and After Step Execution: Execution at activation and deactivation of a step. Utility Behavior Sequence Description The Behavior Sequence contains a list of child behaviors which will be activated one after another. A child behavior in the list will not be activated until the previous child behavior has finished its life cycle. Configuration Repeat If checked, the behavior sequence restarts from the top of the child behavior list as soon as the life cycle of the last child behavior in the list has finished. Child behaviors List of all queued behaviors. Add behaviors to the list using the \"Add Behavior\" button. Wait for completion If checked, the behavior sequence will finish the life cycle of each child behavior in the list before it transitions to another step. Even when the \"Repeat\" option is enabled, the execution will transition to the next step after the child behavior list has been completed. Uncheck this option if you want to interrupt the sequence as soon as all conditions of a transition are fulfilled. Example Play an audio file after a set time, for example to give the user some delayed hints. This is a sequence combining a Delay and a Play Audio File behavior. Refer to the documentation for the Delay behavior and the Play Audio File behavior. Delay Description The Delay behavior completes after the specified amount of time. This step will wait for the duration configured in Delay (in seconds), even when the user fulfills the required conditions to transition to the next step. Configuration Delay (in seconds) Configure the behavior’s delay duration in seconds. Example Delay (in seconds) = 1.3 Set Parent Description The Set Parent behavior parents an Object to another one in the Unity hierarchy. Configuration Target The Process Scene Object to be parented. Parent The new parent for the target object. Note this can be null, in which case the object will be unparented. Snap to parent transform If checked, the target object will snap to the same position and rotation as the parent object. Environment Disable Objects Description The Disable Objects behavior makes the selected Objects invisible and non-interactive until they are specifically set back to \"enabled\" in a future step. Put into Unity terms, it deactivates the selected Game Objects. Configuration Objects The Process Scene Objects to be disabled. Enable Objects Description The Enable Objects behavior makes the selected Objects visible and interactive until it is specifically set back to \"disabled\" in a future step. Put into Unity terms, it activates the selected Game Objects. Configuration Object The Process Scene Objects to be enabled. Disable Components Description The Disable Components behavior disables all components of the specified type on the given Process Scene Objects. Configuration Object The Process Scene Objects the component is on. Component type A drop-down list allowing to select the component type that will be disabled. Enable at end of step If checked, the components will be enabled again at the end of the step. Enable Components Description The Enable Components behavior enables all components of a specified type on the given Process Scene Objects. Configuration Object The Process Scene Objects the component is on. Component type A drop-down list allowing to select the component type that will be enabled. Disable at end of step If checked, the components will be disabled again at the end of the step. Unsnap Object Description The Unsnap Object behavior unsnaps a snapped object from a snap zone. This can be useful in case the object needs to be further manipulated by the process. Configuration Either the object or the snap zone can be left null. This will result in either the object unsnapping from any snap zone it is in, or in the unsnapping of whatever object is snapped to the specified snap zone. If both are specified, the unsnap will occur only if the specified object is snapped to the specified snap zone. Object to unsnap The Process Scene Object to unsnap. Snap zone to unsnap The Snap Zone from which the object will be unsnapped. Animation Move Object Description The Move Object behavior animates the Object to move and rotate (no scaling) to the position and rotation of the Final Position Provider in the time specified in the Duration (in seconds) parameter. Note: If Object was affected by gravity before, it will continue to be affected after this behavior. Configuration Object The Process Scene Object to be moved and rotated (no scaling). Final position provider The Process Scene Object used as the position provider object. It should be placed at the destination position and rotation. Animation duration (in seconds) Time in seconds the animation takes to move and rotate Object to the Final position provider. Example Duration (in seconds) = 1.3 Conditions Conditions are used to determine which transition is used to exit a step. Transitions are evaluated top to bottom, and the first valid one will be selected. To be valid means to have only fulfilled conditions or no conditions at all. A condition usually requires the user's intervention, for example grabbing an object. However this is not always the case: conditions like the timeout condition will trigger regardless of the user’s activity. There may also be cases in which other factors in the environment determine if a condition is fulfilled. Conditions need to be active in order to be fulfilled. As soon as a step is active, all containing Conditions are active as well. This section lists the conditions included in VR Builder. Environment Move Objects in Collider Description The Move Objects in Collider condition is fulfilled when the Objects are within the specified Collider for the required amount of time (Required seconds inside) while this condition is active. Configuration Object The Process Scene Objects to move. If the objects need to be grabbed, they need to have the Grabbable Property and a collider component configured. The collider defines the area where the user can grab an object. Collider The Process Scene Object with the destination collider. Make sure that a collider is present and that the option Is Trigger is enabled. Required seconds inside Set the time in seconds that the Objects should stay inside the Collider. Object Nearby Description The Object Nearby condition is fulfilled when the Object is within the specified Range of a Reference object. Configuration Object The Process Scene Object that should be in the radius of the Reference Object. Reference Object The Process Scene Object from which you want to measure the distance. Range In this field, you can set the maximum distance between the Object and the Reference object required to fulfill this condition. Required seconds inside In this field, you can set the time in seconds the Object should stay within the radius Range of the Reference Object. Interaction Grab Objects Description The Grab Object condition is fulfilled when the user grabs any of the Objects. The condition is also fulfilled if the user already grabbed any of Objects before the step was activated, that is, if the user is already holding the specified object. Configuration Objects The Process Scene Objects to grab. The objects needs to have the Grabbable Property and a collider component configured. The collider defines the area where the user can grab an object. Release Objects Description The Release Objects condition is fulfilled when all of the Objects are released by the user's controller. If the user is not already holding any of the specified objects in hand while this condition is active, it is fulfilled immediately. Configuration Objects The Process Scene Objects to release. The objects need to have the Grabbable Property and a collider component configured. Snap Objects Description The Snap Object condition is fulfilled when any of the Objects is released into the Zone to snap into, which means the collider of any of the Objects and collider of the Zone overlap. Adapt the collider size of the snap zone to increase or decrease the area where the user can release an Object. Increasing the collider size of the snap zone decreases the required snap precision and simplifies the user's interaction in VR. After the user releases an Object, this is moved to the snap zone's SnapPoint. To adjust this position, change the position of the SnapPoint child object of the Zone to snap into object. Snap Zone Generator For any snappable object you can generate a snap zone that can snap this object and can be used as a Zone to snap into. To do so, navigate to the Snappable Property in Unity's Inspector. You will see two buttons. Clicking on the button Create Snap Zone for this object, you will create a snap zone that only accepts this exact object. Clicking on Create Snap Zone for objects in the same groups will instead create a snap zone that accepts every object that shares at least a group with the current object. Note that the current object will still determine the shape of the snap zone's ghost object. If you want a specific snap zone behavior, like for example accepting only one group of the source object instead of all of them, you'll have to manually change that. Select the snap zone and find the Has Guid Validation component. If you manually created your snap zone, you might have to add this component manually as well. Add to the list the objects you want to be valid for this snap zone. You can reference single objects by object ID, or entire categories of objects via groups. Manual Snap Zone Creation Instead of the automatic generation as described above, you can do those steps also manually. Please refer to available documentation on the XRSocketInteractor from Unity or related sources. You can also make changes to the automatically created snap zone to adapt it to your needs. Please note that these changes might impact the process logic. Feed Forward for Snap Zones Snap zones are restricted to which objects can be snapped. This means every object can be valid (i.e. it can be snapped to this zone) or invalid (it can not be snapped to this zone) for a snap zone. This is achieved with validation components on the snap zone, for example the Has Guid Validation component. You can use this component to configure which specific objects or groups are accepted by the snap zone. In case you are moving a valid object into a zone, the snap zone color changes to ‘Validation Color’ (green), providing the user in VR with positive feedback. In case you are moving an invalid object into a zone, the snap zone color changes to ‘Invalid Color’ (red), giving the user the feedback that this is the wrong object for this zone. You can modify the colors and materials to be used in the Snap Zones parameters and settings. Snap Zone Parameters and Settings To change the highlight color or validation hover material of a dedicated snap zone, navigate to the snap zone object in the Unity Inspector. You will find the Snap Zone Parameters and Settings in the script Snap Zone. To change the colors and materials of all snap zones in the scene, select them in the VR Builder snap zone settings and press 'Apply settings in current scene'. The snap zone settings can be found in the project settings in tab VR Builder > Settings > Snap Zones. Configuration Objects The Process Scene Objects to place (snap). The objects needs to have the Snappable Property and a collider component configured. Zone to snap into This field contains the Process Scene Object where any of the Objects are required to be snapped. Make sure the object has a collider component with the Is Trigger property enabled. Touch Objects Description The Touch Object condition is fulfilled when any of the Objects is touched by the user's controller. If a user is already touching the any of the objects while this condition is active, this condition is fulfilled immediately. Configuration Object The Process Scene Objects to be touched. The objects needs to have the Touchable Property and a collider component configured. Use Objects Description The Use Objects condition is fulfilled when any of the Objects are used by pressing the Use button of the controller while being touched or grabbed. Configuration Objects The Process Scene Objects of which one is required to be used. The Objects need to have the Usable Property and a collider component configured. Utility Timeout Description The Timeout condition is fulfilled when the time specified in Wait (in seconds) has elapsed. This can make sense as a \"fallback\" condition. For example, if the user does not complete condition X in the allotted amount of time, the timeout condition will trigger leading to a different step with different consequences. Configuration Wait (in seconds) Set the time in seconds that should elapse before this condition is fulfilled. Locomotion Teleport Description The Teleport condition is fulfilled when the user teleports to any of the referenced Teleportation Points. Previous teleportation actions made into a Teleportation Point are not considered. If an anchor used as Teleportation Point has proximity detection enabled, the condition will be fulfilled not only if the user teleports to it, but also if they move close to it with continuous movement or by walking in the room. You can activate proximity detection when you need the user to be in a specific location, regardless of whether they teleport or arrive there by other locomotion types. The provided Teleportation Property is based on the Unity XR Interaction Toolkit's Teleportation Anchor. For further reference, please check out the XR Interaction Toolkit documentation. Configuring a Teleportation Point The Teleportation Property can be set as a Default Teleportation Anchor by clicking on the Set Default Teleportation Anchor button. You can find it when selecting the Teleportation Point and viewing it in the Unity Inspector. This will configure the attached Teleportation Anchor. It will provide a visual element in the Unity Editor that helps placing the Teleportation Point in the scene. This visual element will also be shown in the virtual world during training execution to guide the user. Configuration Teleportation Points The Teleportation Properties of which one, the user should teleport to. Online Documentation We offer a constantly expanding list of guides and tutorials on our website. We encourage you to check them out to improve your VR Builder skills. If this is your first time with VR Builder, you should start from the Process Editor and Step Inspector tutorials, which explain the basics of working with VR Builder. In addition,you might also want to check out the guides on how to build standalone VR Builder apps on the Oculus Quest or Pico Neo 3. You can also check out some guides on the more advanced interactions, like the series on snap zones. Lastly, there are some step-by-step tutorials explaining how to work with our latest paid add-ons. Even if you don't intend to buy the relevant content, they can provide a good overview on how to build a functional process with VR Builder from scratch. Acknowledgements VR Builder is based on the open source edition of the Innoactive Creator. While Innoactive helps enterprises to scale VR training, we adopted this tool to provide value for smaller content creators looking to streamline their VR development processes. Like Innoactive, we believe in the value of open source and will continue to support this approach together with them and the open source community. This means you are welcome to contribute to the VR Builder GitHub repositories. Contact and Support Join our official Discord server for quick support from the developer and fellow users. Suggest and vote on new ideas to influence the future of the VR Builder. Make sure to review VR Builder on the Unity Asset Store if you like it. This will help us sustain the development of VR Builder. If you have any issues, please contact contact@mindport.co. We'd love to get your feedback, both positive and constructive. By sharing your feedback you help us improve - thank you in advance! Let's build something extraordinary! You can also visit our website at mindport.co."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | VR Builder Documentation",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}