### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Entity`1
  commentId: T:VRBuilder.Core.Entity`1
  id: Entity`1
  parent: VRBuilder.Core
  children:
  - VRBuilder.Core.Entity`1.#ctor
  - VRBuilder.Core.Entity`1.Configure(VRBuilder.Core.Configuration.Modes.IMode)
  - VRBuilder.Core.Entity`1.Data
  - VRBuilder.Core.Entity`1.GetActivatingProcess
  - VRBuilder.Core.Entity`1.GetActiveProcess
  - VRBuilder.Core.Entity`1.GetConfigurator
  - VRBuilder.Core.Entity`1.GetDeactivatingProcess
  - VRBuilder.Core.Entity`1.LifeCycle
  - VRBuilder.Core.Entity`1.Parent
  - VRBuilder.Core.Entity`1.Update
  - VRBuilder.Core.Entity`1.VRBuilder#Core#IDataOwner#Data
  langs:
  - csharp
  - vb
  name: Entity<TData>
  nameWithType: Entity<TData>
  fullName: VRBuilder.Core.Entity<TData>
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Entity.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Entity
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Entity.cs
    startLine: 15
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nAbstract helper class that can be used for instances that implement <xref href=\"VRBuilder.Core.IEntity\" data-throw-if-not-resolved=\"false\"></xref>. Provides implementation of the events and properties, and also\noffers member functions to trigger state changes.\n"
  example: []
  syntax:
    content: >-
      [DataContract(IsReference = true)]

      public abstract class Entity<TData> : IEntity, IDataOwner<TData>, IDataOwner where TData : class, IData, new()
    typeParameters:
    - id: TData
    content.vb: >-
      <DataContract(IsReference:=True)>

      Public MustInherit Class Entity(Of TData As {Class, IData, New})
          Implements IEntity, IDataOwner(Of TData), IDataOwner
  inheritance:
  - System.Object
  derivedClasses:
  - VRBuilder.Core.BehaviorCollection
  - VRBuilder.Core.Behaviors.Behavior`1
  - VRBuilder.Core.Chapter
  - VRBuilder.Core.CompletableEntity`1
  - VRBuilder.Core.Process
  - VRBuilder.Core.Step
  - VRBuilder.Core.TransitionCollection
  implements:
  - VRBuilder.Core.IEntity
  - VRBuilder.Core.IDataOwner{{TData}}
  - VRBuilder.Core.IDataOwner
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: IsReference
      type: System.Boolean
      value: true
  nameWithType.vb: Entity(Of TData)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: VRBuilder.Core.Entity(Of TData)
  name.vb: Entity(Of TData)
- uid: VRBuilder.Core.Entity`1.Data
  commentId: P:VRBuilder.Core.Entity`1.Data
  id: Data
  parent: VRBuilder.Core.Entity`1
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: Entity<TData>.Data
  fullName: VRBuilder.Core.Entity<TData>.Data
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Entity.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Data
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Entity.cs
    startLine: 19
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nAbstract data.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public TData Data { get; }
    parameters: []
    return:
      type: '{TData}'
    content.vb: >-
      <DataMember>

      Public ReadOnly Property Data As TData
  overload: VRBuilder.Core.Entity`1.Data*
  implements:
  - VRBuilder.Core.IDataOwner{{TData}}.Data
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  nameWithType.vb: Entity(Of TData).Data
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: VRBuilder.Core.Entity(Of TData).Data
- uid: VRBuilder.Core.Entity`1.VRBuilder#Core#IDataOwner#Data
  commentId: P:VRBuilder.Core.Entity`1.VRBuilder#Core#IDataOwner#Data
  id: VRBuilder#Core#IDataOwner#Data
  isEii: true
  parent: VRBuilder.Core.Entity`1
  langs:
  - csharp
  - vb
  name: IDataOwner.Data
  nameWithType: Entity<TData>.IDataOwner.Data
  fullName: VRBuilder.Core.Entity<TData>.VRBuilder.Core.IDataOwner.Data
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Entity.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: VRBuilder.Core.IDataOwner.Data
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Entity.cs
    startLine: 23
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nAbstract data.\n"
  example: []
  syntax:
    content: IData IDataOwner.Data { get; }
    parameters: []
    return:
      type: VRBuilder.Core.IData
    content.vb: ReadOnly WriteOnly Property VRBuilder.Core.IDataOwner.Data As IData Implements IDataOwner.Data
  overload: VRBuilder.Core.Entity`1.VRBuilder#Core#IDataOwner#Data*
  implements:
  - VRBuilder.Core.IDataOwner.Data
  nameWithType.vb: Entity(Of TData).VRBuilder.Core.IDataOwner.Data
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: VRBuilder.Core.Entity(Of TData).VRBuilder.Core.IDataOwner.Data
  name.vb: VRBuilder.Core.IDataOwner.Data
- uid: VRBuilder.Core.Entity`1.LifeCycle
  commentId: P:VRBuilder.Core.Entity`1.LifeCycle
  id: LifeCycle
  parent: VRBuilder.Core.Entity`1
  langs:
  - csharp
  - vb
  name: LifeCycle
  nameWithType: Entity<TData>.LifeCycle
  fullName: VRBuilder.Core.Entity<TData>.LifeCycle
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Entity.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: LifeCycle
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Entity.cs
    startLine: 29
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nThe entity&apos;s life cycle.\n"
  example: []
  syntax:
    content: >-
      [IgnoreDataMember]

      public ILifeCycle LifeCycle { get; }
    parameters: []
    return:
      type: VRBuilder.Core.ILifeCycle
    content.vb: >-
      <IgnoreDataMember>

      Public ReadOnly Property LifeCycle As ILifeCycle
  overload: VRBuilder.Core.Entity`1.LifeCycle*
  implements:
  - VRBuilder.Core.IEntity.LifeCycle
  attributes:
  - type: System.Runtime.Serialization.IgnoreDataMemberAttribute
    ctor: System.Runtime.Serialization.IgnoreDataMemberAttribute.#ctor
    arguments: []
  nameWithType.vb: Entity(Of TData).LifeCycle
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: VRBuilder.Core.Entity(Of TData).LifeCycle
- uid: VRBuilder.Core.Entity`1.Parent
  commentId: P:VRBuilder.Core.Entity`1.Parent
  id: Parent
  parent: VRBuilder.Core.Entity`1
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: Entity<TData>.Parent
  fullName: VRBuilder.Core.Entity<TData>.Parent
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Entity.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Parent
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Entity.cs
    startLine: 33
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nEntity parent to this entity.\n"
  example: []
  syntax:
    content: >-
      [IgnoreDataMember]

      public IEntity Parent { get; set; }
    parameters: []
    return:
      type: VRBuilder.Core.IEntity
    content.vb: >-
      <IgnoreDataMember>

      Public Property Parent As IEntity
  overload: VRBuilder.Core.Entity`1.Parent*
  implements:
  - VRBuilder.Core.IEntity.Parent
  attributes:
  - type: System.Runtime.Serialization.IgnoreDataMemberAttribute
    ctor: System.Runtime.Serialization.IgnoreDataMemberAttribute.#ctor
    arguments: []
  nameWithType.vb: Entity(Of TData).Parent
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Entity(Of TData).Parent
- uid: VRBuilder.Core.Entity`1.#ctor
  commentId: M:VRBuilder.Core.Entity`1.#ctor
  id: '#ctor'
  parent: VRBuilder.Core.Entity`1
  langs:
  - csharp
  - vb
  name: Entity()
  nameWithType: Entity<TData>.Entity()
  fullName: VRBuilder.Core.Entity<TData>.Entity()
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/Entity.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Entity.cs
    startLine: 36
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  syntax:
    content: protected Entity()
    content.vb: Protected Sub New
  overload: VRBuilder.Core.Entity`1.#ctor*
  nameWithType.vb: Entity(Of TData).Entity()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: VRBuilder.Core.Entity(Of TData).Entity()
- uid: VRBuilder.Core.Entity`1.GetActivatingProcess
  commentId: M:VRBuilder.Core.Entity`1.GetActivatingProcess
  id: GetActivatingProcess
  parent: VRBuilder.Core.Entity`1
  langs:
  - csharp
  - vb
  name: GetActivatingProcess()
  nameWithType: Entity<TData>.GetActivatingProcess()
  fullName: VRBuilder.Core.Entity<TData>.GetActivatingProcess()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Entity.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetActivatingProcess
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Entity.cs
    startLine: 43
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nReturns a new instance of a process for the Activating <xref href=\"VRBuilder.Core.Stage\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual IStageProcess GetActivatingProcess()
    return:
      type: VRBuilder.Core.IStageProcess
    content.vb: Public Overridable Function GetActivatingProcess As IStageProcess
  overload: VRBuilder.Core.Entity`1.GetActivatingProcess*
  implements:
  - VRBuilder.Core.IEntity.GetActivatingProcess
  nameWithType.vb: Entity(Of TData).GetActivatingProcess()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: VRBuilder.Core.Entity(Of TData).GetActivatingProcess()
- uid: VRBuilder.Core.Entity`1.GetActiveProcess
  commentId: M:VRBuilder.Core.Entity`1.GetActiveProcess
  id: GetActiveProcess
  parent: VRBuilder.Core.Entity`1
  langs:
  - csharp
  - vb
  name: GetActiveProcess()
  nameWithType: Entity<TData>.GetActiveProcess()
  fullName: VRBuilder.Core.Entity<TData>.GetActiveProcess()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Entity.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetActiveProcess
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Entity.cs
    startLine: 49
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nReturns a new instance of a process for the Active <xref href=\"VRBuilder.Core.Stage\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual IStageProcess GetActiveProcess()
    return:
      type: VRBuilder.Core.IStageProcess
    content.vb: Public Overridable Function GetActiveProcess As IStageProcess
  overload: VRBuilder.Core.Entity`1.GetActiveProcess*
  implements:
  - VRBuilder.Core.IEntity.GetActiveProcess
  nameWithType.vb: Entity(Of TData).GetActiveProcess()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: VRBuilder.Core.Entity(Of TData).GetActiveProcess()
- uid: VRBuilder.Core.Entity`1.GetDeactivatingProcess
  commentId: M:VRBuilder.Core.Entity`1.GetDeactivatingProcess
  id: GetDeactivatingProcess
  parent: VRBuilder.Core.Entity`1
  langs:
  - csharp
  - vb
  name: GetDeactivatingProcess()
  nameWithType: Entity<TData>.GetDeactivatingProcess()
  fullName: VRBuilder.Core.Entity<TData>.GetDeactivatingProcess()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Entity.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetDeactivatingProcess
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Entity.cs
    startLine: 55
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nReturns a new instance of a process for the Deactivating <xref href=\"VRBuilder.Core.Stage\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual IStageProcess GetDeactivatingProcess()
    return:
      type: VRBuilder.Core.IStageProcess
    content.vb: Public Overridable Function GetDeactivatingProcess As IStageProcess
  overload: VRBuilder.Core.Entity`1.GetDeactivatingProcess*
  implements:
  - VRBuilder.Core.IEntity.GetDeactivatingProcess
  nameWithType.vb: Entity(Of TData).GetDeactivatingProcess()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: VRBuilder.Core.Entity(Of TData).GetDeactivatingProcess()
- uid: VRBuilder.Core.Entity`1.GetConfigurator
  commentId: M:VRBuilder.Core.Entity`1.GetConfigurator
  id: GetConfigurator
  parent: VRBuilder.Core.Entity`1
  langs:
  - csharp
  - vb
  name: GetConfigurator()
  nameWithType: Entity<TData>.GetConfigurator()
  fullName: VRBuilder.Core.Entity<TData>.GetConfigurator()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Entity.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetConfigurator
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Entity.cs
    startLine: 64
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nOverride this method if your behavior or condition supports changing between process modes (<xref href=\"VRBuilder.Core.Configuration.Modes.IMode\" data-throw-if-not-resolved=\"false\"></xref>).\nBy default returns an empty configurator that does nothing.\n"
  example: []
  syntax:
    content: protected virtual IConfigurator GetConfigurator()
    return:
      type: VRBuilder.Core.Configuration.Modes.IConfigurator
    content.vb: Protected Overridable Function GetConfigurator As IConfigurator
  overload: VRBuilder.Core.Entity`1.GetConfigurator*
  nameWithType.vb: Entity(Of TData).GetConfigurator()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: VRBuilder.Core.Entity(Of TData).GetConfigurator()
- uid: VRBuilder.Core.Entity`1.Configure(VRBuilder.Core.Configuration.Modes.IMode)
  commentId: M:VRBuilder.Core.Entity`1.Configure(VRBuilder.Core.Configuration.Modes.IMode)
  id: Configure(VRBuilder.Core.Configuration.Modes.IMode)
  parent: VRBuilder.Core.Entity`1
  langs:
  - csharp
  - vb
  name: Configure(IMode)
  nameWithType: Entity<TData>.Configure(IMode)
  fullName: VRBuilder.Core.Entity<TData>.Configure(VRBuilder.Core.Configuration.Modes.IMode)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Entity.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Configure
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Entity.cs
    startLine: 70
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nConfigures the entity according to the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">mode</code>.\n"
  example: []
  syntax:
    content: public virtual void Configure(IMode mode)
    parameters:
    - id: mode
      type: VRBuilder.Core.Configuration.Modes.IMode
    content.vb: Public Overridable Sub Configure(mode As IMode)
  overload: VRBuilder.Core.Entity`1.Configure*
  implements:
  - VRBuilder.Core.IEntity.Configure(VRBuilder.Core.Configuration.Modes.IMode)
  nameWithType.vb: Entity(Of TData).Configure(IMode)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: VRBuilder.Core.Entity(Of TData).Configure(VRBuilder.Core.Configuration.Modes.IMode)
- uid: VRBuilder.Core.Entity`1.Update
  commentId: M:VRBuilder.Core.Entity`1.Update
  id: Update
  parent: VRBuilder.Core.Entity`1
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: Entity<TData>.Update()
  fullName: VRBuilder.Core.Entity<TData>.Update()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Entity.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Update
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Entity.cs
    startLine: 90
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nCalled every frame during the Unity&apos;s update.\n"
  example: []
  syntax:
    content: public void Update()
    content.vb: Public Sub Update
  overload: VRBuilder.Core.Entity`1.Update*
  implements:
  - VRBuilder.Core.IEntity.Update
  nameWithType.vb: Entity(Of TData).Update()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Entity(Of TData).Update()
references:
- uid: VRBuilder.Core.IEntity
  commentId: T:VRBuilder.Core.IEntity
  parent: VRBuilder.Core
  name: IEntity
  nameWithType: IEntity
  fullName: VRBuilder.Core.IEntity
- uid: VRBuilder.Core
  commentId: N:VRBuilder.Core
  name: VRBuilder.Core
  nameWithType: VRBuilder.Core
  fullName: VRBuilder.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Core.IDataOwner{{TData}}
  commentId: T:VRBuilder.Core.IDataOwner{`0}
  parent: VRBuilder.Core
  definition: VRBuilder.Core.IDataOwner`1
  name: IDataOwner<TData>
  nameWithType: IDataOwner<TData>
  fullName: VRBuilder.Core.IDataOwner<TData>
  nameWithType.vb: IDataOwner(Of TData)
  fullName.vb: VRBuilder.Core.IDataOwner(Of TData)
  name.vb: IDataOwner(Of TData)
  spec.csharp:
  - uid: VRBuilder.Core.IDataOwner`1
    name: IDataOwner
    nameWithType: IDataOwner
    fullName: VRBuilder.Core.IDataOwner
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.IDataOwner`1
    name: IDataOwner
    nameWithType: IDataOwner
    fullName: VRBuilder.Core.IDataOwner
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.IDataOwner
  commentId: T:VRBuilder.Core.IDataOwner
  parent: VRBuilder.Core
  name: IDataOwner
  nameWithType: IDataOwner
  fullName: VRBuilder.Core.IDataOwner
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.IDataOwner`1
  commentId: T:VRBuilder.Core.IDataOwner`1
  name: IDataOwner<TData>
  nameWithType: IDataOwner<TData>
  fullName: VRBuilder.Core.IDataOwner<TData>
  nameWithType.vb: IDataOwner(Of TData)
  fullName.vb: VRBuilder.Core.IDataOwner(Of TData)
  name.vb: IDataOwner(Of TData)
  spec.csharp:
  - uid: VRBuilder.Core.IDataOwner`1
    name: IDataOwner
    nameWithType: IDataOwner
    fullName: VRBuilder.Core.IDataOwner
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.IDataOwner`1
    name: IDataOwner
    nameWithType: IDataOwner
    fullName: VRBuilder.Core.IDataOwner
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Entity`1.Data*
  commentId: Overload:VRBuilder.Core.Entity`1.Data
  name: Data
  nameWithType: Entity<TData>.Data
  fullName: VRBuilder.Core.Entity<TData>.Data
  nameWithType.vb: Entity(Of TData).Data
  fullName.vb: VRBuilder.Core.Entity(Of TData).Data
- uid: VRBuilder.Core.IDataOwner{{TData}}.Data
  commentId: P:VRBuilder.Core.IDataOwner{`0}.Data
  parent: VRBuilder.Core.IDataOwner{{TData}}
  definition: VRBuilder.Core.IDataOwner`1.Data
  name: Data
  nameWithType: IDataOwner<TData>.Data
  fullName: VRBuilder.Core.IDataOwner<TData>.Data
  nameWithType.vb: IDataOwner(Of TData).Data
  fullName.vb: VRBuilder.Core.IDataOwner(Of TData).Data
- uid: '{TData}'
  commentId: '!:TData'
  definition: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: VRBuilder.Core.IDataOwner`1.Data
  commentId: P:VRBuilder.Core.IDataOwner`1.Data
  name: Data
  nameWithType: IDataOwner<TData>.Data
  fullName: VRBuilder.Core.IDataOwner<TData>.Data
  nameWithType.vb: IDataOwner(Of TData).Data
  fullName.vb: VRBuilder.Core.IDataOwner(Of TData).Data
- uid: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: VRBuilder.Core.Entity`1.VRBuilder#Core#IDataOwner#Data*
  commentId: Overload:VRBuilder.Core.Entity`1.VRBuilder#Core#IDataOwner#Data
  name: IDataOwner.Data
  nameWithType: Entity<TData>.IDataOwner.Data
  fullName: VRBuilder.Core.Entity<TData>.VRBuilder.Core.IDataOwner.Data
  nameWithType.vb: Entity(Of TData).VRBuilder.Core.IDataOwner.Data
  fullName.vb: VRBuilder.Core.Entity(Of TData).VRBuilder.Core.IDataOwner.Data
  name.vb: VRBuilder.Core.IDataOwner.Data
- uid: VRBuilder.Core.IDataOwner.Data
  commentId: P:VRBuilder.Core.IDataOwner.Data
  parent: VRBuilder.Core.IDataOwner
  name: Data
  nameWithType: IDataOwner.Data
  fullName: VRBuilder.Core.IDataOwner.Data
- uid: VRBuilder.Core.IData
  commentId: T:VRBuilder.Core.IData
  parent: VRBuilder.Core
  name: IData
  nameWithType: IData
  fullName: VRBuilder.Core.IData
- uid: VRBuilder.Core.Entity`1.LifeCycle*
  commentId: Overload:VRBuilder.Core.Entity`1.LifeCycle
  name: LifeCycle
  nameWithType: Entity<TData>.LifeCycle
  fullName: VRBuilder.Core.Entity<TData>.LifeCycle
  nameWithType.vb: Entity(Of TData).LifeCycle
  fullName.vb: VRBuilder.Core.Entity(Of TData).LifeCycle
- uid: VRBuilder.Core.IEntity.LifeCycle
  commentId: P:VRBuilder.Core.IEntity.LifeCycle
  parent: VRBuilder.Core.IEntity
  name: LifeCycle
  nameWithType: IEntity.LifeCycle
  fullName: VRBuilder.Core.IEntity.LifeCycle
- uid: VRBuilder.Core.ILifeCycle
  commentId: T:VRBuilder.Core.ILifeCycle
  parent: VRBuilder.Core
  name: ILifeCycle
  nameWithType: ILifeCycle
  fullName: VRBuilder.Core.ILifeCycle
- uid: VRBuilder.Core.Entity`1.Parent*
  commentId: Overload:VRBuilder.Core.Entity`1.Parent
  name: Parent
  nameWithType: Entity<TData>.Parent
  fullName: VRBuilder.Core.Entity<TData>.Parent
  nameWithType.vb: Entity(Of TData).Parent
  fullName.vb: VRBuilder.Core.Entity(Of TData).Parent
- uid: VRBuilder.Core.IEntity.Parent
  commentId: P:VRBuilder.Core.IEntity.Parent
  parent: VRBuilder.Core.IEntity
  name: Parent
  nameWithType: IEntity.Parent
  fullName: VRBuilder.Core.IEntity.Parent
- uid: VRBuilder.Core.Entity`1.#ctor*
  commentId: Overload:VRBuilder.Core.Entity`1.#ctor
  name: Entity
  nameWithType: Entity<TData>.Entity
  fullName: VRBuilder.Core.Entity<TData>.Entity
  nameWithType.vb: Entity(Of TData).Entity
  fullName.vb: VRBuilder.Core.Entity(Of TData).Entity
- uid: VRBuilder.Core.Entity`1.GetActivatingProcess*
  commentId: Overload:VRBuilder.Core.Entity`1.GetActivatingProcess
  name: GetActivatingProcess
  nameWithType: Entity<TData>.GetActivatingProcess
  fullName: VRBuilder.Core.Entity<TData>.GetActivatingProcess
  nameWithType.vb: Entity(Of TData).GetActivatingProcess
  fullName.vb: VRBuilder.Core.Entity(Of TData).GetActivatingProcess
- uid: VRBuilder.Core.IEntity.GetActivatingProcess
  commentId: M:VRBuilder.Core.IEntity.GetActivatingProcess
  parent: VRBuilder.Core.IEntity
  name: GetActivatingProcess()
  nameWithType: IEntity.GetActivatingProcess()
  fullName: VRBuilder.Core.IEntity.GetActivatingProcess()
  spec.csharp:
  - uid: VRBuilder.Core.IEntity.GetActivatingProcess
    name: GetActivatingProcess
    nameWithType: IEntity.GetActivatingProcess
    fullName: VRBuilder.Core.IEntity.GetActivatingProcess
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.IEntity.GetActivatingProcess
    name: GetActivatingProcess
    nameWithType: IEntity.GetActivatingProcess
    fullName: VRBuilder.Core.IEntity.GetActivatingProcess
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.IStageProcess
  commentId: T:VRBuilder.Core.IStageProcess
  parent: VRBuilder.Core
  name: IStageProcess
  nameWithType: IStageProcess
  fullName: VRBuilder.Core.IStageProcess
- uid: VRBuilder.Core.Entity`1.GetActiveProcess*
  commentId: Overload:VRBuilder.Core.Entity`1.GetActiveProcess
  name: GetActiveProcess
  nameWithType: Entity<TData>.GetActiveProcess
  fullName: VRBuilder.Core.Entity<TData>.GetActiveProcess
  nameWithType.vb: Entity(Of TData).GetActiveProcess
  fullName.vb: VRBuilder.Core.Entity(Of TData).GetActiveProcess
- uid: VRBuilder.Core.IEntity.GetActiveProcess
  commentId: M:VRBuilder.Core.IEntity.GetActiveProcess
  parent: VRBuilder.Core.IEntity
  name: GetActiveProcess()
  nameWithType: IEntity.GetActiveProcess()
  fullName: VRBuilder.Core.IEntity.GetActiveProcess()
  spec.csharp:
  - uid: VRBuilder.Core.IEntity.GetActiveProcess
    name: GetActiveProcess
    nameWithType: IEntity.GetActiveProcess
    fullName: VRBuilder.Core.IEntity.GetActiveProcess
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.IEntity.GetActiveProcess
    name: GetActiveProcess
    nameWithType: IEntity.GetActiveProcess
    fullName: VRBuilder.Core.IEntity.GetActiveProcess
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Entity`1.GetDeactivatingProcess*
  commentId: Overload:VRBuilder.Core.Entity`1.GetDeactivatingProcess
  name: GetDeactivatingProcess
  nameWithType: Entity<TData>.GetDeactivatingProcess
  fullName: VRBuilder.Core.Entity<TData>.GetDeactivatingProcess
  nameWithType.vb: Entity(Of TData).GetDeactivatingProcess
  fullName.vb: VRBuilder.Core.Entity(Of TData).GetDeactivatingProcess
- uid: VRBuilder.Core.IEntity.GetDeactivatingProcess
  commentId: M:VRBuilder.Core.IEntity.GetDeactivatingProcess
  parent: VRBuilder.Core.IEntity
  name: GetDeactivatingProcess()
  nameWithType: IEntity.GetDeactivatingProcess()
  fullName: VRBuilder.Core.IEntity.GetDeactivatingProcess()
  spec.csharp:
  - uid: VRBuilder.Core.IEntity.GetDeactivatingProcess
    name: GetDeactivatingProcess
    nameWithType: IEntity.GetDeactivatingProcess
    fullName: VRBuilder.Core.IEntity.GetDeactivatingProcess
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.IEntity.GetDeactivatingProcess
    name: GetDeactivatingProcess
    nameWithType: IEntity.GetDeactivatingProcess
    fullName: VRBuilder.Core.IEntity.GetDeactivatingProcess
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.IMode
  commentId: T:VRBuilder.Core.Configuration.Modes.IMode
  parent: VRBuilder.Core.Configuration.Modes
  name: IMode
  nameWithType: IMode
  fullName: VRBuilder.Core.Configuration.Modes.IMode
- uid: VRBuilder.Core.Entity`1.GetConfigurator*
  commentId: Overload:VRBuilder.Core.Entity`1.GetConfigurator
  name: GetConfigurator
  nameWithType: Entity<TData>.GetConfigurator
  fullName: VRBuilder.Core.Entity<TData>.GetConfigurator
  nameWithType.vb: Entity(Of TData).GetConfigurator
  fullName.vb: VRBuilder.Core.Entity(Of TData).GetConfigurator
- uid: VRBuilder.Core.Configuration.Modes.IConfigurator
  commentId: T:VRBuilder.Core.Configuration.Modes.IConfigurator
  parent: VRBuilder.Core.Configuration.Modes
  name: IConfigurator
  nameWithType: IConfigurator
  fullName: VRBuilder.Core.Configuration.Modes.IConfigurator
- uid: VRBuilder.Core.Configuration.Modes
  commentId: N:VRBuilder.Core.Configuration.Modes
  name: VRBuilder.Core.Configuration.Modes
  nameWithType: VRBuilder.Core.Configuration.Modes
  fullName: VRBuilder.Core.Configuration.Modes
- uid: VRBuilder.Core.Entity`1.Configure*
  commentId: Overload:VRBuilder.Core.Entity`1.Configure
  name: Configure
  nameWithType: Entity<TData>.Configure
  fullName: VRBuilder.Core.Entity<TData>.Configure
  nameWithType.vb: Entity(Of TData).Configure
  fullName.vb: VRBuilder.Core.Entity(Of TData).Configure
- uid: VRBuilder.Core.IEntity.Configure(VRBuilder.Core.Configuration.Modes.IMode)
  commentId: M:VRBuilder.Core.IEntity.Configure(VRBuilder.Core.Configuration.Modes.IMode)
  parent: VRBuilder.Core.IEntity
  name: Configure(IMode)
  nameWithType: IEntity.Configure(IMode)
  fullName: VRBuilder.Core.IEntity.Configure(VRBuilder.Core.Configuration.Modes.IMode)
  spec.csharp:
  - uid: VRBuilder.Core.IEntity.Configure(VRBuilder.Core.Configuration.Modes.IMode)
    name: Configure
    nameWithType: IEntity.Configure
    fullName: VRBuilder.Core.IEntity.Configure
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.Configuration.Modes.IMode
    name: IMode
    nameWithType: IMode
    fullName: VRBuilder.Core.Configuration.Modes.IMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.IEntity.Configure(VRBuilder.Core.Configuration.Modes.IMode)
    name: Configure
    nameWithType: IEntity.Configure
    fullName: VRBuilder.Core.IEntity.Configure
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.Configuration.Modes.IMode
    name: IMode
    nameWithType: IMode
    fullName: VRBuilder.Core.Configuration.Modes.IMode
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Entity`1.Update*
  commentId: Overload:VRBuilder.Core.Entity`1.Update
  name: Update
  nameWithType: Entity<TData>.Update
  fullName: VRBuilder.Core.Entity<TData>.Update
  nameWithType.vb: Entity(Of TData).Update
  fullName.vb: VRBuilder.Core.Entity(Of TData).Update
- uid: VRBuilder.Core.IEntity.Update
  commentId: M:VRBuilder.Core.IEntity.Update
  parent: VRBuilder.Core.IEntity
  name: Update()
  nameWithType: IEntity.Update()
  fullName: VRBuilder.Core.IEntity.Update()
  spec.csharp:
  - uid: VRBuilder.Core.IEntity.Update
    name: Update
    nameWithType: IEntity.Update
    fullName: VRBuilder.Core.IEntity.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.IEntity.Update
    name: Update
    nameWithType: IEntity.Update
    fullName: VRBuilder.Core.IEntity.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
