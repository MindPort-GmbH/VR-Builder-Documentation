### YamlMime:ManagedReference
items:
- uid: VRBuilder.Unity.UnitySingleton`1
  commentId: T:VRBuilder.Unity.UnitySingleton`1
  id: UnitySingleton`1
  parent: VRBuilder.Unity
  children:
  - VRBuilder.Unity.UnitySingleton`1.Awake
  - VRBuilder.Unity.UnitySingleton`1.Instance
  - VRBuilder.Unity.UnitySingleton`1.OnDestroy
  langs:
  - csharp
  - vb
  name: UnitySingleton<T>
  nameWithType: UnitySingleton<T>
  fullName: VRBuilder.Unity.UnitySingleton<T>
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Unity/UnitySingleton.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: UnitySingleton
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Unity/UnitySingleton.cs
    startLine: 11
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Unity
  summary: "\nMake sure we always have one and only one instance of this class when we need it.\n"
  example: []
  syntax:
    content: 'public class UnitySingleton<T> : MonoBehaviour where T : UnitySingleton<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class UnitySingleton(Of T As UnitySingleton(Of T))
          Inherits MonoBehaviour
  inheritance:
  - System.Object
  derivedClasses:
  - VRBuilder.Unity.CoroutineDispatcher
  nameWithType.vb: UnitySingleton(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of T)
  name.vb: UnitySingleton(Of T)
- uid: VRBuilder.Unity.UnitySingleton`1.Instance
  commentId: P:VRBuilder.Unity.UnitySingleton`1.Instance
  id: Instance
  parent: VRBuilder.Unity.UnitySingleton`1
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: UnitySingleton<T>.Instance
  fullName: VRBuilder.Unity.UnitySingleton<T>.Instance
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Unity/UnitySingleton.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Instance
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Unity/UnitySingleton.cs
    startLine: 29
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Unity
  summary: "\nPublic accessor for the singleton object.\nWill create a new instance if necessary.\n"
  example: []
  syntax:
    content: public static T Instance { get; protected set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Shared Property Instance As T
  overload: VRBuilder.Unity.UnitySingleton`1.Instance*
  nameWithType.vb: UnitySingleton(Of T).Instance
  modifiers.csharp:
  - public
  - static
  - get
  - protected set
  modifiers.vb:
  - Public
  - Shared
  - Get
  - Protected Set
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of T).Instance
- uid: VRBuilder.Unity.UnitySingleton`1.Awake
  commentId: M:VRBuilder.Unity.UnitySingleton`1.Awake
  id: Awake
  parent: VRBuilder.Unity.UnitySingleton`1
  langs:
  - csharp
  - vb
  name: Awake()
  nameWithType: UnitySingleton<T>.Awake()
  fullName: VRBuilder.Unity.UnitySingleton<T>.Awake()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Unity/UnitySingleton.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Awake
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Unity/UnitySingleton.cs
    startLine: 56
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Unity
  syntax:
    content: protected virtual void Awake()
    content.vb: Protected Overridable Sub Awake
  overload: VRBuilder.Unity.UnitySingleton`1.Awake*
  nameWithType.vb: UnitySingleton(Of T).Awake()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of T).Awake()
- uid: VRBuilder.Unity.UnitySingleton`1.OnDestroy
  commentId: M:VRBuilder.Unity.UnitySingleton`1.OnDestroy
  id: OnDestroy
  parent: VRBuilder.Unity.UnitySingleton`1
  langs:
  - csharp
  - vb
  name: OnDestroy()
  nameWithType: UnitySingleton<T>.OnDestroy()
  fullName: VRBuilder.Unity.UnitySingleton<T>.OnDestroy()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Unity/UnitySingleton.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: OnDestroy
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Unity/UnitySingleton.cs
    startLine: 77
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Unity
  syntax:
    content: protected virtual void OnDestroy()
    content.vb: Protected Overridable Sub OnDestroy
  overload: VRBuilder.Unity.UnitySingleton`1.OnDestroy*
  nameWithType.vb: UnitySingleton(Of T).OnDestroy()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of T).OnDestroy()
references:
- uid: VRBuilder.Unity
  commentId: N:VRBuilder.Unity
  name: VRBuilder.Unity
  nameWithType: VRBuilder.Unity
  fullName: VRBuilder.Unity
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Unity.UnitySingleton`1.Instance*
  commentId: Overload:VRBuilder.Unity.UnitySingleton`1.Instance
  name: Instance
  nameWithType: UnitySingleton<T>.Instance
  fullName: VRBuilder.Unity.UnitySingleton<T>.Instance
  nameWithType.vb: UnitySingleton(Of T).Instance
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of T).Instance
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: VRBuilder.Unity.UnitySingleton`1.Awake*
  commentId: Overload:VRBuilder.Unity.UnitySingleton`1.Awake
  name: Awake
  nameWithType: UnitySingleton<T>.Awake
  fullName: VRBuilder.Unity.UnitySingleton<T>.Awake
  nameWithType.vb: UnitySingleton(Of T).Awake
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of T).Awake
- uid: VRBuilder.Unity.UnitySingleton`1.OnDestroy*
  commentId: Overload:VRBuilder.Unity.UnitySingleton`1.OnDestroy
  name: OnDestroy
  nameWithType: UnitySingleton<T>.OnDestroy
  fullName: VRBuilder.Unity.UnitySingleton<T>.OnDestroy
  nameWithType.vb: UnitySingleton(Of T).OnDestroy
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of T).OnDestroy
