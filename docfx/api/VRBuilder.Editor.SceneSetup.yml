### YamlMime:ManagedReference
items:
- uid: VRBuilder.Editor.SceneSetup
  commentId: T:VRBuilder.Editor.SceneSetup
  id: SceneSetup
  parent: VRBuilder.Editor
  children:
  - VRBuilder.Editor.SceneSetup.FindPrefab(System.String)
  - VRBuilder.Editor.SceneSetup.IsPrefabMissingInScene(System.String)
  - VRBuilder.Editor.SceneSetup.Key
  - VRBuilder.Editor.SceneSetup.Priority
  - VRBuilder.Editor.SceneSetup.Setup(VRBuilder.Editor.Setup.ISceneSetupConfiguration)
  - VRBuilder.Editor.SceneSetup.SetupPrefab(System.String)
  langs:
  - csharp
  - vb
  name: SceneSetup
  nameWithType: SceneSetup
  fullName: VRBuilder.Editor.SceneSetup
  type: Class
  source:
    remote:
      path: Source/Core/Editor/Setup/SceneSetup.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: SceneSetup
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/Setup/SceneSetup.cs
    startLine: 21
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor
  summary: "\nThis base class is supposed to be implemented by classes which will be called to setup the scene.\nCan be used to e.g. setup process classes or interaction frameworks.\n"
  remarks: "\nSee <see cref=\"!:ProcessConfigurationSetup\"></see> as a reference.\n"
  example: []
  syntax:
    content: public abstract class SceneSetup
    content.vb: Public MustInherit Class SceneSetup
  inheritance:
  - System.Object
  derivedClasses:
  - VRBuilder.Editor.BasicInteraction.InteractionFrameworkSceneSetup
  - VRBuilder.Editor.BasicInteraction.RigSetup.DefaultRigSceneSetup
  - VRBuilder.Editor.BasicInteraction.RigSetup.RigLoaderSceneSetup
  - VRBuilder.Editor.UX.ProcessControllerSceneSetup
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VRBuilder.Editor.SceneSetup.Key
  commentId: P:VRBuilder.Editor.SceneSetup.Key
  id: Key
  parent: VRBuilder.Editor.SceneSetup
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: SceneSetup.Key
  fullName: VRBuilder.Editor.SceneSetup.Key
  type: Property
  source:
    remote:
      path: Source/Core/Editor/Setup/SceneSetup.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Key
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/Setup/SceneSetup.cs
    startLine: 27
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor
  summary: "\nIdentifier key for specific scene setup types,\ne.g. for every interaction framework.\n"
  example: []
  syntax:
    content: public virtual string Key { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable ReadOnly Property Key As String
  overload: VRBuilder.Editor.SceneSetup.Key*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: VRBuilder.Editor.SceneSetup.Priority
  commentId: P:VRBuilder.Editor.SceneSetup.Priority
  id: Priority
  parent: VRBuilder.Editor.SceneSetup
  langs:
  - csharp
  - vb
  name: Priority
  nameWithType: SceneSetup.Priority
  fullName: VRBuilder.Editor.SceneSetup.Priority
  type: Property
  source:
    remote:
      path: Source/Core/Editor/Setup/SceneSetup.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Priority
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/Setup/SceneSetup.cs
    startLine: 33
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor
  summary: "\nPriority lets you tweak in which order different <xref href=\"VRBuilder.Editor.SceneSetup\" data-throw-if-not-resolved=\"false\"></xref>s will be performed.\nThe priority is considered from lowest to highest.\n"
  example: []
  syntax:
    content: public virtual int Priority { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable ReadOnly Property Priority As Integer
  overload: VRBuilder.Editor.SceneSetup.Priority*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: VRBuilder.Editor.SceneSetup.Setup(VRBuilder.Editor.Setup.ISceneSetupConfiguration)
  commentId: M:VRBuilder.Editor.SceneSetup.Setup(VRBuilder.Editor.Setup.ISceneSetupConfiguration)
  id: Setup(VRBuilder.Editor.Setup.ISceneSetupConfiguration)
  parent: VRBuilder.Editor.SceneSetup
  langs:
  - csharp
  - vb
  name: Setup(ISceneSetupConfiguration)
  nameWithType: SceneSetup.Setup(ISceneSetupConfiguration)
  fullName: VRBuilder.Editor.SceneSetup.Setup(VRBuilder.Editor.Setup.ISceneSetupConfiguration)
  type: Method
  source:
    remote:
      path: Source/Core/Editor/Setup/SceneSetup.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Setup
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/Setup/SceneSetup.cs
    startLine: 38
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor
  summary: "\nSetup the scene with necessary objects and/or logic.\n"
  example: []
  syntax:
    content: public abstract void Setup(ISceneSetupConfiguration configuration)
    parameters:
    - id: configuration
      type: VRBuilder.Editor.Setup.ISceneSetupConfiguration
    content.vb: Public MustOverride Sub Setup(configuration As ISceneSetupConfiguration)
  overload: VRBuilder.Editor.SceneSetup.Setup*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: VRBuilder.Editor.SceneSetup.SetupPrefab(System.String)
  commentId: M:VRBuilder.Editor.SceneSetup.SetupPrefab(System.String)
  id: SetupPrefab(System.String)
  parent: VRBuilder.Editor.SceneSetup
  langs:
  - csharp
  - vb
  name: SetupPrefab(String)
  nameWithType: SceneSetup.SetupPrefab(String)
  fullName: VRBuilder.Editor.SceneSetup.SetupPrefab(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Editor/Setup/SceneSetup.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: SetupPrefab
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/Setup/SceneSetup.cs
    startLine: 46
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor
  summary: "\nSets up given <code data-dev-comment-type=\"paramref\" class=\"paramref\">prefab</code> in current scene.\n"
  remarks: Extensions must be omitted. All asset names and paths in Unity use forward slashes, paths using backslashes will not work.
  example: []
  syntax:
    content: protected GameObject SetupPrefab(string prefab)
    parameters:
    - id: prefab
      type: System.String
      description: Name or path to the target resource to setup.
    return:
      type: GameObject
    content.vb: Protected Function SetupPrefab(prefab As String) As GameObject
  overload: VRBuilder.Editor.SceneSetup.SetupPrefab*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: Exception thrown if no prefab can be found in project with given <code data-dev-comment-type="paramref" class="paramref">prefab</code>.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VRBuilder.Editor.SceneSetup.FindPrefab(System.String)
  commentId: M:VRBuilder.Editor.SceneSetup.FindPrefab(System.String)
  id: FindPrefab(System.String)
  parent: VRBuilder.Editor.SceneSetup
  langs:
  - csharp
  - vb
  name: FindPrefab(String)
  nameWithType: SceneSetup.FindPrefab(String)
  fullName: VRBuilder.Editor.SceneSetup.FindPrefab(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Editor/Setup/SceneSetup.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: FindPrefab
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/Setup/SceneSetup.cs
    startLine: 64
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor
  summary: "\nFinds and returns a prefab\n"
  remarks: Extensions must be omitted. All asset names and paths in Unity use forward slashes, paths using backslashes will not work.
  example: []
  syntax:
    content: protected GameObject FindPrefab(string prefab)
    parameters:
    - id: prefab
      type: System.String
      description: Name or path to the target resource to setup.
    return:
      type: GameObject
    content.vb: Protected Function FindPrefab(prefab As String) As GameObject
  overload: VRBuilder.Editor.SceneSetup.FindPrefab*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: Exception thrown if no prefab can be found in project with given <code data-dev-comment-type="paramref" class="paramref">prefab</code>.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VRBuilder.Editor.SceneSetup.IsPrefabMissingInScene(System.String)
  commentId: M:VRBuilder.Editor.SceneSetup.IsPrefabMissingInScene(System.String)
  id: IsPrefabMissingInScene(System.String)
  parent: VRBuilder.Editor.SceneSetup
  langs:
  - csharp
  - vb
  name: IsPrefabMissingInScene(String)
  nameWithType: SceneSetup.IsPrefabMissingInScene(String)
  fullName: VRBuilder.Editor.SceneSetup.IsPrefabMissingInScene(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Editor/Setup/SceneSetup.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IsPrefabMissingInScene
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/Setup/SceneSetup.cs
    startLine: 84
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor
  summary: "\nReturns true if given <code data-dev-comment-type=\"paramref\" class=\"paramref\">prefabName</code> is missing in current scene.\n"
  example: []
  syntax:
    content: protected bool IsPrefabMissingInScene(string prefabName)
    parameters:
    - id: prefabName
      type: System.String
    return:
      type: System.Boolean
    content.vb: Protected Function IsPrefabMissingInScene(prefabName As String) As Boolean
  overload: VRBuilder.Editor.SceneSetup.IsPrefabMissingInScene*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: VRBuilder.Editor
  commentId: N:VRBuilder.Editor
  name: VRBuilder.Editor
  nameWithType: VRBuilder.Editor
  fullName: VRBuilder.Editor
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Editor.SceneSetup.Key*
  commentId: Overload:VRBuilder.Editor.SceneSetup.Key
  name: Key
  nameWithType: SceneSetup.Key
  fullName: VRBuilder.Editor.SceneSetup.Key
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VRBuilder.Editor.SceneSetup
  commentId: T:VRBuilder.Editor.SceneSetup
  parent: VRBuilder.Editor
  name: SceneSetup
  nameWithType: SceneSetup
  fullName: VRBuilder.Editor.SceneSetup
- uid: VRBuilder.Editor.SceneSetup.Priority*
  commentId: Overload:VRBuilder.Editor.SceneSetup.Priority
  name: Priority
  nameWithType: SceneSetup.Priority
  fullName: VRBuilder.Editor.SceneSetup.Priority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VRBuilder.Editor.SceneSetup.Setup*
  commentId: Overload:VRBuilder.Editor.SceneSetup.Setup
  name: Setup
  nameWithType: SceneSetup.Setup
  fullName: VRBuilder.Editor.SceneSetup.Setup
- uid: VRBuilder.Editor.Setup.ISceneSetupConfiguration
  commentId: T:VRBuilder.Editor.Setup.ISceneSetupConfiguration
  parent: VRBuilder.Editor.Setup
  name: ISceneSetupConfiguration
  nameWithType: ISceneSetupConfiguration
  fullName: VRBuilder.Editor.Setup.ISceneSetupConfiguration
- uid: VRBuilder.Editor.Setup
  commentId: N:VRBuilder.Editor.Setup
  name: VRBuilder.Editor.Setup
  nameWithType: VRBuilder.Editor.Setup
  fullName: VRBuilder.Editor.Setup
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
  isExternal: true
- uid: VRBuilder.Editor.SceneSetup.SetupPrefab*
  commentId: Overload:VRBuilder.Editor.SceneSetup.SetupPrefab
  name: SetupPrefab
  nameWithType: SceneSetup.SetupPrefab
  fullName: VRBuilder.Editor.SceneSetup.SetupPrefab
- uid: GameObject
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: GameObject
- uid: VRBuilder.Editor.SceneSetup.FindPrefab*
  commentId: Overload:VRBuilder.Editor.SceneSetup.FindPrefab
  name: FindPrefab
  nameWithType: SceneSetup.FindPrefab
  fullName: VRBuilder.Editor.SceneSetup.FindPrefab
- uid: VRBuilder.Editor.SceneSetup.IsPrefabMissingInScene*
  commentId: Overload:VRBuilder.Editor.SceneSetup.IsPrefabMissingInScene
  name: IsPrefabMissingInScene
  nameWithType: SceneSetup.IsPrefabMissingInScene
  fullName: VRBuilder.Editor.SceneSetup.IsPrefabMissingInScene
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
