### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Metadata
  commentId: T:VRBuilder.Core.Metadata
  id: Metadata
  parent: VRBuilder.Core
  children:
  - VRBuilder.Core.Metadata.Clear
  - VRBuilder.Core.Metadata.GetMetadata(System.Reflection.MemberInfo)
  - VRBuilder.Core.Metadata.GetMetadata(System.Reflection.MemberInfo,VRBuilder.Core.Attributes.MetadataAttribute)
  - VRBuilder.Core.Metadata.SetMetadata(System.Reflection.MemberInfo,System.String,System.Object)
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: Metadata
  fullName: VRBuilder.Core.Metadata
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Metadata.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Metadata
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Metadata.cs
    startLine: 15
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nGeneral implementation of <xref href=\"VRBuilder.Core.IMetadata\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataContract(IsReference = true)]

      public class Metadata : IMetadata
    content.vb: >-
      <DataContract(IsReference:=True)>

      Public Class Metadata

          Implements IMetadata
  inheritance:
  - System.Object
  implements:
  - VRBuilder.Core.IMetadata
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: IsReference
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VRBuilder.Core.Metadata.SetMetadata(System.Reflection.MemberInfo,System.String,System.Object)
  commentId: M:VRBuilder.Core.Metadata.SetMetadata(System.Reflection.MemberInfo,System.String,System.Object)
  id: SetMetadata(System.Reflection.MemberInfo,System.String,System.Object)
  parent: VRBuilder.Core.Metadata
  langs:
  - csharp
  - vb
  name: SetMetadata(MemberInfo, String, Object)
  nameWithType: Metadata.SetMetadata(MemberInfo, String, Object)
  fullName: VRBuilder.Core.Metadata.SetMetadata(System.Reflection.MemberInfo, System.String, System.Object)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Metadata.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: SetMetadata
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Metadata.cs
    startLine: 27
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nSets a set of data in to specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">member</code>.\n"
  example: []
  syntax:
    content: public void SetMetadata(MemberInfo member, string attributeName, object data)
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: Member data.
    - id: attributeName
      type: System.String
      description: Key name of provided data.
    - id: data
      type: System.Object
      description: Data to be saved as metadata for <code data-dev-comment-type="paramref" class="paramref">member</code>.
    content.vb: Public Sub SetMetadata(member As MemberInfo, attributeName As String, data As Object)
  overload: VRBuilder.Core.Metadata.SetMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.Metadata.GetMetadata(System.Reflection.MemberInfo,VRBuilder.Core.Attributes.MetadataAttribute)
  commentId: M:VRBuilder.Core.Metadata.GetMetadata(System.Reflection.MemberInfo,VRBuilder.Core.Attributes.MetadataAttribute)
  id: GetMetadata(System.Reflection.MemberInfo,VRBuilder.Core.Attributes.MetadataAttribute)
  parent: VRBuilder.Core.Metadata
  langs:
  - csharp
  - vb
  name: GetMetadata(MemberInfo, MetadataAttribute)
  nameWithType: Metadata.GetMetadata(MemberInfo, MetadataAttribute)
  fullName: VRBuilder.Core.Metadata.GetMetadata(System.Reflection.MemberInfo, VRBuilder.Core.Attributes.MetadataAttribute)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Metadata.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetMetadata
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Metadata.cs
    startLine: 40
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nReturns a set of data extracted from specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">attribute</code> of given <code data-dev-comment-type=\"paramref\" class=\"paramref\">member</code>.\n"
  example: []
  syntax:
    content: public object GetMetadata(MemberInfo member, MetadataAttribute attribute)
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
    - id: attribute
      type: VRBuilder.Core.Attributes.MetadataAttribute
    return:
      type: System.Object
    content.vb: Public Function GetMetadata(member As MemberInfo, attribute As MetadataAttribute) As Object
  overload: VRBuilder.Core.Metadata.GetMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.Metadata.GetMetadata(System.Reflection.MemberInfo)
  commentId: M:VRBuilder.Core.Metadata.GetMetadata(System.Reflection.MemberInfo)
  id: GetMetadata(System.Reflection.MemberInfo)
  parent: VRBuilder.Core.Metadata
  langs:
  - csharp
  - vb
  name: GetMetadata(MemberInfo)
  nameWithType: Metadata.GetMetadata(MemberInfo)
  fullName: VRBuilder.Core.Metadata.GetMetadata(System.Reflection.MemberInfo)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Metadata.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetMetadata
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Metadata.cs
    startLine: 53
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  summary: "\nReturns a set of data extracted from given <code data-dev-comment-type=\"paramref\" class=\"paramref\">member</code>.\n"
  example: []
  syntax:
    content: public Dictionary<string, object> GetMetadata(MemberInfo member)
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    content.vb: Public Function GetMetadata(member As MemberInfo) As Dictionary(Of String, Object)
  overload: VRBuilder.Core.Metadata.GetMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.Metadata.Clear
  commentId: M:VRBuilder.Core.Metadata.Clear
  id: Clear
  parent: VRBuilder.Core.Metadata
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: Metadata.Clear()
  fullName: VRBuilder.Core.Metadata.Clear()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Metadata.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Clear
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Metadata.cs
    startLine: 63
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: VRBuilder.Core.Metadata.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VRBuilder.Core.IMetadata
  commentId: T:VRBuilder.Core.IMetadata
  parent: VRBuilder.Core
  name: IMetadata
  nameWithType: IMetadata
  fullName: VRBuilder.Core.IMetadata
- uid: VRBuilder.Core
  commentId: N:VRBuilder.Core
  name: VRBuilder.Core
  nameWithType: VRBuilder.Core
  fullName: VRBuilder.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.Metadata.SetMetadata*
  commentId: Overload:VRBuilder.Core.Metadata.SetMetadata
  name: SetMetadata
  nameWithType: Metadata.SetMetadata
  fullName: VRBuilder.Core.Metadata.SetMetadata
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: VRBuilder.Core.Metadata.GetMetadata*
  commentId: Overload:VRBuilder.Core.Metadata.GetMetadata
  name: GetMetadata
  nameWithType: Metadata.GetMetadata
  fullName: VRBuilder.Core.Metadata.GetMetadata
- uid: VRBuilder.Core.Attributes.MetadataAttribute
  commentId: T:VRBuilder.Core.Attributes.MetadataAttribute
  parent: VRBuilder.Core.Attributes
  name: MetadataAttribute
  nameWithType: MetadataAttribute
  fullName: VRBuilder.Core.Attributes.MetadataAttribute
- uid: VRBuilder.Core.Attributes
  commentId: N:VRBuilder.Core.Attributes
  name: VRBuilder.Core.Attributes
  nameWithType: VRBuilder.Core.Attributes
  fullName: VRBuilder.Core.Attributes
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VRBuilder.Core.Metadata.Clear*
  commentId: Overload:VRBuilder.Core.Metadata.Clear
  name: Clear
  nameWithType: Metadata.Clear
  fullName: VRBuilder.Core.Metadata.Clear
