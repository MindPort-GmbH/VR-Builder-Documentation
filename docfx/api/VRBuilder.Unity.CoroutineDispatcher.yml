### YamlMime:ManagedReference
items:
- uid: VRBuilder.Unity.CoroutineDispatcher
  commentId: T:VRBuilder.Unity.CoroutineDispatcher
  id: CoroutineDispatcher
  parent: VRBuilder.Unity
  children: []
  langs:
  - csharp
  - vb
  name: CoroutineDispatcher
  nameWithType: CoroutineDispatcher
  fullName: VRBuilder.Unity.CoroutineDispatcher
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Unity/CoroutineDispatcher.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CoroutineDispatcher
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Unity/CoroutineDispatcher.cs
    startLine: 10
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Unity
  summary: "\nAuxiliary class that allows starting UnityCoroutines from a context that is not\nitself a MonoBehaviour.\n"
  example: []
  syntax:
    content: 'public class CoroutineDispatcher : UnitySingleton<CoroutineDispatcher>'
    content.vb: >-
      Public Class CoroutineDispatcher

          Inherits UnitySingleton(Of CoroutineDispatcher)
  inheritance:
  - System.Object
  - VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}
  inheritedMembers:
  - VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}.Instance
  - VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}.Awake
  - VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}.OnDestroy
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
references:
- uid: VRBuilder.Unity
  commentId: N:VRBuilder.Unity
  name: VRBuilder.Unity
  nameWithType: VRBuilder.Unity
  fullName: VRBuilder.Unity
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}
  commentId: T:VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}
  parent: VRBuilder.Unity
  definition: VRBuilder.Unity.UnitySingleton`1
  name: UnitySingleton<CoroutineDispatcher>
  nameWithType: UnitySingleton<CoroutineDispatcher>
  fullName: VRBuilder.Unity.UnitySingleton<VRBuilder.Unity.CoroutineDispatcher>
  nameWithType.vb: UnitySingleton(Of CoroutineDispatcher)
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of VRBuilder.Unity.CoroutineDispatcher)
  name.vb: UnitySingleton(Of CoroutineDispatcher)
  spec.csharp:
  - uid: VRBuilder.Unity.UnitySingleton`1
    name: UnitySingleton
    nameWithType: UnitySingleton
    fullName: VRBuilder.Unity.UnitySingleton
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Unity.CoroutineDispatcher
    name: CoroutineDispatcher
    nameWithType: CoroutineDispatcher
    fullName: VRBuilder.Unity.CoroutineDispatcher
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Unity.UnitySingleton`1
    name: UnitySingleton
    nameWithType: UnitySingleton
    fullName: VRBuilder.Unity.UnitySingleton
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Unity.CoroutineDispatcher
    name: CoroutineDispatcher
    nameWithType: CoroutineDispatcher
    fullName: VRBuilder.Unity.CoroutineDispatcher
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}.Instance
  commentId: P:VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}.Instance
  parent: VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}
  definition: VRBuilder.Unity.UnitySingleton`1.Instance
  name: Instance
  nameWithType: UnitySingleton<CoroutineDispatcher>.Instance
  fullName: VRBuilder.Unity.UnitySingleton<VRBuilder.Unity.CoroutineDispatcher>.Instance
  nameWithType.vb: UnitySingleton(Of CoroutineDispatcher).Instance
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of VRBuilder.Unity.CoroutineDispatcher).Instance
- uid: VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}.Awake
  commentId: M:VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}.Awake
  parent: VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}
  definition: VRBuilder.Unity.UnitySingleton`1.Awake
  name: Awake()
  nameWithType: UnitySingleton<CoroutineDispatcher>.Awake()
  fullName: VRBuilder.Unity.UnitySingleton<VRBuilder.Unity.CoroutineDispatcher>.Awake()
  nameWithType.vb: UnitySingleton(Of CoroutineDispatcher).Awake()
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of VRBuilder.Unity.CoroutineDispatcher).Awake()
  spec.csharp:
  - uid: VRBuilder.Unity.UnitySingleton`1.Awake
    name: Awake
    nameWithType: UnitySingleton<CoroutineDispatcher>.Awake
    fullName: VRBuilder.Unity.UnitySingleton<VRBuilder.Unity.CoroutineDispatcher>.Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Unity.UnitySingleton`1.Awake
    name: Awake
    nameWithType: UnitySingleton(Of CoroutineDispatcher).Awake
    fullName: VRBuilder.Unity.UnitySingleton(Of VRBuilder.Unity.CoroutineDispatcher).Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}.OnDestroy
  commentId: M:VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}.OnDestroy
  parent: VRBuilder.Unity.UnitySingleton{VRBuilder.Unity.CoroutineDispatcher}
  definition: VRBuilder.Unity.UnitySingleton`1.OnDestroy
  name: OnDestroy()
  nameWithType: UnitySingleton<CoroutineDispatcher>.OnDestroy()
  fullName: VRBuilder.Unity.UnitySingleton<VRBuilder.Unity.CoroutineDispatcher>.OnDestroy()
  nameWithType.vb: UnitySingleton(Of CoroutineDispatcher).OnDestroy()
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of VRBuilder.Unity.CoroutineDispatcher).OnDestroy()
  spec.csharp:
  - uid: VRBuilder.Unity.UnitySingleton`1.OnDestroy
    name: OnDestroy
    nameWithType: UnitySingleton<CoroutineDispatcher>.OnDestroy
    fullName: VRBuilder.Unity.UnitySingleton<VRBuilder.Unity.CoroutineDispatcher>.OnDestroy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Unity.UnitySingleton`1.OnDestroy
    name: OnDestroy
    nameWithType: UnitySingleton(Of CoroutineDispatcher).OnDestroy
    fullName: VRBuilder.Unity.UnitySingleton(Of VRBuilder.Unity.CoroutineDispatcher).OnDestroy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Unity.UnitySingleton`1
  commentId: T:VRBuilder.Unity.UnitySingleton`1
  name: UnitySingleton<T>
  nameWithType: UnitySingleton<T>
  fullName: VRBuilder.Unity.UnitySingleton<T>
  nameWithType.vb: UnitySingleton(Of T)
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of T)
  name.vb: UnitySingleton(Of T)
  spec.csharp:
  - uid: VRBuilder.Unity.UnitySingleton`1
    name: UnitySingleton
    nameWithType: UnitySingleton
    fullName: VRBuilder.Unity.UnitySingleton
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Unity.UnitySingleton`1
    name: UnitySingleton
    nameWithType: UnitySingleton
    fullName: VRBuilder.Unity.UnitySingleton
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Unity.UnitySingleton`1.Instance
  commentId: P:VRBuilder.Unity.UnitySingleton`1.Instance
  name: Instance
  nameWithType: UnitySingleton<T>.Instance
  fullName: VRBuilder.Unity.UnitySingleton<T>.Instance
  nameWithType.vb: UnitySingleton(Of T).Instance
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of T).Instance
- uid: VRBuilder.Unity.UnitySingleton`1.Awake
  commentId: M:VRBuilder.Unity.UnitySingleton`1.Awake
  name: Awake()
  nameWithType: UnitySingleton<T>.Awake()
  fullName: VRBuilder.Unity.UnitySingleton<T>.Awake()
  nameWithType.vb: UnitySingleton(Of T).Awake()
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of T).Awake()
  spec.csharp:
  - uid: VRBuilder.Unity.UnitySingleton`1.Awake
    name: Awake
    nameWithType: UnitySingleton<T>.Awake
    fullName: VRBuilder.Unity.UnitySingleton<T>.Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Unity.UnitySingleton`1.Awake
    name: Awake
    nameWithType: UnitySingleton(Of T).Awake
    fullName: VRBuilder.Unity.UnitySingleton(Of T).Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Unity.UnitySingleton`1.OnDestroy
  commentId: M:VRBuilder.Unity.UnitySingleton`1.OnDestroy
  name: OnDestroy()
  nameWithType: UnitySingleton<T>.OnDestroy()
  fullName: VRBuilder.Unity.UnitySingleton<T>.OnDestroy()
  nameWithType.vb: UnitySingleton(Of T).OnDestroy()
  fullName.vb: VRBuilder.Unity.UnitySingleton(Of T).OnDestroy()
  spec.csharp:
  - uid: VRBuilder.Unity.UnitySingleton`1.OnDestroy
    name: OnDestroy
    nameWithType: UnitySingleton<T>.OnDestroy
    fullName: VRBuilder.Unity.UnitySingleton<T>.OnDestroy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Unity.UnitySingleton`1.OnDestroy
    name: OnDestroy
    nameWithType: UnitySingleton(Of T).OnDestroy
    fullName: VRBuilder.Unity.UnitySingleton(Of T).OnDestroy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
