### YamlMime:ManagedReference
items:
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState
  commentId: T:VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState
  id: ActionBasedControllerManager.ControllerState
  parent: VRBuilder.XRInteraction
  children:
  - VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.#ctor(VRBuilder.XRInteraction.ActionBasedControllerManager.StateID)
  - VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.Enabled
  - VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.ID
  - VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnEnter
  - VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnExit
  - VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnUpdate
  langs:
  - csharp
  - vb
  name: ActionBasedControllerManager.ControllerState
  nameWithType: ActionBasedControllerManager.ControllerState
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState
  type: Class
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Action-based/ActionBasedControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ControllerState
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Action-based/ActionBasedControllerManager.cs
    startLine: 50
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nUse this class to create a controller state and set up its enter, update, and exit events.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class ControllerState
    content.vb: >-
      <Serializable>

      Public Class ControllerState
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.Enabled
  commentId: P:VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.Enabled
  id: Enabled
  parent: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState
  langs:
  - csharp
  - vb
  name: Enabled
  nameWithType: ActionBasedControllerManager.ControllerState.Enabled
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.Enabled
  type: Property
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Action-based/ActionBasedControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Enabled
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Action-based/ActionBasedControllerManager.cs
    startLine: 62
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nSets the controller state to be active.\nFor the default states, setting this value to true will automatically update their <xref href=\"VRBuilder.XRInteraction.ActionBasedControllerManager.StateUpdateEvent\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Enabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Enabled As Boolean
  overload: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.Enabled*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.ID
  commentId: P:VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.ID
  id: ID
  parent: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState
  langs:
  - csharp
  - vb
  name: ID
  nameWithType: ActionBasedControllerManager.ControllerState.ID
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.ID
  type: Property
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Action-based/ActionBasedControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ID
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Action-based/ActionBasedControllerManager.cs
    startLine: 75
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nSets the identifier of the <xref href=\"VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState\" data-throw-if-not-resolved=\"false\"></xref> from all the optional Controller States that the <xref href=\"VRBuilder.XRInteraction.ActionBasedControllerManager\" data-throw-if-not-resolved=\"false\"></xref> holds.\n"
  example: []
  syntax:
    content: public ActionBasedControllerManager.StateID ID { get; set; }
    parameters: []
    return:
      type: VRBuilder.XRInteraction.ActionBasedControllerManager.StateID
    content.vb: Public Property ID As ActionBasedControllerManager.StateID
  overload: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.ID*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnEnter
  commentId: P:VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnEnter
  id: OnEnter
  parent: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState
  langs:
  - csharp
  - vb
  name: OnEnter
  nameWithType: ActionBasedControllerManager.ControllerState.OnEnter
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnEnter
  type: Property
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Action-based/ActionBasedControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: OnEnter
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Action-based/ActionBasedControllerManager.cs
    startLine: 87
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nThe <xref href=\"VRBuilder.XRInteraction.ActionBasedControllerManager.StateEnterEvent\" data-throw-if-not-resolved=\"false\"></xref> that will be invoked when entering the controller state.\n"
  example: []
  syntax:
    content: public ActionBasedControllerManager.StateEnterEvent OnEnter { get; set; }
    parameters: []
    return:
      type: VRBuilder.XRInteraction.ActionBasedControllerManager.StateEnterEvent
    content.vb: Public Property OnEnter As ActionBasedControllerManager.StateEnterEvent
  overload: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnEnter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnUpdate
  commentId: P:VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnUpdate
  id: OnUpdate
  parent: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState
  langs:
  - csharp
  - vb
  name: OnUpdate
  nameWithType: ActionBasedControllerManager.ControllerState.OnUpdate
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnUpdate
  type: Property
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Action-based/ActionBasedControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: OnUpdate
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Action-based/ActionBasedControllerManager.cs
    startLine: 99
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nThe <xref href=\"VRBuilder.XRInteraction.ActionBasedControllerManager.StateUpdateEvent\" data-throw-if-not-resolved=\"false\"></xref> that will be invoked when updating the controller state.\n"
  example: []
  syntax:
    content: public ActionBasedControllerManager.StateUpdateEvent OnUpdate { get; set; }
    parameters: []
    return:
      type: VRBuilder.XRInteraction.ActionBasedControllerManager.StateUpdateEvent
    content.vb: Public Property OnUpdate As ActionBasedControllerManager.StateUpdateEvent
  overload: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnUpdate*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnExit
  commentId: P:VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnExit
  id: OnExit
  parent: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState
  langs:
  - csharp
  - vb
  name: OnExit
  nameWithType: ActionBasedControllerManager.ControllerState.OnExit
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnExit
  type: Property
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Action-based/ActionBasedControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: OnExit
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Action-based/ActionBasedControllerManager.cs
    startLine: 111
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nThe <xref href=\"VRBuilder.XRInteraction.ActionBasedControllerManager.StateExitEvent\" data-throw-if-not-resolved=\"false\"></xref> that will be invoked when exiting the controller state.\n"
  example: []
  syntax:
    content: public ActionBasedControllerManager.StateExitEvent OnExit { get; set; }
    parameters: []
    return:
      type: VRBuilder.XRInteraction.ActionBasedControllerManager.StateExitEvent
    content.vb: Public Property OnExit As ActionBasedControllerManager.StateExitEvent
  overload: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnExit*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.#ctor(VRBuilder.XRInteraction.ActionBasedControllerManager.StateID)
  commentId: M:VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.#ctor(VRBuilder.XRInteraction.ActionBasedControllerManager.StateID)
  id: '#ctor(VRBuilder.XRInteraction.ActionBasedControllerManager.StateID)'
  parent: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState
  langs:
  - csharp
  - vb
  name: ControllerState(ActionBasedControllerManager.StateID)
  nameWithType: ActionBasedControllerManager.ControllerState.ControllerState(ActionBasedControllerManager.StateID)
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.ControllerState(VRBuilder.XRInteraction.ActionBasedControllerManager.StateID)
  type: Constructor
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Action-based/ActionBasedControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Action-based/ActionBasedControllerManager.cs
    startLine: 117
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  syntax:
    content: public ControllerState(ActionBasedControllerManager.StateID defaultId = ActionBasedControllerManager.StateID.None)
    parameters:
    - id: defaultId
      type: VRBuilder.XRInteraction.ActionBasedControllerManager.StateID
    content.vb: Public Sub New(defaultId As ActionBasedControllerManager.StateID = ActionBasedControllerManager.StateID.None)
  overload: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VRBuilder.XRInteraction
  commentId: N:VRBuilder.XRInteraction
  name: VRBuilder.XRInteraction
  nameWithType: VRBuilder.XRInteraction
  fullName: VRBuilder.XRInteraction
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.StateUpdateEvent
  commentId: T:VRBuilder.XRInteraction.ActionBasedControllerManager.StateUpdateEvent
  parent: VRBuilder.XRInteraction
  name: ActionBasedControllerManager.StateUpdateEvent
  nameWithType: ActionBasedControllerManager.StateUpdateEvent
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.StateUpdateEvent
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.Enabled*
  commentId: Overload:VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.Enabled
  name: Enabled
  nameWithType: ActionBasedControllerManager.ControllerState.Enabled
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.Enabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState
  commentId: T:VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState
  parent: VRBuilder.XRInteraction
  name: ActionBasedControllerManager.ControllerState
  nameWithType: ActionBasedControllerManager.ControllerState
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager
  commentId: T:VRBuilder.XRInteraction.ActionBasedControllerManager
  name: ActionBasedControllerManager
  nameWithType: ActionBasedControllerManager
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.ID*
  commentId: Overload:VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.ID
  name: ID
  nameWithType: ActionBasedControllerManager.ControllerState.ID
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.ID
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.StateID
  commentId: T:VRBuilder.XRInteraction.ActionBasedControllerManager.StateID
  parent: VRBuilder.XRInteraction
  name: ActionBasedControllerManager.StateID
  nameWithType: ActionBasedControllerManager.StateID
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.StateID
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.StateEnterEvent
  commentId: T:VRBuilder.XRInteraction.ActionBasedControllerManager.StateEnterEvent
  parent: VRBuilder.XRInteraction
  name: ActionBasedControllerManager.StateEnterEvent
  nameWithType: ActionBasedControllerManager.StateEnterEvent
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.StateEnterEvent
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnEnter*
  commentId: Overload:VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnEnter
  name: OnEnter
  nameWithType: ActionBasedControllerManager.ControllerState.OnEnter
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnEnter
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnUpdate*
  commentId: Overload:VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnUpdate
  name: OnUpdate
  nameWithType: ActionBasedControllerManager.ControllerState.OnUpdate
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnUpdate
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.StateExitEvent
  commentId: T:VRBuilder.XRInteraction.ActionBasedControllerManager.StateExitEvent
  parent: VRBuilder.XRInteraction
  name: ActionBasedControllerManager.StateExitEvent
  nameWithType: ActionBasedControllerManager.StateExitEvent
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.StateExitEvent
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnExit*
  commentId: Overload:VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnExit
  name: OnExit
  nameWithType: ActionBasedControllerManager.ControllerState.OnExit
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.OnExit
- uid: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.#ctor*
  commentId: Overload:VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.#ctor
  name: ControllerState
  nameWithType: ActionBasedControllerManager.ControllerState.ControllerState
  fullName: VRBuilder.XRInteraction.ActionBasedControllerManager.ControllerState.ControllerState
