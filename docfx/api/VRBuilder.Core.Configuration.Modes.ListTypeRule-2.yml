### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2
  commentId: T:VRBuilder.Core.Configuration.Modes.ListTypeRule`2
  id: ListTypeRule`2
  parent: VRBuilder.Core.Configuration.Modes
  children:
  - VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Add``1
  - VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Clone
  - VRBuilder.Core.Configuration.Modes.ListTypeRule`2.StoredTypes
  langs:
  - csharp
  - vb
  name: ListTypeRule<TRecursive, TValueBase>
  nameWithType: ListTypeRule<TRecursive, TValueBase>
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<TRecursive, TValueBase>
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/ListTypeRule.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ListTypeRule
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/ListTypeRule.cs
    startLine: 12
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nBase class for list-based implementations of the <xref href=\"VRBuilder.Core.Configuration.Modes.TypeRule%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: 'public abstract class ListTypeRule<TRecursive, TValueBase> : TypeRule<TValueBase>, IRule<Type> where TRecursive : ListTypeRule<TRecursive, TValueBase>, new()'
    typeParameters:
    - id: TRecursive
    - id: TValueBase
    content.vb: >-
      Public MustInherit Class ListTypeRule(Of TRecursive As {ListTypeRule(Of TRecursive, TValueBase), New}, TValueBase)

          Inherits TypeRule(Of TValueBase)

          Implements IRule(Of Type)
  inheritance:
  - System.Object
  - VRBuilder.Core.Configuration.Modes.TypeRule{{TValueBase}}
  derivedClasses:
  - VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1
  - VRBuilder.Core.Configuration.Modes.WhitelistTypeRule`1
  implements:
  - VRBuilder.Core.Configuration.Modes.IRule{System.Type}
  inheritedMembers:
  - VRBuilder.Core.Configuration.Modes.TypeRule{{TValueBase}}.IsQualifiedBy``1
  - VRBuilder.Core.Configuration.Modes.TypeRule{{TValueBase}}.IsQualifiedBy(System.Type)
  - VRBuilder.Core.Configuration.Modes.TypeRule{{TValueBase}}.IsQualifiedByPredicate(System.Type)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ListTypeRule(Of TRecursive, TValueBase)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of TRecursive, TValueBase)
  name.vb: ListTypeRule(Of TRecursive, TValueBase)
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.StoredTypes
  commentId: P:VRBuilder.Core.Configuration.Modes.ListTypeRule`2.StoredTypes
  id: StoredTypes
  parent: VRBuilder.Core.Configuration.Modes.ListTypeRule`2
  langs:
  - csharp
  - vb
  name: StoredTypes
  nameWithType: ListTypeRule<TRecursive, TValueBase>.StoredTypes
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<TRecursive, TValueBase>.StoredTypes
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/ListTypeRule.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: StoredTypes
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/ListTypeRule.cs
    startLine: 16
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  syntax:
    content: protected HashSet<Type> StoredTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{System.Type}
    content.vb: Protected ReadOnly Property StoredTypes As HashSet(Of Type)
  overload: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.StoredTypes*
  nameWithType.vb: ListTypeRule(Of TRecursive, TValueBase).StoredTypes
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of TRecursive, TValueBase).StoredTypes
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Add``1
  commentId: M:VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Add``1
  id: Add``1
  parent: VRBuilder.Core.Configuration.Modes.ListTypeRule`2
  langs:
  - csharp
  - vb
  name: Add<T>()
  nameWithType: ListTypeRule<TRecursive, TValueBase>.Add<T>()
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<TRecursive, TValueBase>.Add<T>()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/ListTypeRule.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Add
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/ListTypeRule.cs
    startLine: 28
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nAdds an additional Type to the list and returns a changed instance of this rule.\n"
  example: []
  syntax:
    content: >-
      public TRecursive Add<T>()

          where T : TValueBase
    typeParameters:
    - id: T
      description: Type which is added.
    return:
      type: '{TRecursive}'
    content.vb: Public Function Add(Of T As TValueBase) As TRecursive
  overload: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Add*
  nameWithType.vb: ListTypeRule(Of TRecursive, TValueBase).Add(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of TRecursive, TValueBase).Add(Of T)()
  name.vb: Add(Of T)()
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Clone
  commentId: M:VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Clone
  id: Clone
  parent: VRBuilder.Core.Configuration.Modes.ListTypeRule`2
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: ListTypeRule<TRecursive, TValueBase>.Clone()
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<TRecursive, TValueBase>.Clone()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/ListTypeRule.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Clone
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/ListTypeRule.cs
    startLine: 40
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  syntax:
    content: protected virtual TRecursive Clone()
    return:
      type: '{TRecursive}'
    content.vb: Protected Overridable Function Clone As TRecursive
  overload: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Clone*
  nameWithType.vb: ListTypeRule(Of TRecursive, TValueBase).Clone()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of TRecursive, TValueBase).Clone()
references:
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
  commentId: T:VRBuilder.Core.Configuration.Modes.TypeRule`1
  name: TypeRule<TValueBase>
  nameWithType: TypeRule<TValueBase>
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>
  nameWithType.vb: TypeRule(Of TValueBase)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase)
  name.vb: TypeRule(Of TValueBase)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
    name: TypeRule
    nameWithType: TypeRule
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TValueBase
    nameWithType: TValueBase
    fullName: TValueBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
    name: TypeRule
    nameWithType: TypeRule
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValueBase
    nameWithType: TValueBase
    fullName: TValueBase
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes
  commentId: N:VRBuilder.Core.Configuration.Modes
  name: VRBuilder.Core.Configuration.Modes
  nameWithType: VRBuilder.Core.Configuration.Modes
  fullName: VRBuilder.Core.Configuration.Modes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Core.Configuration.Modes.TypeRule{{TValueBase}}
  commentId: T:VRBuilder.Core.Configuration.Modes.TypeRule{`1}
  parent: VRBuilder.Core.Configuration.Modes
  definition: VRBuilder.Core.Configuration.Modes.TypeRule`1
  name: TypeRule<TValueBase>
  nameWithType: TypeRule<TValueBase>
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>
  nameWithType.vb: TypeRule(Of TValueBase)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase)
  name.vb: TypeRule(Of TValueBase)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
    name: TypeRule
    nameWithType: TypeRule
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TValueBase
    nameWithType: TValueBase
    fullName: TValueBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
    name: TypeRule
    nameWithType: TypeRule
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValueBase
    nameWithType: TValueBase
    fullName: TValueBase
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.IRule{System.Type}
  commentId: T:VRBuilder.Core.Configuration.Modes.IRule{System.Type}
  parent: VRBuilder.Core.Configuration.Modes
  definition: VRBuilder.Core.Configuration.Modes.IRule`1
  name: IRule<Type>
  nameWithType: IRule<Type>
  fullName: VRBuilder.Core.Configuration.Modes.IRule<System.Type>
  nameWithType.vb: IRule(Of Type)
  fullName.vb: VRBuilder.Core.Configuration.Modes.IRule(Of System.Type)
  name.vb: IRule(Of Type)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1
    name: IRule
    nameWithType: IRule
    fullName: VRBuilder.Core.Configuration.Modes.IRule
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1
    name: IRule
    nameWithType: IRule
    fullName: VRBuilder.Core.Configuration.Modes.IRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.TypeRule{{TValueBase}}.IsQualifiedBy``1
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule{`1}.IsQualifiedBy``1
  parent: VRBuilder.Core.Configuration.Modes.TypeRule{{TValueBase}}
  definition: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
  name: IsQualifiedBy<T>()
  nameWithType: TypeRule<TValueBase>.IsQualifiedBy<T>()
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy<T>()
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedBy(Of T)()
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy(Of T)()
  name.vb: IsQualifiedBy(Of T)()
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
    name: IsQualifiedBy<T>
    nameWithType: TypeRule<TValueBase>.IsQualifiedBy<T>
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
    name: IsQualifiedBy(Of T)
    nameWithType: TypeRule(Of TValueBase).IsQualifiedBy(Of T)
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.TypeRule{{TValueBase}}.IsQualifiedBy(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule{`1}.IsQualifiedBy(System.Type)
  parent: VRBuilder.Core.Configuration.Modes.TypeRule{{TValueBase}}
  definition: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
  name: IsQualifiedBy(Type)
  nameWithType: TypeRule<TValueBase>.IsQualifiedBy(Type)
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy(System.Type)
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedBy(Type)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy(System.Type)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
    name: IsQualifiedBy
    nameWithType: TypeRule<TValueBase>.IsQualifiedBy
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
    name: IsQualifiedBy
    nameWithType: TypeRule(Of TValueBase).IsQualifiedBy
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.TypeRule{{TValueBase}}.IsQualifiedByPredicate(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule{`1}.IsQualifiedByPredicate(System.Type)
  parent: VRBuilder.Core.Configuration.Modes.TypeRule{{TValueBase}}
  definition: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
  name: IsQualifiedByPredicate(Type)
  nameWithType: TypeRule<TValueBase>.IsQualifiedByPredicate(Type)
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedByPredicate(System.Type)
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedByPredicate(Type)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedByPredicate(System.Type)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
    name: IsQualifiedByPredicate
    nameWithType: TypeRule<TValueBase>.IsQualifiedByPredicate
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedByPredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
    name: IsQualifiedByPredicate
    nameWithType: TypeRule(Of TValueBase).IsQualifiedByPredicate
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedByPredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.Configuration.Modes.IRule`1
  commentId: T:VRBuilder.Core.Configuration.Modes.IRule`1
  name: IRule<T>
  nameWithType: IRule<T>
  fullName: VRBuilder.Core.Configuration.Modes.IRule<T>
  nameWithType.vb: IRule(Of T)
  fullName.vb: VRBuilder.Core.Configuration.Modes.IRule(Of T)
  name.vb: IRule(Of T)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1
    name: IRule
    nameWithType: IRule
    fullName: VRBuilder.Core.Configuration.Modes.IRule
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1
    name: IRule
    nameWithType: IRule
    fullName: VRBuilder.Core.Configuration.Modes.IRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
  name: IsQualifiedBy<T>()
  nameWithType: TypeRule<TValueBase>.IsQualifiedBy<T>()
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy<T>()
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedBy(Of T)()
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy(Of T)()
  name.vb: IsQualifiedBy(Of T)()
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
    name: IsQualifiedBy<T>
    nameWithType: TypeRule<TValueBase>.IsQualifiedBy<T>
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
    name: IsQualifiedBy(Of T)
    nameWithType: TypeRule(Of TValueBase).IsQualifiedBy(Of T)
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
  isExternal: true
  name: IsQualifiedBy(Type)
  nameWithType: TypeRule<TValueBase>.IsQualifiedBy(Type)
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy(System.Type)
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedBy(Type)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy(System.Type)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
    name: IsQualifiedBy
    nameWithType: TypeRule<TValueBase>.IsQualifiedBy
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
    name: IsQualifiedBy
    nameWithType: TypeRule(Of TValueBase).IsQualifiedBy
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
  isExternal: true
  name: IsQualifiedByPredicate(Type)
  nameWithType: TypeRule<TValueBase>.IsQualifiedByPredicate(Type)
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedByPredicate(System.Type)
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedByPredicate(Type)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedByPredicate(System.Type)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
    name: IsQualifiedByPredicate
    nameWithType: TypeRule<TValueBase>.IsQualifiedByPredicate
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedByPredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
    name: IsQualifiedByPredicate
    nameWithType: TypeRule(Of TValueBase).IsQualifiedByPredicate
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedByPredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.StoredTypes*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.ListTypeRule`2.StoredTypes
  name: StoredTypes
  nameWithType: ListTypeRule<TRecursive, TValueBase>.StoredTypes
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<TRecursive, TValueBase>.StoredTypes
  nameWithType.vb: ListTypeRule(Of TRecursive, TValueBase).StoredTypes
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of TRecursive, TValueBase).StoredTypes
- uid: System.Collections.Generic.HashSet{System.Type}
  commentId: T:System.Collections.Generic.HashSet{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<Type>
  nameWithType: HashSet<Type>
  fullName: System.Collections.Generic.HashSet<System.Type>
  nameWithType.vb: HashSet(Of Type)
  fullName.vb: System.Collections.Generic.HashSet(Of System.Type)
  name.vb: HashSet(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Add*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Add
  name: Add
  nameWithType: ListTypeRule<TRecursive, TValueBase>.Add
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<TRecursive, TValueBase>.Add
  nameWithType.vb: ListTypeRule(Of TRecursive, TValueBase).Add
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of TRecursive, TValueBase).Add
- uid: '{TRecursive}'
  commentId: '!:TRecursive'
  definition: TRecursive
  name: TRecursive
  nameWithType: TRecursive
  fullName: TRecursive
- uid: TRecursive
  name: TRecursive
  nameWithType: TRecursive
  fullName: TRecursive
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Clone*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Clone
  name: Clone
  nameWithType: ListTypeRule<TRecursive, TValueBase>.Clone
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<TRecursive, TValueBase>.Clone
  nameWithType.vb: ListTypeRule(Of TRecursive, TValueBase).Clone
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of TRecursive, TValueBase).Clone
