### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
  commentId: T:VRBuilder.Core.Configuration.Modes.TypeRule`1
  id: TypeRule`1
  parent: VRBuilder.Core.Configuration.Modes
  children:
  - VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
  - VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
  - VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
  langs:
  - csharp
  - vb
  name: TypeRule<TValueBase>
  nameWithType: TypeRule<TValueBase>
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/TypeRule.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: TypeRule
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/TypeRule.cs
    startLine: 12
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nAn <xref href=\"VRBuilder.Core.Configuration.Modes.IRule%601\" data-throw-if-not-resolved=\"false\"></xref> for types.\n"
  example: []
  syntax:
    content: 'public abstract class TypeRule<TValueBase> : IRule<Type>'
    typeParameters:
    - id: TValueBase
      description: A type from which all input types have to be inherited from.
    content.vb: >-
      Public MustInherit Class TypeRule(Of TValueBase)

          Implements IRule(Of Type)
  inheritance:
  - System.Object
  derivedClasses:
  - VRBuilder.Core.Configuration.Modes.ListTypeRule`2
  implements:
  - VRBuilder.Core.Configuration.Modes.IRule{System.Type}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: TypeRule(Of TValueBase)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase)
  name.vb: TypeRule(Of TValueBase)
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
  id: IsQualifiedBy``1
  parent: VRBuilder.Core.Configuration.Modes.TypeRule`1
  langs:
  - csharp
  - vb
  name: IsQualifiedBy<T>()
  nameWithType: TypeRule<TValueBase>.IsQualifiedBy<T>()
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy<T>()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/TypeRule.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IsQualifiedBy
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/TypeRule.cs
    startLine: 17
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nGeneric version of <xref href=\"VRBuilder.Core.Configuration.Modes.TypeRule%601.IsQualifiedBy(System.Type)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public bool IsQualifiedBy<T>()

          where T : TValueBase
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Function IsQualifiedBy(Of T As TValueBase) As Boolean
  overload: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy*
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedBy(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy(Of T)()
  name.vb: IsQualifiedBy(Of T)()
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
  id: IsQualifiedBy(System.Type)
  parent: VRBuilder.Core.Configuration.Modes.TypeRule`1
  langs:
  - csharp
  - vb
  name: IsQualifiedBy(Type)
  nameWithType: TypeRule<TValueBase>.IsQualifiedBy(Type)
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy(System.Type)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/TypeRule.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IsQualifiedBy
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/TypeRule.cs
    startLine: 23
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  example: []
  syntax:
    content: public bool IsQualifiedBy(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Function IsQualifiedBy(type As Type) As Boolean
  overload: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy*
  implements:
  - VRBuilder.Core.Configuration.Modes.IRule{System.Type}.IsQualifiedBy(System.Type)
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedBy(Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy(System.Type)
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
  id: IsQualifiedByPredicate(System.Type)
  parent: VRBuilder.Core.Configuration.Modes.TypeRule`1
  langs:
  - csharp
  - vb
  name: IsQualifiedByPredicate(Type)
  nameWithType: TypeRule<TValueBase>.IsQualifiedByPredicate(Type)
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedByPredicate(System.Type)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/TypeRule.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IsQualifiedByPredicate
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/TypeRule.cs
    startLine: 36
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nActual check of a given type. It is guaranteed that <code data-dev-comment-type=\"paramref\" class=\"paramref\">type</code> inherits the <typeparam name=\"TValueBase\"></typeparam>\n"
  example: []
  syntax:
    content: protected abstract bool IsQualifiedByPredicate(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Protected MustOverride Function IsQualifiedByPredicate(type As Type) As Boolean
  overload: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate*
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedByPredicate(Type)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedByPredicate(System.Type)
references:
- uid: VRBuilder.Core.Configuration.Modes.IRule`1
  commentId: T:VRBuilder.Core.Configuration.Modes.IRule`1
  name: IRule<T>
  nameWithType: IRule<T>
  fullName: VRBuilder.Core.Configuration.Modes.IRule<T>
  nameWithType.vb: IRule(Of T)
  fullName.vb: VRBuilder.Core.Configuration.Modes.IRule(Of T)
  name.vb: IRule(Of T)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1
    name: IRule
    nameWithType: IRule
    fullName: VRBuilder.Core.Configuration.Modes.IRule
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1
    name: IRule
    nameWithType: IRule
    fullName: VRBuilder.Core.Configuration.Modes.IRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes
  commentId: N:VRBuilder.Core.Configuration.Modes
  name: VRBuilder.Core.Configuration.Modes
  nameWithType: VRBuilder.Core.Configuration.Modes
  fullName: VRBuilder.Core.Configuration.Modes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Core.Configuration.Modes.IRule{System.Type}
  commentId: T:VRBuilder.Core.Configuration.Modes.IRule{System.Type}
  parent: VRBuilder.Core.Configuration.Modes
  definition: VRBuilder.Core.Configuration.Modes.IRule`1
  name: IRule<Type>
  nameWithType: IRule<Type>
  fullName: VRBuilder.Core.Configuration.Modes.IRule<System.Type>
  nameWithType.vb: IRule(Of Type)
  fullName.vb: VRBuilder.Core.Configuration.Modes.IRule(Of System.Type)
  name.vb: IRule(Of Type)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1
    name: IRule
    nameWithType: IRule
    fullName: VRBuilder.Core.Configuration.Modes.IRule
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1
    name: IRule
    nameWithType: IRule
    fullName: VRBuilder.Core.Configuration.Modes.IRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
  isExternal: true
  name: IsQualifiedBy(Type)
  nameWithType: TypeRule<TValueBase>.IsQualifiedBy(Type)
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy(System.Type)
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedBy(Type)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy(System.Type)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
    name: IsQualifiedBy
    nameWithType: TypeRule<TValueBase>.IsQualifiedBy
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
    name: IsQualifiedBy
    nameWithType: TypeRule(Of TValueBase).IsQualifiedBy
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy
  name: IsQualifiedBy
  nameWithType: TypeRule<TValueBase>.IsQualifiedBy
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedBy
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VRBuilder.Core.Configuration.Modes.IRule{System.Type}.IsQualifiedBy(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.IRule{System.Type}.IsQualifiedBy(System.Type)
  parent: VRBuilder.Core.Configuration.Modes.IRule{System.Type}
  definition: VRBuilder.Core.Configuration.Modes.IRule`1.IsQualifiedBy(`0)
  name: IsQualifiedBy(Type)
  nameWithType: IRule<Type>.IsQualifiedBy(Type)
  fullName: VRBuilder.Core.Configuration.Modes.IRule<System.Type>.IsQualifiedBy(System.Type)
  nameWithType.vb: IRule(Of Type).IsQualifiedBy(Type)
  fullName.vb: VRBuilder.Core.Configuration.Modes.IRule(Of System.Type).IsQualifiedBy(System.Type)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1.IsQualifiedBy(`0)
    name: IsQualifiedBy
    nameWithType: IRule<Type>.IsQualifiedBy
    fullName: VRBuilder.Core.Configuration.Modes.IRule<System.Type>.IsQualifiedBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1.IsQualifiedBy(`0)
    name: IsQualifiedBy
    nameWithType: IRule(Of Type).IsQualifiedBy
    fullName: VRBuilder.Core.Configuration.Modes.IRule(Of System.Type).IsQualifiedBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: VRBuilder.Core.Configuration.Modes.IRule`1.IsQualifiedBy(`0)
  commentId: M:VRBuilder.Core.Configuration.Modes.IRule`1.IsQualifiedBy(`0)
  name: IsQualifiedBy(T)
  nameWithType: IRule<T>.IsQualifiedBy(T)
  fullName: VRBuilder.Core.Configuration.Modes.IRule<T>.IsQualifiedBy(T)
  nameWithType.vb: IRule(Of T).IsQualifiedBy(T)
  fullName.vb: VRBuilder.Core.Configuration.Modes.IRule(Of T).IsQualifiedBy(T)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1.IsQualifiedBy(`0)
    name: IsQualifiedBy
    nameWithType: IRule<T>.IsQualifiedBy
    fullName: VRBuilder.Core.Configuration.Modes.IRule<T>.IsQualifiedBy
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1.IsQualifiedBy(`0)
    name: IsQualifiedBy
    nameWithType: IRule(Of T).IsQualifiedBy
    fullName: VRBuilder.Core.Configuration.Modes.IRule(Of T).IsQualifiedBy
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate
  name: IsQualifiedByPredicate
  nameWithType: TypeRule<TValueBase>.IsQualifiedByPredicate
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedByPredicate
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedByPredicate
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedByPredicate
