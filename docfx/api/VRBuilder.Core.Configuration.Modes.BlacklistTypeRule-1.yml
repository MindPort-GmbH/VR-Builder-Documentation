### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1
  commentId: T:VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1
  id: BlacklistTypeRule`1
  parent: VRBuilder.Core.Configuration.Modes
  children:
  - VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1.IsQualifiedByPredicate(System.Type)
  langs:
  - csharp
  - vb
  name: BlacklistTypeRule<TBase>
  nameWithType: BlacklistTypeRule<TBase>
  fullName: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule<TBase>
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/BlacklistTypeRule.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: BlacklistTypeRule
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/BlacklistTypeRule.cs
    startLine: 12
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nAll listed types will be invalid.\n"
  example: []
  syntax:
    content: 'public class BlacklistTypeRule<TBase> : ListTypeRule<BlacklistTypeRule<TBase>, TBase>, IRule<Type>'
    typeParameters:
    - id: TBase
      description: Type which can be filtered.
    content.vb: >-
      Public Class BlacklistTypeRule(Of TBase)

          Inherits ListTypeRule(Of BlacklistTypeRule(Of TBase), TBase)

          Implements IRule(Of Type)
  inheritance:
  - System.Object
  - VRBuilder.Core.Configuration.Modes.TypeRule{{TBase}}
  - VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,{TBase}}
  implements:
  - VRBuilder.Core.Configuration.Modes.IRule{System.Type}
  inheritedMembers:
  - VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,{TBase}}.StoredTypes
  - VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,{TBase}}.Add``1
  - VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,{TBase}}.Clone
  - VRBuilder.Core.Configuration.Modes.TypeRule{{TBase}}.IsQualifiedBy``1
  - VRBuilder.Core.Configuration.Modes.TypeRule{{TBase}}.IsQualifiedBy(System.Type)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: BlacklistTypeRule(Of TBase)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule(Of TBase)
  name.vb: BlacklistTypeRule(Of TBase)
- uid: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1.IsQualifiedByPredicate(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1.IsQualifiedByPredicate(System.Type)
  id: IsQualifiedByPredicate(System.Type)
  parent: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1
  langs:
  - csharp
  - vb
  name: IsQualifiedByPredicate(Type)
  nameWithType: BlacklistTypeRule<TBase>.IsQualifiedByPredicate(Type)
  fullName: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule<TBase>.IsQualifiedByPredicate(System.Type)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/BlacklistTypeRule.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IsQualifiedByPredicate
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/BlacklistTypeRule.cs
    startLine: 15
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  example: []
  syntax:
    content: protected override bool IsQualifiedByPredicate(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function IsQualifiedByPredicate(type As Type) As Boolean
  overridden: VRBuilder.Core.Configuration.Modes.TypeRule{{TBase}}.IsQualifiedByPredicate(System.Type)
  overload: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1.IsQualifiedByPredicate*
  nameWithType.vb: BlacklistTypeRule(Of TBase).IsQualifiedByPredicate(Type)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule(Of TBase).IsQualifiedByPredicate(System.Type)
references:
- uid: VRBuilder.Core.Configuration.Modes
  commentId: N:VRBuilder.Core.Configuration.Modes
  name: VRBuilder.Core.Configuration.Modes
  nameWithType: VRBuilder.Core.Configuration.Modes
  fullName: VRBuilder.Core.Configuration.Modes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Core.Configuration.Modes.TypeRule{{TBase}}
  commentId: T:VRBuilder.Core.Configuration.Modes.TypeRule{`0}
  parent: VRBuilder.Core.Configuration.Modes
  definition: VRBuilder.Core.Configuration.Modes.TypeRule`1
  name: TypeRule<TBase>
  nameWithType: TypeRule<TBase>
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TBase>
  nameWithType.vb: TypeRule(Of TBase)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TBase)
  name.vb: TypeRule(Of TBase)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
    name: TypeRule
    nameWithType: TypeRule
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TBase
    nameWithType: TBase
    fullName: TBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
    name: TypeRule
    nameWithType: TypeRule
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TBase
    nameWithType: TBase
    fullName: TBase
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,{TBase}}
  commentId: T:VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,`0}
  parent: VRBuilder.Core.Configuration.Modes
  definition: VRBuilder.Core.Configuration.Modes.ListTypeRule`2
  name: ListTypeRule<BlacklistTypeRule<TBase>, TBase>
  nameWithType: ListTypeRule<BlacklistTypeRule<TBase>, TBase>
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<VRBuilder.Core.Configuration.Modes.BlacklistTypeRule<TBase>, TBase>
  nameWithType.vb: ListTypeRule(Of BlacklistTypeRule(Of TBase), TBase)
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of VRBuilder.Core.Configuration.Modes.BlacklistTypeRule(Of TBase), TBase)
  name.vb: ListTypeRule(Of BlacklistTypeRule(Of TBase), TBase)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2
    name: ListTypeRule
    nameWithType: ListTypeRule
    fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1
    name: BlacklistTypeRule
    nameWithType: BlacklistTypeRule
    fullName: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TBase
    nameWithType: TBase
    fullName: TBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TBase
    nameWithType: TBase
    fullName: TBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2
    name: ListTypeRule
    nameWithType: ListTypeRule
    fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1
    name: BlacklistTypeRule
    nameWithType: BlacklistTypeRule
    fullName: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TBase
    nameWithType: TBase
    fullName: TBase
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TBase
    nameWithType: TBase
    fullName: TBase
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.IRule{System.Type}
  commentId: T:VRBuilder.Core.Configuration.Modes.IRule{System.Type}
  parent: VRBuilder.Core.Configuration.Modes
  definition: VRBuilder.Core.Configuration.Modes.IRule`1
  name: IRule<Type>
  nameWithType: IRule<Type>
  fullName: VRBuilder.Core.Configuration.Modes.IRule<System.Type>
  nameWithType.vb: IRule(Of Type)
  fullName.vb: VRBuilder.Core.Configuration.Modes.IRule(Of System.Type)
  name.vb: IRule(Of Type)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1
    name: IRule
    nameWithType: IRule
    fullName: VRBuilder.Core.Configuration.Modes.IRule
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1
    name: IRule
    nameWithType: IRule
    fullName: VRBuilder.Core.Configuration.Modes.IRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,{TBase}}.StoredTypes
  commentId: P:VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,`0}.StoredTypes
  parent: VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,{TBase}}
  definition: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.StoredTypes
  name: StoredTypes
  nameWithType: ListTypeRule<BlacklistTypeRule<TBase>, TBase>.StoredTypes
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<VRBuilder.Core.Configuration.Modes.BlacklistTypeRule<TBase>, TBase>.StoredTypes
  nameWithType.vb: ListTypeRule(Of BlacklistTypeRule(Of TBase), TBase).StoredTypes
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of VRBuilder.Core.Configuration.Modes.BlacklistTypeRule(Of TBase), TBase).StoredTypes
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,{TBase}}.Add``1
  commentId: M:VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,`0}.Add``1
  parent: VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,{TBase}}
  definition: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Add``1
  name: Add<T>()
  nameWithType: ListTypeRule<BlacklistTypeRule<TBase>, TBase>.Add<T>()
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<VRBuilder.Core.Configuration.Modes.BlacklistTypeRule<TBase>, TBase>.Add<T>()
  nameWithType.vb: ListTypeRule(Of BlacklistTypeRule(Of TBase), TBase).Add(Of T)()
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of VRBuilder.Core.Configuration.Modes.BlacklistTypeRule(Of TBase), TBase).Add(Of T)()
  name.vb: Add(Of T)()
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Add``1
    name: Add<T>
    nameWithType: ListTypeRule<BlacklistTypeRule<TBase>, TBase>.Add<T>
    fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<VRBuilder.Core.Configuration.Modes.BlacklistTypeRule<TBase>, TBase>.Add<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Add``1
    name: Add(Of T)
    nameWithType: ListTypeRule(Of BlacklistTypeRule(Of TBase), TBase).Add(Of T)
    fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of VRBuilder.Core.Configuration.Modes.BlacklistTypeRule(Of TBase), TBase).Add(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,{TBase}}.Clone
  commentId: M:VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,`0}.Clone
  parent: VRBuilder.Core.Configuration.Modes.ListTypeRule{VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1,{TBase}}
  definition: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Clone
  name: Clone()
  nameWithType: ListTypeRule<BlacklistTypeRule<TBase>, TBase>.Clone()
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<VRBuilder.Core.Configuration.Modes.BlacklistTypeRule<TBase>, TBase>.Clone()
  nameWithType.vb: ListTypeRule(Of BlacklistTypeRule(Of TBase), TBase).Clone()
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of VRBuilder.Core.Configuration.Modes.BlacklistTypeRule(Of TBase), TBase).Clone()
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Clone
    name: Clone
    nameWithType: ListTypeRule<BlacklistTypeRule<TBase>, TBase>.Clone
    fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<VRBuilder.Core.Configuration.Modes.BlacklistTypeRule<TBase>, TBase>.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Clone
    name: Clone
    nameWithType: ListTypeRule(Of BlacklistTypeRule(Of TBase), TBase).Clone
    fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of VRBuilder.Core.Configuration.Modes.BlacklistTypeRule(Of TBase), TBase).Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.TypeRule{{TBase}}.IsQualifiedBy``1
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule{`0}.IsQualifiedBy``1
  parent: VRBuilder.Core.Configuration.Modes.TypeRule{{TBase}}
  definition: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
  name: IsQualifiedBy<T>()
  nameWithType: TypeRule<TBase>.IsQualifiedBy<T>()
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TBase>.IsQualifiedBy<T>()
  nameWithType.vb: TypeRule(Of TBase).IsQualifiedBy(Of T)()
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TBase).IsQualifiedBy(Of T)()
  name.vb: IsQualifiedBy(Of T)()
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
    name: IsQualifiedBy<T>
    nameWithType: TypeRule<TBase>.IsQualifiedBy<T>
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TBase>.IsQualifiedBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
    name: IsQualifiedBy(Of T)
    nameWithType: TypeRule(Of TBase).IsQualifiedBy(Of T)
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule(Of TBase).IsQualifiedBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.TypeRule{{TBase}}.IsQualifiedBy(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule{`0}.IsQualifiedBy(System.Type)
  parent: VRBuilder.Core.Configuration.Modes.TypeRule{{TBase}}
  definition: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
  name: IsQualifiedBy(Type)
  nameWithType: TypeRule<TBase>.IsQualifiedBy(Type)
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TBase>.IsQualifiedBy(System.Type)
  nameWithType.vb: TypeRule(Of TBase).IsQualifiedBy(Type)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TBase).IsQualifiedBy(System.Type)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
    name: IsQualifiedBy
    nameWithType: TypeRule<TBase>.IsQualifiedBy
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TBase>.IsQualifiedBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
    name: IsQualifiedBy
    nameWithType: TypeRule(Of TBase).IsQualifiedBy
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule(Of TBase).IsQualifiedBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
  commentId: T:VRBuilder.Core.Configuration.Modes.TypeRule`1
  name: TypeRule<TValueBase>
  nameWithType: TypeRule<TValueBase>
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>
  nameWithType.vb: TypeRule(Of TValueBase)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase)
  name.vb: TypeRule(Of TValueBase)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
    name: TypeRule
    nameWithType: TypeRule
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TValueBase
    nameWithType: TValueBase
    fullName: TValueBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
    name: TypeRule
    nameWithType: TypeRule
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValueBase
    nameWithType: TValueBase
    fullName: TValueBase
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2
  commentId: T:VRBuilder.Core.Configuration.Modes.ListTypeRule`2
  name: ListTypeRule<TRecursive, TValueBase>
  nameWithType: ListTypeRule<TRecursive, TValueBase>
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<TRecursive, TValueBase>
  nameWithType.vb: ListTypeRule(Of TRecursive, TValueBase)
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of TRecursive, TValueBase)
  name.vb: ListTypeRule(Of TRecursive, TValueBase)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2
    name: ListTypeRule
    nameWithType: ListTypeRule
    fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRecursive
    nameWithType: TRecursive
    fullName: TRecursive
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValueBase
    nameWithType: TValueBase
    fullName: TValueBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2
    name: ListTypeRule
    nameWithType: ListTypeRule
    fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRecursive
    nameWithType: TRecursive
    fullName: TRecursive
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValueBase
    nameWithType: TValueBase
    fullName: TValueBase
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.IRule`1
  commentId: T:VRBuilder.Core.Configuration.Modes.IRule`1
  name: IRule<T>
  nameWithType: IRule<T>
  fullName: VRBuilder.Core.Configuration.Modes.IRule<T>
  nameWithType.vb: IRule(Of T)
  fullName.vb: VRBuilder.Core.Configuration.Modes.IRule(Of T)
  name.vb: IRule(Of T)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1
    name: IRule
    nameWithType: IRule
    fullName: VRBuilder.Core.Configuration.Modes.IRule
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IRule`1
    name: IRule
    nameWithType: IRule
    fullName: VRBuilder.Core.Configuration.Modes.IRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.StoredTypes
  commentId: P:VRBuilder.Core.Configuration.Modes.ListTypeRule`2.StoredTypes
  name: StoredTypes
  nameWithType: ListTypeRule<TRecursive, TValueBase>.StoredTypes
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<TRecursive, TValueBase>.StoredTypes
  nameWithType.vb: ListTypeRule(Of TRecursive, TValueBase).StoredTypes
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of TRecursive, TValueBase).StoredTypes
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Add``1
  commentId: M:VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Add``1
  name: Add<T>()
  nameWithType: ListTypeRule<TRecursive, TValueBase>.Add<T>()
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<TRecursive, TValueBase>.Add<T>()
  nameWithType.vb: ListTypeRule(Of TRecursive, TValueBase).Add(Of T)()
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of TRecursive, TValueBase).Add(Of T)()
  name.vb: Add(Of T)()
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Add``1
    name: Add<T>
    nameWithType: ListTypeRule<TRecursive, TValueBase>.Add<T>
    fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<TRecursive, TValueBase>.Add<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Add``1
    name: Add(Of T)
    nameWithType: ListTypeRule(Of TRecursive, TValueBase).Add(Of T)
    fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of TRecursive, TValueBase).Add(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Clone
  commentId: M:VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Clone
  name: Clone()
  nameWithType: ListTypeRule<TRecursive, TValueBase>.Clone()
  fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<TRecursive, TValueBase>.Clone()
  nameWithType.vb: ListTypeRule(Of TRecursive, TValueBase).Clone()
  fullName.vb: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of TRecursive, TValueBase).Clone()
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Clone
    name: Clone
    nameWithType: ListTypeRule<TRecursive, TValueBase>.Clone
    fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule<TRecursive, TValueBase>.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.ListTypeRule`2.Clone
    name: Clone
    nameWithType: ListTypeRule(Of TRecursive, TValueBase).Clone
    fullName: VRBuilder.Core.Configuration.Modes.ListTypeRule(Of TRecursive, TValueBase).Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
  name: IsQualifiedBy<T>()
  nameWithType: TypeRule<TValueBase>.IsQualifiedBy<T>()
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy<T>()
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedBy(Of T)()
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy(Of T)()
  name.vb: IsQualifiedBy(Of T)()
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
    name: IsQualifiedBy<T>
    nameWithType: TypeRule<TValueBase>.IsQualifiedBy<T>
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy``1
    name: IsQualifiedBy(Of T)
    nameWithType: TypeRule(Of TValueBase).IsQualifiedBy(Of T)
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
  isExternal: true
  name: IsQualifiedBy(Type)
  nameWithType: TypeRule<TValueBase>.IsQualifiedBy(Type)
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy(System.Type)
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedBy(Type)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy(System.Type)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
    name: IsQualifiedBy
    nameWithType: TypeRule<TValueBase>.IsQualifiedBy
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedBy(System.Type)
    name: IsQualifiedBy
    nameWithType: TypeRule(Of TValueBase).IsQualifiedBy
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.TypeRule{{TBase}}.IsQualifiedByPredicate(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule{`0}.IsQualifiedByPredicate(System.Type)
  parent: VRBuilder.Core.Configuration.Modes.TypeRule{{TBase}}
  definition: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
  name: IsQualifiedByPredicate(Type)
  nameWithType: TypeRule<TBase>.IsQualifiedByPredicate(Type)
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TBase>.IsQualifiedByPredicate(System.Type)
  nameWithType.vb: TypeRule(Of TBase).IsQualifiedByPredicate(Type)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TBase).IsQualifiedByPredicate(System.Type)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
    name: IsQualifiedByPredicate
    nameWithType: TypeRule<TBase>.IsQualifiedByPredicate
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TBase>.IsQualifiedByPredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
    name: IsQualifiedByPredicate
    nameWithType: TypeRule(Of TBase).IsQualifiedByPredicate
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule(Of TBase).IsQualifiedByPredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1.IsQualifiedByPredicate*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.BlacklistTypeRule`1.IsQualifiedByPredicate
  name: IsQualifiedByPredicate
  nameWithType: BlacklistTypeRule<TBase>.IsQualifiedByPredicate
  fullName: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule<TBase>.IsQualifiedByPredicate
  nameWithType.vb: BlacklistTypeRule(Of TBase).IsQualifiedByPredicate
  fullName.vb: VRBuilder.Core.Configuration.Modes.BlacklistTypeRule(Of TBase).IsQualifiedByPredicate
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
  isExternal: true
  name: IsQualifiedByPredicate(Type)
  nameWithType: TypeRule<TValueBase>.IsQualifiedByPredicate(Type)
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedByPredicate(System.Type)
  nameWithType.vb: TypeRule(Of TValueBase).IsQualifiedByPredicate(Type)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedByPredicate(System.Type)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
    name: IsQualifiedByPredicate
    nameWithType: TypeRule<TValueBase>.IsQualifiedByPredicate
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>.IsQualifiedByPredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1.IsQualifiedByPredicate(System.Type)
    name: IsQualifiedByPredicate
    nameWithType: TypeRule(Of TValueBase).IsQualifiedByPredicate
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase).IsQualifiedByPredicate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
