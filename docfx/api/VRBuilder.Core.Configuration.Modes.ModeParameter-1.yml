### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Configuration.Modes.ModeParameter`1
  commentId: T:VRBuilder.Core.Configuration.Modes.ModeParameter`1
  id: ModeParameter`1
  parent: VRBuilder.Core.Configuration.Modes
  children:
  - VRBuilder.Core.Configuration.Modes.ModeParameter`1.#ctor(System.String,`0)
  - VRBuilder.Core.Configuration.Modes.ModeParameter`1.Configure(VRBuilder.Core.Configuration.Modes.IMode)
  - VRBuilder.Core.Configuration.Modes.ModeParameter`1.IsModified
  - VRBuilder.Core.Configuration.Modes.ModeParameter`1.ParameterModified
  - VRBuilder.Core.Configuration.Modes.ModeParameter`1.Reset
  - VRBuilder.Core.Configuration.Modes.ModeParameter`1.Value
  langs:
  - csharp
  - vb
  name: ModeParameter<T>
  nameWithType: ModeParameter<T>
  fullName: VRBuilder.Core.Configuration.Modes.ModeParameter<T>
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/ModeParameter.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ModeParameter
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/ModeParameter.cs
    startLine: 12
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nModeParameter is responsible for fetching its parameter value from a <xref href=\"VRBuilder.Core.Configuration.Modes.IMode\" data-throw-if-not-resolved=\"false\"></xref>.\nIf the value changes while being configured, an event will be triggered.\n"
  example: []
  syntax:
    content: public class ModeParameter<T>
    typeParameters:
    - id: T
    content.vb: Public Class ModeParameter(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ModeParameter(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: VRBuilder.Core.Configuration.Modes.ModeParameter(Of T)
  name.vb: ModeParameter(Of T)
- uid: VRBuilder.Core.Configuration.Modes.ModeParameter`1.ParameterModified
  commentId: F:VRBuilder.Core.Configuration.Modes.ModeParameter`1.ParameterModified
  id: ParameterModified
  parent: VRBuilder.Core.Configuration.Modes.ModeParameter`1
  langs:
  - csharp
  - vb
  name: ParameterModified
  nameWithType: ModeParameter<T>.ParameterModified
  fullName: VRBuilder.Core.Configuration.Modes.ModeParameter<T>.ParameterModified
  type: Field
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/ModeParameter.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ParameterModified
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/ModeParameter.cs
    startLine: 14
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  syntax:
    content: public EventHandler<EventArgs> ParameterModified
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public ParameterModified As EventHandler(Of EventArgs)
  nameWithType.vb: ModeParameter(Of T).ParameterModified
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Configuration.Modes.ModeParameter(Of T).ParameterModified
- uid: VRBuilder.Core.Configuration.Modes.ModeParameter`1.IsModified
  commentId: P:VRBuilder.Core.Configuration.Modes.ModeParameter`1.IsModified
  id: IsModified
  parent: VRBuilder.Core.Configuration.Modes.ModeParameter`1
  langs:
  - csharp
  - vb
  name: IsModified
  nameWithType: ModeParameter<T>.IsModified
  fullName: VRBuilder.Core.Configuration.Modes.ModeParameter<T>.IsModified
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/ModeParameter.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IsModified
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/ModeParameter.cs
    startLine: 19
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nIs true when the current value is different to the default value.\n"
  example: []
  syntax:
    content: public bool IsModified { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsModified As Boolean
  overload: VRBuilder.Core.Configuration.Modes.ModeParameter`1.IsModified*
  nameWithType.vb: ModeParameter(Of T).IsModified
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: VRBuilder.Core.Configuration.Modes.ModeParameter(Of T).IsModified
- uid: VRBuilder.Core.Configuration.Modes.ModeParameter`1.Value
  commentId: P:VRBuilder.Core.Configuration.Modes.ModeParameter`1.Value
  id: Value
  parent: VRBuilder.Core.Configuration.Modes.ModeParameter`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ModeParameter<T>.Value
  fullName: VRBuilder.Core.Configuration.Modes.ModeParameter<T>.Value
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/ModeParameter.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Value
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/ModeParameter.cs
    startLine: 24
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nReturns the current value, if set and different to the default value it will invoke a ParameterModified event.\n"
  example: []
  syntax:
    content: public T Value { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property Value As T
  overload: VRBuilder.Core.Configuration.Modes.ModeParameter`1.Value*
  nameWithType.vb: ModeParameter(Of T).Value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Configuration.Modes.ModeParameter(Of T).Value
- uid: VRBuilder.Core.Configuration.Modes.ModeParameter`1.#ctor(System.String,`0)
  commentId: M:VRBuilder.Core.Configuration.Modes.ModeParameter`1.#ctor(System.String,`0)
  id: '#ctor(System.String,`0)'
  parent: VRBuilder.Core.Configuration.Modes.ModeParameter`1
  langs:
  - csharp
  - vb
  name: ModeParameter(String, T)
  nameWithType: ModeParameter<T>.ModeParameter(String, T)
  fullName: VRBuilder.Core.Configuration.Modes.ModeParameter<T>.ModeParameter(System.String, T)
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/ModeParameter.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/ModeParameter.cs
    startLine: 49
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  syntax:
    content: public ModeParameter(string key, T defaultValue = null)
    parameters:
    - id: key
      type: System.String
    - id: defaultValue
      type: '{T}'
    content.vb: Public Sub New(key As String, defaultValue As T = Nothing)
  overload: VRBuilder.Core.Configuration.Modes.ModeParameter`1.#ctor*
  nameWithType.vb: ModeParameter(Of T).ModeParameter(String, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Configuration.Modes.ModeParameter(Of T).ModeParameter(System.String, T)
- uid: VRBuilder.Core.Configuration.Modes.ModeParameter`1.Configure(VRBuilder.Core.Configuration.Modes.IMode)
  commentId: M:VRBuilder.Core.Configuration.Modes.ModeParameter`1.Configure(VRBuilder.Core.Configuration.Modes.IMode)
  id: Configure(VRBuilder.Core.Configuration.Modes.IMode)
  parent: VRBuilder.Core.Configuration.Modes.ModeParameter`1
  langs:
  - csharp
  - vb
  name: Configure(IMode)
  nameWithType: ModeParameter<T>.Configure(IMode)
  fullName: VRBuilder.Core.Configuration.Modes.ModeParameter<T>.Configure(VRBuilder.Core.Configuration.Modes.IMode)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/ModeParameter.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Configure
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/ModeParameter.cs
    startLine: 59
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nConfigures this parameter with the given mode.\n"
  example: []
  syntax:
    content: public void Configure(IMode mode)
    parameters:
    - id: mode
      type: VRBuilder.Core.Configuration.Modes.IMode
    content.vb: Public Sub Configure(mode As IMode)
  overload: VRBuilder.Core.Configuration.Modes.ModeParameter`1.Configure*
  nameWithType.vb: ModeParameter(Of T).Configure(IMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Configuration.Modes.ModeParameter(Of T).Configure(VRBuilder.Core.Configuration.Modes.IMode)
- uid: VRBuilder.Core.Configuration.Modes.ModeParameter`1.Reset
  commentId: M:VRBuilder.Core.Configuration.Modes.ModeParameter`1.Reset
  id: Reset
  parent: VRBuilder.Core.Configuration.Modes.ModeParameter`1
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: ModeParameter<T>.Reset()
  fullName: VRBuilder.Core.Configuration.Modes.ModeParameter<T>.Reset()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/ModeParameter.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Reset
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/ModeParameter.cs
    startLine: 74
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nResets the parameter, will triggered modified if the value changes.\n"
  example: []
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: VRBuilder.Core.Configuration.Modes.ModeParameter`1.Reset*
  nameWithType.vb: ModeParameter(Of T).Reset()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Configuration.Modes.ModeParameter(Of T).Reset()
references:
- uid: VRBuilder.Core.Configuration.Modes.IMode
  commentId: T:VRBuilder.Core.Configuration.Modes.IMode
  parent: VRBuilder.Core.Configuration.Modes
  name: IMode
  nameWithType: IMode
  fullName: VRBuilder.Core.Configuration.Modes.IMode
- uid: VRBuilder.Core.Configuration.Modes
  commentId: N:VRBuilder.Core.Configuration.Modes
  name: VRBuilder.Core.Configuration.Modes
  nameWithType: VRBuilder.Core.Configuration.Modes
  fullName: VRBuilder.Core.Configuration.Modes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.EventHandler{System.EventArgs}
  commentId: T:System.EventHandler{System.EventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EventArgs>
  nameWithType: EventHandler<EventArgs>
  fullName: System.EventHandler<System.EventArgs>
  nameWithType.vb: EventHandler(Of EventArgs)
  fullName.vb: System.EventHandler(Of System.EventArgs)
  name.vb: EventHandler(Of EventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.ModeParameter`1.IsModified*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.ModeParameter`1.IsModified
  name: IsModified
  nameWithType: ModeParameter<T>.IsModified
  fullName: VRBuilder.Core.Configuration.Modes.ModeParameter<T>.IsModified
  nameWithType.vb: ModeParameter(Of T).IsModified
  fullName.vb: VRBuilder.Core.Configuration.Modes.ModeParameter(Of T).IsModified
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VRBuilder.Core.Configuration.Modes.ModeParameter`1.Value*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.ModeParameter`1.Value
  name: Value
  nameWithType: ModeParameter<T>.Value
  fullName: VRBuilder.Core.Configuration.Modes.ModeParameter<T>.Value
  nameWithType.vb: ModeParameter(Of T).Value
  fullName.vb: VRBuilder.Core.Configuration.Modes.ModeParameter(Of T).Value
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: VRBuilder.Core.Configuration.Modes.ModeParameter`1.#ctor*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.ModeParameter`1.#ctor
  name: ModeParameter
  nameWithType: ModeParameter<T>.ModeParameter
  fullName: VRBuilder.Core.Configuration.Modes.ModeParameter<T>.ModeParameter
  nameWithType.vb: ModeParameter(Of T).ModeParameter
  fullName.vb: VRBuilder.Core.Configuration.Modes.ModeParameter(Of T).ModeParameter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VRBuilder.Core.Configuration.Modes.ModeParameter`1.Configure*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.ModeParameter`1.Configure
  name: Configure
  nameWithType: ModeParameter<T>.Configure
  fullName: VRBuilder.Core.Configuration.Modes.ModeParameter<T>.Configure
  nameWithType.vb: ModeParameter(Of T).Configure
  fullName.vb: VRBuilder.Core.Configuration.Modes.ModeParameter(Of T).Configure
- uid: VRBuilder.Core.Configuration.Modes.ModeParameter`1.Reset*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.ModeParameter`1.Reset
  name: Reset
  nameWithType: ModeParameter<T>.Reset
  fullName: VRBuilder.Core.Configuration.Modes.ModeParameter<T>.Reset
  nameWithType.vb: ModeParameter(Of T).Reset
  fullName.vb: VRBuilder.Core.Configuration.Modes.ModeParameter(Of T).Reset
