### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Behaviors.IBehaviorParent
  commentId: T:VRBuilder.Core.Behaviors.IBehaviorParent
  id: IBehaviorParent
  parent: VRBuilder.Core.Behaviors
  children:
  - VRBuilder.Core.Behaviors.IBehaviorParent.AddBehavior(VRBuilder.Core.Behaviors.IBehavior)
  - VRBuilder.Core.Behaviors.IBehaviorParent.BehaviorCollectionChanged
  - VRBuilder.Core.Behaviors.IBehaviorParent.Behaviors
  - VRBuilder.Core.Behaviors.IBehaviorParent.CheckHasBehavior(VRBuilder.Core.Behaviors.IBehavior)
  - VRBuilder.Core.Behaviors.IBehaviorParent.InsertBehavior(System.Int32,VRBuilder.Core.Behaviors.IBehavior)
  - VRBuilder.Core.Behaviors.IBehaviorParent.RemoveBehavior(VRBuilder.Core.Behaviors.IBehavior)
  langs:
  - csharp
  - vb
  name: IBehaviorParent
  nameWithType: IBehaviorParent
  fullName: VRBuilder.Core.Behaviors.IBehaviorParent
  type: Interface
  source:
    remote:
      path: Source/Core/Runtime/Behaviors/IBehaviorParent.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IBehaviorParent
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Behaviors/IBehaviorParent.cs
    startLine: 11
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Behaviors
  syntax:
    content: public interface IBehaviorParent
    content.vb: Public Interface IBehaviorParent
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VRBuilder.Core.Behaviors.IBehaviorParent.BehaviorCollectionChanged
  commentId: E:VRBuilder.Core.Behaviors.IBehaviorParent.BehaviorCollectionChanged
  id: BehaviorCollectionChanged
  parent: VRBuilder.Core.Behaviors.IBehaviorParent
  langs:
  - csharp
  - vb
  name: BehaviorCollectionChanged
  nameWithType: IBehaviorParent.BehaviorCollectionChanged
  fullName: VRBuilder.Core.Behaviors.IBehaviorParent.BehaviorCollectionChanged
  type: Event
  source:
    remote:
      path: Source/Core/Runtime/Behaviors/IBehaviorParent.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: BehaviorCollectionChanged
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Behaviors/IBehaviorParent.cs
    startLine: 16
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Behaviors
  summary: "\nInvoked when behavior is added or removed from this object.\n"
  example: []
  syntax:
    content: event EventHandler<BehaviorCollectionChangedEventArgs> BehaviorCollectionChanged
    return:
      type: System.EventHandler{VRBuilder.Core.Behaviors.BehaviorCollectionChangedEventArgs}
    content.vb: Event BehaviorCollectionChanged As EventHandler(Of BehaviorCollectionChangedEventArgs)
- uid: VRBuilder.Core.Behaviors.IBehaviorParent.Behaviors
  commentId: P:VRBuilder.Core.Behaviors.IBehaviorParent.Behaviors
  id: Behaviors
  parent: VRBuilder.Core.Behaviors.IBehaviorParent
  langs:
  - csharp
  - vb
  name: Behaviors
  nameWithType: IBehaviorParent.Behaviors
  fullName: VRBuilder.Core.Behaviors.IBehaviorParent.Behaviors
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Behaviors/IBehaviorParent.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Behaviors
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Behaviors/IBehaviorParent.cs
    startLine: 21
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Behaviors
  summary: "\nList of behaviors associated with this object.\n"
  example: []
  syntax:
    content: ReadOnlyCollection<IBehavior> Behaviors { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{VRBuilder.Core.Behaviors.IBehavior}
    content.vb: ReadOnly Property Behaviors As ReadOnlyCollection(Of IBehavior)
  overload: VRBuilder.Core.Behaviors.IBehaviorParent.Behaviors*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VRBuilder.Core.Behaviors.IBehaviorParent.CheckHasBehavior(VRBuilder.Core.Behaviors.IBehavior)
  commentId: M:VRBuilder.Core.Behaviors.IBehaviorParent.CheckHasBehavior(VRBuilder.Core.Behaviors.IBehavior)
  id: CheckHasBehavior(VRBuilder.Core.Behaviors.IBehavior)
  parent: VRBuilder.Core.Behaviors.IBehaviorParent
  langs:
  - csharp
  - vb
  name: CheckHasBehavior(IBehavior)
  nameWithType: IBehaviorParent.CheckHasBehavior(IBehavior)
  fullName: VRBuilder.Core.Behaviors.IBehaviorParent.CheckHasBehavior(VRBuilder.Core.Behaviors.IBehavior)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Behaviors/IBehaviorParent.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CheckHasBehavior
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Behaviors/IBehaviorParent.cs
    startLine: 26
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Behaviors
  summary: "\nReturns true if this object has given behavior.\n"
  example: []
  syntax:
    content: bool CheckHasBehavior(IBehavior behavior)
    parameters:
    - id: behavior
      type: VRBuilder.Core.Behaviors.IBehavior
    return:
      type: System.Boolean
    content.vb: Function CheckHasBehavior(behavior As IBehavior) As Boolean
  overload: VRBuilder.Core.Behaviors.IBehaviorParent.CheckHasBehavior*
- uid: VRBuilder.Core.Behaviors.IBehaviorParent.AddBehavior(VRBuilder.Core.Behaviors.IBehavior)
  commentId: M:VRBuilder.Core.Behaviors.IBehaviorParent.AddBehavior(VRBuilder.Core.Behaviors.IBehavior)
  id: AddBehavior(VRBuilder.Core.Behaviors.IBehavior)
  parent: VRBuilder.Core.Behaviors.IBehaviorParent
  langs:
  - csharp
  - vb
  name: AddBehavior(IBehavior)
  nameWithType: IBehaviorParent.AddBehavior(IBehavior)
  fullName: VRBuilder.Core.Behaviors.IBehaviorParent.AddBehavior(VRBuilder.Core.Behaviors.IBehavior)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Behaviors/IBehaviorParent.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: AddBehavior
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Behaviors/IBehaviorParent.cs
    startLine: 32
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Behaviors
  summary: "\nAdd behavior to this object. Implementation of this method should invoke BehaviorCollectionChanged event.\n"
  example: []
  syntax:
    content: void AddBehavior(IBehavior behavior)
    parameters:
    - id: behavior
      type: VRBuilder.Core.Behaviors.IBehavior
      description: Behavior to be added.
    content.vb: Sub AddBehavior(behavior As IBehavior)
  overload: VRBuilder.Core.Behaviors.IBehaviorParent.AddBehavior*
- uid: VRBuilder.Core.Behaviors.IBehaviorParent.InsertBehavior(System.Int32,VRBuilder.Core.Behaviors.IBehavior)
  commentId: M:VRBuilder.Core.Behaviors.IBehaviorParent.InsertBehavior(System.Int32,VRBuilder.Core.Behaviors.IBehavior)
  id: InsertBehavior(System.Int32,VRBuilder.Core.Behaviors.IBehavior)
  parent: VRBuilder.Core.Behaviors.IBehaviorParent
  langs:
  - csharp
  - vb
  name: InsertBehavior(Int32, IBehavior)
  nameWithType: IBehaviorParent.InsertBehavior(Int32, IBehavior)
  fullName: VRBuilder.Core.Behaviors.IBehaviorParent.InsertBehavior(System.Int32, VRBuilder.Core.Behaviors.IBehavior)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Behaviors/IBehaviorParent.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: InsertBehavior
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Behaviors/IBehaviorParent.cs
    startLine: 39
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Behaviors
  summary: "\nInsert the <code data-dev-comment-type=\"paramref\" class=\"paramref\">behavior</code> into the collection of behaviors at <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code>.\n"
  example: []
  syntax:
    content: void InsertBehavior(int index, IBehavior behavior)
    parameters:
    - id: index
      type: System.Int32
      description: ''
    - id: behavior
      type: VRBuilder.Core.Behaviors.IBehavior
      description: ''
    content.vb: Sub InsertBehavior(index As Integer, behavior As IBehavior)
  overload: VRBuilder.Core.Behaviors.IBehaviorParent.InsertBehavior*
- uid: VRBuilder.Core.Behaviors.IBehaviorParent.RemoveBehavior(VRBuilder.Core.Behaviors.IBehavior)
  commentId: M:VRBuilder.Core.Behaviors.IBehaviorParent.RemoveBehavior(VRBuilder.Core.Behaviors.IBehavior)
  id: RemoveBehavior(VRBuilder.Core.Behaviors.IBehavior)
  parent: VRBuilder.Core.Behaviors.IBehaviorParent
  langs:
  - csharp
  - vb
  name: RemoveBehavior(IBehavior)
  nameWithType: IBehaviorParent.RemoveBehavior(IBehavior)
  fullName: VRBuilder.Core.Behaviors.IBehaviorParent.RemoveBehavior(VRBuilder.Core.Behaviors.IBehavior)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Behaviors/IBehaviorParent.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: RemoveBehavior
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Behaviors/IBehaviorParent.cs
    startLine: 44
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Behaviors
  summary: "\nRemove behavior from this object. Implementation of this method should invoke BehaviorCollectionChanged event.\n"
  example: []
  syntax:
    content: bool RemoveBehavior(IBehavior behavior)
    parameters:
    - id: behavior
      type: VRBuilder.Core.Behaviors.IBehavior
    return:
      type: System.Boolean
    content.vb: Function RemoveBehavior(behavior As IBehavior) As Boolean
  overload: VRBuilder.Core.Behaviors.IBehaviorParent.RemoveBehavior*
references:
- uid: VRBuilder.Core.Behaviors
  commentId: N:VRBuilder.Core.Behaviors
  name: VRBuilder.Core.Behaviors
  nameWithType: VRBuilder.Core.Behaviors
  fullName: VRBuilder.Core.Behaviors
- uid: System.EventHandler{VRBuilder.Core.Behaviors.BehaviorCollectionChangedEventArgs}
  commentId: T:System.EventHandler{VRBuilder.Core.Behaviors.BehaviorCollectionChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<BehaviorCollectionChangedEventArgs>
  nameWithType: EventHandler<BehaviorCollectionChangedEventArgs>
  fullName: System.EventHandler<VRBuilder.Core.Behaviors.BehaviorCollectionChangedEventArgs>
  nameWithType.vb: EventHandler(Of BehaviorCollectionChangedEventArgs)
  fullName.vb: System.EventHandler(Of VRBuilder.Core.Behaviors.BehaviorCollectionChangedEventArgs)
  name.vb: EventHandler(Of BehaviorCollectionChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.Behaviors.BehaviorCollectionChangedEventArgs
    name: BehaviorCollectionChangedEventArgs
    nameWithType: BehaviorCollectionChangedEventArgs
    fullName: VRBuilder.Core.Behaviors.BehaviorCollectionChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.Behaviors.BehaviorCollectionChangedEventArgs
    name: BehaviorCollectionChangedEventArgs
    nameWithType: BehaviorCollectionChangedEventArgs
    fullName: VRBuilder.Core.Behaviors.BehaviorCollectionChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.Behaviors.IBehaviorParent.Behaviors*
  commentId: Overload:VRBuilder.Core.Behaviors.IBehaviorParent.Behaviors
  name: Behaviors
  nameWithType: IBehaviorParent.Behaviors
  fullName: VRBuilder.Core.Behaviors.IBehaviorParent.Behaviors
- uid: System.Collections.ObjectModel.ReadOnlyCollection{VRBuilder.Core.Behaviors.IBehavior}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{VRBuilder.Core.Behaviors.IBehavior}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<IBehavior>
  nameWithType: ReadOnlyCollection<IBehavior>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<VRBuilder.Core.Behaviors.IBehavior>
  nameWithType.vb: ReadOnlyCollection(Of IBehavior)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of VRBuilder.Core.Behaviors.IBehavior)
  name.vb: ReadOnlyCollection(Of IBehavior)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.Behaviors.IBehavior
    name: IBehavior
    nameWithType: IBehavior
    fullName: VRBuilder.Core.Behaviors.IBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.Behaviors.IBehavior
    name: IBehavior
    nameWithType: IBehavior
    fullName: VRBuilder.Core.Behaviors.IBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: VRBuilder.Core.Behaviors.IBehaviorParent.CheckHasBehavior*
  commentId: Overload:VRBuilder.Core.Behaviors.IBehaviorParent.CheckHasBehavior
  name: CheckHasBehavior
  nameWithType: IBehaviorParent.CheckHasBehavior
  fullName: VRBuilder.Core.Behaviors.IBehaviorParent.CheckHasBehavior
- uid: VRBuilder.Core.Behaviors.IBehavior
  commentId: T:VRBuilder.Core.Behaviors.IBehavior
  parent: VRBuilder.Core.Behaviors
  name: IBehavior
  nameWithType: IBehavior
  fullName: VRBuilder.Core.Behaviors.IBehavior
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VRBuilder.Core.Behaviors.IBehaviorParent.AddBehavior*
  commentId: Overload:VRBuilder.Core.Behaviors.IBehaviorParent.AddBehavior
  name: AddBehavior
  nameWithType: IBehaviorParent.AddBehavior
  fullName: VRBuilder.Core.Behaviors.IBehaviorParent.AddBehavior
- uid: VRBuilder.Core.Behaviors.IBehaviorParent.InsertBehavior*
  commentId: Overload:VRBuilder.Core.Behaviors.IBehaviorParent.InsertBehavior
  name: InsertBehavior
  nameWithType: IBehaviorParent.InsertBehavior
  fullName: VRBuilder.Core.Behaviors.IBehaviorParent.InsertBehavior
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VRBuilder.Core.Behaviors.IBehaviorParent.RemoveBehavior*
  commentId: Overload:VRBuilder.Core.Behaviors.IBehaviorParent.RemoveBehavior
  name: RemoveBehavior
  nameWithType: IBehaviorParent.RemoveBehavior
  fullName: VRBuilder.Core.Behaviors.IBehaviorParent.RemoveBehavior
