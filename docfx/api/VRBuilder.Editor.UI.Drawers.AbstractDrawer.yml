### YamlMime:ManagedReference
items:
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer
  commentId: T:VRBuilder.Editor.UI.Drawers.AbstractDrawer
  id: AbstractDrawer
  parent: VRBuilder.Editor.UI.Drawers
  children:
  - VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue(System.Func{System.Object},System.Func{System.Object},System.Action{System.Object})
  - VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(Rect,System.Object,System.Action{System.Object},GUIContent)
  - VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(Rect,System.Object,System.Action{System.Object},System.String)
  - VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Object,System.Type)
  - VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Reflection.MemberInfo,System.Object)
  langs:
  - csharp
  - vb
  name: AbstractDrawer
  nameWithType: AbstractDrawer
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer
  type: Class
  source:
    remote:
      path: Source/Core/Editor/UI/Drawers/AbstractDrawer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: AbstractDrawer
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/UI/Drawers/AbstractDrawer.cs
    startLine: 18
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor.UI.Drawers
  summary: "\nSimple base drawer class.\n"
  example: []
  syntax:
    content: 'public abstract class AbstractDrawer : IProcessDrawer'
    content.vb: >-
      Public MustInherit Class AbstractDrawer
          Implements IProcessDrawer
  inheritance:
  - System.Object
  derivedClasses:
  - VRBuilder.Editor.UI.Drawers.DropdownDrawer`1
  - VRBuilder.Editor.UI.Drawers.ObjectDrawer
  - VRBuilder.Editor.UI.Drawers.ProcessSceneReferenceDrawer
  - VRBuilder.Editor.UI.Drawers.ResourcePathDrawer`1
  - VRBuilder.Editor.UI.Drawers.SceneObjectTagDrawer
  - VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2
  - VRBuilder.Editor.UI.Drawers.UniqueNameReferenceDrawer
  - VRBuilder.Editor.UI.Drawers.UserTagDropdownDrawer
  implements:
  - VRBuilder.Editor.UI.Drawers.IProcessDrawer
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(Rect,System.Object,System.Action{System.Object},System.String)
  commentId: M:VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(Rect,System.Object,System.Action{System.Object},System.String)
  id: Draw(Rect,System.Object,System.Action{System.Object},System.String)
  parent: VRBuilder.Editor.UI.Drawers.AbstractDrawer
  langs:
  - csharp
  - vb
  name: Draw(Rect, Object, Action<Object>, String)
  nameWithType: AbstractDrawer.Draw(Rect, Object, Action<Object>, String)
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(Rect, System.Object, System.Action<System.Object>, System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Editor/UI/Drawers/AbstractDrawer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Draw
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/UI/Drawers/AbstractDrawer.cs
    startLine: 21
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor.UI.Drawers
  summary: "\nDraw editor view in given Rect.\n"
  example: []
  syntax:
    content: public Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, string label)
    parameters:
    - id: rect
      type: Rect
      description: A rectangle in which editor view should fit. The height value is ignored.
    - id: currentValue
      type: System.Object
      description: Current value of a member.
    - id: changeValueCallback
      type: System.Action{System.Object}
      description: "\nDelegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus).\nInvoke only when the value (or values of child members) has actually changed.\n"
    - id: label
      type: System.String
      description: Label text to display.
    return:
      type: Rect
      description: The area that was taken by the property.
    content.vb: Public Function Draw(rect As Rect, currentValue As Object, changeValueCallback As Action(Of Object), label As String) As Rect
  overload: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw*
  implements:
  - VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw(Rect,System.Object,System.Action{System.Object},System.String)
  nameWithType.vb: AbstractDrawer.Draw(Rect, Object, Action(Of Object), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(Rect, System.Object, System.Action(Of System.Object), System.String)
  name.vb: Draw(Rect, Object, Action(Of Object), String)
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(Rect,System.Object,System.Action{System.Object},GUIContent)
  commentId: M:VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(Rect,System.Object,System.Action{System.Object},GUIContent)
  id: Draw(Rect,System.Object,System.Action{System.Object},GUIContent)
  parent: VRBuilder.Editor.UI.Drawers.AbstractDrawer
  langs:
  - csharp
  - vb
  name: Draw(Rect, Object, Action<Object>, GUIContent)
  nameWithType: AbstractDrawer.Draw(Rect, Object, Action<Object>, GUIContent)
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(Rect, System.Object, System.Action<System.Object>, GUIContent)
  type: Method
  source:
    remote:
      path: Source/Core/Editor/UI/Drawers/AbstractDrawer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Draw
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/UI/Drawers/AbstractDrawer.cs
    startLine: 27
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor.UI.Drawers
  summary: "\nDraw editor view in given Rect.\n"
  example: []
  syntax:
    content: public abstract Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label)
    parameters:
    - id: rect
      type: Rect
      description: A rectangle in which editor view should fit. The height value is ignored.
    - id: currentValue
      type: System.Object
      description: Current value of a member.
    - id: changeValueCallback
      type: System.Action{System.Object}
      description: "\nDelegate for a method that changes value of a member. Done that way to allow non-instantaneous assignments (for example, from generic menus).\nInvoke only when child member&apos;s value has changed;\nOtherwise, if the value itself has changed, call <xref href=\"VRBuilder.Editor.UI.Drawers.IProcessDrawer.ChangeValue(System.Func%7bSystem.Object%7d%2cSystem.Func%7bSystem.Object%7d%2cSystem.Action%7bSystem.Object%7d)\" data-throw-if-not-resolved=\"false\"></xref> so it could manage Do/Undo stack in a proper way.\n"
    - id: label
      type: GUIContent
      description: Label content to display.
    return:
      type: Rect
      description: The area that was taken by the property.
    content.vb: Public MustOverride Function Draw(rect As Rect, currentValue As Object, changeValueCallback As Action(Of Object), label As GUIContent) As Rect
  overload: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw*
  implements:
  - VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw(Rect,System.Object,System.Action{System.Object},GUIContent)
  nameWithType.vb: AbstractDrawer.Draw(Rect, Object, Action(Of Object), GUIContent)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(Rect, System.Object, System.Action(Of System.Object), GUIContent)
  name.vb: Draw(Rect, Object, Action(Of Object), GUIContent)
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Reflection.MemberInfo,System.Object)
  commentId: M:VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Reflection.MemberInfo,System.Object)
  id: GetLabel(System.Reflection.MemberInfo,System.Object)
  parent: VRBuilder.Editor.UI.Drawers.AbstractDrawer
  langs:
  - csharp
  - vb
  name: GetLabel(MemberInfo, Object)
  nameWithType: AbstractDrawer.GetLabel(MemberInfo, Object)
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Reflection.MemberInfo, System.Object)
  type: Method
  source:
    remote:
      path: Source/Core/Editor/UI/Drawers/AbstractDrawer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetLabel
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/UI/Drawers/AbstractDrawer.cs
    startLine: 29
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor.UI.Drawers
  syntax:
    content: public virtual GUIContent GetLabel(MemberInfo memberInfo, object memberOwner)
    parameters:
    - id: memberInfo
      type: System.Reflection.MemberInfo
    - id: memberOwner
      type: System.Object
    return:
      type: GUIContent
    content.vb: Public Overridable Function GetLabel(memberInfo As MemberInfo, memberOwner As Object) As GUIContent
  overload: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel*
  implements:
  - VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel(System.Reflection.MemberInfo,System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Object,System.Type)
  commentId: M:VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Object,System.Type)
  id: GetLabel(System.Object,System.Type)
  parent: VRBuilder.Editor.UI.Drawers.AbstractDrawer
  langs:
  - csharp
  - vb
  name: GetLabel(Object, Type)
  nameWithType: AbstractDrawer.GetLabel(Object, Type)
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: Source/Core/Editor/UI/Drawers/AbstractDrawer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetLabel
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/UI/Drawers/AbstractDrawer.cs
    startLine: 62
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor.UI.Drawers
  syntax:
    content: public virtual GUIContent GetLabel(object value, Type declaredType)
    parameters:
    - id: value
      type: System.Object
    - id: declaredType
      type: System.Type
    return:
      type: GUIContent
    content.vb: Public Overridable Function GetLabel(value As Object, declaredType As Type) As GUIContent
  overload: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel*
  implements:
  - VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel(System.Object,System.Type)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue(System.Func{System.Object},System.Func{System.Object},System.Action{System.Object})
  commentId: M:VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue(System.Func{System.Object},System.Func{System.Object},System.Action{System.Object})
  id: ChangeValue(System.Func{System.Object},System.Func{System.Object},System.Action{System.Object})
  parent: VRBuilder.Editor.UI.Drawers.AbstractDrawer
  langs:
  - csharp
  - vb
  name: ChangeValue(Func<Object>, Func<Object>, Action<Object>)
  nameWithType: AbstractDrawer.ChangeValue(Func<Object>, Func<Object>, Action<Object>)
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue(System.Func<System.Object>, System.Func<System.Object>, System.Action<System.Object>)
  type: Method
  source:
    remote:
      path: Source/Core/Editor/UI/Drawers/AbstractDrawer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ChangeValue
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/UI/Drawers/AbstractDrawer.cs
    startLine: 75
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor.UI.Drawers
  summary: "\nCall when the value has changed; it will create proper <see cref=\"!:ProcessCommand\"></see> to handle Do/Undo logic.\n<xref href=\"VRBuilder.Editor.UI.Drawers.AbstractDrawer\" data-throw-if-not-resolved=\"false\"></xref> for a proper implementation.\n<param name=\"getNewValueCallback\">A delegate that returns a new value for the drawn entity. Invoked during the <see cref=\"!:ProcessCommand.Do\"></see> call. The result is passed to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">assignValueCallback</code>.</param>\n<param name=\"getOldValueCallback\">A delegate that returns an old value for the drawn entity. Invoked during the <see cref=\"!:ProcessCommand.Undo\"></see> call. The result is passed to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">assignValueCallback</code>.</param>\n<param name=\"assignValueCallback\">A delegate that actually assigns a value to the property/field.</param>\n"
  example: []
  syntax:
    content: public void ChangeValue(Func<object> getNewValueCallback, Func<object> getOldValueCallback, Action<object> assignValueCallback)
    parameters:
    - id: getNewValueCallback
      type: System.Func{System.Object}
    - id: getOldValueCallback
      type: System.Func{System.Object}
    - id: assignValueCallback
      type: System.Action{System.Object}
    content.vb: Public Sub ChangeValue(getNewValueCallback As Func(Of Object), getOldValueCallback As Func(Of Object), assignValueCallback As Action(Of Object))
  overload: VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue*
  implements:
  - VRBuilder.Editor.UI.Drawers.IProcessDrawer.ChangeValue(System.Func{System.Object},System.Func{System.Object},System.Action{System.Object})
  nameWithType.vb: AbstractDrawer.ChangeValue(Func(Of Object), Func(Of Object), Action(Of Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue(System.Func(Of System.Object), System.Func(Of System.Object), System.Action(Of System.Object))
  name.vb: ChangeValue(Func(Of Object), Func(Of Object), Action(Of Object))
references:
- uid: VRBuilder.Editor.UI.Drawers
  commentId: N:VRBuilder.Editor.UI.Drawers
  name: VRBuilder.Editor.UI.Drawers
  nameWithType: VRBuilder.Editor.UI.Drawers
  fullName: VRBuilder.Editor.UI.Drawers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer
  commentId: T:VRBuilder.Editor.UI.Drawers.IProcessDrawer
  parent: VRBuilder.Editor.UI.Drawers
  name: IProcessDrawer
  nameWithType: IProcessDrawer
  fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw*
  commentId: Overload:VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw
  name: Draw
  nameWithType: AbstractDrawer.Draw
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw
- uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw(Rect,System.Object,System.Action{System.Object},System.String)
  commentId: M:VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw(Rect,System.Object,System.Action{System.Object},System.String)
  parent: VRBuilder.Editor.UI.Drawers.IProcessDrawer
  isExternal: true
  name: Draw(Rect, Object, Action<Object>, String)
  nameWithType: IProcessDrawer.Draw(Rect, Object, Action<Object>, String)
  fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw(Rect, System.Object, System.Action<System.Object>, System.String)
  nameWithType.vb: IProcessDrawer.Draw(Rect, Object, Action(Of Object), String)
  fullName.vb: VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw(Rect, System.Object, System.Action(Of System.Object), System.String)
  name.vb: Draw(Rect, Object, Action(Of Object), String)
  spec.csharp:
  - uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw(Rect,System.Object,System.Action{System.Object},System.String)
    name: Draw
    nameWithType: IProcessDrawer.Draw
    fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Rect
    name: Rect
    nameWithType: Rect
    fullName: Rect
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw(Rect,System.Object,System.Action{System.Object},System.String)
    name: Draw
    nameWithType: IProcessDrawer.Draw
    fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Rect
    name: Rect
    nameWithType: Rect
    fullName: Rect
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Rect
  isExternal: true
  name: Rect
  nameWithType: Rect
  fullName: Rect
- uid: System.Action{System.Object}
  commentId: T:System.Action{System.Object}
  parent: System
  definition: System.Action`1
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
  nameWithType.vb: Action(Of Object)
  fullName.vb: System.Action(Of System.Object)
  name.vb: Action(Of Object)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw(Rect,System.Object,System.Action{System.Object},GUIContent)
  commentId: M:VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw(Rect,System.Object,System.Action{System.Object},GUIContent)
  parent: VRBuilder.Editor.UI.Drawers.IProcessDrawer
  isExternal: true
  name: Draw(Rect, Object, Action<Object>, GUIContent)
  nameWithType: IProcessDrawer.Draw(Rect, Object, Action<Object>, GUIContent)
  fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw(Rect, System.Object, System.Action<System.Object>, GUIContent)
  nameWithType.vb: IProcessDrawer.Draw(Rect, Object, Action(Of Object), GUIContent)
  fullName.vb: VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw(Rect, System.Object, System.Action(Of System.Object), GUIContent)
  name.vb: Draw(Rect, Object, Action(Of Object), GUIContent)
  spec.csharp:
  - uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw(Rect,System.Object,System.Action{System.Object},GUIContent)
    name: Draw
    nameWithType: IProcessDrawer.Draw
    fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Rect
    name: Rect
    nameWithType: Rect
    fullName: Rect
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: GUIContent
    name: GUIContent
    nameWithType: GUIContent
    fullName: GUIContent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw(Rect,System.Object,System.Action{System.Object},GUIContent)
    name: Draw
    nameWithType: IProcessDrawer.Draw
    fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Rect
    name: Rect
    nameWithType: Rect
    fullName: Rect
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: GUIContent
    name: GUIContent
    nameWithType: GUIContent
    fullName: GUIContent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GUIContent
  isExternal: true
  name: GUIContent
  nameWithType: GUIContent
  fullName: GUIContent
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel*
  commentId: Overload:VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel
  name: GetLabel
  nameWithType: AbstractDrawer.GetLabel
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel
- uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel(System.Reflection.MemberInfo,System.Object)
  commentId: M:VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel(System.Reflection.MemberInfo,System.Object)
  parent: VRBuilder.Editor.UI.Drawers.IProcessDrawer
  isExternal: true
  name: GetLabel(MemberInfo, Object)
  nameWithType: IProcessDrawer.GetLabel(MemberInfo, Object)
  fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel(System.Reflection.MemberInfo, System.Object)
  spec.csharp:
  - uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel(System.Reflection.MemberInfo,System.Object)
    name: GetLabel
    nameWithType: IProcessDrawer.GetLabel
    fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel(System.Reflection.MemberInfo,System.Object)
    name: GetLabel
    nameWithType: IProcessDrawer.GetLabel
    fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel(System.Object,System.Type)
  commentId: M:VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel(System.Object,System.Type)
  parent: VRBuilder.Editor.UI.Drawers.IProcessDrawer
  isExternal: true
  name: GetLabel(Object, Type)
  nameWithType: IProcessDrawer.GetLabel(Object, Type)
  fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel(System.Object, System.Type)
  spec.csharp:
  - uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel(System.Object,System.Type)
    name: GetLabel
    nameWithType: IProcessDrawer.GetLabel
    fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel(System.Object,System.Type)
    name: GetLabel
    nameWithType: IProcessDrawer.GetLabel
    fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.GetLabel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue*
  commentId: Overload:VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue
  name: ChangeValue
  nameWithType: AbstractDrawer.ChangeValue
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue
- uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.ChangeValue(System.Func{System.Object},System.Func{System.Object},System.Action{System.Object})
  commentId: M:VRBuilder.Editor.UI.Drawers.IProcessDrawer.ChangeValue(System.Func{System.Object},System.Func{System.Object},System.Action{System.Object})
  parent: VRBuilder.Editor.UI.Drawers.IProcessDrawer
  isExternal: true
  name: ChangeValue(Func<Object>, Func<Object>, Action<Object>)
  nameWithType: IProcessDrawer.ChangeValue(Func<Object>, Func<Object>, Action<Object>)
  fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.ChangeValue(System.Func<System.Object>, System.Func<System.Object>, System.Action<System.Object>)
  nameWithType.vb: IProcessDrawer.ChangeValue(Func(Of Object), Func(Of Object), Action(Of Object))
  fullName.vb: VRBuilder.Editor.UI.Drawers.IProcessDrawer.ChangeValue(System.Func(Of System.Object), System.Func(Of System.Object), System.Action(Of System.Object))
  name.vb: ChangeValue(Func(Of Object), Func(Of Object), Action(Of Object))
  spec.csharp:
  - uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.ChangeValue(System.Func{System.Object},System.Func{System.Object},System.Action{System.Object})
    name: ChangeValue
    nameWithType: IProcessDrawer.ChangeValue
    fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.ChangeValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer.ChangeValue(System.Func{System.Object},System.Func{System.Object},System.Action{System.Object})
    name: ChangeValue
    nameWithType: IProcessDrawer.ChangeValue
    fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer.ChangeValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Object}
  commentId: T:System.Func{System.Object}
  parent: System
  definition: System.Func`1
  name: Func<Object>
  nameWithType: Func<Object>
  fullName: System.Func<System.Object>
  nameWithType.vb: Func(Of Object)
  fullName.vb: System.Func(Of System.Object)
  name.vb: Func(Of Object)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
