### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  commentId: T:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  id: NewtonsoftJsonProcessSerializer
  parent: VRBuilder.Core.Serialization.NewtonsoftJson
  children:
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterFromByteArray(System.Byte[])
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterToByteArray(VRBuilder.Core.IChapter)
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Deserialize``1(System.Byte[],Newtonsoft.Json.JsonSerializerSettings)
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityFromByteArray(System.Byte[])
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityToByteArray(VRBuilder.Core.IEntity)
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.FileFormat
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestFromByteArray(System.Byte[])
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestToByteArray(VRBuilder.Core.IO.IProcessAssetManifest)
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Name
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessFromByteArray(System.Byte[])
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessSerializerSettings
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessToByteArray(VRBuilder.Core.IProcess)
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Serialize(VRBuilder.Core.IEntity,Newtonsoft.Json.JsonSerializerSettings)
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepFromByteArray(System.Byte[])
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepToByteArray(VRBuilder.Core.IStep)
  - VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Version
  langs:
  - csharp
  - vb
  name: NewtonsoftJsonProcessSerializer
  nameWithType: NewtonsoftJsonProcessSerializer
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: NewtonsoftJsonProcessSerializer
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 20
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  summary: "\nThis serializer uses NewtonsoftJson to serialize data, the outcome is a json file in the UTF-8 encoding.\n"
  example: []
  syntax:
    content: 'public class NewtonsoftJsonProcessSerializer : IProcessSerializer'
    content.vb: >-
      Public Class NewtonsoftJsonProcessSerializer
          Implements IProcessSerializer
  inheritance:
  - System.Object
  derivedClasses:
  - VRBuilder.Core.Serialization.ImprovedNewtonsoftJsonProcessSerializer
  - VRBuilder.Core.Serialization.NewtonsoftJsonProcessSerializerV3
  - VRBuilder.Core.Serialization.NewtonsoftJsonProcessSerializerV4
  implements:
  - VRBuilder.Core.Serialization.IProcessSerializer
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Version
  commentId: P:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Version
  id: Version
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: NewtonsoftJsonProcessSerializer.Version
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Version
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Version
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 22
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  syntax:
    content: protected virtual int Version { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Protected Overridable ReadOnly Property Version As Integer
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Version*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessSerializerSettings
  commentId: P:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessSerializerSettings
  id: ProcessSerializerSettings
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: ProcessSerializerSettings
  nameWithType: NewtonsoftJsonProcessSerializer.ProcessSerializerSettings
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessSerializerSettings
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ProcessSerializerSettings
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 40
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  summary: "\nReturns the json serializer settings used by the process deserialization.\n"
  example: []
  syntax:
    content: public static JsonSerializerSettings ProcessSerializerSettings { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonSerializerSettings
    content.vb: Public Shared ReadOnly Property ProcessSerializerSettings As JsonSerializerSettings
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessSerializerSettings*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Name
  commentId: P:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Name
  id: Name
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: NewtonsoftJsonProcessSerializer.Name
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Name
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Name
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 72
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  summary: "\nDisplay name.\n"
  example: []
  syntax:
    content: public virtual string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable ReadOnly Property Name As String
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Name*
  implements:
  - VRBuilder.Core.Serialization.IProcessSerializer.Name
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.FileFormat
  commentId: P:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.FileFormat
  id: FileFormat
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: FileFormat
  nameWithType: NewtonsoftJsonProcessSerializer.FileFormat
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.FileFormat
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: FileFormat
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 75
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  summary: "\nFile format used for this serializer. For example, &apos;json&apos;.\n"
  example: []
  syntax:
    content: public virtual string FileFormat { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable ReadOnly Property FileFormat As String
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.FileFormat*
  implements:
  - VRBuilder.Core.Serialization.IProcessSerializer.FileFormat
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Serialize(VRBuilder.Core.IEntity,Newtonsoft.Json.JsonSerializerSettings)
  commentId: M:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Serialize(VRBuilder.Core.IEntity,Newtonsoft.Json.JsonSerializerSettings)
  id: Serialize(VRBuilder.Core.IEntity,Newtonsoft.Json.JsonSerializerSettings)
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: Serialize(IEntity, JsonSerializerSettings)
  nameWithType: NewtonsoftJsonProcessSerializer.Serialize(IEntity, JsonSerializerSettings)
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Serialize(VRBuilder.Core.IEntity, Newtonsoft.Json.JsonSerializerSettings)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Serialize
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 77
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  syntax:
    content: protected byte[] Serialize(IEntity entity, JsonSerializerSettings settings)
    parameters:
    - id: entity
      type: VRBuilder.Core.IEntity
    - id: settings
      type: Newtonsoft.Json.JsonSerializerSettings
    return:
      type: System.Byte[]
    content.vb: Protected Function Serialize(entity As IEntity, settings As JsonSerializerSettings) As Byte()
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Serialize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Deserialize``1(System.Byte[],Newtonsoft.Json.JsonSerializerSettings)
  commentId: M:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Deserialize``1(System.Byte[],Newtonsoft.Json.JsonSerializerSettings)
  id: Deserialize``1(System.Byte[],Newtonsoft.Json.JsonSerializerSettings)
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: Deserialize<T>(Byte[], JsonSerializerSettings)
  nameWithType: NewtonsoftJsonProcessSerializer.Deserialize<T>(Byte[], JsonSerializerSettings)
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Deserialize<T>(System.Byte[], Newtonsoft.Json.JsonSerializerSettings)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Deserialize
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 84
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  syntax:
    content: protected T Deserialize<T>(byte[] data, JsonSerializerSettings settings)
    parameters:
    - id: data
      type: System.Byte[]
    - id: settings
      type: Newtonsoft.Json.JsonSerializerSettings
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Protected Function Deserialize(Of T)(data As Byte(), settings As JsonSerializerSettings) As T
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Deserialize*
  nameWithType.vb: NewtonsoftJsonProcessSerializer.Deserialize(Of T)(Byte(), JsonSerializerSettings)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Deserialize(Of T)(System.Byte(), Newtonsoft.Json.JsonSerializerSettings)
  name.vb: Deserialize(Of T)(Byte(), JsonSerializerSettings)
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessToByteArray(VRBuilder.Core.IProcess)
  commentId: M:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessToByteArray(VRBuilder.Core.IProcess)
  id: ProcessToByteArray(VRBuilder.Core.IProcess)
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: ProcessToByteArray(IProcess)
  nameWithType: NewtonsoftJsonProcessSerializer.ProcessToByteArray(IProcess)
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessToByteArray(VRBuilder.Core.IProcess)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ProcessToByteArray
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 91
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  summary: "\nSerializes a given process into a byte array.\n"
  example: []
  syntax:
    content: public virtual byte[] ProcessToByteArray(IProcess process)
    parameters:
    - id: process
      type: VRBuilder.Core.IProcess
    return:
      type: System.Byte[]
    content.vb: Public Overridable Function ProcessToByteArray(process As IProcess) As Byte()
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessToByteArray*
  implements:
  - VRBuilder.Core.Serialization.IProcessSerializer.ProcessToByteArray(VRBuilder.Core.IProcess)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessFromByteArray(System.Byte[])
  commentId: M:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessFromByteArray(System.Byte[])
  id: ProcessFromByteArray(System.Byte[])
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: ProcessFromByteArray(Byte[])
  nameWithType: NewtonsoftJsonProcessSerializer.ProcessFromByteArray(Byte[])
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessFromByteArray(System.Byte[])
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ProcessFromByteArray
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 97
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  summary: "\nDeserializes a given process to a usable object.\n"
  example: []
  syntax:
    content: public virtual IProcess ProcessFromByteArray(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: VRBuilder.Core.IProcess
    content.vb: Public Overridable Function ProcessFromByteArray(data As Byte()) As IProcess
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessFromByteArray*
  implements:
  - VRBuilder.Core.Serialization.IProcessSerializer.ProcessFromByteArray(System.Byte[])
  nameWithType.vb: NewtonsoftJsonProcessSerializer.ProcessFromByteArray(Byte())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessFromByteArray(System.Byte())
  name.vb: ProcessFromByteArray(Byte())
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepToByteArray(VRBuilder.Core.IStep)
  commentId: M:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepToByteArray(VRBuilder.Core.IStep)
  id: StepToByteArray(VRBuilder.Core.IStep)
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: StepToByteArray(IStep)
  nameWithType: NewtonsoftJsonProcessSerializer.StepToByteArray(IStep)
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepToByteArray(VRBuilder.Core.IStep)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: StepToByteArray
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 112
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  summary: "\nSerializes a given step into a byte array. The implementation should trim target steps of the step.\n"
  example: []
  syntax:
    content: public virtual byte[] StepToByteArray(IStep step)
    parameters:
    - id: step
      type: VRBuilder.Core.IStep
    return:
      type: System.Byte[]
    content.vb: Public Overridable Function StepToByteArray(step As IStep) As Byte()
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepToByteArray*
  implements:
  - VRBuilder.Core.Serialization.IProcessSerializer.StepToByteArray(VRBuilder.Core.IStep)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepFromByteArray(System.Byte[])
  commentId: M:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepFromByteArray(System.Byte[])
  id: StepFromByteArray(System.Byte[])
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: StepFromByteArray(Byte[])
  nameWithType: NewtonsoftJsonProcessSerializer.StepFromByteArray(Byte[])
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepFromByteArray(System.Byte[])
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: StepFromByteArray
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 118
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  summary: "\nDeserializes a given step to a usable object.\n"
  example: []
  syntax:
    content: public virtual IStep StepFromByteArray(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: VRBuilder.Core.IStep
    content.vb: Public Overridable Function StepFromByteArray(data As Byte()) As IStep
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepFromByteArray*
  implements:
  - VRBuilder.Core.Serialization.IProcessSerializer.StepFromByteArray(System.Byte[])
  nameWithType.vb: NewtonsoftJsonProcessSerializer.StepFromByteArray(Byte())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepFromByteArray(System.Byte())
  name.vb: StepFromByteArray(Byte())
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterToByteArray(VRBuilder.Core.IChapter)
  commentId: M:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterToByteArray(VRBuilder.Core.IChapter)
  id: ChapterToByteArray(VRBuilder.Core.IChapter)
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: ChapterToByteArray(IChapter)
  nameWithType: NewtonsoftJsonProcessSerializer.ChapterToByteArray(IChapter)
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterToByteArray(VRBuilder.Core.IChapter)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ChapterToByteArray
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 124
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  summary: "\nSerializes a given chapter into a byte array.\n"
  example: []
  syntax:
    content: public virtual byte[] ChapterToByteArray(IChapter chapter)
    parameters:
    - id: chapter
      type: VRBuilder.Core.IChapter
    return:
      type: System.Byte[]
    content.vb: Public Overridable Function ChapterToByteArray(chapter As IChapter) As Byte()
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterToByteArray*
  implements:
  - VRBuilder.Core.Serialization.IProcessSerializer.ChapterToByteArray(VRBuilder.Core.IChapter)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterFromByteArray(System.Byte[])
  commentId: M:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterFromByteArray(System.Byte[])
  id: ChapterFromByteArray(System.Byte[])
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: ChapterFromByteArray(Byte[])
  nameWithType: NewtonsoftJsonProcessSerializer.ChapterFromByteArray(Byte[])
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterFromByteArray(System.Byte[])
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ChapterFromByteArray
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 130
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  summary: "\nDeserializes a given chapter to a usable object.\n"
  example: []
  syntax:
    content: public virtual IChapter ChapterFromByteArray(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: VRBuilder.Core.IChapter
    content.vb: Public Overridable Function ChapterFromByteArray(data As Byte()) As IChapter
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterFromByteArray*
  implements:
  - VRBuilder.Core.Serialization.IProcessSerializer.ChapterFromByteArray(System.Byte[])
  nameWithType.vb: NewtonsoftJsonProcessSerializer.ChapterFromByteArray(Byte())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterFromByteArray(System.Byte())
  name.vb: ChapterFromByteArray(Byte())
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestToByteArray(VRBuilder.Core.IO.IProcessAssetManifest)
  commentId: M:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestToByteArray(VRBuilder.Core.IO.IProcessAssetManifest)
  id: ManifestToByteArray(VRBuilder.Core.IO.IProcessAssetManifest)
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: ManifestToByteArray(IProcessAssetManifest)
  nameWithType: NewtonsoftJsonProcessSerializer.ManifestToByteArray(IProcessAssetManifest)
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestToByteArray(VRBuilder.Core.IO.IProcessAssetManifest)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ManifestToByteArray
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 136
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  summary: "\nSerializes a process asset manifest into a byte array.\n"
  example: []
  syntax:
    content: public virtual byte[] ManifestToByteArray(IProcessAssetManifest manifest)
    parameters:
    - id: manifest
      type: VRBuilder.Core.IO.IProcessAssetManifest
    return:
      type: System.Byte[]
    content.vb: Public Overridable Function ManifestToByteArray(manifest As IProcessAssetManifest) As Byte()
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestToByteArray*
  implements:
  - VRBuilder.Core.Serialization.IProcessSerializer.ManifestToByteArray(VRBuilder.Core.IO.IProcessAssetManifest)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestFromByteArray(System.Byte[])
  commentId: M:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestFromByteArray(System.Byte[])
  id: ManifestFromByteArray(System.Byte[])
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: ManifestFromByteArray(Byte[])
  nameWithType: NewtonsoftJsonProcessSerializer.ManifestFromByteArray(Byte[])
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestFromByteArray(System.Byte[])
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ManifestFromByteArray
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 144
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  summary: "\nDeserializes a process asset manifest to a usable object.\n"
  example: []
  syntax:
    content: public virtual IProcessAssetManifest ManifestFromByteArray(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: VRBuilder.Core.IO.IProcessAssetManifest
    content.vb: Public Overridable Function ManifestFromByteArray(data As Byte()) As IProcessAssetManifest
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestFromByteArray*
  implements:
  - VRBuilder.Core.Serialization.IProcessSerializer.ManifestFromByteArray(System.Byte[])
  nameWithType.vb: NewtonsoftJsonProcessSerializer.ManifestFromByteArray(Byte())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestFromByteArray(System.Byte())
  name.vb: ManifestFromByteArray(Byte())
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityToByteArray(VRBuilder.Core.IEntity)
  commentId: M:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityToByteArray(VRBuilder.Core.IEntity)
  id: EntityToByteArray(VRBuilder.Core.IEntity)
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: EntityToByteArray(IEntity)
  nameWithType: NewtonsoftJsonProcessSerializer.EntityToByteArray(IEntity)
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityToByteArray(VRBuilder.Core.IEntity)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: EntityToByteArray
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 150
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  summary: "\nSerializes a given entity into a byte array.\n"
  example: []
  syntax:
    content: public virtual byte[] EntityToByteArray(IEntity entity)
    parameters:
    - id: entity
      type: VRBuilder.Core.IEntity
    return:
      type: System.Byte[]
    content.vb: Public Overridable Function EntityToByteArray(entity As IEntity) As Byte()
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityToByteArray*
  implements:
  - VRBuilder.Core.Serialization.IProcessSerializer.EntityToByteArray(VRBuilder.Core.IEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityFromByteArray(System.Byte[])
  commentId: M:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityFromByteArray(System.Byte[])
  id: EntityFromByteArray(System.Byte[])
  parent: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer
  langs:
  - csharp
  - vb
  name: EntityFromByteArray(Byte[])
  nameWithType: NewtonsoftJsonProcessSerializer.EntityFromByteArray(Byte[])
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityFromByteArray(System.Byte[])
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: EntityFromByteArray
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Serialization/NewtonsoftJsonSerializer/NewtonsoftJsonProcessSerializer.cs
    startLine: 156
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Serialization.NewtonsoftJson
  summary: "\nDeserializes a given entity to a usable object.\n"
  example: []
  syntax:
    content: public virtual IEntity EntityFromByteArray(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: VRBuilder.Core.IEntity
    content.vb: Public Overridable Function EntityFromByteArray(data As Byte()) As IEntity
  overload: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityFromByteArray*
  implements:
  - VRBuilder.Core.Serialization.IProcessSerializer.EntityFromByteArray(System.Byte[])
  nameWithType.vb: NewtonsoftJsonProcessSerializer.EntityFromByteArray(Byte())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityFromByteArray(System.Byte())
  name.vb: EntityFromByteArray(Byte())
references:
- uid: VRBuilder.Core.Serialization.NewtonsoftJson
  commentId: N:VRBuilder.Core.Serialization.NewtonsoftJson
  name: VRBuilder.Core.Serialization.NewtonsoftJson
  nameWithType: VRBuilder.Core.Serialization.NewtonsoftJson
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Core.Serialization.IProcessSerializer
  commentId: T:VRBuilder.Core.Serialization.IProcessSerializer
  parent: VRBuilder.Core.Serialization
  name: IProcessSerializer
  nameWithType: IProcessSerializer
  fullName: VRBuilder.Core.Serialization.IProcessSerializer
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.Serialization
  commentId: N:VRBuilder.Core.Serialization
  name: VRBuilder.Core.Serialization
  nameWithType: VRBuilder.Core.Serialization
  fullName: VRBuilder.Core.Serialization
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Version*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Version
  name: Version
  nameWithType: NewtonsoftJsonProcessSerializer.Version
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Version
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessSerializerSettings*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessSerializerSettings
  name: ProcessSerializerSettings
  nameWithType: NewtonsoftJsonProcessSerializer.ProcessSerializerSettings
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessSerializerSettings
- uid: Newtonsoft.Json.JsonSerializerSettings
  commentId: T:Newtonsoft.Json.JsonSerializerSettings
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializerSettings
  nameWithType: JsonSerializerSettings
  fullName: Newtonsoft.Json.JsonSerializerSettings
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Name*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Name
  name: Name
  nameWithType: NewtonsoftJsonProcessSerializer.Name
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Name
- uid: VRBuilder.Core.Serialization.IProcessSerializer.Name
  commentId: P:VRBuilder.Core.Serialization.IProcessSerializer.Name
  parent: VRBuilder.Core.Serialization.IProcessSerializer
  name: Name
  nameWithType: IProcessSerializer.Name
  fullName: VRBuilder.Core.Serialization.IProcessSerializer.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.FileFormat*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.FileFormat
  name: FileFormat
  nameWithType: NewtonsoftJsonProcessSerializer.FileFormat
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.FileFormat
- uid: VRBuilder.Core.Serialization.IProcessSerializer.FileFormat
  commentId: P:VRBuilder.Core.Serialization.IProcessSerializer.FileFormat
  parent: VRBuilder.Core.Serialization.IProcessSerializer
  name: FileFormat
  nameWithType: IProcessSerializer.FileFormat
  fullName: VRBuilder.Core.Serialization.IProcessSerializer.FileFormat
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Serialize*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Serialize
  name: Serialize
  nameWithType: NewtonsoftJsonProcessSerializer.Serialize
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Serialize
- uid: VRBuilder.Core.IEntity
  commentId: T:VRBuilder.Core.IEntity
  parent: VRBuilder.Core
  name: IEntity
  nameWithType: IEntity
  fullName: VRBuilder.Core.IEntity
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: VRBuilder.Core
  commentId: N:VRBuilder.Core
  name: VRBuilder.Core
  nameWithType: VRBuilder.Core
  fullName: VRBuilder.Core
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Deserialize*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Deserialize
  name: Deserialize
  nameWithType: NewtonsoftJsonProcessSerializer.Deserialize
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.Deserialize
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessToByteArray*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessToByteArray
  name: ProcessToByteArray
  nameWithType: NewtonsoftJsonProcessSerializer.ProcessToByteArray
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessToByteArray
- uid: VRBuilder.Core.Serialization.IProcessSerializer.ProcessToByteArray(VRBuilder.Core.IProcess)
  commentId: M:VRBuilder.Core.Serialization.IProcessSerializer.ProcessToByteArray(VRBuilder.Core.IProcess)
  parent: VRBuilder.Core.Serialization.IProcessSerializer
  name: ProcessToByteArray(IProcess)
  nameWithType: IProcessSerializer.ProcessToByteArray(IProcess)
  fullName: VRBuilder.Core.Serialization.IProcessSerializer.ProcessToByteArray(VRBuilder.Core.IProcess)
  spec.csharp:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.ProcessToByteArray(VRBuilder.Core.IProcess)
    name: ProcessToByteArray
    nameWithType: IProcessSerializer.ProcessToByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.ProcessToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.IProcess
    name: IProcess
    nameWithType: IProcess
    fullName: VRBuilder.Core.IProcess
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.ProcessToByteArray(VRBuilder.Core.IProcess)
    name: ProcessToByteArray
    nameWithType: IProcessSerializer.ProcessToByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.ProcessToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.IProcess
    name: IProcess
    nameWithType: IProcess
    fullName: VRBuilder.Core.IProcess
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.IProcess
  commentId: T:VRBuilder.Core.IProcess
  parent: VRBuilder.Core
  name: IProcess
  nameWithType: IProcess
  fullName: VRBuilder.Core.IProcess
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessFromByteArray*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessFromByteArray
  name: ProcessFromByteArray
  nameWithType: NewtonsoftJsonProcessSerializer.ProcessFromByteArray
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ProcessFromByteArray
- uid: VRBuilder.Core.Serialization.IProcessSerializer.ProcessFromByteArray(System.Byte[])
  commentId: M:VRBuilder.Core.Serialization.IProcessSerializer.ProcessFromByteArray(System.Byte[])
  parent: VRBuilder.Core.Serialization.IProcessSerializer
  isExternal: true
  name: ProcessFromByteArray(Byte[])
  nameWithType: IProcessSerializer.ProcessFromByteArray(Byte[])
  fullName: VRBuilder.Core.Serialization.IProcessSerializer.ProcessFromByteArray(System.Byte[])
  nameWithType.vb: IProcessSerializer.ProcessFromByteArray(Byte())
  fullName.vb: VRBuilder.Core.Serialization.IProcessSerializer.ProcessFromByteArray(System.Byte())
  name.vb: ProcessFromByteArray(Byte())
  spec.csharp:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.ProcessFromByteArray(System.Byte[])
    name: ProcessFromByteArray
    nameWithType: IProcessSerializer.ProcessFromByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.ProcessFromByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.ProcessFromByteArray(System.Byte[])
    name: ProcessFromByteArray
    nameWithType: IProcessSerializer.ProcessFromByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.ProcessFromByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepToByteArray*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepToByteArray
  name: StepToByteArray
  nameWithType: NewtonsoftJsonProcessSerializer.StepToByteArray
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepToByteArray
- uid: VRBuilder.Core.Serialization.IProcessSerializer.StepToByteArray(VRBuilder.Core.IStep)
  commentId: M:VRBuilder.Core.Serialization.IProcessSerializer.StepToByteArray(VRBuilder.Core.IStep)
  parent: VRBuilder.Core.Serialization.IProcessSerializer
  name: StepToByteArray(IStep)
  nameWithType: IProcessSerializer.StepToByteArray(IStep)
  fullName: VRBuilder.Core.Serialization.IProcessSerializer.StepToByteArray(VRBuilder.Core.IStep)
  spec.csharp:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.StepToByteArray(VRBuilder.Core.IStep)
    name: StepToByteArray
    nameWithType: IProcessSerializer.StepToByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.StepToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.IStep
    name: IStep
    nameWithType: IStep
    fullName: VRBuilder.Core.IStep
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.StepToByteArray(VRBuilder.Core.IStep)
    name: StepToByteArray
    nameWithType: IProcessSerializer.StepToByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.StepToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.IStep
    name: IStep
    nameWithType: IStep
    fullName: VRBuilder.Core.IStep
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.IStep
  commentId: T:VRBuilder.Core.IStep
  parent: VRBuilder.Core
  name: IStep
  nameWithType: IStep
  fullName: VRBuilder.Core.IStep
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepFromByteArray*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepFromByteArray
  name: StepFromByteArray
  nameWithType: NewtonsoftJsonProcessSerializer.StepFromByteArray
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.StepFromByteArray
- uid: VRBuilder.Core.Serialization.IProcessSerializer.StepFromByteArray(System.Byte[])
  commentId: M:VRBuilder.Core.Serialization.IProcessSerializer.StepFromByteArray(System.Byte[])
  parent: VRBuilder.Core.Serialization.IProcessSerializer
  isExternal: true
  name: StepFromByteArray(Byte[])
  nameWithType: IProcessSerializer.StepFromByteArray(Byte[])
  fullName: VRBuilder.Core.Serialization.IProcessSerializer.StepFromByteArray(System.Byte[])
  nameWithType.vb: IProcessSerializer.StepFromByteArray(Byte())
  fullName.vb: VRBuilder.Core.Serialization.IProcessSerializer.StepFromByteArray(System.Byte())
  name.vb: StepFromByteArray(Byte())
  spec.csharp:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.StepFromByteArray(System.Byte[])
    name: StepFromByteArray
    nameWithType: IProcessSerializer.StepFromByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.StepFromByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.StepFromByteArray(System.Byte[])
    name: StepFromByteArray
    nameWithType: IProcessSerializer.StepFromByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.StepFromByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterToByteArray*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterToByteArray
  name: ChapterToByteArray
  nameWithType: NewtonsoftJsonProcessSerializer.ChapterToByteArray
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterToByteArray
- uid: VRBuilder.Core.Serialization.IProcessSerializer.ChapterToByteArray(VRBuilder.Core.IChapter)
  commentId: M:VRBuilder.Core.Serialization.IProcessSerializer.ChapterToByteArray(VRBuilder.Core.IChapter)
  parent: VRBuilder.Core.Serialization.IProcessSerializer
  name: ChapterToByteArray(IChapter)
  nameWithType: IProcessSerializer.ChapterToByteArray(IChapter)
  fullName: VRBuilder.Core.Serialization.IProcessSerializer.ChapterToByteArray(VRBuilder.Core.IChapter)
  spec.csharp:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.ChapterToByteArray(VRBuilder.Core.IChapter)
    name: ChapterToByteArray
    nameWithType: IProcessSerializer.ChapterToByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.ChapterToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.IChapter
    name: IChapter
    nameWithType: IChapter
    fullName: VRBuilder.Core.IChapter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.ChapterToByteArray(VRBuilder.Core.IChapter)
    name: ChapterToByteArray
    nameWithType: IProcessSerializer.ChapterToByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.ChapterToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.IChapter
    name: IChapter
    nameWithType: IChapter
    fullName: VRBuilder.Core.IChapter
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.IChapter
  commentId: T:VRBuilder.Core.IChapter
  parent: VRBuilder.Core
  name: IChapter
  nameWithType: IChapter
  fullName: VRBuilder.Core.IChapter
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterFromByteArray*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterFromByteArray
  name: ChapterFromByteArray
  nameWithType: NewtonsoftJsonProcessSerializer.ChapterFromByteArray
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ChapterFromByteArray
- uid: VRBuilder.Core.Serialization.IProcessSerializer.ChapterFromByteArray(System.Byte[])
  commentId: M:VRBuilder.Core.Serialization.IProcessSerializer.ChapterFromByteArray(System.Byte[])
  parent: VRBuilder.Core.Serialization.IProcessSerializer
  isExternal: true
  name: ChapterFromByteArray(Byte[])
  nameWithType: IProcessSerializer.ChapterFromByteArray(Byte[])
  fullName: VRBuilder.Core.Serialization.IProcessSerializer.ChapterFromByteArray(System.Byte[])
  nameWithType.vb: IProcessSerializer.ChapterFromByteArray(Byte())
  fullName.vb: VRBuilder.Core.Serialization.IProcessSerializer.ChapterFromByteArray(System.Byte())
  name.vb: ChapterFromByteArray(Byte())
  spec.csharp:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.ChapterFromByteArray(System.Byte[])
    name: ChapterFromByteArray
    nameWithType: IProcessSerializer.ChapterFromByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.ChapterFromByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.ChapterFromByteArray(System.Byte[])
    name: ChapterFromByteArray
    nameWithType: IProcessSerializer.ChapterFromByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.ChapterFromByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestToByteArray*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestToByteArray
  name: ManifestToByteArray
  nameWithType: NewtonsoftJsonProcessSerializer.ManifestToByteArray
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestToByteArray
- uid: VRBuilder.Core.Serialization.IProcessSerializer.ManifestToByteArray(VRBuilder.Core.IO.IProcessAssetManifest)
  commentId: M:VRBuilder.Core.Serialization.IProcessSerializer.ManifestToByteArray(VRBuilder.Core.IO.IProcessAssetManifest)
  parent: VRBuilder.Core.Serialization.IProcessSerializer
  name: ManifestToByteArray(IProcessAssetManifest)
  nameWithType: IProcessSerializer.ManifestToByteArray(IProcessAssetManifest)
  fullName: VRBuilder.Core.Serialization.IProcessSerializer.ManifestToByteArray(VRBuilder.Core.IO.IProcessAssetManifest)
  spec.csharp:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.ManifestToByteArray(VRBuilder.Core.IO.IProcessAssetManifest)
    name: ManifestToByteArray
    nameWithType: IProcessSerializer.ManifestToByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.ManifestToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.IO.IProcessAssetManifest
    name: IProcessAssetManifest
    nameWithType: IProcessAssetManifest
    fullName: VRBuilder.Core.IO.IProcessAssetManifest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.ManifestToByteArray(VRBuilder.Core.IO.IProcessAssetManifest)
    name: ManifestToByteArray
    nameWithType: IProcessSerializer.ManifestToByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.ManifestToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.IO.IProcessAssetManifest
    name: IProcessAssetManifest
    nameWithType: IProcessAssetManifest
    fullName: VRBuilder.Core.IO.IProcessAssetManifest
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.IO.IProcessAssetManifest
  commentId: T:VRBuilder.Core.IO.IProcessAssetManifest
  parent: VRBuilder.Core.IO
  name: IProcessAssetManifest
  nameWithType: IProcessAssetManifest
  fullName: VRBuilder.Core.IO.IProcessAssetManifest
- uid: VRBuilder.Core.IO
  commentId: N:VRBuilder.Core.IO
  name: VRBuilder.Core.IO
  nameWithType: VRBuilder.Core.IO
  fullName: VRBuilder.Core.IO
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestFromByteArray*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestFromByteArray
  name: ManifestFromByteArray
  nameWithType: NewtonsoftJsonProcessSerializer.ManifestFromByteArray
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.ManifestFromByteArray
- uid: VRBuilder.Core.Serialization.IProcessSerializer.ManifestFromByteArray(System.Byte[])
  commentId: M:VRBuilder.Core.Serialization.IProcessSerializer.ManifestFromByteArray(System.Byte[])
  parent: VRBuilder.Core.Serialization.IProcessSerializer
  isExternal: true
  name: ManifestFromByteArray(Byte[])
  nameWithType: IProcessSerializer.ManifestFromByteArray(Byte[])
  fullName: VRBuilder.Core.Serialization.IProcessSerializer.ManifestFromByteArray(System.Byte[])
  nameWithType.vb: IProcessSerializer.ManifestFromByteArray(Byte())
  fullName.vb: VRBuilder.Core.Serialization.IProcessSerializer.ManifestFromByteArray(System.Byte())
  name.vb: ManifestFromByteArray(Byte())
  spec.csharp:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.ManifestFromByteArray(System.Byte[])
    name: ManifestFromByteArray
    nameWithType: IProcessSerializer.ManifestFromByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.ManifestFromByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.ManifestFromByteArray(System.Byte[])
    name: ManifestFromByteArray
    nameWithType: IProcessSerializer.ManifestFromByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.ManifestFromByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityToByteArray*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityToByteArray
  name: EntityToByteArray
  nameWithType: NewtonsoftJsonProcessSerializer.EntityToByteArray
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityToByteArray
- uid: VRBuilder.Core.Serialization.IProcessSerializer.EntityToByteArray(VRBuilder.Core.IEntity)
  commentId: M:VRBuilder.Core.Serialization.IProcessSerializer.EntityToByteArray(VRBuilder.Core.IEntity)
  parent: VRBuilder.Core.Serialization.IProcessSerializer
  name: EntityToByteArray(IEntity)
  nameWithType: IProcessSerializer.EntityToByteArray(IEntity)
  fullName: VRBuilder.Core.Serialization.IProcessSerializer.EntityToByteArray(VRBuilder.Core.IEntity)
  spec.csharp:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.EntityToByteArray(VRBuilder.Core.IEntity)
    name: EntityToByteArray
    nameWithType: IProcessSerializer.EntityToByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.EntityToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.IEntity
    name: IEntity
    nameWithType: IEntity
    fullName: VRBuilder.Core.IEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.EntityToByteArray(VRBuilder.Core.IEntity)
    name: EntityToByteArray
    nameWithType: IProcessSerializer.EntityToByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.EntityToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.IEntity
    name: IEntity
    nameWithType: IEntity
    fullName: VRBuilder.Core.IEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityFromByteArray*
  commentId: Overload:VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityFromByteArray
  name: EntityFromByteArray
  nameWithType: NewtonsoftJsonProcessSerializer.EntityFromByteArray
  fullName: VRBuilder.Core.Serialization.NewtonsoftJson.NewtonsoftJsonProcessSerializer.EntityFromByteArray
- uid: VRBuilder.Core.Serialization.IProcessSerializer.EntityFromByteArray(System.Byte[])
  commentId: M:VRBuilder.Core.Serialization.IProcessSerializer.EntityFromByteArray(System.Byte[])
  parent: VRBuilder.Core.Serialization.IProcessSerializer
  isExternal: true
  name: EntityFromByteArray(Byte[])
  nameWithType: IProcessSerializer.EntityFromByteArray(Byte[])
  fullName: VRBuilder.Core.Serialization.IProcessSerializer.EntityFromByteArray(System.Byte[])
  nameWithType.vb: IProcessSerializer.EntityFromByteArray(Byte())
  fullName.vb: VRBuilder.Core.Serialization.IProcessSerializer.EntityFromByteArray(System.Byte())
  name.vb: EntityFromByteArray(Byte())
  spec.csharp:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.EntityFromByteArray(System.Byte[])
    name: EntityFromByteArray
    nameWithType: IProcessSerializer.EntityFromByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.EntityFromByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Serialization.IProcessSerializer.EntityFromByteArray(System.Byte[])
    name: EntityFromByteArray
    nameWithType: IProcessSerializer.EntityFromByteArray
    fullName: VRBuilder.Core.Serialization.IProcessSerializer.EntityFromByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
