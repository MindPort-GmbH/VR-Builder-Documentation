### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Configuration.Modes.BaseModeHandler
  commentId: T:VRBuilder.Core.Configuration.Modes.BaseModeHandler
  id: BaseModeHandler
  parent: VRBuilder.Core.Configuration.Modes
  children:
  - VRBuilder.Core.Configuration.Modes.BaseModeHandler.#ctor(System.Collections.Generic.List{VRBuilder.Core.Configuration.Modes.IMode},System.Int32)
  - VRBuilder.Core.Configuration.Modes.BaseModeHandler.AvailableModes
  - VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentMode
  - VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentModeIndex
  - VRBuilder.Core.Configuration.Modes.BaseModeHandler.ModeChanged
  - VRBuilder.Core.Configuration.Modes.BaseModeHandler.SetMode(System.Int32)
  - VRBuilder.Core.Configuration.Modes.BaseModeHandler.SetMode(VRBuilder.Core.Configuration.Modes.IMode)
  langs:
  - csharp
  - vb
  name: BaseModeHandler
  nameWithType: BaseModeHandler
  fullName: VRBuilder.Core.Configuration.Modes.BaseModeHandler
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: BaseModeHandler
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
    startLine: 14
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nSimple ModeHandler.\n"
  example: []
  syntax:
    content: 'public sealed class BaseModeHandler : IModeHandler'
    content.vb: >-
      Public NotInheritable Class BaseModeHandler

          Implements IModeHandler
  inheritance:
  - System.Object
  implements:
  - VRBuilder.Core.Configuration.Modes.IModeHandler
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: VRBuilder.Core.Configuration.Modes.BaseModeHandler.ModeChanged
  commentId: E:VRBuilder.Core.Configuration.Modes.BaseModeHandler.ModeChanged
  id: ModeChanged
  parent: VRBuilder.Core.Configuration.Modes.BaseModeHandler
  langs:
  - csharp
  - vb
  name: ModeChanged
  nameWithType: BaseModeHandler.ModeChanged
  fullName: VRBuilder.Core.Configuration.Modes.BaseModeHandler.ModeChanged
  type: Event
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ModeChanged
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
    startLine: 17
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  example: []
  syntax:
    content: public event EventHandler<ModeChangedEventArgs> ModeChanged
    return:
      type: System.EventHandler{VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs}
    content.vb: Public Event ModeChanged As EventHandler(Of ModeChangedEventArgs)
  implements:
  - VRBuilder.Core.Configuration.Modes.IModeHandler.ModeChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentModeIndex
  commentId: P:VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentModeIndex
  id: CurrentModeIndex
  parent: VRBuilder.Core.Configuration.Modes.BaseModeHandler
  langs:
  - csharp
  - vb
  name: CurrentModeIndex
  nameWithType: BaseModeHandler.CurrentModeIndex
  fullName: VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentModeIndex
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CurrentModeIndex
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
    startLine: 20
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  example: []
  syntax:
    content: public int CurrentModeIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property CurrentModeIndex As Integer
  overload: VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentModeIndex*
  implements:
  - VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentModeIndex
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentMode
  commentId: P:VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentMode
  id: CurrentMode
  parent: VRBuilder.Core.Configuration.Modes.BaseModeHandler
  langs:
  - csharp
  - vb
  name: CurrentMode
  nameWithType: BaseModeHandler.CurrentMode
  fullName: VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentMode
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CurrentMode
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
    startLine: 23
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  example: []
  syntax:
    content: public IMode CurrentMode { get; }
    parameters: []
    return:
      type: VRBuilder.Core.Configuration.Modes.IMode
    content.vb: Public ReadOnly Property CurrentMode As IMode
  overload: VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentMode*
  implements:
  - VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentMode
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VRBuilder.Core.Configuration.Modes.BaseModeHandler.AvailableModes
  commentId: P:VRBuilder.Core.Configuration.Modes.BaseModeHandler.AvailableModes
  id: AvailableModes
  parent: VRBuilder.Core.Configuration.Modes.BaseModeHandler
  langs:
  - csharp
  - vb
  name: AvailableModes
  nameWithType: BaseModeHandler.AvailableModes
  fullName: VRBuilder.Core.Configuration.Modes.BaseModeHandler.AvailableModes
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: AvailableModes
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
    startLine: 29
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  example: []
  syntax:
    content: public ReadOnlyCollection<IMode> AvailableModes { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{VRBuilder.Core.Configuration.Modes.IMode}
    content.vb: Public ReadOnly Property AvailableModes As ReadOnlyCollection(Of IMode)
  overload: VRBuilder.Core.Configuration.Modes.BaseModeHandler.AvailableModes*
  implements:
  - VRBuilder.Core.Configuration.Modes.IModeHandler.AvailableModes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VRBuilder.Core.Configuration.Modes.BaseModeHandler.#ctor(System.Collections.Generic.List{VRBuilder.Core.Configuration.Modes.IMode},System.Int32)
  commentId: M:VRBuilder.Core.Configuration.Modes.BaseModeHandler.#ctor(System.Collections.Generic.List{VRBuilder.Core.Configuration.Modes.IMode},System.Int32)
  id: '#ctor(System.Collections.Generic.List{VRBuilder.Core.Configuration.Modes.IMode},System.Int32)'
  parent: VRBuilder.Core.Configuration.Modes.BaseModeHandler
  langs:
  - csharp
  - vb
  name: BaseModeHandler(List<IMode>, Int32)
  nameWithType: BaseModeHandler.BaseModeHandler(List<IMode>, Int32)
  fullName: VRBuilder.Core.Configuration.Modes.BaseModeHandler.BaseModeHandler(System.Collections.Generic.List<VRBuilder.Core.Configuration.Modes.IMode>, System.Int32)
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
    startLine: 31
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  syntax:
    content: public BaseModeHandler(List<IMode> modes, int defaultMode = 0)
    parameters:
    - id: modes
      type: System.Collections.Generic.List{VRBuilder.Core.Configuration.Modes.IMode}
    - id: defaultMode
      type: System.Int32
    content.vb: Public Sub New(modes As List(Of IMode), defaultMode As Integer = 0)
  overload: VRBuilder.Core.Configuration.Modes.BaseModeHandler.#ctor*
  nameWithType.vb: BaseModeHandler.BaseModeHandler(List(Of IMode), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Configuration.Modes.BaseModeHandler.BaseModeHandler(System.Collections.Generic.List(Of VRBuilder.Core.Configuration.Modes.IMode), System.Int32)
  name.vb: BaseModeHandler(List(Of IMode), Int32)
- uid: VRBuilder.Core.Configuration.Modes.BaseModeHandler.SetMode(System.Int32)
  commentId: M:VRBuilder.Core.Configuration.Modes.BaseModeHandler.SetMode(System.Int32)
  id: SetMode(System.Int32)
  parent: VRBuilder.Core.Configuration.Modes.BaseModeHandler
  langs:
  - csharp
  - vb
  name: SetMode(Int32)
  nameWithType: BaseModeHandler.SetMode(Int32)
  fullName: VRBuilder.Core.Configuration.Modes.BaseModeHandler.SetMode(System.Int32)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: SetMode
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
    startLine: 38
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  example: []
  syntax:
    content: public void SetMode(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Public Sub SetMode(index As Integer)
  overload: VRBuilder.Core.Configuration.Modes.BaseModeHandler.SetMode*
  implements:
  - VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.Configuration.Modes.BaseModeHandler.SetMode(VRBuilder.Core.Configuration.Modes.IMode)
  commentId: M:VRBuilder.Core.Configuration.Modes.BaseModeHandler.SetMode(VRBuilder.Core.Configuration.Modes.IMode)
  id: SetMode(VRBuilder.Core.Configuration.Modes.IMode)
  parent: VRBuilder.Core.Configuration.Modes.BaseModeHandler
  langs:
  - csharp
  - vb
  name: SetMode(IMode)
  nameWithType: BaseModeHandler.SetMode(IMode)
  fullName: VRBuilder.Core.Configuration.Modes.BaseModeHandler.SetMode(VRBuilder.Core.Configuration.Modes.IMode)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: SetMode
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/BaseModeHandler.cs
    startLine: 60
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  example: []
  syntax:
    content: public void SetMode(IMode mode)
    parameters:
    - id: mode
      type: VRBuilder.Core.Configuration.Modes.IMode
    content.vb: Public Sub SetMode(mode As IMode)
  overload: VRBuilder.Core.Configuration.Modes.BaseModeHandler.SetMode*
  implements:
  - VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(VRBuilder.Core.Configuration.Modes.IMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VRBuilder.Core.Configuration.Modes
  commentId: N:VRBuilder.Core.Configuration.Modes
  name: VRBuilder.Core.Configuration.Modes
  nameWithType: VRBuilder.Core.Configuration.Modes
  fullName: VRBuilder.Core.Configuration.Modes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler
  commentId: T:VRBuilder.Core.Configuration.Modes.IModeHandler
  parent: VRBuilder.Core.Configuration.Modes
  name: IModeHandler
  nameWithType: IModeHandler
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.ModeChanged
  commentId: E:VRBuilder.Core.Configuration.Modes.IModeHandler.ModeChanged
  parent: VRBuilder.Core.Configuration.Modes.IModeHandler
  name: ModeChanged
  nameWithType: IModeHandler.ModeChanged
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.ModeChanged
- uid: System.EventHandler{VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs}
  commentId: T:System.EventHandler{VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ModeChangedEventArgs>
  nameWithType: EventHandler<ModeChangedEventArgs>
  fullName: System.EventHandler<VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs>
  nameWithType.vb: EventHandler(Of ModeChangedEventArgs)
  fullName.vb: System.EventHandler(Of VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs)
  name.vb: EventHandler(Of ModeChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs
    name: ModeChangedEventArgs
    nameWithType: ModeChangedEventArgs
    fullName: VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs
    name: ModeChangedEventArgs
    nameWithType: ModeChangedEventArgs
    fullName: VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentModeIndex*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentModeIndex
  name: CurrentModeIndex
  nameWithType: BaseModeHandler.CurrentModeIndex
  fullName: VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentModeIndex
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentModeIndex
  commentId: P:VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentModeIndex
  parent: VRBuilder.Core.Configuration.Modes.IModeHandler
  name: CurrentModeIndex
  nameWithType: IModeHandler.CurrentModeIndex
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentModeIndex
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentMode*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentMode
  name: CurrentMode
  nameWithType: BaseModeHandler.CurrentMode
  fullName: VRBuilder.Core.Configuration.Modes.BaseModeHandler.CurrentMode
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentMode
  commentId: P:VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentMode
  parent: VRBuilder.Core.Configuration.Modes.IModeHandler
  name: CurrentMode
  nameWithType: IModeHandler.CurrentMode
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentMode
- uid: VRBuilder.Core.Configuration.Modes.IMode
  commentId: T:VRBuilder.Core.Configuration.Modes.IMode
  parent: VRBuilder.Core.Configuration.Modes
  name: IMode
  nameWithType: IMode
  fullName: VRBuilder.Core.Configuration.Modes.IMode
- uid: VRBuilder.Core.Configuration.Modes.BaseModeHandler.AvailableModes*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.BaseModeHandler.AvailableModes
  name: AvailableModes
  nameWithType: BaseModeHandler.AvailableModes
  fullName: VRBuilder.Core.Configuration.Modes.BaseModeHandler.AvailableModes
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.AvailableModes
  commentId: P:VRBuilder.Core.Configuration.Modes.IModeHandler.AvailableModes
  parent: VRBuilder.Core.Configuration.Modes.IModeHandler
  name: AvailableModes
  nameWithType: IModeHandler.AvailableModes
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.AvailableModes
- uid: System.Collections.ObjectModel.ReadOnlyCollection{VRBuilder.Core.Configuration.Modes.IMode}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{VRBuilder.Core.Configuration.Modes.IMode}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<IMode>
  nameWithType: ReadOnlyCollection<IMode>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<VRBuilder.Core.Configuration.Modes.IMode>
  nameWithType.vb: ReadOnlyCollection(Of IMode)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of VRBuilder.Core.Configuration.Modes.IMode)
  name.vb: ReadOnlyCollection(Of IMode)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.Configuration.Modes.IMode
    name: IMode
    nameWithType: IMode
    fullName: VRBuilder.Core.Configuration.Modes.IMode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.Configuration.Modes.IMode
    name: IMode
    nameWithType: IMode
    fullName: VRBuilder.Core.Configuration.Modes.IMode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: VRBuilder.Core.Configuration.Modes.BaseModeHandler.#ctor*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.BaseModeHandler.#ctor
  name: BaseModeHandler
  nameWithType: BaseModeHandler.BaseModeHandler
  fullName: VRBuilder.Core.Configuration.Modes.BaseModeHandler.BaseModeHandler
- uid: System.Collections.Generic.List{VRBuilder.Core.Configuration.Modes.IMode}
  commentId: T:System.Collections.Generic.List{VRBuilder.Core.Configuration.Modes.IMode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IMode>
  nameWithType: List<IMode>
  fullName: System.Collections.Generic.List<VRBuilder.Core.Configuration.Modes.IMode>
  nameWithType.vb: List(Of IMode)
  fullName.vb: System.Collections.Generic.List(Of VRBuilder.Core.Configuration.Modes.IMode)
  name.vb: List(Of IMode)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.Configuration.Modes.IMode
    name: IMode
    nameWithType: IMode
    fullName: VRBuilder.Core.Configuration.Modes.IMode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.Configuration.Modes.IMode
    name: IMode
    nameWithType: IMode
    fullName: VRBuilder.Core.Configuration.Modes.IMode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VRBuilder.Core.Configuration.Modes.BaseModeHandler.SetMode*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.BaseModeHandler.SetMode
  name: SetMode
  nameWithType: BaseModeHandler.SetMode
  fullName: VRBuilder.Core.Configuration.Modes.BaseModeHandler.SetMode
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
  commentId: M:VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
  parent: VRBuilder.Core.Configuration.Modes.IModeHandler
  isExternal: true
  name: SetMode(Int32)
  nameWithType: IModeHandler.SetMode(Int32)
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
    name: SetMode
    nameWithType: IModeHandler.SetMode
    fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
    name: SetMode
    nameWithType: IModeHandler.SetMode
    fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(VRBuilder.Core.Configuration.Modes.IMode)
  commentId: M:VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(VRBuilder.Core.Configuration.Modes.IMode)
  parent: VRBuilder.Core.Configuration.Modes.IModeHandler
  name: SetMode(IMode)
  nameWithType: IModeHandler.SetMode(IMode)
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(VRBuilder.Core.Configuration.Modes.IMode)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(VRBuilder.Core.Configuration.Modes.IMode)
    name: SetMode
    nameWithType: IModeHandler.SetMode
    fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.Configuration.Modes.IMode
    name: IMode
    nameWithType: IMode
    fullName: VRBuilder.Core.Configuration.Modes.IMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(VRBuilder.Core.Configuration.Modes.IMode)
    name: SetMode
    nameWithType: IModeHandler.SetMode
    fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.Configuration.Modes.IMode
    name: IMode
    nameWithType: IMode
    fullName: VRBuilder.Core.Configuration.Modes.IMode
  - name: )
    nameWithType: )
    fullName: )
