### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Utils.ReflectionUtils
  commentId: T:VRBuilder.Core.Utils.ReflectionUtils
  id: ReflectionUtils
  parent: VRBuilder.Core.Utils
  children:
  - VRBuilder.Core.Utils.ReflectionUtils.CreateInstanceOfType(System.Type)
  - VRBuilder.Core.Utils.ReflectionUtils.CreateInstanceOfType``1
  - VRBuilder.Core.Utils.ReflectionUtils.GetAllTypes
  - VRBuilder.Core.Utils.ReflectionUtils.GetAttribute``1(System.Type,System.Boolean)
  - VRBuilder.Core.Utils.ReflectionUtils.GetConcreteImplementationsOf(System.Type)
  - VRBuilder.Core.Utils.ReflectionUtils.GetConcreteImplementationsOf``1
  - VRBuilder.Core.Utils.ReflectionUtils.GetDeclaredTypeOfPropertyOrField(System.Reflection.MemberInfo)
  - VRBuilder.Core.Utils.ReflectionUtils.GetDefault(System.Type)
  - VRBuilder.Core.Utils.ReflectionUtils.GetEntryType(System.Object)
  - VRBuilder.Core.Utils.ReflectionUtils.GetEntryType(System.Type)
  - VRBuilder.Core.Utils.ReflectionUtils.GetFinalImplementationsOf``1(System.Type[])
  - VRBuilder.Core.Utils.ReflectionUtils.GetGenericDictionaryInterface(System.Object)
  - VRBuilder.Core.Utils.ReflectionUtils.GetNameWithNesting(System.Type)
  - VRBuilder.Core.Utils.ReflectionUtils.GetTypeFromAssemblyQualifiedName(System.String)
  - VRBuilder.Core.Utils.ReflectionUtils.GetValueFromPropertyOrField(System.Object,System.Reflection.MemberInfo)
  - VRBuilder.Core.Utils.ReflectionUtils.InsertIntoList(System.Collections.IList@,System.Int32,System.Object)
  - VRBuilder.Core.Utils.ReflectionUtils.IsEmpty(System.Object)
  - VRBuilder.Core.Utils.ReflectionUtils.IsField(System.Reflection.MemberInfo)
  - VRBuilder.Core.Utils.ReflectionUtils.IsNumeric(System.Type)
  - VRBuilder.Core.Utils.ReflectionUtils.IsProperty(System.Reflection.MemberInfo)
  - VRBuilder.Core.Utils.ReflectionUtils.IsSubclassOfGenericDefinition(System.Type,System.Type)
  - VRBuilder.Core.Utils.ReflectionUtils.RemoveFromList(System.Collections.IList@,System.Int32)
  - VRBuilder.Core.Utils.ReflectionUtils.ReplaceList``1(System.Collections.IList@,System.Collections.Generic.IEnumerable{``0})
  - VRBuilder.Core.Utils.ReflectionUtils.SetValueToPropertyOrField(System.Object,System.Reflection.MemberInfo,System.Object)
  - VRBuilder.Core.Utils.ReflectionUtils.WhichHaveAttribute``1(System.Collections.Generic.IEnumerable{System.Type})
  langs:
  - csharp
  - vb
  name: ReflectionUtils
  nameWithType: ReflectionUtils
  fullName: VRBuilder.Core.Utils.ReflectionUtils
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ReflectionUtils
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 13
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  syntax:
    content: public static class ReflectionUtils
    content.vb: Public Module ReflectionUtils
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetNameWithNesting(System.Type)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.GetNameWithNesting(System.Type)
  id: GetNameWithNesting(System.Type)
  isExtensionMethod: true
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: GetNameWithNesting(Type)
  nameWithType: ReflectionUtils.GetNameWithNesting(Type)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetNameWithNesting(System.Type)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetNameWithNesting
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 18
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Return <code class="paramref">type</code> name taking into consideration if it is nested type or not.
  example: []
  syntax:
    content: public static string GetNameWithNesting(this Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.String
    content.vb: Public Shared Function GetNameWithNesting(type As Type) As String
  overload: VRBuilder.Core.Utils.ReflectionUtils.GetNameWithNesting*
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetEntryType(System.Object)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.GetEntryType(System.Object)
  id: GetEntryType(System.Object)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: GetEntryType(object)
  nameWithType: ReflectionUtils.GetEntryType(object)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetEntryType(object)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetEntryType
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 31
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  syntax:
    content: public static Type GetEntryType(object list)
    parameters:
    - id: list
      type: System.Object
    return:
      type: System.Type
    content.vb: Public Shared Function GetEntryType(list As Object) As Type
  overload: VRBuilder.Core.Utils.ReflectionUtils.GetEntryType*
  nameWithType.vb: ReflectionUtils.GetEntryType(Object)
  fullName.vb: VRBuilder.Core.Utils.ReflectionUtils.GetEntryType(Object)
  name.vb: GetEntryType(Object)
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetEntryType(System.Type)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.GetEntryType(System.Type)
  id: GetEntryType(System.Type)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: GetEntryType(Type)
  nameWithType: ReflectionUtils.GetEntryType(Type)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetEntryType(System.Type)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetEntryType
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 50
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: If the given <code class="paramref">listType</code> is IList{T}, return its generic type argument. Otherwise, return typeof(object).
  example: []
  syntax:
    content: public static Type GetEntryType(Type listType)
    parameters:
    - id: listType
      type: System.Type
    return:
      type: System.Type
    content.vb: Public Shared Function GetEntryType(listType As Type) As Type
  overload: VRBuilder.Core.Utils.ReflectionUtils.GetEntryType*
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetAllTypes
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.GetAllTypes
  id: GetAllTypes
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: GetAllTypes()
  nameWithType: ReflectionUtils.GetAllTypes()
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetAllTypes()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetAllTypes
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 80
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Returns all existing types of all assemblies.
  example: []
  syntax:
    content: public static IEnumerable<Type> GetAllTypes()
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
    content.vb: Public Shared Function GetAllTypes() As IEnumerable(Of Type)
  overload: VRBuilder.Core.Utils.ReflectionUtils.GetAllTypes*
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetConcreteImplementationsOf(System.Type)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.GetConcreteImplementationsOf(System.Type)
  id: GetConcreteImplementationsOf(System.Type)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: GetConcreteImplementationsOf(Type)
  nameWithType: ReflectionUtils.GetConcreteImplementationsOf(Type)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetConcreteImplementationsOf(System.Type)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetConcreteImplementationsOf
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 103
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Returns non-abstract classes that implement or inherit from given type.
  example: []
  syntax:
    content: public static IEnumerable<Type> GetConcreteImplementationsOf(Type baseType)
    parameters:
    - id: baseType
      type: System.Type
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
    content.vb: Public Shared Function GetConcreteImplementationsOf(baseType As Type) As IEnumerable(Of Type)
  overload: VRBuilder.Core.Utils.ReflectionUtils.GetConcreteImplementationsOf*
- uid: VRBuilder.Core.Utils.ReflectionUtils.WhichHaveAttribute``1(System.Collections.Generic.IEnumerable{System.Type})
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.WhichHaveAttribute``1(System.Collections.Generic.IEnumerable{System.Type})
  id: WhichHaveAttribute``1(System.Collections.Generic.IEnumerable{System.Type})
  isExtensionMethod: true
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: WhichHaveAttribute<T>(IEnumerable<Type>)
  nameWithType: ReflectionUtils.WhichHaveAttribute<T>(IEnumerable<Type>)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.WhichHaveAttribute<T>(System.Collections.Generic.IEnumerable<System.Type>)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: WhichHaveAttribute
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 113
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Returns <code class="paramref">types</code> which have attribute <code class="typeparamref">T</code>.
  example: []
  syntax:
    content: 'public static IEnumerable<Type> WhichHaveAttribute<T>(this IEnumerable<Type> types) where T : Attribute'
    parameters:
    - id: types
      type: System.Collections.Generic.IEnumerable{System.Type}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
    content.vb: Public Shared Function WhichHaveAttribute(Of T As Attribute)(types As IEnumerable(Of Type)) As IEnumerable(Of Type)
  overload: VRBuilder.Core.Utils.ReflectionUtils.WhichHaveAttribute*
  nameWithType.vb: ReflectionUtils.WhichHaveAttribute(Of T)(IEnumerable(Of Type))
  fullName.vb: VRBuilder.Core.Utils.ReflectionUtils.WhichHaveAttribute(Of T)(System.Collections.Generic.IEnumerable(Of System.Type))
  name.vb: WhichHaveAttribute(Of T)(IEnumerable(Of Type))
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetAttribute``1(System.Type,System.Boolean)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.GetAttribute``1(System.Type,System.Boolean)
  id: GetAttribute``1(System.Type,System.Boolean)
  isExtensionMethod: true
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: GetAttribute<T>(Type, bool)
  nameWithType: ReflectionUtils.GetAttribute<T>(Type, bool)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetAttribute<T>(System.Type, bool)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetAttribute
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 121
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Returns first attribute <code class="typeparamref">T</code> of <code class="paramref">type</code>
  example: []
  syntax:
    content: 'public static T GetAttribute<T>(this Type type, bool inherit = false) where T : Attribute'
    parameters:
    - id: type
      type: System.Type
    - id: inherit
      type: System.Boolean
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function GetAttribute(Of T As Attribute)(type As Type, inherit As Boolean = False) As T
  overload: VRBuilder.Core.Utils.ReflectionUtils.GetAttribute*
  nameWithType.vb: ReflectionUtils.GetAttribute(Of T)(Type, Boolean)
  fullName.vb: VRBuilder.Core.Utils.ReflectionUtils.GetAttribute(Of T)(System.Type, Boolean)
  name.vb: GetAttribute(Of T)(Type, Boolean)
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetConcreteImplementationsOf``1
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.GetConcreteImplementationsOf``1
  id: GetConcreteImplementationsOf``1
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: GetConcreteImplementationsOf<T>()
  nameWithType: ReflectionUtils.GetConcreteImplementationsOf<T>()
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetConcreteImplementationsOf<T>()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetConcreteImplementationsOf
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 129
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Returns non-abstract classes that implement or inherit from given type.
  example: []
  syntax:
    content: public static IEnumerable<Type> GetConcreteImplementationsOf<T>()
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
    content.vb: Public Shared Function GetConcreteImplementationsOf(Of T)() As IEnumerable(Of Type)
  overload: VRBuilder.Core.Utils.ReflectionUtils.GetConcreteImplementationsOf*
  nameWithType.vb: ReflectionUtils.GetConcreteImplementationsOf(Of T)()
  fullName.vb: VRBuilder.Core.Utils.ReflectionUtils.GetConcreteImplementationsOf(Of T)()
  name.vb: GetConcreteImplementationsOf(Of T)()
- uid: VRBuilder.Core.Utils.ReflectionUtils.CreateInstanceOfType(System.Type)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.CreateInstanceOfType(System.Type)
  id: CreateInstanceOfType(System.Type)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: CreateInstanceOfType(Type)
  nameWithType: ReflectionUtils.CreateInstanceOfType(Type)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.CreateInstanceOfType(System.Type)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CreateInstanceOfType
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 137
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Creates instance of given type using public or protected constructor with no parameters.
  example: []
  syntax:
    content: public static object CreateInstanceOfType(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Shared Function CreateInstanceOfType(type As Type) As Object
  overload: VRBuilder.Core.Utils.ReflectionUtils.CreateInstanceOfType*
- uid: VRBuilder.Core.Utils.ReflectionUtils.CreateInstanceOfType``1
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.CreateInstanceOfType``1
  id: CreateInstanceOfType``1
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: CreateInstanceOfType<T>()
  nameWithType: ReflectionUtils.CreateInstanceOfType<T>()
  fullName: VRBuilder.Core.Utils.ReflectionUtils.CreateInstanceOfType<T>()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CreateInstanceOfType
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 145
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Creates instance of given type using public or protected constructor with no parameters.
  example: []
  syntax:
    content: public static T CreateInstanceOfType<T>()
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function CreateInstanceOfType(Of T)() As T
  overload: VRBuilder.Core.Utils.ReflectionUtils.CreateInstanceOfType*
  nameWithType.vb: ReflectionUtils.CreateInstanceOfType(Of T)()
  fullName.vb: VRBuilder.Core.Utils.ReflectionUtils.CreateInstanceOfType(Of T)()
  name.vb: CreateInstanceOfType(Of T)()
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetDefault(System.Type)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.GetDefault(System.Type)
  id: GetDefault(System.Type)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: GetDefault(Type)
  nameWithType: ReflectionUtils.GetDefault(Type)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetDefault(System.Type)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetDefault
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 153
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Returns default instance of type.
  example: []
  syntax:
    content: public static object GetDefault(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Shared Function GetDefault(type As Type) As Object
  overload: VRBuilder.Core.Utils.ReflectionUtils.GetDefault*
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetGenericDictionaryInterface(System.Object)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.GetGenericDictionaryInterface(System.Object)
  id: GetGenericDictionaryInterface(System.Object)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: GetGenericDictionaryInterface(object)
  nameWithType: ReflectionUtils.GetGenericDictionaryInterface(object)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetGenericDictionaryInterface(object)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetGenericDictionaryInterface
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 167
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: >-
    Returns generic IDictionary interface which is implemented by the type of <code class="paramref">dictionaryValue</code>.

    If <code class="paramref">dictionaryValue</code>'s type does not implement it, returns null.
  example: []
  syntax:
    content: public static Type GetGenericDictionaryInterface(object dictionaryValue)
    parameters:
    - id: dictionaryValue
      type: System.Object
    return:
      type: System.Type
    content.vb: Public Shared Function GetGenericDictionaryInterface(dictionaryValue As Object) As Type
  overload: VRBuilder.Core.Utils.ReflectionUtils.GetGenericDictionaryInterface*
  nameWithType.vb: ReflectionUtils.GetGenericDictionaryInterface(Object)
  fullName.vb: VRBuilder.Core.Utils.ReflectionUtils.GetGenericDictionaryInterface(Object)
  name.vb: GetGenericDictionaryInterface(Object)
- uid: VRBuilder.Core.Utils.ReflectionUtils.RemoveFromList(System.Collections.IList@,System.Int32)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.RemoveFromList(System.Collections.IList@,System.Int32)
  id: RemoveFromList(System.Collections.IList@,System.Int32)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: RemoveFromList(ref IList, int)
  nameWithType: ReflectionUtils.RemoveFromList(ref IList, int)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.RemoveFromList(ref System.Collections.IList, int)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: RemoveFromList
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 183
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Remove an element from <code class="paramref">list</code> at <code class="paramref">index</code>. If the list is fixed size, new instance is created.
  example: []
  syntax:
    content: public static void RemoveFromList(ref IList list, int index)
    parameters:
    - id: list
      type: System.Collections.IList
    - id: index
      type: System.Int32
    content.vb: Public Shared Sub RemoveFromList(list As IList, index As Integer)
  overload: VRBuilder.Core.Utils.ReflectionUtils.RemoveFromList*
  nameWithType.vb: ReflectionUtils.RemoveFromList(IList, Integer)
  fullName.vb: VRBuilder.Core.Utils.ReflectionUtils.RemoveFromList(System.Collections.IList, Integer)
  name.vb: RemoveFromList(IList, Integer)
- uid: VRBuilder.Core.Utils.ReflectionUtils.InsertIntoList(System.Collections.IList@,System.Int32,System.Object)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.InsertIntoList(System.Collections.IList@,System.Int32,System.Object)
  id: InsertIntoList(System.Collections.IList@,System.Int32,System.Object)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: InsertIntoList(ref IList, int, object)
  nameWithType: ReflectionUtils.InsertIntoList(ref IList, int, object)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.InsertIntoList(ref System.Collections.IList, int, object)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: InsertIntoList
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 208
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Insert a <code class="paramref">value</code> in <code class="paramref">list</code> at index <code class="paramref">index</code>. If the list is fixed size, new instance is created.
  example: []
  syntax:
    content: public static void InsertIntoList(ref IList list, int index, object value)
    parameters:
    - id: list
      type: System.Collections.IList
    - id: index
      type: System.Int32
    - id: value
      type: System.Object
    content.vb: Public Shared Sub InsertIntoList(list As IList, index As Integer, value As Object)
  overload: VRBuilder.Core.Utils.ReflectionUtils.InsertIntoList*
  nameWithType.vb: ReflectionUtils.InsertIntoList(IList, Integer, Object)
  fullName.vb: VRBuilder.Core.Utils.ReflectionUtils.InsertIntoList(System.Collections.IList, Integer, Object)
  name.vb: InsertIntoList(IList, Integer, Object)
- uid: VRBuilder.Core.Utils.ReflectionUtils.ReplaceList``1(System.Collections.IList@,System.Collections.Generic.IEnumerable{``0})
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.ReplaceList``1(System.Collections.IList@,System.Collections.Generic.IEnumerable{``0})
  id: ReplaceList``1(System.Collections.IList@,System.Collections.Generic.IEnumerable{``0})
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: ReplaceList<T>(ref IList, IEnumerable<T>)
  nameWithType: ReflectionUtils.ReplaceList<T>(ref IList, IEnumerable<T>)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.ReplaceList<T>(ref System.Collections.IList, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ReplaceList
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 236
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Replace <code class="paramref">list</code> with a <code class="paramref">newList</code>. New instance is created.
  example: []
  syntax:
    content: public static void ReplaceList<T>(ref IList list, IEnumerable<T> newList)
    parameters:
    - id: list
      type: System.Collections.IList
    - id: newList
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ReplaceList(Of T)(list As IList, newList As IEnumerable(Of T))
  overload: VRBuilder.Core.Utils.ReflectionUtils.ReplaceList*
  nameWithType.vb: ReflectionUtils.ReplaceList(Of T)(IList, IEnumerable(Of T))
  fullName.vb: VRBuilder.Core.Utils.ReflectionUtils.ReplaceList(Of T)(System.Collections.IList, System.Collections.Generic.IEnumerable(Of T))
  name.vb: ReplaceList(Of T)(IList, IEnumerable(Of T))
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetDeclaredTypeOfPropertyOrField(System.Reflection.MemberInfo)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.GetDeclaredTypeOfPropertyOrField(System.Reflection.MemberInfo)
  id: GetDeclaredTypeOfPropertyOrField(System.Reflection.MemberInfo)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: GetDeclaredTypeOfPropertyOrField(MemberInfo)
  nameWithType: ReflectionUtils.GetDeclaredTypeOfPropertyOrField(MemberInfo)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetDeclaredTypeOfPropertyOrField(System.Reflection.MemberInfo)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetDeclaredTypeOfPropertyOrField
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 261
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Get declared type of field/property <code class="paramref">info</code>.
  example: []
  syntax:
    content: public static Type GetDeclaredTypeOfPropertyOrField(MemberInfo info)
    parameters:
    - id: info
      type: System.Reflection.MemberInfo
    return:
      type: System.Type
    content.vb: Public Shared Function GetDeclaredTypeOfPropertyOrField(info As MemberInfo) As Type
  overload: VRBuilder.Core.Utils.ReflectionUtils.GetDeclaredTypeOfPropertyOrField*
- uid: VRBuilder.Core.Utils.ReflectionUtils.IsProperty(System.Reflection.MemberInfo)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.IsProperty(System.Reflection.MemberInfo)
  id: IsProperty(System.Reflection.MemberInfo)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: IsProperty(MemberInfo)
  nameWithType: ReflectionUtils.IsProperty(MemberInfo)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.IsProperty(System.Reflection.MemberInfo)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IsProperty
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 279
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Is given <code class="paramref">memberInfo</code> a PropertyInfo?
  example: []
  syntax:
    content: public static bool IsProperty(MemberInfo memberInfo)
    parameters:
    - id: memberInfo
      type: System.Reflection.MemberInfo
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsProperty(memberInfo As MemberInfo) As Boolean
  overload: VRBuilder.Core.Utils.ReflectionUtils.IsProperty*
- uid: VRBuilder.Core.Utils.ReflectionUtils.IsField(System.Reflection.MemberInfo)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.IsField(System.Reflection.MemberInfo)
  id: IsField(System.Reflection.MemberInfo)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: IsField(MemberInfo)
  nameWithType: ReflectionUtils.IsField(MemberInfo)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.IsField(System.Reflection.MemberInfo)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IsField
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 287
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Is given <code class="paramref">memberInfo</code> a FieldInfo?
  example: []
  syntax:
    content: public static bool IsField(MemberInfo memberInfo)
    parameters:
    - id: memberInfo
      type: System.Reflection.MemberInfo
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsField(memberInfo As MemberInfo) As Boolean
  overload: VRBuilder.Core.Utils.ReflectionUtils.IsField*
- uid: VRBuilder.Core.Utils.ReflectionUtils.SetValueToPropertyOrField(System.Object,System.Reflection.MemberInfo,System.Object)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.SetValueToPropertyOrField(System.Object,System.Reflection.MemberInfo,System.Object)
  id: SetValueToPropertyOrField(System.Object,System.Reflection.MemberInfo,System.Object)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: SetValueToPropertyOrField(object, MemberInfo, object)
  nameWithType: ReflectionUtils.SetValueToPropertyOrField(object, MemberInfo, object)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.SetValueToPropertyOrField(object, System.Reflection.MemberInfo, object)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: SetValueToPropertyOrField
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 295
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Set <code class="paramref">value</code> to property/field <code class="paramref">member</code> of object <code class="paramref">owner</code>.
  example: []
  syntax:
    content: public static void SetValueToPropertyOrField(object owner, MemberInfo member, object value)
    parameters:
    - id: owner
      type: System.Object
    - id: member
      type: System.Reflection.MemberInfo
    - id: value
      type: System.Object
    content.vb: Public Shared Sub SetValueToPropertyOrField(owner As Object, member As MemberInfo, value As Object)
  overload: VRBuilder.Core.Utils.ReflectionUtils.SetValueToPropertyOrField*
  nameWithType.vb: ReflectionUtils.SetValueToPropertyOrField(Object, MemberInfo, Object)
  fullName.vb: VRBuilder.Core.Utils.ReflectionUtils.SetValueToPropertyOrField(Object, System.Reflection.MemberInfo, Object)
  name.vb: SetValueToPropertyOrField(Object, MemberInfo, Object)
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetValueFromPropertyOrField(System.Object,System.Reflection.MemberInfo)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.GetValueFromPropertyOrField(System.Object,System.Reflection.MemberInfo)
  id: GetValueFromPropertyOrField(System.Object,System.Reflection.MemberInfo)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: GetValueFromPropertyOrField(object, MemberInfo)
  nameWithType: ReflectionUtils.GetValueFromPropertyOrField(object, MemberInfo)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetValueFromPropertyOrField(object, System.Reflection.MemberInfo)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetValueFromPropertyOrField
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 314
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Get value from property/field <code class="paramref">member</code> of object <code class="paramref">owner</code>
  example: []
  syntax:
    content: public static object GetValueFromPropertyOrField(object owner, MemberInfo member)
    parameters:
    - id: owner
      type: System.Object
    - id: member
      type: System.Reflection.MemberInfo
    return:
      type: System.Object
    content.vb: Public Shared Function GetValueFromPropertyOrField(owner As Object, member As MemberInfo) As Object
  overload: VRBuilder.Core.Utils.ReflectionUtils.GetValueFromPropertyOrField*
  nameWithType.vb: ReflectionUtils.GetValueFromPropertyOrField(Object, MemberInfo)
  fullName.vb: VRBuilder.Core.Utils.ReflectionUtils.GetValueFromPropertyOrField(Object, System.Reflection.MemberInfo)
  name.vb: GetValueFromPropertyOrField(Object, MemberInfo)
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetTypeFromAssemblyQualifiedName(System.String)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.GetTypeFromAssemblyQualifiedName(System.String)
  id: GetTypeFromAssemblyQualifiedName(System.String)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: GetTypeFromAssemblyQualifiedName(string)
  nameWithType: ReflectionUtils.GetTypeFromAssemblyQualifiedName(string)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetTypeFromAssemblyQualifiedName(string)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetTypeFromAssemblyQualifiedName
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 330
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Returns the type from <code class="paramref">assemblyQualifiedName</code> or null if not found.
  example: []
  syntax:
    content: public static Type GetTypeFromAssemblyQualifiedName(string assemblyQualifiedName)
    parameters:
    - id: assemblyQualifiedName
      type: System.String
    return:
      type: System.Type
    content.vb: Public Shared Function GetTypeFromAssemblyQualifiedName(assemblyQualifiedName As String) As Type
  overload: VRBuilder.Core.Utils.ReflectionUtils.GetTypeFromAssemblyQualifiedName*
  nameWithType.vb: ReflectionUtils.GetTypeFromAssemblyQualifiedName(String)
  fullName.vb: VRBuilder.Core.Utils.ReflectionUtils.GetTypeFromAssemblyQualifiedName(String)
  name.vb: GetTypeFromAssemblyQualifiedName(String)
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetFinalImplementationsOf``1(System.Type[])
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.GetFinalImplementationsOf``1(System.Type[])
  id: GetFinalImplementationsOf``1(System.Type[])
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: GetFinalImplementationsOf<T>(params Type[])
  nameWithType: ReflectionUtils.GetFinalImplementationsOf<T>(params Type[])
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetFinalImplementationsOf<T>(params System.Type[])
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetFinalImplementationsOf
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 344
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: >-
    Return an IEnumerable of types which inherit <code class="typeparamref">T</code> and are not inherited by any other type.

    It is sorted by priority. <code class="paramref">lowestPriorityTypes</code> come at the end.
  example: []
  syntax:
    content: public static IEnumerable<Type> GetFinalImplementationsOf<T>(params Type[] lowestPriorityTypes)
    parameters:
    - id: lowestPriorityTypes
      type: System.Type[]
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
    content.vb: Public Shared Function GetFinalImplementationsOf(Of T)(ParamArray lowestPriorityTypes As Type()) As IEnumerable(Of Type)
  overload: VRBuilder.Core.Utils.ReflectionUtils.GetFinalImplementationsOf*
  nameWithType.vb: ReflectionUtils.GetFinalImplementationsOf(Of T)(ParamArray Type())
  fullName.vb: VRBuilder.Core.Utils.ReflectionUtils.GetFinalImplementationsOf(Of T)(ParamArray System.Type())
  name.vb: GetFinalImplementationsOf(Of T)(ParamArray Type())
- uid: VRBuilder.Core.Utils.ReflectionUtils.IsSubclassOfGenericDefinition(System.Type,System.Type)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.IsSubclassOfGenericDefinition(System.Type,System.Type)
  id: IsSubclassOfGenericDefinition(System.Type,System.Type)
  isExtensionMethod: true
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: IsSubclassOfGenericDefinition(Type, Type)
  nameWithType: ReflectionUtils.IsSubclassOfGenericDefinition(Type, Type)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.IsSubclassOfGenericDefinition(System.Type, System.Type)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IsSubclassOfGenericDefinition
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 360
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Check if <code class="paramref">type</code> inherits from <code class="paramref">genericDefinition</code>.
  example: []
  syntax:
    content: public static bool IsSubclassOfGenericDefinition(this Type typeToCheck, Type genericDefinition)
    parameters:
    - id: typeToCheck
      type: System.Type
    - id: genericDefinition
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsSubclassOfGenericDefinition(typeToCheck As Type, genericDefinition As Type) As Boolean
  overload: VRBuilder.Core.Utils.ReflectionUtils.IsSubclassOfGenericDefinition*
- uid: VRBuilder.Core.Utils.ReflectionUtils.IsEmpty(System.Object)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.IsEmpty(System.Object)
  id: IsEmpty(System.Object)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: IsEmpty(object)
  nameWithType: ReflectionUtils.IsEmpty(object)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.IsEmpty(object)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IsEmpty
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 386
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Determines if the given object is empty.
  example: []
  syntax:
    content: public static bool IsEmpty(object value)
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsEmpty(value As Object) As Boolean
  overload: VRBuilder.Core.Utils.ReflectionUtils.IsEmpty*
  nameWithType.vb: ReflectionUtils.IsEmpty(Object)
  fullName.vb: VRBuilder.Core.Utils.ReflectionUtils.IsEmpty(Object)
  name.vb: IsEmpty(Object)
- uid: VRBuilder.Core.Utils.ReflectionUtils.IsNumeric(System.Type)
  commentId: M:VRBuilder.Core.Utils.ReflectionUtils.IsNumeric(System.Type)
  id: IsNumeric(System.Type)
  parent: VRBuilder.Core.Utils.ReflectionUtils
  langs:
  - csharp
  - vb
  name: IsNumeric(Type)
  nameWithType: ReflectionUtils.IsNumeric(Type)
  fullName: VRBuilder.Core.Utils.ReflectionUtils.IsNumeric(System.Type)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Utils/ReflectionUtils.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IsNumeric
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Utils/ReflectionUtils.cs
    startLine: 409
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Utils
  summary: Checks if the given type is a number.
  example: []
  syntax:
    content: public static bool IsNumeric(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNumeric(type As Type) As Boolean
  overload: VRBuilder.Core.Utils.ReflectionUtils.IsNumeric*
references:
- uid: VRBuilder.Core.Utils
  commentId: N:VRBuilder.Core.Utils
  href: VRBuilder.html
  name: VRBuilder.Core.Utils
  nameWithType: VRBuilder.Core.Utils
  fullName: VRBuilder.Core.Utils
  spec.csharp:
  - uid: VRBuilder
    name: VRBuilder
    href: VRBuilder.html
  - name: .
  - uid: VRBuilder.Core
    name: Core
    href: VRBuilder.Core.html
  - name: .
  - uid: VRBuilder.Core.Utils
    name: Utils
    href: VRBuilder.Core.Utils.html
  spec.vb:
  - uid: VRBuilder
    name: VRBuilder
    href: VRBuilder.html
  - name: .
  - uid: VRBuilder.Core
    name: Core
    href: VRBuilder.Core.html
  - name: .
  - uid: VRBuilder.Core.Utils
    name: Utils
    href: VRBuilder.Core.Utils.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetNameWithNesting*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.GetNameWithNesting
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_GetNameWithNesting_System_Type_
  name: GetNameWithNesting
  nameWithType: ReflectionUtils.GetNameWithNesting
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetNameWithNesting
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetEntryType*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.GetEntryType
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_GetEntryType_System_Object_
  name: GetEntryType
  nameWithType: ReflectionUtils.GetEntryType
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetEntryType
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetAllTypes*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.GetAllTypes
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_GetAllTypes
  name: GetAllTypes
  nameWithType: ReflectionUtils.GetAllTypes
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetAllTypes
- uid: System.Collections.Generic.IEnumerable{System.Type}
  commentId: T:System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  nameWithType.vb: IEnumerable(Of Type)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetConcreteImplementationsOf*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.GetConcreteImplementationsOf
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_GetConcreteImplementationsOf_System_Type_
  name: GetConcreteImplementationsOf
  nameWithType: ReflectionUtils.GetConcreteImplementationsOf
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetConcreteImplementationsOf
- uid: VRBuilder.Core.Utils.ReflectionUtils.WhichHaveAttribute*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.WhichHaveAttribute
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_WhichHaveAttribute__1_System_Collections_Generic_IEnumerable_System_Type__
  name: WhichHaveAttribute
  nameWithType: ReflectionUtils.WhichHaveAttribute
  fullName: VRBuilder.Core.Utils.ReflectionUtils.WhichHaveAttribute
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetAttribute*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.GetAttribute
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_GetAttribute__1_System_Type_System_Boolean_
  name: GetAttribute
  nameWithType: ReflectionUtils.GetAttribute
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetAttribute
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: VRBuilder.Core.Utils.ReflectionUtils.CreateInstanceOfType*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.CreateInstanceOfType
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_CreateInstanceOfType_System_Type_
  name: CreateInstanceOfType
  nameWithType: ReflectionUtils.CreateInstanceOfType
  fullName: VRBuilder.Core.Utils.ReflectionUtils.CreateInstanceOfType
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetDefault*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.GetDefault
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_GetDefault_System_Type_
  name: GetDefault
  nameWithType: ReflectionUtils.GetDefault
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetDefault
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetGenericDictionaryInterface*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.GetGenericDictionaryInterface
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_GetGenericDictionaryInterface_System_Object_
  name: GetGenericDictionaryInterface
  nameWithType: ReflectionUtils.GetGenericDictionaryInterface
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetGenericDictionaryInterface
- uid: VRBuilder.Core.Utils.ReflectionUtils.RemoveFromList*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.RemoveFromList
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_RemoveFromList_System_Collections_IList__System_Int32_
  name: RemoveFromList
  nameWithType: ReflectionUtils.RemoveFromList
  fullName: VRBuilder.Core.Utils.ReflectionUtils.RemoveFromList
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ilist
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: VRBuilder.Core.Utils.ReflectionUtils.InsertIntoList*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.InsertIntoList
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_InsertIntoList_System_Collections_IList__System_Int32_System_Object_
  name: InsertIntoList
  nameWithType: ReflectionUtils.InsertIntoList
  fullName: VRBuilder.Core.Utils.ReflectionUtils.InsertIntoList
- uid: VRBuilder.Core.Utils.ReflectionUtils.ReplaceList*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.ReplaceList
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_ReplaceList__1_System_Collections_IList__System_Collections_Generic_IEnumerable___0__
  name: ReplaceList
  nameWithType: ReflectionUtils.ReplaceList
  fullName: VRBuilder.Core.Utils.ReflectionUtils.ReplaceList
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetDeclaredTypeOfPropertyOrField*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.GetDeclaredTypeOfPropertyOrField
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_GetDeclaredTypeOfPropertyOrField_System_Reflection_MemberInfo_
  name: GetDeclaredTypeOfPropertyOrField
  nameWithType: ReflectionUtils.GetDeclaredTypeOfPropertyOrField
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetDeclaredTypeOfPropertyOrField
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.reflection.memberinfo
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Reflection
    name: Reflection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Reflection
    name: Reflection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection
- uid: VRBuilder.Core.Utils.ReflectionUtils.IsProperty*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.IsProperty
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_IsProperty_System_Reflection_MemberInfo_
  name: IsProperty
  nameWithType: ReflectionUtils.IsProperty
  fullName: VRBuilder.Core.Utils.ReflectionUtils.IsProperty
- uid: VRBuilder.Core.Utils.ReflectionUtils.IsField*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.IsField
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_IsField_System_Reflection_MemberInfo_
  name: IsField
  nameWithType: ReflectionUtils.IsField
  fullName: VRBuilder.Core.Utils.ReflectionUtils.IsField
- uid: VRBuilder.Core.Utils.ReflectionUtils.SetValueToPropertyOrField*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.SetValueToPropertyOrField
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_SetValueToPropertyOrField_System_Object_System_Reflection_MemberInfo_System_Object_
  name: SetValueToPropertyOrField
  nameWithType: ReflectionUtils.SetValueToPropertyOrField
  fullName: VRBuilder.Core.Utils.ReflectionUtils.SetValueToPropertyOrField
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetValueFromPropertyOrField*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.GetValueFromPropertyOrField
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_GetValueFromPropertyOrField_System_Object_System_Reflection_MemberInfo_
  name: GetValueFromPropertyOrField
  nameWithType: ReflectionUtils.GetValueFromPropertyOrField
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetValueFromPropertyOrField
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetTypeFromAssemblyQualifiedName*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.GetTypeFromAssemblyQualifiedName
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_GetTypeFromAssemblyQualifiedName_System_String_
  name: GetTypeFromAssemblyQualifiedName
  nameWithType: ReflectionUtils.GetTypeFromAssemblyQualifiedName
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetTypeFromAssemblyQualifiedName
- uid: VRBuilder.Core.Utils.ReflectionUtils.GetFinalImplementationsOf*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.GetFinalImplementationsOf
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_GetFinalImplementationsOf__1_System_Type___
  name: GetFinalImplementationsOf
  nameWithType: ReflectionUtils.GetFinalImplementationsOf
  fullName: VRBuilder.Core.Utils.ReflectionUtils.GetFinalImplementationsOf
- uid: System.Type[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: (
  - name: )
- uid: VRBuilder.Core.Utils.ReflectionUtils.IsSubclassOfGenericDefinition*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.IsSubclassOfGenericDefinition
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_IsSubclassOfGenericDefinition_System_Type_System_Type_
  name: IsSubclassOfGenericDefinition
  nameWithType: ReflectionUtils.IsSubclassOfGenericDefinition
  fullName: VRBuilder.Core.Utils.ReflectionUtils.IsSubclassOfGenericDefinition
- uid: VRBuilder.Core.Utils.ReflectionUtils.IsEmpty*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.IsEmpty
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_IsEmpty_System_Object_
  name: IsEmpty
  nameWithType: ReflectionUtils.IsEmpty
  fullName: VRBuilder.Core.Utils.ReflectionUtils.IsEmpty
- uid: VRBuilder.Core.Utils.ReflectionUtils.IsNumeric*
  commentId: Overload:VRBuilder.Core.Utils.ReflectionUtils.IsNumeric
  href: VRBuilder.Core.Utils.ReflectionUtils.html#VRBuilder_Core_Utils_ReflectionUtils_IsNumeric_System_Type_
  name: IsNumeric
  nameWithType: ReflectionUtils.IsNumeric
  fullName: VRBuilder.Core.Utils.ReflectionUtils.IsNumeric
