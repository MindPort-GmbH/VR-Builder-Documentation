### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.SceneObjects.SceneObjectReference
  commentId: T:VRBuilder.Core.SceneObjects.SceneObjectReference
  id: SceneObjectReference
  parent: VRBuilder.Core.SceneObjects
  children:
  - VRBuilder.Core.SceneObjects.SceneObjectReference.#ctor
  - VRBuilder.Core.SceneObjects.SceneObjectReference.#ctor(System.String)
  - VRBuilder.Core.SceneObjects.SceneObjectReference.DetermineValue(VRBuilder.Core.SceneObjects.ISceneObject)
  langs:
  - csharp
  - vb
  name: SceneObjectReference
  nameWithType: SceneObjectReference
  fullName: VRBuilder.Core.SceneObjects.SceneObjectReference
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/SceneObjectReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: SceneObjectReference
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/SceneObjectReference.cs
    startLine: 13
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nWeak reference by a unique name to a process object in a scene.\n"
  example: []
  syntax:
    content: >-
      [DataContract(IsReference = true)]

      [Obsolete("Use ProcessSceneReferenceBase and derived classes to store references to objects in the scene.")]

      public sealed class SceneObjectReference : ObjectReference<ISceneObject>, ICanBeEmpty
    content.vb: >-
      <DataContract(IsReference:=True)>

      <Obsolete("Use ProcessSceneReferenceBase and derived classes to store references to objects in the scene.")>

      Public NotInheritable Class SceneObjectReference
          Inherits ObjectReference(Of ISceneObject)
          Implements ICanBeEmpty
  inheritance:
  - System.Object
  - VRBuilder.Core.SceneObjects.UniqueNameReference
  - VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}
  implements:
  - VRBuilder.Core.Runtime.Properties.ICanBeEmpty
  inheritedMembers:
  - VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}.UniqueName
  - VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}.Value
  - VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}.IsEmpty
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: IsReference
      type: System.Boolean
      value: true
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use ProcessSceneReferenceBase and derived classes to store references to objects in the scene.
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: VRBuilder.Core.SceneObjects.SceneObjectReference.#ctor
  commentId: M:VRBuilder.Core.SceneObjects.SceneObjectReference.#ctor
  id: '#ctor'
  parent: VRBuilder.Core.SceneObjects.SceneObjectReference
  langs:
  - csharp
  - vb
  name: SceneObjectReference()
  nameWithType: SceneObjectReference.SceneObjectReference()
  fullName: VRBuilder.Core.SceneObjects.SceneObjectReference.SceneObjectReference()
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/SceneObjectReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/SceneObjectReference.cs
    startLine: 17
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  syntax:
    content: public SceneObjectReference()
    content.vb: Public Sub New
  overload: VRBuilder.Core.SceneObjects.SceneObjectReference.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.SceneObjects.SceneObjectReference.#ctor(System.String)
  commentId: M:VRBuilder.Core.SceneObjects.SceneObjectReference.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: VRBuilder.Core.SceneObjects.SceneObjectReference
  langs:
  - csharp
  - vb
  name: SceneObjectReference(String)
  nameWithType: SceneObjectReference.SceneObjectReference(String)
  fullName: VRBuilder.Core.SceneObjects.SceneObjectReference.SceneObjectReference(System.String)
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/SceneObjectReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/SceneObjectReference.cs
    startLine: 21
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  syntax:
    content: public SceneObjectReference(string uniqueName)
    parameters:
    - id: uniqueName
      type: System.String
    content.vb: Public Sub New(uniqueName As String)
  overload: VRBuilder.Core.SceneObjects.SceneObjectReference.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.SceneObjects.SceneObjectReference.DetermineValue(VRBuilder.Core.SceneObjects.ISceneObject)
  commentId: M:VRBuilder.Core.SceneObjects.SceneObjectReference.DetermineValue(VRBuilder.Core.SceneObjects.ISceneObject)
  id: DetermineValue(VRBuilder.Core.SceneObjects.ISceneObject)
  parent: VRBuilder.Core.SceneObjects.SceneObjectReference
  langs:
  - csharp
  - vb
  name: DetermineValue(ISceneObject)
  nameWithType: SceneObjectReference.DetermineValue(ISceneObject)
  fullName: VRBuilder.Core.SceneObjects.SceneObjectReference.DetermineValue(VRBuilder.Core.SceneObjects.ISceneObject)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/SceneObjectReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: DetermineValue
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/SceneObjectReference.cs
    startLine: 25
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  syntax:
    content: protected override ISceneObject DetermineValue(ISceneObject cached)
    parameters:
    - id: cached
      type: VRBuilder.Core.SceneObjects.ISceneObject
    return:
      type: VRBuilder.Core.SceneObjects.ISceneObject
    content.vb: Protected Overrides Function DetermineValue(cached As ISceneObject) As ISceneObject
  overridden: VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}.DetermineValue(VRBuilder.Core.SceneObjects.ISceneObject)
  overload: VRBuilder.Core.SceneObjects.SceneObjectReference.DetermineValue*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: VRBuilder.Core.SceneObjects
  commentId: N:VRBuilder.Core.SceneObjects
  name: VRBuilder.Core.SceneObjects
  nameWithType: VRBuilder.Core.SceneObjects
  fullName: VRBuilder.Core.SceneObjects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Core.SceneObjects.UniqueNameReference
  commentId: T:VRBuilder.Core.SceneObjects.UniqueNameReference
  parent: VRBuilder.Core.SceneObjects
  name: UniqueNameReference
  nameWithType: UniqueNameReference
  fullName: VRBuilder.Core.SceneObjects.UniqueNameReference
- uid: VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}
  commentId: T:VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}
  parent: VRBuilder.Core.SceneObjects
  definition: VRBuilder.Core.SceneObjects.ObjectReference`1
  name: ObjectReference<ISceneObject>
  nameWithType: ObjectReference<ISceneObject>
  fullName: VRBuilder.Core.SceneObjects.ObjectReference<VRBuilder.Core.SceneObjects.ISceneObject>
  nameWithType.vb: ObjectReference(Of ISceneObject)
  fullName.vb: VRBuilder.Core.SceneObjects.ObjectReference(Of VRBuilder.Core.SceneObjects.ISceneObject)
  name.vb: ObjectReference(Of ISceneObject)
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ObjectReference`1
    name: ObjectReference
    nameWithType: ObjectReference
    fullName: VRBuilder.Core.SceneObjects.ObjectReference
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.SceneObjects.ISceneObject
    name: ISceneObject
    nameWithType: ISceneObject
    fullName: VRBuilder.Core.SceneObjects.ISceneObject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ObjectReference`1
    name: ObjectReference
    nameWithType: ObjectReference
    fullName: VRBuilder.Core.SceneObjects.ObjectReference
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.SceneObjects.ISceneObject
    name: ISceneObject
    nameWithType: ISceneObject
    fullName: VRBuilder.Core.SceneObjects.ISceneObject
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Runtime.Properties.ICanBeEmpty
  commentId: T:VRBuilder.Core.Runtime.Properties.ICanBeEmpty
  parent: VRBuilder.Core.Runtime.Properties
  name: ICanBeEmpty
  nameWithType: ICanBeEmpty
  fullName: VRBuilder.Core.Runtime.Properties.ICanBeEmpty
- uid: VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}.UniqueName
  commentId: P:VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}.UniqueName
  parent: VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}
  definition: VRBuilder.Core.SceneObjects.ObjectReference`1.UniqueName
  name: UniqueName
  nameWithType: ObjectReference<ISceneObject>.UniqueName
  fullName: VRBuilder.Core.SceneObjects.ObjectReference<VRBuilder.Core.SceneObjects.ISceneObject>.UniqueName
  nameWithType.vb: ObjectReference(Of ISceneObject).UniqueName
  fullName.vb: VRBuilder.Core.SceneObjects.ObjectReference(Of VRBuilder.Core.SceneObjects.ISceneObject).UniqueName
- uid: VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}.Value
  commentId: P:VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}.Value
  parent: VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}
  definition: VRBuilder.Core.SceneObjects.ObjectReference`1.Value
  name: Value
  nameWithType: ObjectReference<ISceneObject>.Value
  fullName: VRBuilder.Core.SceneObjects.ObjectReference<VRBuilder.Core.SceneObjects.ISceneObject>.Value
  nameWithType.vb: ObjectReference(Of ISceneObject).Value
  fullName.vb: VRBuilder.Core.SceneObjects.ObjectReference(Of VRBuilder.Core.SceneObjects.ISceneObject).Value
- uid: VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}.IsEmpty
  commentId: M:VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}.IsEmpty
  parent: VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}
  definition: VRBuilder.Core.SceneObjects.ObjectReference`1.IsEmpty
  name: IsEmpty()
  nameWithType: ObjectReference<ISceneObject>.IsEmpty()
  fullName: VRBuilder.Core.SceneObjects.ObjectReference<VRBuilder.Core.SceneObjects.ISceneObject>.IsEmpty()
  nameWithType.vb: ObjectReference(Of ISceneObject).IsEmpty()
  fullName.vb: VRBuilder.Core.SceneObjects.ObjectReference(Of VRBuilder.Core.SceneObjects.ISceneObject).IsEmpty()
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ObjectReference`1.IsEmpty
    name: IsEmpty
    nameWithType: ObjectReference<ISceneObject>.IsEmpty
    fullName: VRBuilder.Core.SceneObjects.ObjectReference<VRBuilder.Core.SceneObjects.ISceneObject>.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ObjectReference`1.IsEmpty
    name: IsEmpty
    nameWithType: ObjectReference(Of ISceneObject).IsEmpty
    fullName: VRBuilder.Core.SceneObjects.ObjectReference(Of VRBuilder.Core.SceneObjects.ISceneObject).IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.SceneObjects.ObjectReference`1
  commentId: T:VRBuilder.Core.SceneObjects.ObjectReference`1
  parent: VRBuilder.Core.SceneObjects
  name: ObjectReference<T>
  nameWithType: ObjectReference<T>
  fullName: VRBuilder.Core.SceneObjects.ObjectReference<T>
  nameWithType.vb: ObjectReference(Of T)
  fullName.vb: VRBuilder.Core.SceneObjects.ObjectReference(Of T)
  name.vb: ObjectReference(Of T)
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ObjectReference`1
    name: ObjectReference
    nameWithType: ObjectReference
    fullName: VRBuilder.Core.SceneObjects.ObjectReference
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ObjectReference`1
    name: ObjectReference
    nameWithType: ObjectReference
    fullName: VRBuilder.Core.SceneObjects.ObjectReference
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Runtime.Properties
  commentId: N:VRBuilder.Core.Runtime.Properties
  name: VRBuilder.Core.Runtime.Properties
  nameWithType: VRBuilder.Core.Runtime.Properties
  fullName: VRBuilder.Core.Runtime.Properties
- uid: VRBuilder.Core.SceneObjects.ObjectReference`1.UniqueName
  commentId: P:VRBuilder.Core.SceneObjects.ObjectReference`1.UniqueName
  name: UniqueName
  nameWithType: ObjectReference<T>.UniqueName
  fullName: VRBuilder.Core.SceneObjects.ObjectReference<T>.UniqueName
  nameWithType.vb: ObjectReference(Of T).UniqueName
  fullName.vb: VRBuilder.Core.SceneObjects.ObjectReference(Of T).UniqueName
- uid: VRBuilder.Core.SceneObjects.ObjectReference`1.Value
  commentId: P:VRBuilder.Core.SceneObjects.ObjectReference`1.Value
  name: Value
  nameWithType: ObjectReference<T>.Value
  fullName: VRBuilder.Core.SceneObjects.ObjectReference<T>.Value
  nameWithType.vb: ObjectReference(Of T).Value
  fullName.vb: VRBuilder.Core.SceneObjects.ObjectReference(Of T).Value
- uid: VRBuilder.Core.SceneObjects.ObjectReference`1.IsEmpty
  commentId: M:VRBuilder.Core.SceneObjects.ObjectReference`1.IsEmpty
  name: IsEmpty()
  nameWithType: ObjectReference<T>.IsEmpty()
  fullName: VRBuilder.Core.SceneObjects.ObjectReference<T>.IsEmpty()
  nameWithType.vb: ObjectReference(Of T).IsEmpty()
  fullName.vb: VRBuilder.Core.SceneObjects.ObjectReference(Of T).IsEmpty()
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ObjectReference`1.IsEmpty
    name: IsEmpty
    nameWithType: ObjectReference<T>.IsEmpty
    fullName: VRBuilder.Core.SceneObjects.ObjectReference<T>.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ObjectReference`1.IsEmpty
    name: IsEmpty
    nameWithType: ObjectReference(Of T).IsEmpty
    fullName: VRBuilder.Core.SceneObjects.ObjectReference(Of T).IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.SceneObjects.SceneObjectReference.#ctor*
  commentId: Overload:VRBuilder.Core.SceneObjects.SceneObjectReference.#ctor
  name: SceneObjectReference
  nameWithType: SceneObjectReference.SceneObjectReference
  fullName: VRBuilder.Core.SceneObjects.SceneObjectReference.SceneObjectReference
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}.DetermineValue(VRBuilder.Core.SceneObjects.ISceneObject)
  commentId: M:VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}.DetermineValue(VRBuilder.Core.SceneObjects.ISceneObject)
  parent: VRBuilder.Core.SceneObjects.ObjectReference{VRBuilder.Core.SceneObjects.ISceneObject}
  definition: VRBuilder.Core.SceneObjects.ObjectReference`1.DetermineValue(`0)
  name: DetermineValue(ISceneObject)
  nameWithType: ObjectReference<ISceneObject>.DetermineValue(ISceneObject)
  fullName: VRBuilder.Core.SceneObjects.ObjectReference<VRBuilder.Core.SceneObjects.ISceneObject>.DetermineValue(VRBuilder.Core.SceneObjects.ISceneObject)
  nameWithType.vb: ObjectReference(Of ISceneObject).DetermineValue(ISceneObject)
  fullName.vb: VRBuilder.Core.SceneObjects.ObjectReference(Of VRBuilder.Core.SceneObjects.ISceneObject).DetermineValue(VRBuilder.Core.SceneObjects.ISceneObject)
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ObjectReference`1.DetermineValue(`0)
    name: DetermineValue
    nameWithType: ObjectReference<ISceneObject>.DetermineValue
    fullName: VRBuilder.Core.SceneObjects.ObjectReference<VRBuilder.Core.SceneObjects.ISceneObject>.DetermineValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.SceneObjects.ISceneObject
    name: ISceneObject
    nameWithType: ISceneObject
    fullName: VRBuilder.Core.SceneObjects.ISceneObject
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ObjectReference`1.DetermineValue(`0)
    name: DetermineValue
    nameWithType: ObjectReference(Of ISceneObject).DetermineValue
    fullName: VRBuilder.Core.SceneObjects.ObjectReference(Of VRBuilder.Core.SceneObjects.ISceneObject).DetermineValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.SceneObjects.ISceneObject
    name: ISceneObject
    nameWithType: ISceneObject
    fullName: VRBuilder.Core.SceneObjects.ISceneObject
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.SceneObjects.SceneObjectReference.DetermineValue*
  commentId: Overload:VRBuilder.Core.SceneObjects.SceneObjectReference.DetermineValue
  name: DetermineValue
  nameWithType: SceneObjectReference.DetermineValue
  fullName: VRBuilder.Core.SceneObjects.SceneObjectReference.DetermineValue
- uid: VRBuilder.Core.SceneObjects.ISceneObject
  commentId: T:VRBuilder.Core.SceneObjects.ISceneObject
  parent: VRBuilder.Core.SceneObjects
  name: ISceneObject
  nameWithType: ISceneObject
  fullName: VRBuilder.Core.SceneObjects.ISceneObject
- uid: VRBuilder.Core.SceneObjects.ObjectReference`1.DetermineValue(`0)
  commentId: M:VRBuilder.Core.SceneObjects.ObjectReference`1.DetermineValue(`0)
  name: DetermineValue(T)
  nameWithType: ObjectReference<T>.DetermineValue(T)
  fullName: VRBuilder.Core.SceneObjects.ObjectReference<T>.DetermineValue(T)
  nameWithType.vb: ObjectReference(Of T).DetermineValue(T)
  fullName.vb: VRBuilder.Core.SceneObjects.ObjectReference(Of T).DetermineValue(T)
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ObjectReference`1.DetermineValue(`0)
    name: DetermineValue
    nameWithType: ObjectReference<T>.DetermineValue
    fullName: VRBuilder.Core.SceneObjects.ObjectReference<T>.DetermineValue
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ObjectReference`1.DetermineValue(`0)
    name: DetermineValue
    nameWithType: ObjectReference(Of T).DetermineValue
    fullName: VRBuilder.Core.SceneObjects.ObjectReference(Of T).DetermineValue
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
