### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Input.InputActionListener
  commentId: T:VRBuilder.Core.Input.InputActionListener
  id: InputActionListener
  parent: VRBuilder.Core.Input
  children:
  - VRBuilder.Core.Input.InputActionListener.IgnoreFocus
  - VRBuilder.Core.Input.InputActionListener.Priority
  - VRBuilder.Core.Input.InputActionListener.RegisterInputEvent(System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  - VRBuilder.Core.Input.InputActionListener.UnregisterInputEvent(System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  langs:
  - csharp
  - vb
  name: InputActionListener
  nameWithType: InputActionListener
  fullName: VRBuilder.Core.Input.InputActionListener
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Input/InputActionListener.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: InputActionListener
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputActionListener.cs
    startLine: 12
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  summary: "\nBase class for InputActionListener.\n"
  example: []
  syntax:
    content: 'public abstract class InputActionListener : MonoBehaviour, IInputActionListener'
    content.vb: >-
      Public MustInherit Class InputActionListener

          Inherits MonoBehaviour

          Implements IInputActionListener
  inheritance:
  - System.Object
  derivedClasses:
  - VRBuilder.UX.SpectatorController
  implements:
  - VRBuilder.Core.Input.IInputActionListener
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VRBuilder.Core.Input.InputActionListener.Priority
  commentId: P:VRBuilder.Core.Input.InputActionListener.Priority
  id: Priority
  parent: VRBuilder.Core.Input.InputActionListener
  langs:
  - csharp
  - vb
  name: Priority
  nameWithType: InputActionListener.Priority
  fullName: VRBuilder.Core.Input.InputActionListener.Priority
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Input/InputActionListener.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Priority
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputActionListener.cs
    startLine: 15
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  example: []
  syntax:
    content: public virtual int Priority { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable ReadOnly Property Priority As Integer
  overload: VRBuilder.Core.Input.InputActionListener.Priority*
  implements:
  - VRBuilder.Core.Input.IInputActionListener.Priority
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: VRBuilder.Core.Input.InputActionListener.IgnoreFocus
  commentId: P:VRBuilder.Core.Input.InputActionListener.IgnoreFocus
  id: IgnoreFocus
  parent: VRBuilder.Core.Input.InputActionListener
  langs:
  - csharp
  - vb
  name: IgnoreFocus
  nameWithType: InputActionListener.IgnoreFocus
  fullName: VRBuilder.Core.Input.InputActionListener.IgnoreFocus
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Input/InputActionListener.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IgnoreFocus
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputActionListener.cs
    startLine: 18
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  example: []
  syntax:
    content: public virtual bool IgnoreFocus { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IgnoreFocus As Boolean
  overload: VRBuilder.Core.Input.InputActionListener.IgnoreFocus*
  implements:
  - VRBuilder.Core.Input.IInputActionListener.IgnoreFocus
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: VRBuilder.Core.Input.InputActionListener.RegisterInputEvent(System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  commentId: M:VRBuilder.Core.Input.InputActionListener.RegisterInputEvent(System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  id: RegisterInputEvent(System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  parent: VRBuilder.Core.Input.InputActionListener
  langs:
  - csharp
  - vb
  name: RegisterInputEvent(Action<InputController.InputEventArgs>)
  nameWithType: InputActionListener.RegisterInputEvent(Action<InputController.InputEventArgs>)
  fullName: VRBuilder.Core.Input.InputActionListener.RegisterInputEvent(System.Action<VRBuilder.Core.Input.InputController.InputEventArgs>)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Input/InputActionListener.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: RegisterInputEvent
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputActionListener.cs
    startLine: 23
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  summary: "\nRegisters the given method as input event, the name of the method will be the event name.\n"
  example: []
  syntax:
    content: protected virtual void RegisterInputEvent(Action<InputController.InputEventArgs> action)
    parameters:
    - id: action
      type: System.Action{VRBuilder.Core.Input.InputController.InputEventArgs}
    content.vb: Protected Overridable Sub RegisterInputEvent(action As Action(Of InputController.InputEventArgs))
  overload: VRBuilder.Core.Input.InputActionListener.RegisterInputEvent*
  nameWithType.vb: InputActionListener.RegisterInputEvent(Action(Of InputController.InputEventArgs))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: VRBuilder.Core.Input.InputActionListener.RegisterInputEvent(System.Action(Of VRBuilder.Core.Input.InputController.InputEventArgs))
  name.vb: RegisterInputEvent(Action(Of InputController.InputEventArgs))
- uid: VRBuilder.Core.Input.InputActionListener.UnregisterInputEvent(System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  commentId: M:VRBuilder.Core.Input.InputActionListener.UnregisterInputEvent(System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  id: UnregisterInputEvent(System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  parent: VRBuilder.Core.Input.InputActionListener
  langs:
  - csharp
  - vb
  name: UnregisterInputEvent(Action<InputController.InputEventArgs>)
  nameWithType: InputActionListener.UnregisterInputEvent(Action<InputController.InputEventArgs>)
  fullName: VRBuilder.Core.Input.InputActionListener.UnregisterInputEvent(System.Action<VRBuilder.Core.Input.InputController.InputEventArgs>)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Input/InputActionListener.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: UnregisterInputEvent
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputActionListener.cs
    startLine: 31
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  summary: "\nUnregisters the given method as input event, the name of the method will be the event name.\n"
  example: []
  syntax:
    content: protected virtual void UnregisterInputEvent(Action<InputController.InputEventArgs> action)
    parameters:
    - id: action
      type: System.Action{VRBuilder.Core.Input.InputController.InputEventArgs}
    content.vb: Protected Overridable Sub UnregisterInputEvent(action As Action(Of InputController.InputEventArgs))
  overload: VRBuilder.Core.Input.InputActionListener.UnregisterInputEvent*
  nameWithType.vb: InputActionListener.UnregisterInputEvent(Action(Of InputController.InputEventArgs))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: VRBuilder.Core.Input.InputActionListener.UnregisterInputEvent(System.Action(Of VRBuilder.Core.Input.InputController.InputEventArgs))
  name.vb: UnregisterInputEvent(Action(Of InputController.InputEventArgs))
references:
- uid: VRBuilder.Core.Input
  commentId: N:VRBuilder.Core.Input
  name: VRBuilder.Core.Input
  nameWithType: VRBuilder.Core.Input
  fullName: VRBuilder.Core.Input
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Core.Input.IInputActionListener
  commentId: T:VRBuilder.Core.Input.IInputActionListener
  parent: VRBuilder.Core.Input
  name: IInputActionListener
  nameWithType: IInputActionListener
  fullName: VRBuilder.Core.Input.IInputActionListener
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.Input.InputActionListener.Priority*
  commentId: Overload:VRBuilder.Core.Input.InputActionListener.Priority
  name: Priority
  nameWithType: InputActionListener.Priority
  fullName: VRBuilder.Core.Input.InputActionListener.Priority
- uid: VRBuilder.Core.Input.IInputActionListener.Priority
  commentId: P:VRBuilder.Core.Input.IInputActionListener.Priority
  parent: VRBuilder.Core.Input.IInputActionListener
  name: Priority
  nameWithType: IInputActionListener.Priority
  fullName: VRBuilder.Core.Input.IInputActionListener.Priority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VRBuilder.Core.Input.InputActionListener.IgnoreFocus*
  commentId: Overload:VRBuilder.Core.Input.InputActionListener.IgnoreFocus
  name: IgnoreFocus
  nameWithType: InputActionListener.IgnoreFocus
  fullName: VRBuilder.Core.Input.InputActionListener.IgnoreFocus
- uid: VRBuilder.Core.Input.IInputActionListener.IgnoreFocus
  commentId: P:VRBuilder.Core.Input.IInputActionListener.IgnoreFocus
  parent: VRBuilder.Core.Input.IInputActionListener
  name: IgnoreFocus
  nameWithType: IInputActionListener.IgnoreFocus
  fullName: VRBuilder.Core.Input.IInputActionListener.IgnoreFocus
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VRBuilder.Core.Input.InputActionListener.RegisterInputEvent*
  commentId: Overload:VRBuilder.Core.Input.InputActionListener.RegisterInputEvent
  name: RegisterInputEvent
  nameWithType: InputActionListener.RegisterInputEvent
  fullName: VRBuilder.Core.Input.InputActionListener.RegisterInputEvent
- uid: System.Action{VRBuilder.Core.Input.InputController.InputEventArgs}
  commentId: T:System.Action{VRBuilder.Core.Input.InputController.InputEventArgs}
  parent: System
  definition: System.Action`1
  name: Action<InputController.InputEventArgs>
  nameWithType: Action<InputController.InputEventArgs>
  fullName: System.Action<VRBuilder.Core.Input.InputController.InputEventArgs>
  nameWithType.vb: Action(Of InputController.InputEventArgs)
  fullName.vb: System.Action(Of VRBuilder.Core.Input.InputController.InputEventArgs)
  name.vb: Action(Of InputController.InputEventArgs)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.Input.InputController.InputEventArgs
    name: InputController.InputEventArgs
    nameWithType: InputController.InputEventArgs
    fullName: VRBuilder.Core.Input.InputController.InputEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.Input.InputController.InputEventArgs
    name: InputController.InputEventArgs
    nameWithType: InputController.InputEventArgs
    fullName: VRBuilder.Core.Input.InputController.InputEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Input.InputActionListener.UnregisterInputEvent*
  commentId: Overload:VRBuilder.Core.Input.InputActionListener.UnregisterInputEvent
  name: UnregisterInputEvent
  nameWithType: InputActionListener.UnregisterInputEvent
  fullName: VRBuilder.Core.Input.InputActionListener.UnregisterInputEvent
