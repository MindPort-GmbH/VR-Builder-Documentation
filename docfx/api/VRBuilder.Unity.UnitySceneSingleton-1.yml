### YamlMime:ManagedReference
items:
- uid: VRBuilder.Unity.UnitySceneSingleton`1
  commentId: T:VRBuilder.Unity.UnitySceneSingleton`1
  id: UnitySceneSingleton`1
  parent: VRBuilder.Unity
  children:
  - VRBuilder.Unity.UnitySceneSingleton`1.Awake
  - VRBuilder.Unity.UnitySceneSingleton`1.ConcreteType
  - VRBuilder.Unity.UnitySceneSingleton`1.Exists
  - VRBuilder.Unity.UnitySceneSingleton`1.GetName
  - VRBuilder.Unity.UnitySceneSingleton`1.Instance
  - VRBuilder.Unity.UnitySceneSingleton`1.OnDestroy
  langs:
  - csharp
  - vb
  name: UnitySceneSingleton<T>
  nameWithType: UnitySceneSingleton<T>
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Unity/UnitySceneSingleton.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: UnitySceneSingleton
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Unity/UnitySceneSingleton.cs
    startLine: 14
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Unity
  summary: "\nAn UnitySceneSingleton is intended to be destroyed on scene change.\n"
  example: []
  syntax:
    content: 'public abstract class UnitySceneSingleton<T> : MonoBehaviour where T : UnitySceneSingleton<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public MustInherit Class UnitySceneSingleton(Of T As UnitySceneSingleton(Of T))
          Inherits MonoBehaviour
  inheritance:
  - System.Object
  derivedClasses:
  - VRBuilder.Core.Input.InputController
  nameWithType.vb: UnitySceneSingleton(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T)
  name.vb: UnitySceneSingleton(Of T)
- uid: VRBuilder.Unity.UnitySceneSingleton`1.ConcreteType
  commentId: P:VRBuilder.Unity.UnitySceneSingleton`1.ConcreteType
  id: ConcreteType
  parent: VRBuilder.Unity.UnitySceneSingleton`1
  langs:
  - csharp
  - vb
  name: ConcreteType
  nameWithType: UnitySceneSingleton<T>.ConcreteType
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.ConcreteType
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Unity/UnitySceneSingleton.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ConcreteType
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Unity/UnitySceneSingleton.cs
    startLine: 24
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Unity
  summary: "\nConcrete Implementation of the given class T, this also allows abstract classes as singletons.\n"
  example: []
  syntax:
    content: public static Type ConcreteType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public Shared ReadOnly Property ConcreteType As Type
  overload: VRBuilder.Unity.UnitySceneSingleton`1.ConcreteType*
  nameWithType.vb: UnitySceneSingleton(Of T).ConcreteType
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).ConcreteType
- uid: VRBuilder.Unity.UnitySceneSingleton`1.Instance
  commentId: P:VRBuilder.Unity.UnitySceneSingleton`1.Instance
  id: Instance
  parent: VRBuilder.Unity.UnitySceneSingleton`1
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: UnitySceneSingleton<T>.Instance
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.Instance
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Unity/UnitySceneSingleton.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Instance
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Unity/UnitySceneSingleton.cs
    startLine: 53
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Unity
  summary: "\nPublic accessor for the singleton object, will create a new instance if necessary.\n"
  example: []
  syntax:
    content: public static T Instance { get; protected set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Shared Property Instance As T
  overload: VRBuilder.Unity.UnitySceneSingleton`1.Instance*
  nameWithType.vb: UnitySceneSingleton(Of T).Instance
  modifiers.csharp:
  - public
  - static
  - get
  - protected set
  modifiers.vb:
  - Public
  - Shared
  - Get
  - Protected Set
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).Instance
- uid: VRBuilder.Unity.UnitySceneSingleton`1.Exists
  commentId: P:VRBuilder.Unity.UnitySceneSingleton`1.Exists
  id: Exists
  parent: VRBuilder.Unity.UnitySceneSingleton`1
  langs:
  - csharp
  - vb
  name: Exists
  nameWithType: UnitySceneSingleton<T>.Exists
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.Exists
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Unity/UnitySceneSingleton.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Exists
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Unity/UnitySceneSingleton.cs
    startLine: 81
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Unity
  syntax:
    content: public static bool Exists { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property Exists As Boolean
  overload: VRBuilder.Unity.UnitySceneSingleton`1.Exists*
  nameWithType.vb: UnitySceneSingleton(Of T).Exists
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).Exists
- uid: VRBuilder.Unity.UnitySceneSingleton`1.GetName
  commentId: M:VRBuilder.Unity.UnitySceneSingleton`1.GetName
  id: GetName
  parent: VRBuilder.Unity.UnitySceneSingleton`1
  langs:
  - csharp
  - vb
  name: GetName()
  nameWithType: UnitySceneSingleton<T>.GetName()
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.GetName()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Unity/UnitySceneSingleton.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetName
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Unity/UnitySceneSingleton.cs
    startLine: 86
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Unity
  syntax:
    content: protected virtual string GetName()
    return:
      type: System.String
    content.vb: Protected Overridable Function GetName As String
  overload: VRBuilder.Unity.UnitySceneSingleton`1.GetName*
  nameWithType.vb: UnitySceneSingleton(Of T).GetName()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).GetName()
- uid: VRBuilder.Unity.UnitySceneSingleton`1.Awake
  commentId: M:VRBuilder.Unity.UnitySceneSingleton`1.Awake
  id: Awake
  parent: VRBuilder.Unity.UnitySceneSingleton`1
  langs:
  - csharp
  - vb
  name: Awake()
  nameWithType: UnitySceneSingleton<T>.Awake()
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.Awake()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Unity/UnitySceneSingleton.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Awake
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Unity/UnitySceneSingleton.cs
    startLine: 91
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Unity
  syntax:
    content: protected virtual void Awake()
    content.vb: Protected Overridable Sub Awake
  overload: VRBuilder.Unity.UnitySceneSingleton`1.Awake*
  nameWithType.vb: UnitySceneSingleton(Of T).Awake()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).Awake()
- uid: VRBuilder.Unity.UnitySceneSingleton`1.OnDestroy
  commentId: M:VRBuilder.Unity.UnitySceneSingleton`1.OnDestroy
  id: OnDestroy
  parent: VRBuilder.Unity.UnitySceneSingleton`1
  langs:
  - csharp
  - vb
  name: OnDestroy()
  nameWithType: UnitySceneSingleton<T>.OnDestroy()
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.OnDestroy()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Unity/UnitySceneSingleton.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: OnDestroy
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Unity/UnitySceneSingleton.cs
    startLine: 109
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Unity
  syntax:
    content: protected virtual void OnDestroy()
    content.vb: Protected Overridable Sub OnDestroy
  overload: VRBuilder.Unity.UnitySceneSingleton`1.OnDestroy*
  nameWithType.vb: UnitySceneSingleton(Of T).OnDestroy()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).OnDestroy()
references:
- uid: VRBuilder.Unity
  commentId: N:VRBuilder.Unity
  name: VRBuilder.Unity
  nameWithType: VRBuilder.Unity
  fullName: VRBuilder.Unity
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Unity.UnitySceneSingleton`1.ConcreteType*
  commentId: Overload:VRBuilder.Unity.UnitySceneSingleton`1.ConcreteType
  name: ConcreteType
  nameWithType: UnitySceneSingleton<T>.ConcreteType
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.ConcreteType
  nameWithType.vb: UnitySceneSingleton(Of T).ConcreteType
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).ConcreteType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: VRBuilder.Unity.UnitySceneSingleton`1.Instance*
  commentId: Overload:VRBuilder.Unity.UnitySceneSingleton`1.Instance
  name: Instance
  nameWithType: UnitySceneSingleton<T>.Instance
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.Instance
  nameWithType.vb: UnitySceneSingleton(Of T).Instance
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).Instance
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: VRBuilder.Unity.UnitySceneSingleton`1.Exists*
  commentId: Overload:VRBuilder.Unity.UnitySceneSingleton`1.Exists
  name: Exists
  nameWithType: UnitySceneSingleton<T>.Exists
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.Exists
  nameWithType.vb: UnitySceneSingleton(Of T).Exists
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).Exists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VRBuilder.Unity.UnitySceneSingleton`1.GetName*
  commentId: Overload:VRBuilder.Unity.UnitySceneSingleton`1.GetName
  name: GetName
  nameWithType: UnitySceneSingleton<T>.GetName
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.GetName
  nameWithType.vb: UnitySceneSingleton(Of T).GetName
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).GetName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VRBuilder.Unity.UnitySceneSingleton`1.Awake*
  commentId: Overload:VRBuilder.Unity.UnitySceneSingleton`1.Awake
  name: Awake
  nameWithType: UnitySceneSingleton<T>.Awake
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.Awake
  nameWithType.vb: UnitySceneSingleton(Of T).Awake
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).Awake
- uid: VRBuilder.Unity.UnitySceneSingleton`1.OnDestroy*
  commentId: Overload:VRBuilder.Unity.UnitySceneSingleton`1.OnDestroy
  name: OnDestroy
  nameWithType: UnitySceneSingleton<T>.OnDestroy
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.OnDestroy
  nameWithType.vb: UnitySceneSingleton(Of T).OnDestroy
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).OnDestroy
