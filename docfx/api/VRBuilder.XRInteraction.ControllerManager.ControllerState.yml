### YamlMime:ManagedReference
items:
- uid: VRBuilder.XRInteraction.ControllerManager.ControllerState
  commentId: T:VRBuilder.XRInteraction.ControllerManager.ControllerState
  id: ControllerManager.ControllerState
  parent: VRBuilder.XRInteraction
  children:
  - VRBuilder.XRInteraction.ControllerManager.ControllerState.ClearAll
  - VRBuilder.XRInteraction.ControllerManager.ControllerState.Initialize
  - VRBuilder.XRInteraction.ControllerManager.ControllerState.IsControllerInteracting(VRBuilder.XRInteraction.ControllerManager.ControllerStates)
  - VRBuilder.XRInteraction.ControllerManager.ControllerState.SetGameObject(VRBuilder.XRInteraction.ControllerManager.ControllerStates,GameObject)
  - VRBuilder.XRInteraction.ControllerManager.ControllerState.SetState(VRBuilder.XRInteraction.ControllerManager.ControllerStates)
  langs:
  - csharp
  - vb
  name: ControllerManager.ControllerState
  nameWithType: ControllerManager.ControllerState
  fullName: VRBuilder.XRInteraction.ControllerManager.ControllerState
  type: Struct
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ControllerState
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
    startLine: 161
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nCurrent status of a controller. there will be two instances of this (for left/right). and this allows\nthe system to change between different states on each controller independently.\n"
  example: []
  syntax:
    content: public struct ControllerState
    content.vb: Public Structure ControllerState
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: VRBuilder.XRInteraction.ControllerManager.ControllerState.Initialize
  commentId: M:VRBuilder.XRInteraction.ControllerManager.ControllerState.Initialize
  id: Initialize
  parent: VRBuilder.XRInteraction.ControllerManager.ControllerState
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: ControllerManager.ControllerState.Initialize()
  fullName: VRBuilder.XRInteraction.ControllerManager.ControllerState.Initialize()
  type: Method
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Initialize
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
    startLine: 169
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nSets up the controller\n"
  example: []
  syntax:
    content: public void Initialize()
    content.vb: Public Sub Initialize
  overload: VRBuilder.XRInteraction.ControllerManager.ControllerState.Initialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.XRInteraction.ControllerManager.ControllerState.ClearAll
  commentId: M:VRBuilder.XRInteraction.ControllerManager.ControllerState.ClearAll
  id: ClearAll
  parent: VRBuilder.XRInteraction.ControllerManager.ControllerState
  langs:
  - csharp
  - vb
  name: ClearAll()
  nameWithType: ControllerManager.ControllerState.ClearAll()
  fullName: VRBuilder.XRInteraction.ControllerManager.ControllerState.ClearAll()
  type: Method
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ClearAll
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
    startLine: 178
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nExits from all states that are in the list, basically a reset.\n"
  example: []
  syntax:
    content: public void ClearAll()
    content.vb: Public Sub ClearAll
  overload: VRBuilder.XRInteraction.ControllerManager.ControllerState.ClearAll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.XRInteraction.ControllerManager.ControllerState.SetGameObject(VRBuilder.XRInteraction.ControllerManager.ControllerStates,GameObject)
  commentId: M:VRBuilder.XRInteraction.ControllerManager.ControllerState.SetGameObject(VRBuilder.XRInteraction.ControllerManager.ControllerStates,GameObject)
  id: SetGameObject(VRBuilder.XRInteraction.ControllerManager.ControllerStates,GameObject)
  parent: VRBuilder.XRInteraction.ControllerManager.ControllerState
  langs:
  - csharp
  - vb
  name: SetGameObject(ControllerManager.ControllerStates, GameObject)
  nameWithType: ControllerManager.ControllerState.SetGameObject(ControllerManager.ControllerStates, GameObject)
  fullName: VRBuilder.XRInteraction.ControllerManager.ControllerState.SetGameObject(VRBuilder.XRInteraction.ControllerManager.ControllerStates, GameObject)
  type: Method
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: SetGameObject
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
    startLine: 196
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nAttaches a game object that represents an interactor for a state, to a state.\n"
  example: []
  syntax:
    content: public void SetGameObject(ControllerManager.ControllerStates state, GameObject parentGamObject)
    parameters:
    - id: state
      type: VRBuilder.XRInteraction.ControllerManager.ControllerStates
      description: The state that we&apos;re attaching the game object to
    - id: parentGamObject
      type: GameObject
      description: The game object that represents the interactor for that state.
    content.vb: Public Sub SetGameObject(state As ControllerManager.ControllerStates, parentGamObject As GameObject)
  overload: VRBuilder.XRInteraction.ControllerManager.ControllerState.SetGameObject*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.XRInteraction.ControllerManager.ControllerState.SetState(VRBuilder.XRInteraction.ControllerManager.ControllerStates)
  commentId: M:VRBuilder.XRInteraction.ControllerManager.ControllerState.SetState(VRBuilder.XRInteraction.ControllerManager.ControllerStates)
  id: SetState(VRBuilder.XRInteraction.ControllerManager.ControllerStates)
  parent: VRBuilder.XRInteraction.ControllerManager.ControllerState
  langs:
  - csharp
  - vb
  name: SetState(ControllerManager.ControllerStates)
  nameWithType: ControllerManager.ControllerState.SetState(ControllerManager.ControllerStates)
  fullName: VRBuilder.XRInteraction.ControllerManager.ControllerState.SetState(VRBuilder.XRInteraction.ControllerManager.ControllerStates)
  type: Method
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: SetState
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
    startLine: 210
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nAttempts to set the current state of a controller.\n"
  example: []
  syntax:
    content: public void SetState(ControllerManager.ControllerStates nextState)
    parameters:
    - id: nextState
      type: VRBuilder.XRInteraction.ControllerManager.ControllerStates
      description: The state that we wish to transition to
    content.vb: Public Sub SetState(nextState As ControllerManager.ControllerStates)
  overload: VRBuilder.XRInteraction.ControllerManager.ControllerState.SetState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.XRInteraction.ControllerManager.ControllerState.IsControllerInteracting(VRBuilder.XRInteraction.ControllerManager.ControllerStates)
  commentId: M:VRBuilder.XRInteraction.ControllerManager.ControllerState.IsControllerInteracting(VRBuilder.XRInteraction.ControllerManager.ControllerStates)
  id: IsControllerInteracting(VRBuilder.XRInteraction.ControllerManager.ControllerStates)
  parent: VRBuilder.XRInteraction.ControllerManager.ControllerState
  langs:
  - csharp
  - vb
  name: IsControllerInteracting(ControllerManager.ControllerStates)
  nameWithType: ControllerManager.ControllerState.IsControllerInteracting(ControllerManager.ControllerStates)
  fullName: VRBuilder.XRInteraction.ControllerManager.ControllerState.IsControllerInteracting(VRBuilder.XRInteraction.ControllerManager.ControllerStates)
  type: Method
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IsControllerInteracting
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
    startLine: 230
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nTrue if the interactor from given <code data-dev-comment-type=\"paramref\" class=\"paramref\">controller</code> is either touching or grabbing an interactable.\n"
  example: []
  syntax:
    content: public bool IsControllerInteracting(ControllerManager.ControllerStates controller)
    parameters:
    - id: controller
      type: VRBuilder.XRInteraction.ControllerManager.ControllerStates
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsControllerInteracting(controller As ControllerManager.ControllerStates) As Boolean
  overload: VRBuilder.XRInteraction.ControllerManager.ControllerState.IsControllerInteracting*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VRBuilder.XRInteraction
  commentId: N:VRBuilder.XRInteraction
  name: VRBuilder.XRInteraction
  nameWithType: VRBuilder.XRInteraction
  fullName: VRBuilder.XRInteraction
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.XRInteraction.ControllerManager.ControllerState.Initialize*
  commentId: Overload:VRBuilder.XRInteraction.ControllerManager.ControllerState.Initialize
  name: Initialize
  nameWithType: ControllerManager.ControllerState.Initialize
  fullName: VRBuilder.XRInteraction.ControllerManager.ControllerState.Initialize
- uid: VRBuilder.XRInteraction.ControllerManager.ControllerState.ClearAll*
  commentId: Overload:VRBuilder.XRInteraction.ControllerManager.ControllerState.ClearAll
  name: ClearAll
  nameWithType: ControllerManager.ControllerState.ClearAll
  fullName: VRBuilder.XRInteraction.ControllerManager.ControllerState.ClearAll
- uid: VRBuilder.XRInteraction.ControllerManager.ControllerState.SetGameObject*
  commentId: Overload:VRBuilder.XRInteraction.ControllerManager.ControllerState.SetGameObject
  name: SetGameObject
  nameWithType: ControllerManager.ControllerState.SetGameObject
  fullName: VRBuilder.XRInteraction.ControllerManager.ControllerState.SetGameObject
- uid: VRBuilder.XRInteraction.ControllerManager.ControllerStates
  commentId: T:VRBuilder.XRInteraction.ControllerManager.ControllerStates
  parent: VRBuilder.XRInteraction
  name: ControllerManager.ControllerStates
  nameWithType: ControllerManager.ControllerStates
  fullName: VRBuilder.XRInteraction.ControllerManager.ControllerStates
- uid: GameObject
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: GameObject
- uid: VRBuilder.XRInteraction.ControllerManager.ControllerState.SetState*
  commentId: Overload:VRBuilder.XRInteraction.ControllerManager.ControllerState.SetState
  name: SetState
  nameWithType: ControllerManager.ControllerState.SetState
  fullName: VRBuilder.XRInteraction.ControllerManager.ControllerState.SetState
- uid: VRBuilder.XRInteraction.ControllerManager.ControllerState.IsControllerInteracting*
  commentId: Overload:VRBuilder.XRInteraction.ControllerManager.ControllerState.IsControllerInteracting
  name: IsControllerInteracting
  nameWithType: ControllerManager.ControllerState.IsControllerInteracting
  fullName: VRBuilder.XRInteraction.ControllerManager.ControllerState.IsControllerInteracting
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
