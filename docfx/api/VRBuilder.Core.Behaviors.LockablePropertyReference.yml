### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Behaviors.LockablePropertyReference
  commentId: T:VRBuilder.Core.Behaviors.LockablePropertyReference
  id: LockablePropertyReference
  parent: VRBuilder.Core.Behaviors
  children:
  - VRBuilder.Core.Behaviors.LockablePropertyReference.#ctor
  - VRBuilder.Core.Behaviors.LockablePropertyReference.#ctor(VRBuilder.Core.Properties.LockableProperty)
  - VRBuilder.Core.Behaviors.LockablePropertyReference.GetProperty
  - VRBuilder.Core.Behaviors.LockablePropertyReference.Target
  - VRBuilder.Core.Behaviors.LockablePropertyReference.TargetObject
  - VRBuilder.Core.Behaviors.LockablePropertyReference.Type
  langs:
  - csharp
  - vb
  name: LockablePropertyReference
  nameWithType: LockablePropertyReference
  fullName: VRBuilder.Core.Behaviors.LockablePropertyReference
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Properties/LockablePropertyReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: LockablePropertyReference
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Properties/LockablePropertyReference.cs
    startLine: 15
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Behaviors
  summary: "\nSerializable reference to a <xref href=\"VRBuilder.Core.Properties.LockableProperty\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [DataContract(IsReference = true)]

      public class LockablePropertyReference
    content.vb: >-
      <DataContract(IsReference:=True)>

      Public Class LockablePropertyReference
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: IsReference
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VRBuilder.Core.Behaviors.LockablePropertyReference.Target
  commentId: F:VRBuilder.Core.Behaviors.LockablePropertyReference.Target
  id: Target
  parent: VRBuilder.Core.Behaviors.LockablePropertyReference
  langs:
  - csharp
  - vb
  name: Target
  nameWithType: LockablePropertyReference.Target
  fullName: VRBuilder.Core.Behaviors.LockablePropertyReference.Target
  type: Field
  source:
    remote:
      path: Source/Core/Runtime/Properties/LockablePropertyReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Target
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Properties/LockablePropertyReference.cs
    startLine: 24
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Behaviors
  summary: "\nReference to the scene object the LockableProperty is attached to.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      [Obsolete("Use TargetObject instead.")]

      [LegacyProperty("TargetObject")]

      public SceneObjectReference Target
    return:
      type: VRBuilder.Core.SceneObjects.SceneObjectReference
    content.vb: >-
      <DataMember>

      <Obsolete("Use TargetObject instead.")>

      <LegacyProperty("TargetObject")>

      Public Target As SceneObjectReference
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use TargetObject instead.
  - type: VRBuilder.Core.Attributes.LegacyPropertyAttribute
    ctor: VRBuilder.Core.Attributes.LegacyPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: TargetObject
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.Behaviors.LockablePropertyReference.TargetObject
  commentId: F:VRBuilder.Core.Behaviors.LockablePropertyReference.TargetObject
  id: TargetObject
  parent: VRBuilder.Core.Behaviors.LockablePropertyReference
  langs:
  - csharp
  - vb
  name: TargetObject
  nameWithType: LockablePropertyReference.TargetObject
  fullName: VRBuilder.Core.Behaviors.LockablePropertyReference.TargetObject
  type: Field
  source:
    remote:
      path: Source/Core/Runtime/Properties/LockablePropertyReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: TargetObject
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Properties/LockablePropertyReference.cs
    startLine: 30
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Behaviors
  summary: "\nReference to the scene object the LockableProperty is attached to.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public SingleSceneObjectReference TargetObject
    return:
      type: VRBuilder.Core.SceneObjects.SingleSceneObjectReference
    content.vb: >-
      <DataMember>

      Public TargetObject As SingleSceneObjectReference
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.Behaviors.LockablePropertyReference.Type
  commentId: F:VRBuilder.Core.Behaviors.LockablePropertyReference.Type
  id: Type
  parent: VRBuilder.Core.Behaviors.LockablePropertyReference
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: LockablePropertyReference.Type
  fullName: VRBuilder.Core.Behaviors.LockablePropertyReference.Type
  type: Field
  source:
    remote:
      path: Source/Core/Runtime/Properties/LockablePropertyReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Type
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Properties/LockablePropertyReference.cs
    startLine: 36
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Behaviors
  summary: "\nType name of the LockableProperty.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public string Type
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public Type As String
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.Behaviors.LockablePropertyReference.#ctor
  commentId: M:VRBuilder.Core.Behaviors.LockablePropertyReference.#ctor
  id: '#ctor'
  parent: VRBuilder.Core.Behaviors.LockablePropertyReference
  langs:
  - csharp
  - vb
  name: LockablePropertyReference()
  nameWithType: LockablePropertyReference.LockablePropertyReference()
  fullName: VRBuilder.Core.Behaviors.LockablePropertyReference.LockablePropertyReference()
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/Properties/LockablePropertyReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Properties/LockablePropertyReference.cs
    startLine: 41
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Behaviors
  syntax:
    content: public LockablePropertyReference()
    content.vb: Public Sub New
  overload: VRBuilder.Core.Behaviors.LockablePropertyReference.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.Behaviors.LockablePropertyReference.#ctor(VRBuilder.Core.Properties.LockableProperty)
  commentId: M:VRBuilder.Core.Behaviors.LockablePropertyReference.#ctor(VRBuilder.Core.Properties.LockableProperty)
  id: '#ctor(VRBuilder.Core.Properties.LockableProperty)'
  parent: VRBuilder.Core.Behaviors.LockablePropertyReference
  langs:
  - csharp
  - vb
  name: LockablePropertyReference(LockableProperty)
  nameWithType: LockablePropertyReference.LockablePropertyReference(LockableProperty)
  fullName: VRBuilder.Core.Behaviors.LockablePropertyReference.LockablePropertyReference(VRBuilder.Core.Properties.LockableProperty)
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/Properties/LockablePropertyReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Properties/LockablePropertyReference.cs
    startLine: 46
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Behaviors
  syntax:
    content: public LockablePropertyReference(LockableProperty property)
    parameters:
    - id: property
      type: VRBuilder.Core.Properties.LockableProperty
    content.vb: Public Sub New(property As LockableProperty)
  overload: VRBuilder.Core.Behaviors.LockablePropertyReference.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.Behaviors.LockablePropertyReference.GetProperty
  commentId: M:VRBuilder.Core.Behaviors.LockablePropertyReference.GetProperty
  id: GetProperty
  parent: VRBuilder.Core.Behaviors.LockablePropertyReference
  langs:
  - csharp
  - vb
  name: GetProperty()
  nameWithType: LockablePropertyReference.GetProperty()
  fullName: VRBuilder.Core.Behaviors.LockablePropertyReference.GetProperty()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Properties/LockablePropertyReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetProperty
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Properties/LockablePropertyReference.cs
    startLine: 59
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Behaviors
  summary: "\nReturns the referenced <xref href=\"VRBuilder.Core.Properties.LockableProperty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public LockableProperty GetProperty()
    return:
      type: VRBuilder.Core.Properties.LockableProperty
    content.vb: Public Function GetProperty As LockableProperty
  overload: VRBuilder.Core.Behaviors.LockablePropertyReference.GetProperty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VRBuilder.Core.Properties.LockableProperty
  commentId: T:VRBuilder.Core.Properties.LockableProperty
  parent: VRBuilder.Core.Properties
  name: LockableProperty
  nameWithType: LockableProperty
  fullName: VRBuilder.Core.Properties.LockableProperty
- uid: VRBuilder.Core.Behaviors
  commentId: N:VRBuilder.Core.Behaviors
  name: VRBuilder.Core.Behaviors
  nameWithType: VRBuilder.Core.Behaviors
  fullName: VRBuilder.Core.Behaviors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Properties
  commentId: N:VRBuilder.Core.Properties
  name: VRBuilder.Core.Properties
  nameWithType: VRBuilder.Core.Properties
  fullName: VRBuilder.Core.Properties
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.SceneObjects.SceneObjectReference
  commentId: T:VRBuilder.Core.SceneObjects.SceneObjectReference
  parent: VRBuilder.Core.SceneObjects
  name: SceneObjectReference
  nameWithType: SceneObjectReference
  fullName: VRBuilder.Core.SceneObjects.SceneObjectReference
- uid: VRBuilder.Core.SceneObjects
  commentId: N:VRBuilder.Core.SceneObjects
  name: VRBuilder.Core.SceneObjects
  nameWithType: VRBuilder.Core.SceneObjects
  fullName: VRBuilder.Core.SceneObjects
- uid: VRBuilder.Core.SceneObjects.SingleSceneObjectReference
  commentId: T:VRBuilder.Core.SceneObjects.SingleSceneObjectReference
  parent: VRBuilder.Core.SceneObjects
  name: SingleSceneObjectReference
  nameWithType: SingleSceneObjectReference
  fullName: VRBuilder.Core.SceneObjects.SingleSceneObjectReference
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VRBuilder.Core.Behaviors.LockablePropertyReference.#ctor*
  commentId: Overload:VRBuilder.Core.Behaviors.LockablePropertyReference.#ctor
  name: LockablePropertyReference
  nameWithType: LockablePropertyReference.LockablePropertyReference
  fullName: VRBuilder.Core.Behaviors.LockablePropertyReference.LockablePropertyReference
- uid: VRBuilder.Core.Behaviors.LockablePropertyReference.GetProperty*
  commentId: Overload:VRBuilder.Core.Behaviors.LockablePropertyReference.GetProperty
  name: GetProperty
  nameWithType: LockablePropertyReference.GetProperty
  fullName: VRBuilder.Core.Behaviors.LockablePropertyReference.GetProperty
