### YamlMime:ManagedReference
items:
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty
  commentId: T:VRBuilder.TrackAndMeasure.Properties.TimerProperty
  id: TimerProperty
  parent: VRBuilder.TrackAndMeasure.Properties
  children:
  - VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsCountdown
  - VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsRunning
  - VRBuilder.TrackAndMeasure.Properties.TimerProperty.StartTimer
  - VRBuilder.TrackAndMeasure.Properties.TimerProperty.StopTimer
  - VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerAtZero
  - VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStart
  - VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStarted
  - VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStop
  - VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStopped
  - VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerZero
  langs:
  - csharp
  - vb
  name: TimerProperty
  nameWithType: TimerProperty
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty
  type: Class
  source:
    remote:
      path: Source/Runtime/Properties/TimerProperty.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: TimerProperty
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/TimerProperty.cs
    startLine: 10
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nProperty that acts as a timer and stores time on the required <xref href=\"VRBuilder.Core.Properties.NumberDataProperty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class TimerProperty : ProcessSceneObjectProperty, ITimerProperty, ISceneObjectProperty'
    content.vb: >-
      Public Class TimerProperty
          Inherits ProcessSceneObjectProperty
          Implements ITimerProperty, ISceneObjectProperty
  inheritance:
  - System.Object
  - VRBuilder.Core.Properties.ProcessSceneObjectProperty
  implements:
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  - VRBuilder.Core.Properties.ISceneObjectProperty
  inheritedMembers:
  - VRBuilder.Core.Properties.ProcessSceneObjectProperty.SceneObject
  - VRBuilder.Core.Properties.ProcessSceneObjectProperty.OnEnable
  - VRBuilder.Core.Properties.ProcessSceneObjectProperty.Reset
  - VRBuilder.Core.Properties.ProcessSceneObjectProperty.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsCountdown
  commentId: P:VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsCountdown
  id: IsCountdown
  parent: VRBuilder.TrackAndMeasure.Properties.TimerProperty
  langs:
  - csharp
  - vb
  name: IsCountdown
  nameWithType: TimerProperty.IsCountdown
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsCountdown
  type: Property
  source:
    remote:
      path: Source/Runtime/Properties/TimerProperty.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: IsCountdown
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/TimerProperty.cs
    startLine: 28
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nIf true, the timer will count down instead of up.\n"
  example: []
  syntax:
    content: public bool IsCountdown { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsCountdown As Boolean
  overload: VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsCountdown*
  implements:
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsCountdown
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsRunning
  commentId: P:VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsRunning
  id: IsRunning
  parent: VRBuilder.TrackAndMeasure.Properties.TimerProperty
  langs:
  - csharp
  - vb
  name: IsRunning
  nameWithType: TimerProperty.IsRunning
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsRunning
  type: Property
  source:
    remote:
      path: Source/Runtime/Properties/TimerProperty.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: IsRunning
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/TimerProperty.cs
    startLine: 31
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nTrue when the timer is active.\n"
  example: []
  syntax:
    content: public bool IsRunning { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsRunning As Boolean
  overload: VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsRunning*
  implements:
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsRunning
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStart
  commentId: P:VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStart
  id: TimerStart
  parent: VRBuilder.TrackAndMeasure.Properties.TimerProperty
  langs:
  - csharp
  - vb
  name: TimerStart
  nameWithType: TimerProperty.TimerStart
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStart
  type: Property
  source:
    remote:
      path: Source/Runtime/Properties/TimerProperty.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: TimerStart
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/TimerProperty.cs
    startLine: 34
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nRaised when the timer starts.\n"
  example: []
  syntax:
    content: public UnityEvent<TimerPropertyEventArgs> TimerStart { get; }
    parameters: []
    return:
      type: UnityEvent{VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs}
    content.vb: Public ReadOnly Property TimerStart As UnityEvent(Of TimerPropertyEventArgs)
  overload: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStart*
  implements:
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStart
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStop
  commentId: P:VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStop
  id: TimerStop
  parent: VRBuilder.TrackAndMeasure.Properties.TimerProperty
  langs:
  - csharp
  - vb
  name: TimerStop
  nameWithType: TimerProperty.TimerStop
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStop
  type: Property
  source:
    remote:
      path: Source/Runtime/Properties/TimerProperty.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: TimerStop
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/TimerProperty.cs
    startLine: 37
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nRaised when the timer is paused.\n"
  example: []
  syntax:
    content: public UnityEvent<TimerPropertyEventArgs> TimerStop { get; }
    parameters: []
    return:
      type: UnityEvent{VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs}
    content.vb: Public ReadOnly Property TimerStop As UnityEvent(Of TimerPropertyEventArgs)
  overload: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStop*
  implements:
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStop
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerZero
  commentId: P:VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerZero
  id: TimerZero
  parent: VRBuilder.TrackAndMeasure.Properties.TimerProperty
  langs:
  - csharp
  - vb
  name: TimerZero
  nameWithType: TimerProperty.TimerZero
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerZero
  type: Property
  source:
    remote:
      path: Source/Runtime/Properties/TimerProperty.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: TimerZero
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/TimerProperty.cs
    startLine: 40
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nRaised when a timer reaches zero.\n"
  example: []
  syntax:
    content: public UnityEvent<TimerPropertyEventArgs> TimerZero { get; }
    parameters: []
    return:
      type: UnityEvent{VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs}
    content.vb: Public ReadOnly Property TimerZero As UnityEvent(Of TimerPropertyEventArgs)
  overload: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerZero*
  implements:
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerZero
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStarted
  commentId: E:VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStarted
  id: TimerStarted
  parent: VRBuilder.TrackAndMeasure.Properties.TimerProperty
  langs:
  - csharp
  - vb
  name: TimerStarted
  nameWithType: TimerProperty.TimerStarted
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStarted
  type: Event
  source:
    remote:
      path: Source/Runtime/Properties/TimerProperty.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: TimerStarted
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/TimerProperty.cs
    startLine: 45
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nRaised when the timer starts.\n"
  example: []
  syntax:
    content: public event EventHandler<EventArgs> TimerStarted
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event TimerStarted As EventHandler(Of EventArgs)
  implements:
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStarted
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStopped
  commentId: E:VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStopped
  id: TimerStopped
  parent: VRBuilder.TrackAndMeasure.Properties.TimerProperty
  langs:
  - csharp
  - vb
  name: TimerStopped
  nameWithType: TimerProperty.TimerStopped
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStopped
  type: Event
  source:
    remote:
      path: Source/Runtime/Properties/TimerProperty.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: TimerStopped
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/TimerProperty.cs
    startLine: 48
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nRaised when the timer is paused.\n"
  example: []
  syntax:
    content: public event EventHandler<EventArgs> TimerStopped
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event TimerStopped As EventHandler(Of EventArgs)
  implements:
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStopped
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerAtZero
  commentId: E:VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerAtZero
  id: TimerAtZero
  parent: VRBuilder.TrackAndMeasure.Properties.TimerProperty
  langs:
  - csharp
  - vb
  name: TimerAtZero
  nameWithType: TimerProperty.TimerAtZero
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerAtZero
  type: Event
  source:
    remote:
      path: Source/Runtime/Properties/TimerProperty.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: TimerAtZero
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/TimerProperty.cs
    startLine: 51
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nRaised when a timer reaches zero.\n"
  example: []
  syntax:
    content: public event EventHandler<EventArgs> TimerAtZero
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event TimerAtZero As EventHandler(Of EventArgs)
  implements:
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerAtZero
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.StartTimer
  commentId: M:VRBuilder.TrackAndMeasure.Properties.TimerProperty.StartTimer
  id: StartTimer
  parent: VRBuilder.TrackAndMeasure.Properties.TimerProperty
  langs:
  - csharp
  - vb
  name: StartTimer()
  nameWithType: TimerProperty.StartTimer()
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.StartTimer()
  type: Method
  source:
    remote:
      path: Source/Runtime/Properties/TimerProperty.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: StartTimer
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/TimerProperty.cs
    startLine: 93
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nStarts the timer.\n"
  example: []
  syntax:
    content: public void StartTimer()
    content.vb: Public Sub StartTimer
  overload: VRBuilder.TrackAndMeasure.Properties.TimerProperty.StartTimer*
  implements:
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.StopTimer
  commentId: M:VRBuilder.TrackAndMeasure.Properties.TimerProperty.StopTimer
  id: StopTimer
  parent: VRBuilder.TrackAndMeasure.Properties.TimerProperty
  langs:
  - csharp
  - vb
  name: StopTimer()
  nameWithType: TimerProperty.StopTimer()
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.StopTimer()
  type: Method
  source:
    remote:
      path: Source/Runtime/Properties/TimerProperty.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: StopTimer
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/TimerProperty.cs
    startLine: 103
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nStops the timer.\n"
  example: []
  syntax:
    content: public void StopTimer()
    content.vb: Public Sub StopTimer
  overload: VRBuilder.TrackAndMeasure.Properties.TimerProperty.StopTimer*
  implements:
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VRBuilder.Core.Properties.NumberDataProperty
  commentId: T:VRBuilder.Core.Properties.NumberDataProperty
  name: NumberDataProperty
  nameWithType: NumberDataProperty
  fullName: VRBuilder.Core.Properties.NumberDataProperty
- uid: VRBuilder.TrackAndMeasure.Properties
  commentId: N:VRBuilder.TrackAndMeasure.Properties
  name: VRBuilder.TrackAndMeasure.Properties
  nameWithType: VRBuilder.TrackAndMeasure.Properties
  fullName: VRBuilder.TrackAndMeasure.Properties
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Core.Properties.ProcessSceneObjectProperty
  commentId: T:VRBuilder.Core.Properties.ProcessSceneObjectProperty
  parent: VRBuilder.Core.Properties
  name: ProcessSceneObjectProperty
  nameWithType: ProcessSceneObjectProperty
  fullName: VRBuilder.Core.Properties.ProcessSceneObjectProperty
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  commentId: T:VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  parent: VRBuilder.TrackAndMeasure.Properties
  name: ITimerProperty
  nameWithType: ITimerProperty
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
- uid: VRBuilder.Core.Properties.ISceneObjectProperty
  commentId: T:VRBuilder.Core.Properties.ISceneObjectProperty
  parent: VRBuilder.Core.Properties
  name: ISceneObjectProperty
  nameWithType: ISceneObjectProperty
  fullName: VRBuilder.Core.Properties.ISceneObjectProperty
- uid: VRBuilder.Core.Properties.ProcessSceneObjectProperty.SceneObject
  commentId: P:VRBuilder.Core.Properties.ProcessSceneObjectProperty.SceneObject
  parent: VRBuilder.Core.Properties.ProcessSceneObjectProperty
  name: SceneObject
  nameWithType: ProcessSceneObjectProperty.SceneObject
  fullName: VRBuilder.Core.Properties.ProcessSceneObjectProperty.SceneObject
- uid: VRBuilder.Core.Properties.ProcessSceneObjectProperty.OnEnable
  commentId: M:VRBuilder.Core.Properties.ProcessSceneObjectProperty.OnEnable
  parent: VRBuilder.Core.Properties.ProcessSceneObjectProperty
  name: OnEnable()
  nameWithType: ProcessSceneObjectProperty.OnEnable()
  fullName: VRBuilder.Core.Properties.ProcessSceneObjectProperty.OnEnable()
  spec.csharp:
  - uid: VRBuilder.Core.Properties.ProcessSceneObjectProperty.OnEnable
    name: OnEnable
    nameWithType: ProcessSceneObjectProperty.OnEnable
    fullName: VRBuilder.Core.Properties.ProcessSceneObjectProperty.OnEnable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Properties.ProcessSceneObjectProperty.OnEnable
    name: OnEnable
    nameWithType: ProcessSceneObjectProperty.OnEnable
    fullName: VRBuilder.Core.Properties.ProcessSceneObjectProperty.OnEnable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Properties.ProcessSceneObjectProperty.Reset
  commentId: M:VRBuilder.Core.Properties.ProcessSceneObjectProperty.Reset
  parent: VRBuilder.Core.Properties.ProcessSceneObjectProperty
  name: Reset()
  nameWithType: ProcessSceneObjectProperty.Reset()
  fullName: VRBuilder.Core.Properties.ProcessSceneObjectProperty.Reset()
  spec.csharp:
  - uid: VRBuilder.Core.Properties.ProcessSceneObjectProperty.Reset
    name: Reset
    nameWithType: ProcessSceneObjectProperty.Reset
    fullName: VRBuilder.Core.Properties.ProcessSceneObjectProperty.Reset
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Properties.ProcessSceneObjectProperty.Reset
    name: Reset
    nameWithType: ProcessSceneObjectProperty.Reset
    fullName: VRBuilder.Core.Properties.ProcessSceneObjectProperty.Reset
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Properties.ProcessSceneObjectProperty.ToString
  commentId: M:VRBuilder.Core.Properties.ProcessSceneObjectProperty.ToString
  parent: VRBuilder.Core.Properties.ProcessSceneObjectProperty
  name: ToString()
  nameWithType: ProcessSceneObjectProperty.ToString()
  fullName: VRBuilder.Core.Properties.ProcessSceneObjectProperty.ToString()
  spec.csharp:
  - uid: VRBuilder.Core.Properties.ProcessSceneObjectProperty.ToString
    name: ToString
    nameWithType: ProcessSceneObjectProperty.ToString
    fullName: VRBuilder.Core.Properties.ProcessSceneObjectProperty.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Properties.ProcessSceneObjectProperty.ToString
    name: ToString
    nameWithType: ProcessSceneObjectProperty.ToString
    fullName: VRBuilder.Core.Properties.ProcessSceneObjectProperty.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.Properties
  commentId: N:VRBuilder.Core.Properties
  name: VRBuilder.Core.Properties
  nameWithType: VRBuilder.Core.Properties
  fullName: VRBuilder.Core.Properties
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsCountdown*
  commentId: Overload:VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsCountdown
  name: IsCountdown
  nameWithType: TimerProperty.IsCountdown
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsCountdown
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsCountdown
  commentId: P:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsCountdown
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  name: IsCountdown
  nameWithType: ITimerProperty.IsCountdown
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsCountdown
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsRunning*
  commentId: Overload:VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsRunning
  name: IsRunning
  nameWithType: TimerProperty.IsRunning
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.IsRunning
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsRunning
  commentId: P:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsRunning
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  name: IsRunning
  nameWithType: ITimerProperty.IsRunning
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsRunning
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStart*
  commentId: Overload:VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStart
  name: TimerStart
  nameWithType: TimerProperty.TimerStart
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStart
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStart
  commentId: P:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStart
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  name: TimerStart
  nameWithType: ITimerProperty.TimerStart
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStart
- uid: UnityEvent{VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs}
  commentId: '!:UnityEvent{VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs}'
  definition: UnityEvent`1
  name: UnityEvent<TimerPropertyEventArgs>
  nameWithType: UnityEvent<TimerPropertyEventArgs>
  fullName: UnityEvent<VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs>
  nameWithType.vb: UnityEvent(Of TimerPropertyEventArgs)
  fullName.vb: UnityEvent(Of VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs)
  name.vb: UnityEvent(Of TimerPropertyEventArgs)
  spec.csharp:
  - uid: UnityEvent`1
    name: UnityEvent
    nameWithType: UnityEvent
    fullName: UnityEvent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs
    name: TimerPropertyEventArgs
    nameWithType: TimerPropertyEventArgs
    fullName: VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: UnityEvent`1
    name: UnityEvent
    nameWithType: UnityEvent
    fullName: UnityEvent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs
    name: TimerPropertyEventArgs
    nameWithType: TimerPropertyEventArgs
    fullName: VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEvent`1
  isExternal: true
  name: UnityEvent<>
  nameWithType: UnityEvent<>
  fullName: UnityEvent<>
  nameWithType.vb: UnityEvent(Of )
  fullName.vb: UnityEvent(Of )
  name.vb: UnityEvent(Of )
  spec.csharp:
  - uid: UnityEvent`1
    name: UnityEvent
    nameWithType: UnityEvent
    fullName: UnityEvent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: UnityEvent`1
    name: UnityEvent
    nameWithType: UnityEvent
    fullName: UnityEvent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStop*
  commentId: Overload:VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStop
  name: TimerStop
  nameWithType: TimerProperty.TimerStop
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerStop
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStop
  commentId: P:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStop
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  name: TimerStop
  nameWithType: ITimerProperty.TimerStop
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStop
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerZero*
  commentId: Overload:VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerZero
  name: TimerZero
  nameWithType: TimerProperty.TimerZero
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.TimerZero
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerZero
  commentId: P:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerZero
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  name: TimerZero
  nameWithType: ITimerProperty.TimerZero
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerZero
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStarted
  commentId: E:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStarted
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  name: TimerStarted
  nameWithType: ITimerProperty.TimerStarted
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStarted
- uid: System.EventHandler{System.EventArgs}
  commentId: T:System.EventHandler{System.EventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EventArgs>
  nameWithType: EventHandler<EventArgs>
  fullName: System.EventHandler<System.EventArgs>
  nameWithType.vb: EventHandler(Of EventArgs)
  fullName.vb: System.EventHandler(Of System.EventArgs)
  name.vb: EventHandler(Of EventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStopped
  commentId: E:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStopped
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  name: TimerStopped
  nameWithType: ITimerProperty.TimerStopped
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStopped
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerAtZero
  commentId: E:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerAtZero
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  name: TimerAtZero
  nameWithType: ITimerProperty.TimerAtZero
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerAtZero
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.StartTimer*
  commentId: Overload:VRBuilder.TrackAndMeasure.Properties.TimerProperty.StartTimer
  name: StartTimer
  nameWithType: TimerProperty.StartTimer
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.StartTimer
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer
  commentId: M:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  name: StartTimer()
  nameWithType: ITimerProperty.StartTimer()
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer()
  spec.csharp:
  - uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer
    name: StartTimer
    nameWithType: ITimerProperty.StartTimer
    fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer
    name: StartTimer
    nameWithType: ITimerProperty.StartTimer
    fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.TrackAndMeasure.Properties.TimerProperty.StopTimer*
  commentId: Overload:VRBuilder.TrackAndMeasure.Properties.TimerProperty.StopTimer
  name: StopTimer
  nameWithType: TimerProperty.StopTimer
  fullName: VRBuilder.TrackAndMeasure.Properties.TimerProperty.StopTimer
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer
  commentId: M:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  name: StopTimer()
  nameWithType: ITimerProperty.StopTimer()
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer()
  spec.csharp:
  - uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer
    name: StopTimer
    nameWithType: ITimerProperty.StopTimer
    fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer
    name: StopTimer
    nameWithType: ITimerProperty.StopTimer
    fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
