### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Configuration.Modes.Mode
  commentId: T:VRBuilder.Core.Configuration.Modes.Mode
  id: Mode
  parent: VRBuilder.Core.Configuration.Modes
  children:
  - VRBuilder.Core.Configuration.Modes.Mode.#ctor(System.String,VRBuilder.Core.Configuration.Modes.TypeRule{VRBuilder.Core.Configuration.Modes.IOptional},System.Collections.Generic.Dictionary{System.String,System.Object})
  - VRBuilder.Core.Configuration.Modes.Mode.CheckIfSkipped(System.Type)
  - VRBuilder.Core.Configuration.Modes.Mode.CheckIfSkipped``1
  - VRBuilder.Core.Configuration.Modes.Mode.ContainsParameter``1(System.String)
  - VRBuilder.Core.Configuration.Modes.Mode.GetParameter``1(System.String)
  - VRBuilder.Core.Configuration.Modes.Mode.Name
  langs:
  - csharp
  - vb
  name: Mode
  nameWithType: Mode
  fullName: VRBuilder.Core.Configuration.Modes.Mode
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/Mode.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Mode
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/Mode.cs
    startLine: 14
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nA process mode that is defined by its name, IConfigurables activation policy and a collection of parameters.\nImmutable.\n"
  example: []
  syntax:
    content: 'public sealed class Mode : IMode'
    content.vb: >-
      Public NotInheritable Class Mode
          Implements IMode
  inheritance:
  - System.Object
  implements:
  - VRBuilder.Core.Configuration.Modes.IMode
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: VRBuilder.Core.Configuration.Modes.Mode.Name
  commentId: P:VRBuilder.Core.Configuration.Modes.Mode.Name
  id: Name
  parent: VRBuilder.Core.Configuration.Modes.Mode
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Mode.Name
  fullName: VRBuilder.Core.Configuration.Modes.Mode.Name
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/Mode.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Name
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/Mode.cs
    startLine: 17
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nThe name of this process mode.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: VRBuilder.Core.Configuration.Modes.Mode.Name*
  implements:
  - VRBuilder.Core.Configuration.Modes.IMode.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VRBuilder.Core.Configuration.Modes.Mode.#ctor(System.String,VRBuilder.Core.Configuration.Modes.TypeRule{VRBuilder.Core.Configuration.Modes.IOptional},System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:VRBuilder.Core.Configuration.Modes.Mode.#ctor(System.String,VRBuilder.Core.Configuration.Modes.TypeRule{VRBuilder.Core.Configuration.Modes.IOptional},System.Collections.Generic.Dictionary{System.String,System.Object})
  id: '#ctor(System.String,VRBuilder.Core.Configuration.Modes.TypeRule{VRBuilder.Core.Configuration.Modes.IOptional},System.Collections.Generic.Dictionary{System.String,System.Object})'
  parent: VRBuilder.Core.Configuration.Modes.Mode
  langs:
  - csharp
  - vb
  name: Mode(String, TypeRule<IOptional>, Dictionary<String, Object>)
  nameWithType: Mode.Mode(String, TypeRule<IOptional>, Dictionary<String, Object>)
  fullName: VRBuilder.Core.Configuration.Modes.Mode.Mode(System.String, VRBuilder.Core.Configuration.Modes.TypeRule<VRBuilder.Core.Configuration.Modes.IOptional>, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/Mode.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/Mode.cs
    startLine: 29
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  example: []
  syntax:
    content: public Mode(string name, TypeRule<IOptional> entitiesToSkip, Dictionary<string, object> parameters = null)
    parameters:
    - id: name
      type: System.String
      description: Name of the process mode.
    - id: entitiesToSkip
      type: VRBuilder.Core.Configuration.Modes.TypeRule{VRBuilder.Core.Configuration.Modes.IOptional}
      description: A type rule which determines if an <xref href="VRBuilder.Core.Configuration.Modes.IOptional" data-throw-if-not-resolved="false"></xref> has to be skipped, depending on its type.
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: A string-to-object dictionary of process mode parameters.
    content.vb: Public Sub New(name As String, entitiesToSkip As TypeRule(Of IOptional), parameters As Dictionary(Of String, Object) = Nothing)
  overload: VRBuilder.Core.Configuration.Modes.Mode.#ctor*
  nameWithType.vb: Mode.Mode(String, TypeRule(Of IOptional), Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Configuration.Modes.Mode.Mode(System.String, VRBuilder.Core.Configuration.Modes.TypeRule(Of VRBuilder.Core.Configuration.Modes.IOptional), System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Mode(String, TypeRule(Of IOptional), Dictionary(Of String, Object))
- uid: VRBuilder.Core.Configuration.Modes.Mode.CheckIfSkipped``1
  commentId: M:VRBuilder.Core.Configuration.Modes.Mode.CheckIfSkipped``1
  id: CheckIfSkipped``1
  parent: VRBuilder.Core.Configuration.Modes.Mode
  langs:
  - csharp
  - vb
  name: CheckIfSkipped<TSkippable>()
  nameWithType: Mode.CheckIfSkipped<TSkippable>()
  fullName: VRBuilder.Core.Configuration.Modes.Mode.CheckIfSkipped<TSkippable>()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/Mode.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CheckIfSkipped
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/Mode.cs
    startLine: 42
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nReturns whether the given <xref href=\"VRBuilder.Core.Configuration.Modes.IOptional\" data-throw-if-not-resolved=\"false\"></xref> type should be skipped in this process mode.\n"
  example: []
  syntax:
    content: >-
      public bool CheckIfSkipped<TSkippable>()
          where TSkippable : IOptional
    typeParameters:
    - id: TSkippable
    return:
      type: System.Boolean
    content.vb: Public Function CheckIfSkipped(Of TSkippable As IOptional) As Boolean
  overload: VRBuilder.Core.Configuration.Modes.Mode.CheckIfSkipped*
  implements:
  - VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped``1
  nameWithType.vb: Mode.CheckIfSkipped(Of TSkippable)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Configuration.Modes.Mode.CheckIfSkipped(Of TSkippable)()
  name.vb: CheckIfSkipped(Of TSkippable)()
- uid: VRBuilder.Core.Configuration.Modes.Mode.CheckIfSkipped(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.Mode.CheckIfSkipped(System.Type)
  id: CheckIfSkipped(System.Type)
  parent: VRBuilder.Core.Configuration.Modes.Mode
  langs:
  - csharp
  - vb
  name: CheckIfSkipped(Type)
  nameWithType: Mode.CheckIfSkipped(Type)
  fullName: VRBuilder.Core.Configuration.Modes.Mode.CheckIfSkipped(System.Type)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/Mode.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CheckIfSkipped
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/Mode.cs
    startLine: 48
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nReturns whether the given type should be skipped in this process mode.\n"
  example: []
  syntax:
    content: public bool CheckIfSkipped(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type to check.
    return:
      type: System.Boolean
    content.vb: Public Function CheckIfSkipped(type As Type) As Boolean
  overload: VRBuilder.Core.Configuration.Modes.Mode.CheckIfSkipped*
  implements:
  - VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped(System.Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.Configuration.Modes.Mode.GetParameter``1(System.String)
  commentId: M:VRBuilder.Core.Configuration.Modes.Mode.GetParameter``1(System.String)
  id: GetParameter``1(System.String)
  parent: VRBuilder.Core.Configuration.Modes.Mode
  langs:
  - csharp
  - vb
  name: GetParameter<TValue>(String)
  nameWithType: Mode.GetParameter<TValue>(String)
  fullName: VRBuilder.Core.Configuration.Modes.Mode.GetParameter<TValue>(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/Mode.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetParameter
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/Mode.cs
    startLine: 54
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nProvides a specific parameter for this mode.\n"
  example: []
  syntax:
    content: public TValue GetParameter<TValue>(string key)
    parameters:
    - id: key
      type: System.String
      description: Name of the parameter.
    typeParameters:
    - id: TValue
    return:
      type: '{TValue}'
      description: The value for the given key
    content.vb: Public Function GetParameter(Of TValue)(key As String) As TValue
  overload: VRBuilder.Core.Configuration.Modes.Mode.GetParameter*
  implements:
  - VRBuilder.Core.Configuration.Modes.IMode.GetParameter``1(System.String)
  nameWithType.vb: Mode.GetParameter(Of TValue)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Configuration.Modes.Mode.GetParameter(Of TValue)(System.String)
  name.vb: GetParameter(Of TValue)(String)
- uid: VRBuilder.Core.Configuration.Modes.Mode.ContainsParameter``1(System.String)
  commentId: M:VRBuilder.Core.Configuration.Modes.Mode.ContainsParameter``1(System.String)
  id: ContainsParameter``1(System.String)
  parent: VRBuilder.Core.Configuration.Modes.Mode
  langs:
  - csharp
  - vb
  name: ContainsParameter<TValue>(String)
  nameWithType: Mode.ContainsParameter<TValue>(String)
  fullName: VRBuilder.Core.Configuration.Modes.Mode.ContainsParameter<TValue>(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/Mode.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ContainsParameter
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/Mode.cs
    startLine: 60
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nChecks if given key exists.\n"
  example: []
  syntax:
    content: public bool ContainsParameter<TValue>(string key)
    parameters:
    - id: key
      type: System.String
      description: Name of the key
    typeParameters:
    - id: TValue
    return:
      type: System.Boolean
    content.vb: Public Function ContainsParameter(Of TValue)(key As String) As Boolean
  overload: VRBuilder.Core.Configuration.Modes.Mode.ContainsParameter*
  implements:
  - VRBuilder.Core.Configuration.Modes.IMode.ContainsParameter``1(System.String)
  nameWithType.vb: Mode.ContainsParameter(Of TValue)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Configuration.Modes.Mode.ContainsParameter(Of TValue)(System.String)
  name.vb: ContainsParameter(Of TValue)(String)
references:
- uid: VRBuilder.Core.Configuration.Modes
  commentId: N:VRBuilder.Core.Configuration.Modes
  name: VRBuilder.Core.Configuration.Modes
  nameWithType: VRBuilder.Core.Configuration.Modes
  fullName: VRBuilder.Core.Configuration.Modes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Core.Configuration.Modes.IMode
  commentId: T:VRBuilder.Core.Configuration.Modes.IMode
  parent: VRBuilder.Core.Configuration.Modes
  name: IMode
  nameWithType: IMode
  fullName: VRBuilder.Core.Configuration.Modes.IMode
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.Configuration.Modes.Mode.Name*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.Mode.Name
  name: Name
  nameWithType: Mode.Name
  fullName: VRBuilder.Core.Configuration.Modes.Mode.Name
- uid: VRBuilder.Core.Configuration.Modes.IMode.Name
  commentId: P:VRBuilder.Core.Configuration.Modes.IMode.Name
  parent: VRBuilder.Core.Configuration.Modes.IMode
  name: Name
  nameWithType: IMode.Name
  fullName: VRBuilder.Core.Configuration.Modes.IMode.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VRBuilder.Core.Configuration.Modes.IOptional
  commentId: T:VRBuilder.Core.Configuration.Modes.IOptional
  parent: VRBuilder.Core.Configuration.Modes
  name: IOptional
  nameWithType: IOptional
  fullName: VRBuilder.Core.Configuration.Modes.IOptional
- uid: VRBuilder.Core.Configuration.Modes.Mode.#ctor*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.Mode.#ctor
  name: Mode
  nameWithType: Mode.Mode
  fullName: VRBuilder.Core.Configuration.Modes.Mode.Mode
- uid: VRBuilder.Core.Configuration.Modes.TypeRule{VRBuilder.Core.Configuration.Modes.IOptional}
  commentId: T:VRBuilder.Core.Configuration.Modes.TypeRule{VRBuilder.Core.Configuration.Modes.IOptional}
  parent: VRBuilder.Core.Configuration.Modes
  definition: VRBuilder.Core.Configuration.Modes.TypeRule`1
  name: TypeRule<IOptional>
  nameWithType: TypeRule<IOptional>
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<VRBuilder.Core.Configuration.Modes.IOptional>
  nameWithType.vb: TypeRule(Of IOptional)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of VRBuilder.Core.Configuration.Modes.IOptional)
  name.vb: TypeRule(Of IOptional)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
    name: TypeRule
    nameWithType: TypeRule
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.Configuration.Modes.IOptional
    name: IOptional
    nameWithType: IOptional
    fullName: VRBuilder.Core.Configuration.Modes.IOptional
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
    name: TypeRule
    nameWithType: TypeRule
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.Configuration.Modes.IOptional
    name: IOptional
    nameWithType: IOptional
    fullName: VRBuilder.Core.Configuration.Modes.IOptional
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
  commentId: T:VRBuilder.Core.Configuration.Modes.TypeRule`1
  name: TypeRule<TValueBase>
  nameWithType: TypeRule<TValueBase>
  fullName: VRBuilder.Core.Configuration.Modes.TypeRule<TValueBase>
  nameWithType.vb: TypeRule(Of TValueBase)
  fullName.vb: VRBuilder.Core.Configuration.Modes.TypeRule(Of TValueBase)
  name.vb: TypeRule(Of TValueBase)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
    name: TypeRule
    nameWithType: TypeRule
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TValueBase
    nameWithType: TValueBase
    fullName: TValueBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.TypeRule`1
    name: TypeRule
    nameWithType: TypeRule
    fullName: VRBuilder.Core.Configuration.Modes.TypeRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValueBase
    nameWithType: TValueBase
    fullName: TValueBase
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VRBuilder.Core.Configuration.Modes.Mode.CheckIfSkipped*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.Mode.CheckIfSkipped
  name: CheckIfSkipped
  nameWithType: Mode.CheckIfSkipped
  fullName: VRBuilder.Core.Configuration.Modes.Mode.CheckIfSkipped
- uid: VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped``1
  commentId: M:VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped``1
  parent: VRBuilder.Core.Configuration.Modes.IMode
  name: CheckIfSkipped<TSkippable>()
  nameWithType: IMode.CheckIfSkipped<TSkippable>()
  fullName: VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped<TSkippable>()
  nameWithType.vb: IMode.CheckIfSkipped(Of TSkippable)()
  fullName.vb: VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped(Of TSkippable)()
  name.vb: CheckIfSkipped(Of TSkippable)()
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped``1
    name: CheckIfSkipped<TSkippable>
    nameWithType: IMode.CheckIfSkipped<TSkippable>
    fullName: VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped<TSkippable>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped``1
    name: CheckIfSkipped(Of TSkippable)
    nameWithType: IMode.CheckIfSkipped(Of TSkippable)
    fullName: VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped(Of TSkippable)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped(System.Type)
  commentId: M:VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped(System.Type)
  parent: VRBuilder.Core.Configuration.Modes.IMode
  isExternal: true
  name: CheckIfSkipped(Type)
  nameWithType: IMode.CheckIfSkipped(Type)
  fullName: VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped(System.Type)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped(System.Type)
    name: CheckIfSkipped
    nameWithType: IMode.CheckIfSkipped
    fullName: VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped(System.Type)
    name: CheckIfSkipped
    nameWithType: IMode.CheckIfSkipped
    fullName: VRBuilder.Core.Configuration.Modes.IMode.CheckIfSkipped
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: VRBuilder.Core.Configuration.Modes.Mode.GetParameter*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.Mode.GetParameter
  name: GetParameter
  nameWithType: Mode.GetParameter
  fullName: VRBuilder.Core.Configuration.Modes.Mode.GetParameter
- uid: VRBuilder.Core.Configuration.Modes.IMode.GetParameter``1(System.String)
  commentId: M:VRBuilder.Core.Configuration.Modes.IMode.GetParameter``1(System.String)
  parent: VRBuilder.Core.Configuration.Modes.IMode
  isExternal: true
  name: GetParameter<TValue>(String)
  nameWithType: IMode.GetParameter<TValue>(String)
  fullName: VRBuilder.Core.Configuration.Modes.IMode.GetParameter<TValue>(System.String)
  nameWithType.vb: IMode.GetParameter(Of TValue)(String)
  fullName.vb: VRBuilder.Core.Configuration.Modes.IMode.GetParameter(Of TValue)(System.String)
  name.vb: GetParameter(Of TValue)(String)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IMode.GetParameter``1(System.String)
    name: GetParameter<TValue>
    nameWithType: IMode.GetParameter<TValue>
    fullName: VRBuilder.Core.Configuration.Modes.IMode.GetParameter<TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IMode.GetParameter``1(System.String)
    name: GetParameter(Of TValue)
    nameWithType: IMode.GetParameter(Of TValue)
    fullName: VRBuilder.Core.Configuration.Modes.IMode.GetParameter(Of TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  commentId: '!:TValue'
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: VRBuilder.Core.Configuration.Modes.Mode.ContainsParameter*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.Mode.ContainsParameter
  name: ContainsParameter
  nameWithType: Mode.ContainsParameter
  fullName: VRBuilder.Core.Configuration.Modes.Mode.ContainsParameter
- uid: VRBuilder.Core.Configuration.Modes.IMode.ContainsParameter``1(System.String)
  commentId: M:VRBuilder.Core.Configuration.Modes.IMode.ContainsParameter``1(System.String)
  parent: VRBuilder.Core.Configuration.Modes.IMode
  isExternal: true
  name: ContainsParameter<TValue>(String)
  nameWithType: IMode.ContainsParameter<TValue>(String)
  fullName: VRBuilder.Core.Configuration.Modes.IMode.ContainsParameter<TValue>(System.String)
  nameWithType.vb: IMode.ContainsParameter(Of TValue)(String)
  fullName.vb: VRBuilder.Core.Configuration.Modes.IMode.ContainsParameter(Of TValue)(System.String)
  name.vb: ContainsParameter(Of TValue)(String)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IMode.ContainsParameter``1(System.String)
    name: ContainsParameter<TValue>
    nameWithType: IMode.ContainsParameter<TValue>
    fullName: VRBuilder.Core.Configuration.Modes.IMode.ContainsParameter<TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IMode.ContainsParameter``1(System.String)
    name: ContainsParameter(Of TValue)
    nameWithType: IMode.ContainsParameter(Of TValue)
    fullName: VRBuilder.Core.Configuration.Modes.IMode.ContainsParameter(Of TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
