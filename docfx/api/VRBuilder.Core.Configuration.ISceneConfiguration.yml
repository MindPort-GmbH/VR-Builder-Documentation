### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Configuration.ISceneConfiguration
  commentId: T:VRBuilder.Core.Configuration.ISceneConfiguration
  id: ISceneConfiguration
  parent: VRBuilder.Core.Configuration
  children:
  - VRBuilder.Core.Configuration.ISceneConfiguration.DefaultConfettiPrefab
  - VRBuilder.Core.Configuration.ISceneConfiguration.ExtensionAssembliesWhitelist
  - VRBuilder.Core.Configuration.ISceneConfiguration.IsAllowedInAssembly(System.Type,System.String)
  langs:
  - csharp
  - vb
  name: ISceneConfiguration
  nameWithType: ISceneConfiguration
  fullName: VRBuilder.Core.Configuration.ISceneConfiguration
  type: Interface
  source:
    remote:
      path: Source/Core/Runtime/Configuration/ISceneConfiguration.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ISceneConfiguration
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/ISceneConfiguration.cs
    startLine: 8
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration
  summary: "\nHandles configuration specific to this scene.\n"
  example: []
  syntax:
    content: public interface ISceneConfiguration
    content.vb: Public Interface ISceneConfiguration
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VRBuilder.Core.Configuration.ISceneConfiguration.ExtensionAssembliesWhitelist
  commentId: P:VRBuilder.Core.Configuration.ISceneConfiguration.ExtensionAssembliesWhitelist
  id: ExtensionAssembliesWhitelist
  parent: VRBuilder.Core.Configuration.ISceneConfiguration
  langs:
  - csharp
  - vb
  name: ExtensionAssembliesWhitelist
  nameWithType: ISceneConfiguration.ExtensionAssembliesWhitelist
  fullName: VRBuilder.Core.Configuration.ISceneConfiguration.ExtensionAssembliesWhitelist
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Configuration/ISceneConfiguration.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ExtensionAssembliesWhitelist
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/ISceneConfiguration.cs
    startLine: 13
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration
  summary: "\nLists all assemblies whose property extensions will be used in the current scene.\n"
  example: []
  syntax:
    content: IEnumerable<string> ExtensionAssembliesWhitelist { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: ReadOnly Property ExtensionAssembliesWhitelist As IEnumerable(Of String)
  overload: VRBuilder.Core.Configuration.ISceneConfiguration.ExtensionAssembliesWhitelist*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VRBuilder.Core.Configuration.ISceneConfiguration.IsAllowedInAssembly(System.Type,System.String)
  commentId: M:VRBuilder.Core.Configuration.ISceneConfiguration.IsAllowedInAssembly(System.Type,System.String)
  id: IsAllowedInAssembly(System.Type,System.String)
  parent: VRBuilder.Core.Configuration.ISceneConfiguration
  langs:
  - csharp
  - vb
  name: IsAllowedInAssembly(Type, String)
  nameWithType: ISceneConfiguration.IsAllowedInAssembly(Type, String)
  fullName: VRBuilder.Core.Configuration.ISceneConfiguration.IsAllowedInAssembly(System.Type, System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/ISceneConfiguration.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IsAllowedInAssembly
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/ISceneConfiguration.cs
    startLine: 18
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration
  summary: "\nTrue if the specified type is not in an exclusion list for the specified assembly.\n"
  example: []
  syntax:
    content: bool IsAllowedInAssembly(Type extensionType, string assemblyName)
    parameters:
    - id: extensionType
      type: System.Type
    - id: assemblyName
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function IsAllowedInAssembly(extensionType As Type, assemblyName As String) As Boolean
  overload: VRBuilder.Core.Configuration.ISceneConfiguration.IsAllowedInAssembly*
- uid: VRBuilder.Core.Configuration.ISceneConfiguration.DefaultConfettiPrefab
  commentId: P:VRBuilder.Core.Configuration.ISceneConfiguration.DefaultConfettiPrefab
  id: DefaultConfettiPrefab
  parent: VRBuilder.Core.Configuration.ISceneConfiguration
  langs:
  - csharp
  - vb
  name: DefaultConfettiPrefab
  nameWithType: ISceneConfiguration.DefaultConfettiPrefab
  fullName: VRBuilder.Core.Configuration.ISceneConfiguration.DefaultConfettiPrefab
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Configuration/ISceneConfiguration.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: DefaultConfettiPrefab
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/ISceneConfiguration.cs
    startLine: 23
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration
  summary: "\nDefault resources prefab to use for Confetti behavior.\n"
  example: []
  syntax:
    content: string DefaultConfettiPrefab { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property DefaultConfettiPrefab As String
  overload: VRBuilder.Core.Configuration.ISceneConfiguration.DefaultConfettiPrefab*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: VRBuilder.Core.Configuration
  commentId: N:VRBuilder.Core.Configuration
  name: VRBuilder.Core.Configuration
  nameWithType: VRBuilder.Core.Configuration
  fullName: VRBuilder.Core.Configuration
- uid: VRBuilder.Core.Configuration.ISceneConfiguration.ExtensionAssembliesWhitelist*
  commentId: Overload:VRBuilder.Core.Configuration.ISceneConfiguration.ExtensionAssembliesWhitelist
  name: ExtensionAssembliesWhitelist
  nameWithType: ISceneConfiguration.ExtensionAssembliesWhitelist
  fullName: VRBuilder.Core.Configuration.ISceneConfiguration.ExtensionAssembliesWhitelist
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VRBuilder.Core.Configuration.ISceneConfiguration.IsAllowedInAssembly*
  commentId: Overload:VRBuilder.Core.Configuration.ISceneConfiguration.IsAllowedInAssembly
  name: IsAllowedInAssembly
  nameWithType: ISceneConfiguration.IsAllowedInAssembly
  fullName: VRBuilder.Core.Configuration.ISceneConfiguration.IsAllowedInAssembly
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.Configuration.ISceneConfiguration.DefaultConfettiPrefab*
  commentId: Overload:VRBuilder.Core.Configuration.ISceneConfiguration.DefaultConfettiPrefab
  name: DefaultConfettiPrefab
  nameWithType: ISceneConfiguration.DefaultConfettiPrefab
  fullName: VRBuilder.Core.Configuration.ISceneConfiguration.DefaultConfettiPrefab
