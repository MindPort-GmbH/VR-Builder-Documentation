### YamlMime:ManagedReference
items:
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  commentId: T:VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  id: ITimerProperty
  parent: VRBuilder.TrackAndMeasure.Properties
  children:
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsCountdown
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsRunning
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerAtZero
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStart
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStarted
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStop
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStopped
  - VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerZero
  langs:
  - csharp
  - vb
  name: ITimerProperty
  nameWithType: ITimerProperty
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  type: Interface
  source:
    remote:
      path: Source/Runtime/Properties/ITimerProperty.cs
      branch: feature/mp-2734-component-icons
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: ITimerProperty
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/ITimerProperty.cs
    startLine: 9
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nProperty that acts as a timer.\n"
  example: []
  syntax:
    content: 'public interface ITimerProperty : ISceneObjectProperty'
    content.vb: >-
      Public Interface ITimerProperty

          Inherits ISceneObjectProperty
  inheritedMembers:
  - VRBuilder.Core.Properties.ISceneObjectProperty.SceneObject
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStarted
  commentId: E:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStarted
  id: TimerStarted
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  langs:
  - csharp
  - vb
  name: TimerStarted
  nameWithType: ITimerProperty.TimerStarted
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStarted
  type: Event
  source:
    remote:
      path: Source/Runtime/Properties/ITimerProperty.cs
      branch: feature/mp-2734-component-icons
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: TimerStarted
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/ITimerProperty.cs
    startLine: 15
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nRaised when the timer starts.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use TimerStart instead.")]

      event EventHandler<EventArgs> TimerStarted
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: >-
      <Obsolete("Use TimerStart instead.")>

      Event TimerStarted As EventHandler(Of EventArgs)
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use TimerStart instead.
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStopped
  commentId: E:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStopped
  id: TimerStopped
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  langs:
  - csharp
  - vb
  name: TimerStopped
  nameWithType: ITimerProperty.TimerStopped
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStopped
  type: Event
  source:
    remote:
      path: Source/Runtime/Properties/ITimerProperty.cs
      branch: feature/mp-2734-component-icons
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: TimerStopped
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/ITimerProperty.cs
    startLine: 21
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nRaised when the timer is paused.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use TimerStop instead.")]

      event EventHandler<EventArgs> TimerStopped
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: >-
      <Obsolete("Use TimerStop instead.")>

      Event TimerStopped As EventHandler(Of EventArgs)
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use TimerStop instead.
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerAtZero
  commentId: E:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerAtZero
  id: TimerAtZero
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  langs:
  - csharp
  - vb
  name: TimerAtZero
  nameWithType: ITimerProperty.TimerAtZero
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerAtZero
  type: Event
  source:
    remote:
      path: Source/Runtime/Properties/ITimerProperty.cs
      branch: feature/mp-2734-component-icons
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: TimerAtZero
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/ITimerProperty.cs
    startLine: 27
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nRaised when a timer reaches zero.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use TimerZero instead.")]

      event EventHandler<EventArgs> TimerAtZero
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: >-
      <Obsolete("Use TimerZero instead.")>

      Event TimerAtZero As EventHandler(Of EventArgs)
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use TimerZero instead.
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStart
  commentId: P:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStart
  id: TimerStart
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  langs:
  - csharp
  - vb
  name: TimerStart
  nameWithType: ITimerProperty.TimerStart
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStart
  type: Property
  source:
    remote:
      path: Source/Runtime/Properties/ITimerProperty.cs
      branch: feature/mp-2734-component-icons
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: TimerStart
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/ITimerProperty.cs
    startLine: 32
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nRaised when the timer starts.\n"
  example: []
  syntax:
    content: UnityEvent<TimerPropertyEventArgs> TimerStart { get; }
    parameters: []
    return:
      type: UnityEvent{VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs}
    content.vb: ReadOnly Property TimerStart As UnityEvent(Of TimerPropertyEventArgs)
  overload: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStart*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStop
  commentId: P:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStop
  id: TimerStop
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  langs:
  - csharp
  - vb
  name: TimerStop
  nameWithType: ITimerProperty.TimerStop
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStop
  type: Property
  source:
    remote:
      path: Source/Runtime/Properties/ITimerProperty.cs
      branch: feature/mp-2734-component-icons
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: TimerStop
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/ITimerProperty.cs
    startLine: 37
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nRaised when the timer is paused.\n"
  example: []
  syntax:
    content: UnityEvent<TimerPropertyEventArgs> TimerStop { get; }
    parameters: []
    return:
      type: UnityEvent{VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs}
    content.vb: ReadOnly Property TimerStop As UnityEvent(Of TimerPropertyEventArgs)
  overload: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStop*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerZero
  commentId: P:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerZero
  id: TimerZero
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  langs:
  - csharp
  - vb
  name: TimerZero
  nameWithType: ITimerProperty.TimerZero
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerZero
  type: Property
  source:
    remote:
      path: Source/Runtime/Properties/ITimerProperty.cs
      branch: feature/mp-2734-component-icons
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: TimerZero
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/ITimerProperty.cs
    startLine: 42
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nRaised when a timer reaches zero.\n"
  example: []
  syntax:
    content: UnityEvent<TimerPropertyEventArgs> TimerZero { get; }
    parameters: []
    return:
      type: UnityEvent{VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs}
    content.vb: ReadOnly Property TimerZero As UnityEvent(Of TimerPropertyEventArgs)
  overload: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerZero*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsCountdown
  commentId: P:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsCountdown
  id: IsCountdown
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  langs:
  - csharp
  - vb
  name: IsCountdown
  nameWithType: ITimerProperty.IsCountdown
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsCountdown
  type: Property
  source:
    remote:
      path: Source/Runtime/Properties/ITimerProperty.cs
      branch: feature/mp-2734-component-icons
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: IsCountdown
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/ITimerProperty.cs
    startLine: 47
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nIf true, the timer will count down instead of up.\n"
  example: []
  syntax:
    content: bool IsCountdown { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property IsCountdown As Boolean
  overload: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsCountdown*
  modifiers.csharp:
  - get
  - set
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsRunning
  commentId: P:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsRunning
  id: IsRunning
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  langs:
  - csharp
  - vb
  name: IsRunning
  nameWithType: ITimerProperty.IsRunning
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsRunning
  type: Property
  source:
    remote:
      path: Source/Runtime/Properties/ITimerProperty.cs
      branch: feature/mp-2734-component-icons
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: IsRunning
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/ITimerProperty.cs
    startLine: 52
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nTrue when the timer is active.\n"
  example: []
  syntax:
    content: bool IsRunning { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsRunning As Boolean
  overload: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsRunning*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer
  commentId: M:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer
  id: StartTimer
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  langs:
  - csharp
  - vb
  name: StartTimer()
  nameWithType: ITimerProperty.StartTimer()
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer()
  type: Method
  source:
    remote:
      path: Source/Runtime/Properties/ITimerProperty.cs
      branch: feature/mp-2734-component-icons
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: StartTimer
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/ITimerProperty.cs
    startLine: 57
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nStarts the timer.\n"
  example: []
  syntax:
    content: void StartTimer()
    content.vb: Sub StartTimer
  overload: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer*
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer
  commentId: M:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer
  id: StopTimer
  parent: VRBuilder.TrackAndMeasure.Properties.ITimerProperty
  langs:
  - csharp
  - vb
  name: StopTimer()
  nameWithType: ITimerProperty.StopTimer()
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer()
  type: Method
  source:
    remote:
      path: Source/Runtime/Properties/ITimerProperty.cs
      branch: feature/mp-2734-component-icons
      repo: git@github.com:MindPort-GmbH/Track-and-Measure-for-VR-Builder.git
    id: StopTimer
    path: ../../Assets/MindPort/VR Builder/Add-ons/TrackAndMeasure/Source/Runtime/Properties/ITimerProperty.cs
    startLine: 62
  assemblies:
  - VRBuilder.TrackAndMeasure
  namespace: VRBuilder.TrackAndMeasure.Properties
  summary: "\nStops the timer.\n"
  example: []
  syntax:
    content: void StopTimer()
    content.vb: Sub StopTimer
  overload: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer*
references:
- uid: VRBuilder.TrackAndMeasure.Properties
  commentId: N:VRBuilder.TrackAndMeasure.Properties
  name: VRBuilder.TrackAndMeasure.Properties
  nameWithType: VRBuilder.TrackAndMeasure.Properties
  fullName: VRBuilder.TrackAndMeasure.Properties
- uid: VRBuilder.Core.Properties.ISceneObjectProperty.SceneObject
  commentId: P:VRBuilder.Core.Properties.ISceneObjectProperty.SceneObject
  parent: VRBuilder.Core.Properties.ISceneObjectProperty
  name: SceneObject
  nameWithType: ISceneObjectProperty.SceneObject
  fullName: VRBuilder.Core.Properties.ISceneObjectProperty.SceneObject
- uid: VRBuilder.Core.Properties.ISceneObjectProperty
  commentId: T:VRBuilder.Core.Properties.ISceneObjectProperty
  parent: VRBuilder.Core.Properties
  name: ISceneObjectProperty
  nameWithType: ISceneObjectProperty
  fullName: VRBuilder.Core.Properties.ISceneObjectProperty
- uid: VRBuilder.Core.Properties
  commentId: N:VRBuilder.Core.Properties
  name: VRBuilder.Core.Properties
  nameWithType: VRBuilder.Core.Properties
  fullName: VRBuilder.Core.Properties
- uid: System.EventHandler{System.EventArgs}
  commentId: T:System.EventHandler{System.EventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EventArgs>
  nameWithType: EventHandler<EventArgs>
  fullName: System.EventHandler<System.EventArgs>
  nameWithType.vb: EventHandler(Of EventArgs)
  fullName.vb: System.EventHandler(Of System.EventArgs)
  name.vb: EventHandler(Of EventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStart*
  commentId: Overload:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStart
  name: TimerStart
  nameWithType: ITimerProperty.TimerStart
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStart
- uid: UnityEvent{VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs}
  commentId: '!:UnityEvent{VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs}'
  definition: UnityEvent`1
  name: UnityEvent<TimerPropertyEventArgs>
  nameWithType: UnityEvent<TimerPropertyEventArgs>
  fullName: UnityEvent<VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs>
  nameWithType.vb: UnityEvent(Of TimerPropertyEventArgs)
  fullName.vb: UnityEvent(Of VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs)
  name.vb: UnityEvent(Of TimerPropertyEventArgs)
  spec.csharp:
  - uid: UnityEvent`1
    name: UnityEvent
    nameWithType: UnityEvent
    fullName: UnityEvent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs
    name: TimerPropertyEventArgs
    nameWithType: TimerPropertyEventArgs
    fullName: VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: UnityEvent`1
    name: UnityEvent
    nameWithType: UnityEvent
    fullName: UnityEvent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs
    name: TimerPropertyEventArgs
    nameWithType: TimerPropertyEventArgs
    fullName: VRBuilder.TrackAndMeasure.Properties.TimerPropertyEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEvent`1
  isExternal: true
  name: UnityEvent<>
  nameWithType: UnityEvent<>
  fullName: UnityEvent<>
  nameWithType.vb: UnityEvent(Of )
  fullName.vb: UnityEvent(Of )
  name.vb: UnityEvent(Of )
  spec.csharp:
  - uid: UnityEvent`1
    name: UnityEvent
    nameWithType: UnityEvent
    fullName: UnityEvent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: UnityEvent`1
    name: UnityEvent
    nameWithType: UnityEvent
    fullName: UnityEvent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStop*
  commentId: Overload:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStop
  name: TimerStop
  nameWithType: ITimerProperty.TimerStop
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerStop
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerZero*
  commentId: Overload:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerZero
  name: TimerZero
  nameWithType: ITimerProperty.TimerZero
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.TimerZero
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsCountdown*
  commentId: Overload:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsCountdown
  name: IsCountdown
  nameWithType: ITimerProperty.IsCountdown
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsCountdown
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsRunning*
  commentId: Overload:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsRunning
  name: IsRunning
  nameWithType: ITimerProperty.IsRunning
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.IsRunning
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer*
  commentId: Overload:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer
  name: StartTimer
  nameWithType: ITimerProperty.StartTimer
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StartTimer
- uid: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer*
  commentId: Overload:VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer
  name: StopTimer
  nameWithType: ITimerProperty.StopTimer
  fullName: VRBuilder.TrackAndMeasure.Properties.ITimerProperty.StopTimer
