### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2
  commentId: T:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2
  id: EntityIteratingProcess`2
  parent: VRBuilder.Core.EntityOwners
  children:
  - VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.#ctor(`0)
  - VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.End
  - VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.FastForward
  - VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.ShouldActivateCurrent
  - VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.ShouldDeactivateCurrent
  - VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.Start
  - VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.TryNext(`1@)
  - VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.Update
  langs:
  - csharp
  - vb
  name: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: EntityIteratingProcess
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
    startLine: 12
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.EntityOwners
  summary: "\nA process that activates and deactivates entities one after another.\n"
  example: []
  syntax:
    content: 'public abstract class EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity> : StageProcess<TEntitySequenceDataWithMode>, IStageProcess where TEntitySequenceDataWithMode : class, IEntitySequenceDataWithMode<TEntity> where TEntity : IEntity'
    typeParameters:
    - id: TEntitySequenceDataWithMode
    - id: TEntity
    content.vb: >-
      Public MustInherit Class EntityIteratingProcess(Of TEntitySequenceDataWithMode As {Class, IEntitySequenceDataWithMode(Of TEntity)}, TEntity As IEntity)
          Inherits StageProcess(Of TEntitySequenceDataWithMode)
          Implements IStageProcess
  inheritance:
  - System.Object
  - VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}
  implements:
  - VRBuilder.Core.IStageProcess
  inheritedMembers:
  - VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}.Data
  - VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}.Outer
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity)
  name.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity)
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.#ctor(`0)
  commentId: M:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.#ctor(`0)
  id: '#ctor(`0)'
  parent: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2
  langs:
  - csharp
  - vb
  name: EntityIteratingProcess(TEntitySequenceDataWithMode)
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.EntityIteratingProcess(TEntitySequenceDataWithMode)
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.EntityIteratingProcess(TEntitySequenceDataWithMode)
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
    startLine: 14
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.EntityOwners
  syntax:
    content: protected EntityIteratingProcess(TEntitySequenceDataWithMode data)
    parameters:
    - id: data
      type: '{TEntitySequenceDataWithMode}'
    content.vb: Protected Sub New(data As TEntitySequenceDataWithMode)
  overload: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.#ctor*
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).EntityIteratingProcess(TEntitySequenceDataWithMode)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).EntityIteratingProcess(TEntitySequenceDataWithMode)
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.Start
  commentId: M:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.Start
  id: Start
  parent: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.Start()
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.Start()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Start
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
    startLine: 19
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.EntityOwners
  summary: "\nThis method is invoked immediately when entity enters the stage.\nThe invocation is guaranteed.\nUse it for initialization.\n"
  example: []
  syntax:
    content: public override void Start()
    content.vb: Public Overrides Sub Start
  overridden: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}.Start
  overload: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.Start*
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).Start()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).Start()
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.Update
  commentId: M:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.Update
  id: Update
  parent: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.Update()
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.Update()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Update
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
    startLine: 24
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.EntityOwners
  summary: "\nThis method will be iterated over while the entity is in this stage, one iteration step per frame, starting from the second frame.\n"
  example: []
  syntax:
    content: public override IEnumerator Update()
    return:
      type: System.Collections.IEnumerator
      description: ''
    content.vb: Public Overrides Function Update As IEnumerator
  overridden: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}.Update
  overload: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.Update*
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).Update()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).Update()
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.End
  commentId: M:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.End
  id: End
  parent: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2
  langs:
  - csharp
  - vb
  name: End()
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.End()
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.End()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: End
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
    startLine: 73
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.EntityOwners
  summary: "\nThis method is invoked immediately after the <xref href=\"VRBuilder.Core.IStageProcess.Update\" data-throw-if-not-resolved=\"false\"></xref> was iterated over completely, or after the <xref href=\"VRBuilder.Core.IStageProcess.FastForward\" data-throw-if-not-resolved=\"false\"></xref> was called.\nThe invocation is guaranteed.\nUse it for deinitialization.\n"
  example: []
  syntax:
    content: public override void End()
    content.vb: Public Overrides Sub
  overridden: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}.End
  overload: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.End*
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).End()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).End()
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.FastForward
  commentId: M:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.FastForward
  id: FastForward
  parent: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2
  langs:
  - csharp
  - vb
  name: FastForward()
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.FastForward()
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.FastForward()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: FastForward
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
    startLine: 79
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.EntityOwners
  summary: "\nThis method is called when the process was not completed yet.\nIt must &quot;fake&quot; normal execution of the process and handle the cases when the <xref href=\"VRBuilder.Core.IStageProcess.Update\" data-throw-if-not-resolved=\"false\"></xref> is not iterated over completely.\n"
  example: []
  syntax:
    content: public override void FastForward()
    content.vb: Public Overrides Sub FastForward
  overridden: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}.FastForward
  overload: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.FastForward*
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).FastForward()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).FastForward()
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.ShouldActivateCurrent
  commentId: M:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.ShouldActivateCurrent
  id: ShouldActivateCurrent
  parent: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2
  langs:
  - csharp
  - vb
  name: ShouldActivateCurrent()
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.ShouldActivateCurrent()
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.ShouldActivateCurrent()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ShouldActivateCurrent
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
    startLine: 106
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.EntityOwners
  summary: "\nReturns true if the current entity has to be activated.\n"
  example: []
  syntax:
    content: protected abstract bool ShouldActivateCurrent()
    return:
      type: System.Boolean
    content.vb: Protected MustOverride Function ShouldActivateCurrent As Boolean
  overload: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.ShouldActivateCurrent*
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).ShouldActivateCurrent()
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).ShouldActivateCurrent()
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.ShouldDeactivateCurrent
  commentId: M:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.ShouldDeactivateCurrent
  id: ShouldDeactivateCurrent
  parent: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2
  langs:
  - csharp
  - vb
  name: ShouldDeactivateCurrent()
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.ShouldDeactivateCurrent()
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.ShouldDeactivateCurrent()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ShouldDeactivateCurrent
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
    startLine: 111
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.EntityOwners
  summary: "\nReturns true if the current entity has to be deactivated.\n"
  example: []
  syntax:
    content: protected abstract bool ShouldDeactivateCurrent()
    return:
      type: System.Boolean
    content.vb: Protected MustOverride Function ShouldDeactivateCurrent As Boolean
  overload: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.ShouldDeactivateCurrent*
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).ShouldDeactivateCurrent()
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).ShouldDeactivateCurrent()
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.TryNext(`1@)
  commentId: M:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.TryNext(`1@)
  id: TryNext(`1@)
  parent: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2
  langs:
  - csharp
  - vb
  name: TryNext(out TEntity)
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.TryNext(out TEntity)
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.TryNext(out TEntity)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: TryNext
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/EntityOwners/Sequence/EntityIteratingProcess.cs
    startLine: 116
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.EntityOwners
  summary: "\nTry to get next child entity.\n"
  example: []
  syntax:
    content: protected abstract bool TryNext(out TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Boolean
    content.vb: Protected MustOverride Function TryNext(ByRef entity As TEntity) As Boolean
  overload: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.TryNext*
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).TryNext(ByRef TEntity)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).TryNext(ByRef TEntity)
  name.vb: TryNext(ByRef TEntity)
references:
- uid: VRBuilder.Core.EntityOwners
  commentId: N:VRBuilder.Core.EntityOwners
  name: VRBuilder.Core.EntityOwners
  nameWithType: VRBuilder.Core.EntityOwners
  fullName: VRBuilder.Core.EntityOwners
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}
  commentId: T:VRBuilder.Core.StageProcess{`0}
  parent: VRBuilder.Core
  definition: VRBuilder.Core.StageProcess`1
  name: StageProcess<TEntitySequenceDataWithMode>
  nameWithType: StageProcess<TEntitySequenceDataWithMode>
  fullName: VRBuilder.Core.StageProcess<TEntitySequenceDataWithMode>
  nameWithType.vb: StageProcess(Of TEntitySequenceDataWithMode)
  fullName.vb: VRBuilder.Core.StageProcess(Of TEntitySequenceDataWithMode)
  name.vb: StageProcess(Of TEntitySequenceDataWithMode)
  spec.csharp:
  - uid: VRBuilder.Core.StageProcess`1
    name: StageProcess
    nameWithType: StageProcess
    fullName: VRBuilder.Core.StageProcess
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntitySequenceDataWithMode
    nameWithType: TEntitySequenceDataWithMode
    fullName: TEntitySequenceDataWithMode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.StageProcess`1
    name: StageProcess
    nameWithType: StageProcess
    fullName: VRBuilder.Core.StageProcess
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntitySequenceDataWithMode
    nameWithType: TEntitySequenceDataWithMode
    fullName: TEntitySequenceDataWithMode
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.IStageProcess
  commentId: T:VRBuilder.Core.IStageProcess
  parent: VRBuilder.Core
  name: IStageProcess
  nameWithType: IStageProcess
  fullName: VRBuilder.Core.IStageProcess
- uid: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}.Data
  commentId: P:VRBuilder.Core.StageProcess{`0}.Data
  parent: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}
  definition: VRBuilder.Core.StageProcess`1.Data
  name: Data
  nameWithType: StageProcess<TEntitySequenceDataWithMode>.Data
  fullName: VRBuilder.Core.StageProcess<TEntitySequenceDataWithMode>.Data
  nameWithType.vb: StageProcess(Of TEntitySequenceDataWithMode).Data
  fullName.vb: VRBuilder.Core.StageProcess(Of TEntitySequenceDataWithMode).Data
- uid: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}.Outer
  commentId: P:VRBuilder.Core.StageProcess{`0}.Outer
  parent: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}
  definition: VRBuilder.Core.StageProcess`1.Outer
  name: Outer
  nameWithType: StageProcess<TEntitySequenceDataWithMode>.Outer
  fullName: VRBuilder.Core.StageProcess<TEntitySequenceDataWithMode>.Outer
  nameWithType.vb: StageProcess(Of TEntitySequenceDataWithMode).Outer
  fullName.vb: VRBuilder.Core.StageProcess(Of TEntitySequenceDataWithMode).Outer
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.StageProcess`1
  commentId: T:VRBuilder.Core.StageProcess`1
  name: StageProcess<TData>
  nameWithType: StageProcess<TData>
  fullName: VRBuilder.Core.StageProcess<TData>
  nameWithType.vb: StageProcess(Of TData)
  fullName.vb: VRBuilder.Core.StageProcess(Of TData)
  name.vb: StageProcess(Of TData)
  spec.csharp:
  - uid: VRBuilder.Core.StageProcess`1
    name: StageProcess
    nameWithType: StageProcess
    fullName: VRBuilder.Core.StageProcess
  - name: <
    nameWithType: <
    fullName: <
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.StageProcess`1
    name: StageProcess
    nameWithType: StageProcess
    fullName: VRBuilder.Core.StageProcess
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TData
    nameWithType: TData
    fullName: TData
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core
  commentId: N:VRBuilder.Core
  name: VRBuilder.Core
  nameWithType: VRBuilder.Core
  fullName: VRBuilder.Core
- uid: VRBuilder.Core.StageProcess`1.Data
  commentId: P:VRBuilder.Core.StageProcess`1.Data
  name: Data
  nameWithType: StageProcess<TData>.Data
  fullName: VRBuilder.Core.StageProcess<TData>.Data
  nameWithType.vb: StageProcess(Of TData).Data
  fullName.vb: VRBuilder.Core.StageProcess(Of TData).Data
- uid: VRBuilder.Core.StageProcess`1.Outer
  commentId: P:VRBuilder.Core.StageProcess`1.Outer
  name: Outer
  nameWithType: StageProcess<TData>.Outer
  fullName: VRBuilder.Core.StageProcess<TData>.Outer
  nameWithType.vb: StageProcess(Of TData).Outer
  fullName.vb: VRBuilder.Core.StageProcess(Of TData).Outer
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.#ctor*
  commentId: Overload:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.#ctor
  name: EntityIteratingProcess
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.EntityIteratingProcess
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.EntityIteratingProcess
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).EntityIteratingProcess
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).EntityIteratingProcess
- uid: '{TEntitySequenceDataWithMode}'
  commentId: '!:TEntitySequenceDataWithMode'
  definition: TEntitySequenceDataWithMode
  name: TEntitySequenceDataWithMode
  nameWithType: TEntitySequenceDataWithMode
  fullName: TEntitySequenceDataWithMode
- uid: TEntitySequenceDataWithMode
  commentId: '!:TEntitySequenceDataWithMode'
  name: TEntitySequenceDataWithMode
  nameWithType: TEntitySequenceDataWithMode
  fullName: TEntitySequenceDataWithMode
- uid: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}.Start
  commentId: M:VRBuilder.Core.StageProcess{`0}.Start
  parent: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}
  definition: VRBuilder.Core.StageProcess`1.Start
  name: Start()
  nameWithType: StageProcess<TEntitySequenceDataWithMode>.Start()
  fullName: VRBuilder.Core.StageProcess<TEntitySequenceDataWithMode>.Start()
  nameWithType.vb: StageProcess(Of TEntitySequenceDataWithMode).Start()
  fullName.vb: VRBuilder.Core.StageProcess(Of TEntitySequenceDataWithMode).Start()
  spec.csharp:
  - uid: VRBuilder.Core.StageProcess`1.Start
    name: Start
    nameWithType: StageProcess<TEntitySequenceDataWithMode>.Start
    fullName: VRBuilder.Core.StageProcess<TEntitySequenceDataWithMode>.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.StageProcess`1.Start
    name: Start
    nameWithType: StageProcess(Of TEntitySequenceDataWithMode).Start
    fullName: VRBuilder.Core.StageProcess(Of TEntitySequenceDataWithMode).Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.Start*
  commentId: Overload:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.Start
  name: Start
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.Start
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.Start
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).Start
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).Start
- uid: VRBuilder.Core.StageProcess`1.Start
  commentId: M:VRBuilder.Core.StageProcess`1.Start
  name: Start()
  nameWithType: StageProcess<TData>.Start()
  fullName: VRBuilder.Core.StageProcess<TData>.Start()
  nameWithType.vb: StageProcess(Of TData).Start()
  fullName.vb: VRBuilder.Core.StageProcess(Of TData).Start()
  spec.csharp:
  - uid: VRBuilder.Core.StageProcess`1.Start
    name: Start
    nameWithType: StageProcess<TData>.Start
    fullName: VRBuilder.Core.StageProcess<TData>.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.StageProcess`1.Start
    name: Start
    nameWithType: StageProcess(Of TData).Start
    fullName: VRBuilder.Core.StageProcess(Of TData).Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}.Update
  commentId: M:VRBuilder.Core.StageProcess{`0}.Update
  parent: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}
  definition: VRBuilder.Core.StageProcess`1.Update
  name: Update()
  nameWithType: StageProcess<TEntitySequenceDataWithMode>.Update()
  fullName: VRBuilder.Core.StageProcess<TEntitySequenceDataWithMode>.Update()
  nameWithType.vb: StageProcess(Of TEntitySequenceDataWithMode).Update()
  fullName.vb: VRBuilder.Core.StageProcess(Of TEntitySequenceDataWithMode).Update()
  spec.csharp:
  - uid: VRBuilder.Core.StageProcess`1.Update
    name: Update
    nameWithType: StageProcess<TEntitySequenceDataWithMode>.Update
    fullName: VRBuilder.Core.StageProcess<TEntitySequenceDataWithMode>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.StageProcess`1.Update
    name: Update
    nameWithType: StageProcess(Of TEntitySequenceDataWithMode).Update
    fullName: VRBuilder.Core.StageProcess(Of TEntitySequenceDataWithMode).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.Update*
  commentId: Overload:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.Update
  name: Update
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.Update
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.Update
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).Update
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).Update
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: VRBuilder.Core.StageProcess`1.Update
  commentId: M:VRBuilder.Core.StageProcess`1.Update
  name: Update()
  nameWithType: StageProcess<TData>.Update()
  fullName: VRBuilder.Core.StageProcess<TData>.Update()
  nameWithType.vb: StageProcess(Of TData).Update()
  fullName.vb: VRBuilder.Core.StageProcess(Of TData).Update()
  spec.csharp:
  - uid: VRBuilder.Core.StageProcess`1.Update
    name: Update
    nameWithType: StageProcess<TData>.Update
    fullName: VRBuilder.Core.StageProcess<TData>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.StageProcess`1.Update
    name: Update
    nameWithType: StageProcess(Of TData).Update
    fullName: VRBuilder.Core.StageProcess(Of TData).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}.End
  commentId: M:VRBuilder.Core.StageProcess{`0}.End
  parent: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}
  definition: VRBuilder.Core.StageProcess`1.End
  name: End()
  nameWithType: StageProcess<TEntitySequenceDataWithMode>.End()
  fullName: VRBuilder.Core.StageProcess<TEntitySequenceDataWithMode>.End()
  nameWithType.vb: StageProcess(Of TEntitySequenceDataWithMode).End()
  fullName.vb: VRBuilder.Core.StageProcess(Of TEntitySequenceDataWithMode).End()
  spec.csharp:
  - uid: VRBuilder.Core.StageProcess`1.End
    name: End
    nameWithType: StageProcess<TEntitySequenceDataWithMode>.End
    fullName: VRBuilder.Core.StageProcess<TEntitySequenceDataWithMode>.End
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.StageProcess`1.End
    name: End
    nameWithType: StageProcess(Of TEntitySequenceDataWithMode).End
    fullName: VRBuilder.Core.StageProcess(Of TEntitySequenceDataWithMode).End
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.End*
  commentId: Overload:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.End
  name: End
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.End
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.End
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).End
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).End
- uid: VRBuilder.Core.StageProcess`1.End
  commentId: M:VRBuilder.Core.StageProcess`1.End
  name: End()
  nameWithType: StageProcess<TData>.End()
  fullName: VRBuilder.Core.StageProcess<TData>.End()
  nameWithType.vb: StageProcess(Of TData).End()
  fullName.vb: VRBuilder.Core.StageProcess(Of TData).End()
  spec.csharp:
  - uid: VRBuilder.Core.StageProcess`1.End
    name: End
    nameWithType: StageProcess<TData>.End
    fullName: VRBuilder.Core.StageProcess<TData>.End
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.StageProcess`1.End
    name: End
    nameWithType: StageProcess(Of TData).End
    fullName: VRBuilder.Core.StageProcess(Of TData).End
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}.FastForward
  commentId: M:VRBuilder.Core.StageProcess{`0}.FastForward
  parent: VRBuilder.Core.StageProcess{{TEntitySequenceDataWithMode}}
  definition: VRBuilder.Core.StageProcess`1.FastForward
  name: FastForward()
  nameWithType: StageProcess<TEntitySequenceDataWithMode>.FastForward()
  fullName: VRBuilder.Core.StageProcess<TEntitySequenceDataWithMode>.FastForward()
  nameWithType.vb: StageProcess(Of TEntitySequenceDataWithMode).FastForward()
  fullName.vb: VRBuilder.Core.StageProcess(Of TEntitySequenceDataWithMode).FastForward()
  spec.csharp:
  - uid: VRBuilder.Core.StageProcess`1.FastForward
    name: FastForward
    nameWithType: StageProcess<TEntitySequenceDataWithMode>.FastForward
    fullName: VRBuilder.Core.StageProcess<TEntitySequenceDataWithMode>.FastForward
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.StageProcess`1.FastForward
    name: FastForward
    nameWithType: StageProcess(Of TEntitySequenceDataWithMode).FastForward
    fullName: VRBuilder.Core.StageProcess(Of TEntitySequenceDataWithMode).FastForward
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.FastForward*
  commentId: Overload:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.FastForward
  name: FastForward
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.FastForward
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.FastForward
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).FastForward
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).FastForward
- uid: VRBuilder.Core.StageProcess`1.FastForward
  commentId: M:VRBuilder.Core.StageProcess`1.FastForward
  name: FastForward()
  nameWithType: StageProcess<TData>.FastForward()
  fullName: VRBuilder.Core.StageProcess<TData>.FastForward()
  nameWithType.vb: StageProcess(Of TData).FastForward()
  fullName.vb: VRBuilder.Core.StageProcess(Of TData).FastForward()
  spec.csharp:
  - uid: VRBuilder.Core.StageProcess`1.FastForward
    name: FastForward
    nameWithType: StageProcess<TData>.FastForward
    fullName: VRBuilder.Core.StageProcess<TData>.FastForward
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.StageProcess`1.FastForward
    name: FastForward
    nameWithType: StageProcess(Of TData).FastForward
    fullName: VRBuilder.Core.StageProcess(Of TData).FastForward
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.ShouldActivateCurrent*
  commentId: Overload:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.ShouldActivateCurrent
  name: ShouldActivateCurrent
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.ShouldActivateCurrent
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.ShouldActivateCurrent
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).ShouldActivateCurrent
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).ShouldActivateCurrent
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.ShouldDeactivateCurrent*
  commentId: Overload:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.ShouldDeactivateCurrent
  name: ShouldDeactivateCurrent
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.ShouldDeactivateCurrent
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.ShouldDeactivateCurrent
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).ShouldDeactivateCurrent
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).ShouldDeactivateCurrent
- uid: VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.TryNext*
  commentId: Overload:VRBuilder.Core.EntityOwners.EntityIteratingProcess`2.TryNext
  name: TryNext
  nameWithType: EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.TryNext
  fullName: VRBuilder.Core.EntityOwners.EntityIteratingProcess<TEntitySequenceDataWithMode, TEntity>.TryNext
  nameWithType.vb: EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).TryNext
  fullName.vb: VRBuilder.Core.EntityOwners.EntityIteratingProcess(Of TEntitySequenceDataWithMode, TEntity).TryNext
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
