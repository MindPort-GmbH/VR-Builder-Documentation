### YamlMime:ManagedReference
items:
- uid: VRBuilder.Editor.ProcessValidation.IValidator
  commentId: T:VRBuilder.Editor.ProcessValidation.IValidator
  id: IValidator
  parent: VRBuilder.Editor.ProcessValidation
  children:
  - VRBuilder.Editor.ProcessValidation.IValidator.CanValidate(System.Object)
  - VRBuilder.Editor.ProcessValidation.IValidator.Validate(System.Object,VRBuilder.Editor.ProcessValidation.IContext)
  - VRBuilder.Editor.ProcessValidation.IValidator.ValidatedContext
  - VRBuilder.Editor.ProcessValidation.IValidator.ValidatedType
  langs:
  - csharp
  - vb
  name: IValidator
  nameWithType: IValidator
  fullName: VRBuilder.Editor.ProcessValidation.IValidator
  type: Interface
  source:
    remote:
      path: Source/Core/Editor/ProcessValidation/IValidator.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IValidator
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/ProcessValidation/IValidator.cs
    startLine: 12
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor.ProcessValidation
  summary: "\nValidator provides validation for a specific Type.\n"
  example: []
  syntax:
    content: public interface IValidator
    content.vb: Public Interface IValidator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VRBuilder.Editor.ProcessValidation.IValidator.ValidatedType
  commentId: P:VRBuilder.Editor.ProcessValidation.IValidator.ValidatedType
  id: ValidatedType
  parent: VRBuilder.Editor.ProcessValidation.IValidator
  langs:
  - csharp
  - vb
  name: ValidatedType
  nameWithType: IValidator.ValidatedType
  fullName: VRBuilder.Editor.ProcessValidation.IValidator.ValidatedType
  type: Property
  source:
    remote:
      path: Source/Core/Editor/ProcessValidation/IValidator.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ValidatedType
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/ProcessValidation/IValidator.cs
    startLine: 17
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor.ProcessValidation
  summary: "\nType which is validated by this validator.\n"
  example: []
  syntax:
    content: Type ValidatedType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: ReadOnly Property ValidatedType As Type
  overload: VRBuilder.Editor.ProcessValidation.IValidator.ValidatedType*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VRBuilder.Editor.ProcessValidation.IValidator.ValidatedContext
  commentId: P:VRBuilder.Editor.ProcessValidation.IValidator.ValidatedContext
  id: ValidatedContext
  parent: VRBuilder.Editor.ProcessValidation.IValidator
  langs:
  - csharp
  - vb
  name: ValidatedContext
  nameWithType: IValidator.ValidatedContext
  fullName: VRBuilder.Editor.ProcessValidation.IValidator.ValidatedContext
  type: Property
  source:
    remote:
      path: Source/Core/Editor/ProcessValidation/IValidator.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ValidatedContext
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/ProcessValidation/IValidator.cs
    startLine: 22
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor.ProcessValidation
  summary: "\nType of Context which is this is this validators scope.\n"
  example: []
  syntax:
    content: Type ValidatedContext { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: ReadOnly Property ValidatedContext As Type
  overload: VRBuilder.Editor.ProcessValidation.IValidator.ValidatedContext*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VRBuilder.Editor.ProcessValidation.IValidator.CanValidate(System.Object)
  commentId: M:VRBuilder.Editor.ProcessValidation.IValidator.CanValidate(System.Object)
  id: CanValidate(System.Object)
  parent: VRBuilder.Editor.ProcessValidation.IValidator
  langs:
  - csharp
  - vb
  name: CanValidate(Object)
  nameWithType: IValidator.CanValidate(Object)
  fullName: VRBuilder.Editor.ProcessValidation.IValidator.CanValidate(System.Object)
  type: Method
  source:
    remote:
      path: Source/Core/Editor/ProcessValidation/IValidator.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CanValidate
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/ProcessValidation/IValidator.cs
    startLine: 29
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor.ProcessValidation
  summary: "\nWill return true when the object can be validated by this validator.\n"
  example: []
  syntax:
    content: bool CanValidate(object validatableObject)
    parameters:
    - id: validatableObject
      type: System.Object
      description: Object to validate.
    return:
      type: System.Boolean
      description: True if object can be validated.
    content.vb: Function CanValidate(validatableObject As Object) As Boolean
  overload: VRBuilder.Editor.ProcessValidation.IValidator.CanValidate*
- uid: VRBuilder.Editor.ProcessValidation.IValidator.Validate(System.Object,VRBuilder.Editor.ProcessValidation.IContext)
  commentId: M:VRBuilder.Editor.ProcessValidation.IValidator.Validate(System.Object,VRBuilder.Editor.ProcessValidation.IContext)
  id: Validate(System.Object,VRBuilder.Editor.ProcessValidation.IContext)
  parent: VRBuilder.Editor.ProcessValidation.IValidator
  langs:
  - csharp
  - vb
  name: Validate(Object, IContext)
  nameWithType: IValidator.Validate(Object, IContext)
  fullName: VRBuilder.Editor.ProcessValidation.IValidator.Validate(System.Object, VRBuilder.Editor.ProcessValidation.IContext)
  type: Method
  source:
    remote:
      path: Source/Core/Editor/ProcessValidation/IValidator.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Validate
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/ProcessValidation/IValidator.cs
    startLine: 37
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor.ProcessValidation
  summary: "\nValidates the given object.\n"
  example: []
  syntax:
    content: List<EditorReportEntry> Validate(object validatableObject, IContext context)
    parameters:
    - id: validatableObject
      type: System.Object
      description: Object, which will be validated.
    - id: context
      type: VRBuilder.Editor.ProcessValidation.IContext
      description: Context of the validation.
    return:
      type: System.Collections.Generic.List{VRBuilder.Editor.ProcessValidation.EditorReportEntry}
      description: List of reports regarding invalid objects related to the <code data-dev-comment-type="paramref" class="paramref">validatableObject</code>.
    content.vb: Function Validate(validatableObject As Object, context As IContext) As List(Of EditorReportEntry)
  overload: VRBuilder.Editor.ProcessValidation.IValidator.Validate*
references:
- uid: VRBuilder.Editor.ProcessValidation
  commentId: N:VRBuilder.Editor.ProcessValidation
  name: VRBuilder.Editor.ProcessValidation
  nameWithType: VRBuilder.Editor.ProcessValidation
  fullName: VRBuilder.Editor.ProcessValidation
- uid: VRBuilder.Editor.ProcessValidation.IValidator.ValidatedType*
  commentId: Overload:VRBuilder.Editor.ProcessValidation.IValidator.ValidatedType
  name: ValidatedType
  nameWithType: IValidator.ValidatedType
  fullName: VRBuilder.Editor.ProcessValidation.IValidator.ValidatedType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Editor.ProcessValidation.IValidator.ValidatedContext*
  commentId: Overload:VRBuilder.Editor.ProcessValidation.IValidator.ValidatedContext
  name: ValidatedContext
  nameWithType: IValidator.ValidatedContext
  fullName: VRBuilder.Editor.ProcessValidation.IValidator.ValidatedContext
- uid: VRBuilder.Editor.ProcessValidation.IValidator.CanValidate*
  commentId: Overload:VRBuilder.Editor.ProcessValidation.IValidator.CanValidate
  name: CanValidate
  nameWithType: IValidator.CanValidate
  fullName: VRBuilder.Editor.ProcessValidation.IValidator.CanValidate
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VRBuilder.Editor.ProcessValidation.IValidator.Validate*
  commentId: Overload:VRBuilder.Editor.ProcessValidation.IValidator.Validate
  name: Validate
  nameWithType: IValidator.Validate
  fullName: VRBuilder.Editor.ProcessValidation.IValidator.Validate
- uid: VRBuilder.Editor.ProcessValidation.IContext
  commentId: T:VRBuilder.Editor.ProcessValidation.IContext
  parent: VRBuilder.Editor.ProcessValidation
  name: IContext
  nameWithType: IContext
  fullName: VRBuilder.Editor.ProcessValidation.IContext
- uid: System.Collections.Generic.List{VRBuilder.Editor.ProcessValidation.EditorReportEntry}
  commentId: T:System.Collections.Generic.List{VRBuilder.Editor.ProcessValidation.EditorReportEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<EditorReportEntry>
  nameWithType: List<EditorReportEntry>
  fullName: System.Collections.Generic.List<VRBuilder.Editor.ProcessValidation.EditorReportEntry>
  nameWithType.vb: List(Of EditorReportEntry)
  fullName.vb: System.Collections.Generic.List(Of VRBuilder.Editor.ProcessValidation.EditorReportEntry)
  name.vb: List(Of EditorReportEntry)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Editor.ProcessValidation.EditorReportEntry
    name: EditorReportEntry
    nameWithType: EditorReportEntry
    fullName: VRBuilder.Editor.ProcessValidation.EditorReportEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Editor.ProcessValidation.EditorReportEntry
    name: EditorReportEntry
    nameWithType: EditorReportEntry
    fullName: VRBuilder.Editor.ProcessValidation.EditorReportEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
