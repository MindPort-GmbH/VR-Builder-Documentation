### YamlMime:ManagedReference
items:
- uid: VRBuilder.Editor.PackageManager.Dependency
  commentId: T:VRBuilder.Editor.PackageManager.Dependency
  id: Dependency
  parent: VRBuilder.Editor.PackageManager
  children:
  - VRBuilder.Editor.PackageManager.Dependency.#ctor
  - VRBuilder.Editor.PackageManager.Dependency.EmitOnDisabled
  - VRBuilder.Editor.PackageManager.Dependency.EmitOnEnabled
  - VRBuilder.Editor.PackageManager.Dependency.Layers
  - VRBuilder.Editor.PackageManager.Dependency.OnPackageDisabled
  - VRBuilder.Editor.PackageManager.Dependency.OnPackageEnabled
  - VRBuilder.Editor.PackageManager.Dependency.Package
  - VRBuilder.Editor.PackageManager.Dependency.Priority
  - VRBuilder.Editor.PackageManager.Dependency.Samples
  - VRBuilder.Editor.PackageManager.Dependency.Version
  langs:
  - csharp
  - vb
  name: Dependency
  nameWithType: Dependency
  fullName: VRBuilder.Editor.PackageManager.Dependency
  type: Class
  source:
    remote:
      path: Source/Package-Manager/PackageManager/Dependency.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Dependency
    path: ../../Assets/MindPort/VR Builder/Core/Source/Package-Manager/PackageManager/Dependency.cs
    startLine: 16
  assemblies:
  - VRBuilder.Editor.PackageManager
  namespace: VRBuilder.Editor.PackageManager
  summary: "\nBase class for dependencies used by the <xref href=\"VRBuilder.Editor.PackageManager.DependencyManager\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract class Dependency
    content.vb: Public MustInherit Class Dependency
  inheritance:
  - System.Object
  derivedClasses:
  - VRBuilder.Editor.Netcode.PackageManager.NetcodePackageEnabler
  - VRBuilder.Editor.PackageManager.InputSystemPackageEnabler
  - VRBuilder.Editor.PackageManager.LocalizationPackageEnabler
  - VRBuilder.Editor.PackageManager.NewtonsoftJSONPackageEnabler
  - VRBuilder.Editor.PackageManager.PostProcessingPackageEnabler
  - VRBuilder.Editor.PackageManager.XRInteraction.XRHandsPackageEnabler
  - VRBuilder.Editor.PackageManager.XRInteraction.XRInteractionPackageEnabler
  - VRBuilder.Editor.Vivox.AuthenticationPackageEnabler
  - VRBuilder.Editor.Vivox.VivoxPackageEnabler
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VRBuilder.Editor.PackageManager.Dependency.Package
  commentId: P:VRBuilder.Editor.PackageManager.Dependency.Package
  id: Package
  parent: VRBuilder.Editor.PackageManager.Dependency
  langs:
  - csharp
  - vb
  name: Package
  nameWithType: Dependency.Package
  fullName: VRBuilder.Editor.PackageManager.Dependency.Package
  type: Property
  source:
    remote:
      path: Source/Package-Manager/PackageManager/Dependency.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Package
    path: ../../Assets/MindPort/VR Builder/Core/Source/Package-Manager/PackageManager/Dependency.cs
    startLine: 21
  assemblies:
  - VRBuilder.Editor.PackageManager
  namespace: VRBuilder.Editor.PackageManager
  summary: "\nA string representing the package to be added.\n"
  example: []
  syntax:
    content: public virtual string Package { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable ReadOnly Property Package As String
  overload: VRBuilder.Editor.PackageManager.Dependency.Package*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: VRBuilder.Editor.PackageManager.Dependency.Version
  commentId: P:VRBuilder.Editor.PackageManager.Dependency.Version
  id: Version
  parent: VRBuilder.Editor.PackageManager.Dependency
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: Dependency.Version
  fullName: VRBuilder.Editor.PackageManager.Dependency.Version
  type: Property
  source:
    remote:
      path: Source/Package-Manager/PackageManager/Dependency.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Version
    path: ../../Assets/MindPort/VR Builder/Core/Source/Package-Manager/PackageManager/Dependency.cs
    startLine: 26
  assemblies:
  - VRBuilder.Editor.PackageManager
  namespace: VRBuilder.Editor.PackageManager
  summary: "\nA string representing the version of the package.\n"
  example: []
  syntax:
    content: public virtual string Version { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property Version As String
  overload: VRBuilder.Editor.PackageManager.Dependency.Version*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: VRBuilder.Editor.PackageManager.Dependency.Priority
  commentId: P:VRBuilder.Editor.PackageManager.Dependency.Priority
  id: Priority
  parent: VRBuilder.Editor.PackageManager.Dependency
  langs:
  - csharp
  - vb
  name: Priority
  nameWithType: Dependency.Priority
  fullName: VRBuilder.Editor.PackageManager.Dependency.Priority
  type: Property
  source:
    remote:
      path: Source/Package-Manager/PackageManager/Dependency.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Priority
    path: ../../Assets/MindPort/VR Builder/Core/Source/Package-Manager/PackageManager/Dependency.cs
    startLine: 32
  assemblies:
  - VRBuilder.Editor.PackageManager
  namespace: VRBuilder.Editor.PackageManager
  summary: "\nPriority lets you tweak in which order each <xref href=\"VRBuilder.Editor.PackageManager.Dependency\" data-throw-if-not-resolved=\"false\"></xref> will be performed.\nThe priority is considered from lowest to highest.\n"
  example: []
  syntax:
    content: public virtual int Priority { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable ReadOnly Property Priority As Integer
  overload: VRBuilder.Editor.PackageManager.Dependency.Priority*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: VRBuilder.Editor.PackageManager.Dependency.Samples
  commentId: P:VRBuilder.Editor.PackageManager.Dependency.Samples
  id: Samples
  parent: VRBuilder.Editor.PackageManager.Dependency
  langs:
  - csharp
  - vb
  name: Samples
  nameWithType: Dependency.Samples
  fullName: VRBuilder.Editor.PackageManager.Dependency.Samples
  type: Property
  source:
    remote:
      path: Source/Package-Manager/PackageManager/Dependency.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Samples
    path: ../../Assets/MindPort/VR Builder/Core/Source/Package-Manager/PackageManager/Dependency.cs
    startLine: 37
  assemblies:
  - VRBuilder.Editor.PackageManager
  namespace: VRBuilder.Editor.PackageManager
  summary: "\nCollection of samples to be imported from the Unity Package.\n"
  example: []
  syntax:
    content: public virtual string[] Samples { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public Overridable ReadOnly Property Samples As String()
  overload: VRBuilder.Editor.PackageManager.Dependency.Samples*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: VRBuilder.Editor.PackageManager.Dependency.Layers
  commentId: P:VRBuilder.Editor.PackageManager.Dependency.Layers
  id: Layers
  parent: VRBuilder.Editor.PackageManager.Dependency
  langs:
  - csharp
  - vb
  name: Layers
  nameWithType: Dependency.Layers
  fullName: VRBuilder.Editor.PackageManager.Dependency.Layers
  type: Property
  source:
    remote:
      path: Source/Package-Manager/PackageManager/Dependency.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Layers
    path: ../../Assets/MindPort/VR Builder/Core/Source/Package-Manager/PackageManager/Dependency.cs
    startLine: 42
  assemblies:
  - VRBuilder.Editor.PackageManager
  namespace: VRBuilder.Editor.PackageManager
  summary: "\nA list of layers to be added.\n"
  example: []
  syntax:
    content: protected virtual string[] Layers { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Protected Overridable ReadOnly Property Layers As String()
  overload: VRBuilder.Editor.PackageManager.Dependency.Layers*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: VRBuilder.Editor.PackageManager.Dependency.OnPackageEnabled
  commentId: E:VRBuilder.Editor.PackageManager.Dependency.OnPackageEnabled
  id: OnPackageEnabled
  parent: VRBuilder.Editor.PackageManager.Dependency
  langs:
  - csharp
  - vb
  name: OnPackageEnabled
  nameWithType: Dependency.OnPackageEnabled
  fullName: VRBuilder.Editor.PackageManager.Dependency.OnPackageEnabled
  type: Event
  source:
    remote:
      path: Source/Package-Manager/PackageManager/Dependency.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: OnPackageEnabled
    path: ../../Assets/MindPort/VR Builder/Core/Source/Package-Manager/PackageManager/Dependency.cs
    startLine: 47
  assemblies:
  - VRBuilder.Editor.PackageManager
  namespace: VRBuilder.Editor.PackageManager
  summary: "\nEmitted when this <xref href=\"VRBuilder.Editor.PackageManager.Dependency\" data-throw-if-not-resolved=\"false\"></xref> is set as enabled.\n"
  example: []
  syntax:
    content: public event EventHandler<EventArgs> OnPackageEnabled
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event OnPackageEnabled As EventHandler(Of EventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Editor.PackageManager.Dependency.OnPackageDisabled
  commentId: E:VRBuilder.Editor.PackageManager.Dependency.OnPackageDisabled
  id: OnPackageDisabled
  parent: VRBuilder.Editor.PackageManager.Dependency
  langs:
  - csharp
  - vb
  name: OnPackageDisabled
  nameWithType: Dependency.OnPackageDisabled
  fullName: VRBuilder.Editor.PackageManager.Dependency.OnPackageDisabled
  type: Event
  source:
    remote:
      path: Source/Package-Manager/PackageManager/Dependency.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: OnPackageDisabled
    path: ../../Assets/MindPort/VR Builder/Core/Source/Package-Manager/PackageManager/Dependency.cs
    startLine: 52
  assemblies:
  - VRBuilder.Editor.PackageManager
  namespace: VRBuilder.Editor.PackageManager
  summary: "\nEmitted when this <xref href=\"VRBuilder.Editor.PackageManager.Dependency\" data-throw-if-not-resolved=\"false\"></xref> is set as disabled.\n"
  example: []
  syntax:
    content: public event EventHandler<EventArgs> OnPackageDisabled
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event OnPackageDisabled As EventHandler(Of EventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Editor.PackageManager.Dependency.#ctor
  commentId: M:VRBuilder.Editor.PackageManager.Dependency.#ctor
  id: '#ctor'
  parent: VRBuilder.Editor.PackageManager.Dependency
  langs:
  - csharp
  - vb
  name: Dependency()
  nameWithType: Dependency.Dependency()
  fullName: VRBuilder.Editor.PackageManager.Dependency.Dependency()
  type: Constructor
  source:
    remote:
      path: Source/Package-Manager/PackageManager/Dependency.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Package-Manager/PackageManager/Dependency.cs
    startLine: 82
  assemblies:
  - VRBuilder.Editor.PackageManager
  namespace: VRBuilder.Editor.PackageManager
  syntax:
    content: protected Dependency()
    content.vb: Protected Sub New
  overload: VRBuilder.Editor.PackageManager.Dependency.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VRBuilder.Editor.PackageManager.Dependency.EmitOnEnabled
  commentId: M:VRBuilder.Editor.PackageManager.Dependency.EmitOnEnabled
  id: EmitOnEnabled
  parent: VRBuilder.Editor.PackageManager.Dependency
  langs:
  - csharp
  - vb
  name: EmitOnEnabled()
  nameWithType: Dependency.EmitOnEnabled()
  fullName: VRBuilder.Editor.PackageManager.Dependency.EmitOnEnabled()
  type: Method
  source:
    remote:
      path: Source/Package-Manager/PackageManager/Dependency.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: EmitOnEnabled
    path: ../../Assets/MindPort/VR Builder/Core/Source/Package-Manager/PackageManager/Dependency.cs
    startLine: 92
  assemblies:
  - VRBuilder.Editor.PackageManager
  namespace: VRBuilder.Editor.PackageManager
  syntax:
    content: protected virtual void EmitOnEnabled()
    content.vb: Protected Overridable Sub EmitOnEnabled
  overload: VRBuilder.Editor.PackageManager.Dependency.EmitOnEnabled*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: VRBuilder.Editor.PackageManager.Dependency.EmitOnDisabled
  commentId: M:VRBuilder.Editor.PackageManager.Dependency.EmitOnDisabled
  id: EmitOnDisabled
  parent: VRBuilder.Editor.PackageManager.Dependency
  langs:
  - csharp
  - vb
  name: EmitOnDisabled()
  nameWithType: Dependency.EmitOnDisabled()
  fullName: VRBuilder.Editor.PackageManager.Dependency.EmitOnDisabled()
  type: Method
  source:
    remote:
      path: Source/Package-Manager/PackageManager/Dependency.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: EmitOnDisabled
    path: ../../Assets/MindPort/VR Builder/Core/Source/Package-Manager/PackageManager/Dependency.cs
    startLine: 97
  assemblies:
  - VRBuilder.Editor.PackageManager
  namespace: VRBuilder.Editor.PackageManager
  syntax:
    content: protected virtual void EmitOnDisabled()
    content.vb: Protected Overridable Sub EmitOnDisabled
  overload: VRBuilder.Editor.PackageManager.Dependency.EmitOnDisabled*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: VRBuilder.Editor.PackageManager.DependencyManager
  commentId: T:VRBuilder.Editor.PackageManager.DependencyManager
  name: DependencyManager
  nameWithType: DependencyManager
  fullName: VRBuilder.Editor.PackageManager.DependencyManager
- uid: VRBuilder.Editor.PackageManager
  commentId: N:VRBuilder.Editor.PackageManager
  name: VRBuilder.Editor.PackageManager
  nameWithType: VRBuilder.Editor.PackageManager
  fullName: VRBuilder.Editor.PackageManager
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Editor.PackageManager.Dependency.Package*
  commentId: Overload:VRBuilder.Editor.PackageManager.Dependency.Package
  name: Package
  nameWithType: Dependency.Package
  fullName: VRBuilder.Editor.PackageManager.Dependency.Package
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VRBuilder.Editor.PackageManager.Dependency.Version*
  commentId: Overload:VRBuilder.Editor.PackageManager.Dependency.Version
  name: Version
  nameWithType: Dependency.Version
  fullName: VRBuilder.Editor.PackageManager.Dependency.Version
- uid: VRBuilder.Editor.PackageManager.Dependency
  commentId: T:VRBuilder.Editor.PackageManager.Dependency
  parent: VRBuilder.Editor.PackageManager
  name: Dependency
  nameWithType: Dependency
  fullName: VRBuilder.Editor.PackageManager.Dependency
- uid: VRBuilder.Editor.PackageManager.Dependency.Priority*
  commentId: Overload:VRBuilder.Editor.PackageManager.Dependency.Priority
  name: Priority
  nameWithType: Dependency.Priority
  fullName: VRBuilder.Editor.PackageManager.Dependency.Priority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VRBuilder.Editor.PackageManager.Dependency.Samples*
  commentId: Overload:VRBuilder.Editor.PackageManager.Dependency.Samples
  name: Samples
  nameWithType: Dependency.Samples
  fullName: VRBuilder.Editor.PackageManager.Dependency.Samples
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: VRBuilder.Editor.PackageManager.Dependency.Layers*
  commentId: Overload:VRBuilder.Editor.PackageManager.Dependency.Layers
  name: Layers
  nameWithType: Dependency.Layers
  fullName: VRBuilder.Editor.PackageManager.Dependency.Layers
- uid: System.EventHandler{System.EventArgs}
  commentId: T:System.EventHandler{System.EventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EventArgs>
  nameWithType: EventHandler<EventArgs>
  fullName: System.EventHandler<System.EventArgs>
  nameWithType.vb: EventHandler(Of EventArgs)
  fullName.vb: System.EventHandler(Of System.EventArgs)
  name.vb: EventHandler(Of EventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Editor.PackageManager.Dependency.#ctor*
  commentId: Overload:VRBuilder.Editor.PackageManager.Dependency.#ctor
  name: Dependency
  nameWithType: Dependency.Dependency
  fullName: VRBuilder.Editor.PackageManager.Dependency.Dependency
- uid: VRBuilder.Editor.PackageManager.Dependency.EmitOnEnabled*
  commentId: Overload:VRBuilder.Editor.PackageManager.Dependency.EmitOnEnabled
  name: EmitOnEnabled
  nameWithType: Dependency.EmitOnEnabled
  fullName: VRBuilder.Editor.PackageManager.Dependency.EmitOnEnabled
- uid: VRBuilder.Editor.PackageManager.Dependency.EmitOnDisabled*
  commentId: Overload:VRBuilder.Editor.PackageManager.Dependency.EmitOnDisabled
  name: EmitOnDisabled
  nameWithType: Dependency.EmitOnDisabled
  fullName: VRBuilder.Editor.PackageManager.Dependency.EmitOnDisabled
