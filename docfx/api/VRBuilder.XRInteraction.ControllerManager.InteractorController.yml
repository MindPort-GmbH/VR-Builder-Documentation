### YamlMime:ManagedReference
items:
- uid: VRBuilder.XRInteraction.ControllerManager.InteractorController
  commentId: T:VRBuilder.XRInteraction.ControllerManager.InteractorController
  id: ControllerManager.InteractorController
  parent: VRBuilder.XRInteraction
  children:
  - VRBuilder.XRInteraction.ControllerManager.InteractorController.Attach(GameObject)
  - VRBuilder.XRInteraction.ControllerManager.InteractorController.Enter
  - VRBuilder.XRInteraction.ControllerManager.InteractorController.IsInteractorInteracting
  - VRBuilder.XRInteraction.ControllerManager.InteractorController.Leave
  langs:
  - csharp
  - vb
  name: ControllerManager.InteractorController
  nameWithType: ControllerManager.InteractorController
  fullName: VRBuilder.XRInteraction.ControllerManager.InteractorController
  type: Struct
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: InteractorController
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
    startLine: 60
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nA simple state machine which manages the three pieces of content that are used to represent a\ncontroller state within the XR Interaction Toolkit.\n"
  example: []
  syntax:
    content: public struct InteractorController
    content.vb: Public Structure InteractorController
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: VRBuilder.XRInteraction.ControllerManager.InteractorController.Attach(GameObject)
  commentId: M:VRBuilder.XRInteraction.ControllerManager.InteractorController.Attach(GameObject)
  id: Attach(GameObject)
  parent: VRBuilder.XRInteraction.ControllerManager.InteractorController
  langs:
  - csharp
  - vb
  name: Attach(GameObject)
  nameWithType: ControllerManager.InteractorController.Attach(GameObject)
  fullName: VRBuilder.XRInteraction.ControllerManager.InteractorController.Attach(GameObject)
  type: Method
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Attach
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
    startLine: 87
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nWhen passed a gameObject, this function will scrape the game object for all valid components that we will\ninteract with by enabling/disabling as the state changes\n"
  example: []
  syntax:
    content: public void Attach(GameObject gameObject)
    parameters:
    - id: gameObject
      type: GameObject
      description: The game object to scrape the various components from
    content.vb: Public Sub Attach(gameObject As GameObject)
  overload: VRBuilder.XRInteraction.ControllerManager.InteractorController.Attach*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.XRInteraction.ControllerManager.InteractorController.Enter
  commentId: M:VRBuilder.XRInteraction.ControllerManager.InteractorController.Enter
  id: Enter
  parent: VRBuilder.XRInteraction.ControllerManager.InteractorController
  langs:
  - csharp
  - vb
  name: Enter()
  nameWithType: ControllerManager.InteractorController.Enter()
  fullName: VRBuilder.XRInteraction.ControllerManager.InteractorController.Enter()
  type: Method
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Enter
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
    startLine: 104
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nEnter this state, performs a set of changes to the associated components to enable things\n"
  example: []
  syntax:
    content: public void Enter()
    content.vb: Public Sub Enter
  overload: VRBuilder.XRInteraction.ControllerManager.InteractorController.Enter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.XRInteraction.ControllerManager.InteractorController.Leave
  commentId: M:VRBuilder.XRInteraction.ControllerManager.InteractorController.Leave
  id: Leave
  parent: VRBuilder.XRInteraction.ControllerManager.InteractorController
  langs:
  - csharp
  - vb
  name: Leave()
  nameWithType: ControllerManager.InteractorController.Leave()
  fullName: VRBuilder.XRInteraction.ControllerManager.InteractorController.Leave()
  type: Method
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Leave
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
    startLine: 125
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nLeaves this state, performs a set of changes to the associate components to disable things.\n"
  example: []
  syntax:
    content: public void Leave()
    content.vb: Public Sub Leave
  overload: VRBuilder.XRInteraction.ControllerManager.InteractorController.Leave*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.XRInteraction.ControllerManager.InteractorController.IsInteractorInteracting
  commentId: M:VRBuilder.XRInteraction.ControllerManager.InteractorController.IsInteractorInteracting
  id: IsInteractorInteracting
  parent: VRBuilder.XRInteraction.ControllerManager.InteractorController
  langs:
  - csharp
  - vb
  name: IsInteractorInteracting()
  nameWithType: ControllerManager.InteractorController.IsInteractorInteracting()
  fullName: VRBuilder.XRInteraction.ControllerManager.InteractorController.IsInteractorInteracting()
  type: Method
  source:
    remote:
      path: Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IsInteractorInteracting
    path: ../../Assets/MindPort/VR Builder/Core/Source/XR-Interaction-Component/Source/Runtime/Interaction/Device-based/ControllerManager.cs
    startLine: 146
  assemblies:
  - VRBuilder.XRInteraction
  namespace: VRBuilder.XRInteraction
  summary: "\nTrue if the interactor is either touching or grabbing an interactable.\n"
  example: []
  syntax:
    content: public bool IsInteractorInteracting()
    return:
      type: System.Boolean
    content.vb: Public Function IsInteractorInteracting As Boolean
  overload: VRBuilder.XRInteraction.ControllerManager.InteractorController.IsInteractorInteracting*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VRBuilder.XRInteraction
  commentId: N:VRBuilder.XRInteraction
  name: VRBuilder.XRInteraction
  nameWithType: VRBuilder.XRInteraction
  fullName: VRBuilder.XRInteraction
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.XRInteraction.ControllerManager.InteractorController.Attach*
  commentId: Overload:VRBuilder.XRInteraction.ControllerManager.InteractorController.Attach
  name: Attach
  nameWithType: ControllerManager.InteractorController.Attach
  fullName: VRBuilder.XRInteraction.ControllerManager.InteractorController.Attach
- uid: GameObject
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: GameObject
- uid: VRBuilder.XRInteraction.ControllerManager.InteractorController.Enter*
  commentId: Overload:VRBuilder.XRInteraction.ControllerManager.InteractorController.Enter
  name: Enter
  nameWithType: ControllerManager.InteractorController.Enter
  fullName: VRBuilder.XRInteraction.ControllerManager.InteractorController.Enter
- uid: VRBuilder.XRInteraction.ControllerManager.InteractorController.Leave*
  commentId: Overload:VRBuilder.XRInteraction.ControllerManager.InteractorController.Leave
  name: Leave
  nameWithType: ControllerManager.InteractorController.Leave
  fullName: VRBuilder.XRInteraction.ControllerManager.InteractorController.Leave
- uid: VRBuilder.XRInteraction.ControllerManager.InteractorController.IsInteractorInteracting*
  commentId: Overload:VRBuilder.XRInteraction.ControllerManager.InteractorController.IsInteractorInteracting
  name: IsInteractorInteracting
  nameWithType: ControllerManager.InteractorController.IsInteractorInteracting
  fullName: VRBuilder.XRInteraction.ControllerManager.InteractorController.IsInteractorInteracting
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
