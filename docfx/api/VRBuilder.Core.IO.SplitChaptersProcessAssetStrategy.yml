### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy
  commentId: T:VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy
  id: SplitChaptersProcessAssetStrategy
  parent: VRBuilder.Core.IO
  children:
  - VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateManifest
  - VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateSerializedProcessAssets(VRBuilder.Core.IProcess,VRBuilder.Core.Serialization.IProcessSerializer)
  - VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.GetProcessFromSerializedData(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},VRBuilder.Core.Serialization.IProcessSerializer)
  langs:
  - csharp
  - vb
  name: SplitChaptersProcessAssetStrategy
  nameWithType: SplitChaptersProcessAssetStrategy
  fullName: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/IO/SplitChaptersProcessAssetStrategy.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: SplitChaptersProcessAssetStrategy
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/SplitChaptersProcessAssetStrategy.cs
    startLine: 14
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nAsset strategy that saves the process as a list of chapter, then each chapter in a separate file.\nA manifest file is created as well.\n"
  example: []
  syntax:
    content: 'public class SplitChaptersProcessAssetStrategy : IProcessAssetStrategy'
    content.vb: >-
      Public Class SplitChaptersProcessAssetStrategy

          Implements IProcessAssetStrategy
  inheritance:
  - System.Object
  implements:
  - VRBuilder.Core.IO.IProcessAssetStrategy
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateManifest
  commentId: P:VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateManifest
  id: CreateManifest
  parent: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy
  langs:
  - csharp
  - vb
  name: CreateManifest
  nameWithType: SplitChaptersProcessAssetStrategy.CreateManifest
  fullName: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateManifest
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/IO/SplitChaptersProcessAssetStrategy.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CreateManifest
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/SplitChaptersProcessAssetStrategy.cs
    startLine: 17
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  example: []
  syntax:
    content: public bool CreateManifest { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CreateManifest As Boolean
  overload: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateManifest*
  implements:
  - VRBuilder.Core.IO.IProcessAssetStrategy.CreateManifest
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateSerializedProcessAssets(VRBuilder.Core.IProcess,VRBuilder.Core.Serialization.IProcessSerializer)
  commentId: M:VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateSerializedProcessAssets(VRBuilder.Core.IProcess,VRBuilder.Core.Serialization.IProcessSerializer)
  id: CreateSerializedProcessAssets(VRBuilder.Core.IProcess,VRBuilder.Core.Serialization.IProcessSerializer)
  parent: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy
  langs:
  - csharp
  - vb
  name: CreateSerializedProcessAssets(IProcess, IProcessSerializer)
  nameWithType: SplitChaptersProcessAssetStrategy.CreateSerializedProcessAssets(IProcess, IProcessSerializer)
  fullName: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateSerializedProcessAssets(VRBuilder.Core.IProcess, VRBuilder.Core.Serialization.IProcessSerializer)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/SplitChaptersProcessAssetStrategy.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CreateSerializedProcessAssets
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/SplitChaptersProcessAssetStrategy.cs
    startLine: 20
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  example: []
  syntax:
    content: public IDictionary<string, byte[]> CreateSerializedProcessAssets(IProcess process, IProcessSerializer serializer)
    parameters:
    - id: process
      type: VRBuilder.Core.IProcess
    - id: serializer
      type: VRBuilder.Core.Serialization.IProcessSerializer
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Byte[]}
    content.vb: Public Function CreateSerializedProcessAssets(process As IProcess, serializer As IProcessSerializer) As IDictionary(Of String, Byte())
  overload: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateSerializedProcessAssets*
  implements:
  - VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets(VRBuilder.Core.IProcess,VRBuilder.Core.Serialization.IProcessSerializer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.GetProcessFromSerializedData(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},VRBuilder.Core.Serialization.IProcessSerializer)
  commentId: M:VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.GetProcessFromSerializedData(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},VRBuilder.Core.Serialization.IProcessSerializer)
  id: GetProcessFromSerializedData(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},VRBuilder.Core.Serialization.IProcessSerializer)
  parent: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy
  langs:
  - csharp
  - vb
  name: GetProcessFromSerializedData(Byte[], IEnumerable<Byte[]>, IProcessSerializer)
  nameWithType: SplitChaptersProcessAssetStrategy.GetProcessFromSerializedData(Byte[], IEnumerable<Byte[]>, IProcessSerializer)
  fullName: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.GetProcessFromSerializedData(System.Byte[], System.Collections.Generic.IEnumerable<System.Byte[]>, VRBuilder.Core.Serialization.IProcessSerializer)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/SplitChaptersProcessAssetStrategy.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetProcessFromSerializedData
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/SplitChaptersProcessAssetStrategy.cs
    startLine: 49
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  example: []
  syntax:
    content: public IProcess GetProcessFromSerializedData(byte[] processData, IEnumerable<byte[]> additionalData, IProcessSerializer serializer)
    parameters:
    - id: processData
      type: System.Byte[]
    - id: additionalData
      type: System.Collections.Generic.IEnumerable{System.Byte[]}
    - id: serializer
      type: VRBuilder.Core.Serialization.IProcessSerializer
    return:
      type: VRBuilder.Core.IProcess
    content.vb: Public Function GetProcessFromSerializedData(processData As Byte(), additionalData As IEnumerable(Of Byte()), serializer As IProcessSerializer) As IProcess
  overload: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.GetProcessFromSerializedData*
  implements:
  - VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},VRBuilder.Core.Serialization.IProcessSerializer)
  nameWithType.vb: SplitChaptersProcessAssetStrategy.GetProcessFromSerializedData(Byte(), IEnumerable(Of Byte()), IProcessSerializer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.GetProcessFromSerializedData(System.Byte(), System.Collections.Generic.IEnumerable(Of System.Byte()), VRBuilder.Core.Serialization.IProcessSerializer)
  name.vb: GetProcessFromSerializedData(Byte(), IEnumerable(Of Byte()), IProcessSerializer)
references:
- uid: VRBuilder.Core.IO
  commentId: N:VRBuilder.Core.IO
  name: VRBuilder.Core.IO
  nameWithType: VRBuilder.Core.IO
  fullName: VRBuilder.Core.IO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Core.IO.IProcessAssetStrategy
  commentId: T:VRBuilder.Core.IO.IProcessAssetStrategy
  parent: VRBuilder.Core.IO
  name: IProcessAssetStrategy
  nameWithType: IProcessAssetStrategy
  fullName: VRBuilder.Core.IO.IProcessAssetStrategy
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateManifest*
  commentId: Overload:VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateManifest
  name: CreateManifest
  nameWithType: SplitChaptersProcessAssetStrategy.CreateManifest
  fullName: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateManifest
- uid: VRBuilder.Core.IO.IProcessAssetStrategy.CreateManifest
  commentId: P:VRBuilder.Core.IO.IProcessAssetStrategy.CreateManifest
  parent: VRBuilder.Core.IO.IProcessAssetStrategy
  name: CreateManifest
  nameWithType: IProcessAssetStrategy.CreateManifest
  fullName: VRBuilder.Core.IO.IProcessAssetStrategy.CreateManifest
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateSerializedProcessAssets*
  commentId: Overload:VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateSerializedProcessAssets
  name: CreateSerializedProcessAssets
  nameWithType: SplitChaptersProcessAssetStrategy.CreateSerializedProcessAssets
  fullName: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.CreateSerializedProcessAssets
- uid: VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets(VRBuilder.Core.IProcess,VRBuilder.Core.Serialization.IProcessSerializer)
  commentId: M:VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets(VRBuilder.Core.IProcess,VRBuilder.Core.Serialization.IProcessSerializer)
  parent: VRBuilder.Core.IO.IProcessAssetStrategy
  name: CreateSerializedProcessAssets(IProcess, IProcessSerializer)
  nameWithType: IProcessAssetStrategy.CreateSerializedProcessAssets(IProcess, IProcessSerializer)
  fullName: VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets(VRBuilder.Core.IProcess, VRBuilder.Core.Serialization.IProcessSerializer)
  spec.csharp:
  - uid: VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets(VRBuilder.Core.IProcess,VRBuilder.Core.Serialization.IProcessSerializer)
    name: CreateSerializedProcessAssets
    nameWithType: IProcessAssetStrategy.CreateSerializedProcessAssets
    fullName: VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.IProcess
    name: IProcess
    nameWithType: IProcess
    fullName: VRBuilder.Core.IProcess
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VRBuilder.Core.Serialization.IProcessSerializer
    name: IProcessSerializer
    nameWithType: IProcessSerializer
    fullName: VRBuilder.Core.Serialization.IProcessSerializer
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets(VRBuilder.Core.IProcess,VRBuilder.Core.Serialization.IProcessSerializer)
    name: CreateSerializedProcessAssets
    nameWithType: IProcessAssetStrategy.CreateSerializedProcessAssets
    fullName: VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets
  - name: (
    nameWithType: (
    fullName: (
  - uid: VRBuilder.Core.IProcess
    name: IProcess
    nameWithType: IProcess
    fullName: VRBuilder.Core.IProcess
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VRBuilder.Core.Serialization.IProcessSerializer
    name: IProcessSerializer
    nameWithType: IProcessSerializer
    fullName: VRBuilder.Core.Serialization.IProcessSerializer
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.IProcess
  commentId: T:VRBuilder.Core.IProcess
  parent: VRBuilder.Core
  name: IProcess
  nameWithType: IProcess
  fullName: VRBuilder.Core.IProcess
- uid: VRBuilder.Core.Serialization.IProcessSerializer
  commentId: T:VRBuilder.Core.Serialization.IProcessSerializer
  parent: VRBuilder.Core.Serialization
  name: IProcessSerializer
  nameWithType: IProcessSerializer
  fullName: VRBuilder.Core.Serialization.IProcessSerializer
- uid: System.Collections.Generic.IDictionary{System.String,System.Byte[]}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Byte[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Byte[]>
  nameWithType: IDictionary<String, Byte[]>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Byte[]>
  nameWithType.vb: IDictionary(Of String, Byte())
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Byte())
  name.vb: IDictionary(Of String, Byte())
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core
  commentId: N:VRBuilder.Core
  name: VRBuilder.Core
  nameWithType: VRBuilder.Core
  fullName: VRBuilder.Core
- uid: VRBuilder.Core.Serialization
  commentId: N:VRBuilder.Core.Serialization
  name: VRBuilder.Core.Serialization
  nameWithType: VRBuilder.Core.Serialization
  fullName: VRBuilder.Core.Serialization
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.GetProcessFromSerializedData*
  commentId: Overload:VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.GetProcessFromSerializedData
  name: GetProcessFromSerializedData
  nameWithType: SplitChaptersProcessAssetStrategy.GetProcessFromSerializedData
  fullName: VRBuilder.Core.IO.SplitChaptersProcessAssetStrategy.GetProcessFromSerializedData
- uid: VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},VRBuilder.Core.Serialization.IProcessSerializer)
  commentId: M:VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},VRBuilder.Core.Serialization.IProcessSerializer)
  parent: VRBuilder.Core.IO.IProcessAssetStrategy
  isExternal: true
  name: GetProcessFromSerializedData(Byte[], IEnumerable<Byte[]>, IProcessSerializer)
  nameWithType: IProcessAssetStrategy.GetProcessFromSerializedData(Byte[], IEnumerable<Byte[]>, IProcessSerializer)
  fullName: VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData(System.Byte[], System.Collections.Generic.IEnumerable<System.Byte[]>, VRBuilder.Core.Serialization.IProcessSerializer)
  nameWithType.vb: IProcessAssetStrategy.GetProcessFromSerializedData(Byte(), IEnumerable(Of Byte()), IProcessSerializer)
  fullName.vb: VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData(System.Byte(), System.Collections.Generic.IEnumerable(Of System.Byte()), VRBuilder.Core.Serialization.IProcessSerializer)
  name.vb: GetProcessFromSerializedData(Byte(), IEnumerable(Of Byte()), IProcessSerializer)
  spec.csharp:
  - uid: VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},VRBuilder.Core.Serialization.IProcessSerializer)
    name: GetProcessFromSerializedData
    nameWithType: IProcessAssetStrategy.GetProcessFromSerializedData
    fullName: VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VRBuilder.Core.Serialization.IProcessSerializer
    name: IProcessSerializer
    nameWithType: IProcessSerializer
    fullName: VRBuilder.Core.Serialization.IProcessSerializer
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},VRBuilder.Core.Serialization.IProcessSerializer)
    name: GetProcessFromSerializedData
    nameWithType: IProcessAssetStrategy.GetProcessFromSerializedData
    fullName: VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VRBuilder.Core.Serialization.IProcessSerializer
    name: IProcessSerializer
    nameWithType: IProcessSerializer
    fullName: VRBuilder.Core.Serialization.IProcessSerializer
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{System.Byte[]}
  commentId: T:System.Collections.Generic.IEnumerable{System.Byte[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Byte[]>
  nameWithType: IEnumerable<Byte[]>
  fullName: System.Collections.Generic.IEnumerable<System.Byte[]>
  nameWithType.vb: IEnumerable(Of Byte())
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Byte())
  name.vb: IEnumerable(Of Byte())
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
