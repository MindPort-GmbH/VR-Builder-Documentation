### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1
  commentId: T:VRBuilder.Core.SceneObjects.MultipleSceneReference`1
  id: MultipleSceneReference`1
  parent: VRBuilder.Core.SceneObjects
  children:
  - VRBuilder.Core.SceneObjects.MultipleSceneReference`1.#ctor
  - VRBuilder.Core.SceneObjects.MultipleSceneReference`1.#ctor(System.Collections.Generic.IEnumerable{System.Guid})
  - VRBuilder.Core.SceneObjects.MultipleSceneReference`1.#ctor(System.Guid)
  - VRBuilder.Core.SceneObjects.MultipleSceneReference`1.DetermineValue(System.Collections.Generic.IEnumerable{`0})
  - VRBuilder.Core.SceneObjects.MultipleSceneReference`1.HasValue
  - VRBuilder.Core.SceneObjects.MultipleSceneReference`1.op_Implicit(VRBuilder.Core.SceneObjects.MultipleSceneReference{`0})~System.Collections.Generic.List{`0}
  - VRBuilder.Core.SceneObjects.MultipleSceneReference`1.ToString
  - VRBuilder.Core.SceneObjects.MultipleSceneReference`1.Values
  langs:
  - csharp
  - vb
  name: MultipleSceneReference<T>
  nameWithType: MultipleSceneReference<T>
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: MultipleSceneReference
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
    startLine: 11
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nStep inspector reference to multiple objects.\n"
  example: []
  syntax:
    content: >-
      [DataContract(IsReference = true)]

      public abstract class MultipleSceneReference<T> : ProcessSceneReference<T>, ICanBeEmpty where T : class
    typeParameters:
    - id: T
    content.vb: >-
      <DataContract(IsReference:=True)>

      Public MustInherit Class MultipleSceneReference(Of T As Class)
          Inherits ProcessSceneReference(Of T)
          Implements ICanBeEmpty
  inheritance:
  - System.Object
  - VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase
  - VRBuilder.Core.SceneObjects.ProcessSceneReference{{T}}
  derivedClasses:
  - VRBuilder.Core.SceneObjects.MultipleSceneObjectReference
  - VRBuilder.Core.SceneObjects.MultipleScenePropertyReference`1
  implements:
  - VRBuilder.Core.Runtime.Properties.ICanBeEmpty
  inheritedMembers:
  - VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.Guids
  - VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.AddGuid(System.Guid)
  - VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.RemoveGuid(System.Guid)
  - VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.ResetGuids(System.Collections.Generic.IEnumerable{System.Guid})
  - VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.IsEmpty
  - VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.Equals(System.Object)
  - VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: IsReference
      type: System.Boolean
      value: true
  nameWithType.vb: MultipleSceneReference(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T)
  name.vb: MultipleSceneReference(Of T)
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.Values
  commentId: P:VRBuilder.Core.SceneObjects.MultipleSceneReference`1.Values
  id: Values
  parent: VRBuilder.Core.SceneObjects.MultipleSceneReference`1
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: MultipleSceneReference<T>.Values
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>.Values
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Values
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
    startLine: 17
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nThe referenced values.\n"
  example: []
  syntax:
    content: public IEnumerable<T> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public ReadOnly Property Values As IEnumerable(Of T)
  overload: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.Values*
  nameWithType.vb: MultipleSceneReference(Of T).Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T).Values
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.DetermineValue(System.Collections.Generic.IEnumerable{`0})
  commentId: M:VRBuilder.Core.SceneObjects.MultipleSceneReference`1.DetermineValue(System.Collections.Generic.IEnumerable{`0})
  id: DetermineValue(System.Collections.Generic.IEnumerable{`0})
  parent: VRBuilder.Core.SceneObjects.MultipleSceneReference`1
  langs:
  - csharp
  - vb
  name: DetermineValue(IEnumerable<T>)
  nameWithType: MultipleSceneReference<T>.DetermineValue(IEnumerable<T>)
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>.DetermineValue(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: DetermineValue
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
    startLine: 28
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nDetermine the objects referenced by this scene reference.\n"
  example: []
  syntax:
    content: protected abstract IEnumerable<T> DetermineValue(IEnumerable<T> cachedValue)
    parameters:
    - id: cachedValue
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Protected MustOverride Function DetermineValue(cachedValue As IEnumerable(Of T)) As IEnumerable(Of T)
  overload: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.DetermineValue*
  nameWithType.vb: MultipleSceneReference(Of T).DetermineValue(IEnumerable(Of T))
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T).DetermineValue(System.Collections.Generic.IEnumerable(Of T))
  name.vb: DetermineValue(IEnumerable(Of T))
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.HasValue
  commentId: M:VRBuilder.Core.SceneObjects.MultipleSceneReference`1.HasValue
  id: HasValue
  parent: VRBuilder.Core.SceneObjects.MultipleSceneReference`1
  langs:
  - csharp
  - vb
  name: HasValue()
  nameWithType: MultipleSceneReference<T>.HasValue()
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>.HasValue()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: HasValue
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
    startLine: 34
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nReturns true if the reference contains a non-null value.\n"
  example: []
  syntax:
    content: public override bool HasValue()
    return:
      type: System.Boolean
    content.vb: Public Overrides Function HasValue As Boolean
  overridden: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.HasValue
  overload: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.HasValue*
  nameWithType.vb: MultipleSceneReference(Of T).HasValue()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T).HasValue()
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.op_Implicit(VRBuilder.Core.SceneObjects.MultipleSceneReference{`0})~System.Collections.Generic.List{`0}
  commentId: M:VRBuilder.Core.SceneObjects.MultipleSceneReference`1.op_Implicit(VRBuilder.Core.SceneObjects.MultipleSceneReference{`0})~System.Collections.Generic.List{`0}
  id: op_Implicit(VRBuilder.Core.SceneObjects.MultipleSceneReference{`0})~System.Collections.Generic.List{`0}
  parent: VRBuilder.Core.SceneObjects.MultipleSceneReference`1
  langs:
  - csharp
  - vb
  name: Implicit(MultipleSceneReference<T> to List<T>)
  nameWithType: MultipleSceneReference<T>.Implicit(MultipleSceneReference<T> to List<T>)
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>.Implicit(VRBuilder.Core.SceneObjects.MultipleSceneReference<T> to System.Collections.Generic.List<T>)
  type: Operator
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: op_Implicit
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
    startLine: 39
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  syntax:
    content: public static implicit operator List<T>(MultipleSceneReference<T> reference)
    parameters:
    - id: reference
      type: VRBuilder.Core.SceneObjects.MultipleSceneReference`1
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Shared Widening Operator CType(reference As MultipleSceneReference(Of T)) As List(Of T)
  overload: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.op_Implicit*
  nameWithType.vb: MultipleSceneReference(Of T).Widening(MultipleSceneReference(Of T) to List(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T).Widening(VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T) to System.Collections.Generic.List(Of T))
  name.vb: Widening(MultipleSceneReference(Of T) to List(Of T))
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.ToString
  commentId: M:VRBuilder.Core.SceneObjects.MultipleSceneReference`1.ToString
  id: ToString
  parent: VRBuilder.Core.SceneObjects.MultipleSceneReference`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: MultipleSceneReference<T>.ToString()
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>.ToString()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ToString
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
    startLine: 44
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.ToString*
  nameWithType.vb: MultipleSceneReference(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T).ToString()
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.#ctor
  commentId: M:VRBuilder.Core.SceneObjects.MultipleSceneReference`1.#ctor
  id: '#ctor'
  parent: VRBuilder.Core.SceneObjects.MultipleSceneReference`1
  langs:
  - csharp
  - vb
  name: MultipleSceneReference()
  nameWithType: MultipleSceneReference<T>.MultipleSceneReference()
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>.MultipleSceneReference()
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
    startLine: 64
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  syntax:
    content: public MultipleSceneReference()
    content.vb: Public Sub New
  overload: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.#ctor*
  nameWithType.vb: MultipleSceneReference(Of T).MultipleSceneReference()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T).MultipleSceneReference()
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.#ctor(System.Guid)
  commentId: M:VRBuilder.Core.SceneObjects.MultipleSceneReference`1.#ctor(System.Guid)
  id: '#ctor(System.Guid)'
  parent: VRBuilder.Core.SceneObjects.MultipleSceneReference`1
  langs:
  - csharp
  - vb
  name: MultipleSceneReference(Guid)
  nameWithType: MultipleSceneReference<T>.MultipleSceneReference(Guid)
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>.MultipleSceneReference(System.Guid)
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
    startLine: 65
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  syntax:
    content: public MultipleSceneReference(Guid guid)
    parameters:
    - id: guid
      type: System.Guid
    content.vb: Public Sub New(guid As Guid)
  overload: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.#ctor*
  nameWithType.vb: MultipleSceneReference(Of T).MultipleSceneReference(Guid)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T).MultipleSceneReference(System.Guid)
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.#ctor(System.Collections.Generic.IEnumerable{System.Guid})
  commentId: M:VRBuilder.Core.SceneObjects.MultipleSceneReference`1.#ctor(System.Collections.Generic.IEnumerable{System.Guid})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Guid})'
  parent: VRBuilder.Core.SceneObjects.MultipleSceneReference`1
  langs:
  - csharp
  - vb
  name: MultipleSceneReference(IEnumerable<Guid>)
  nameWithType: MultipleSceneReference<T>.MultipleSceneReference(IEnumerable<Guid>)
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>.MultipleSceneReference(System.Collections.Generic.IEnumerable<System.Guid>)
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/MultipleSceneReference.cs
    startLine: 66
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  syntax:
    content: public MultipleSceneReference(IEnumerable<Guid> guids)
    parameters:
    - id: guids
      type: System.Collections.Generic.IEnumerable{System.Guid}
    content.vb: Public Sub New(guids As IEnumerable(Of Guid))
  overload: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.#ctor*
  nameWithType.vb: MultipleSceneReference(Of T).MultipleSceneReference(IEnumerable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T).MultipleSceneReference(System.Collections.Generic.IEnumerable(Of System.Guid))
  name.vb: MultipleSceneReference(IEnumerable(Of Guid))
references:
- uid: VRBuilder.Core.SceneObjects
  commentId: N:VRBuilder.Core.SceneObjects
  name: VRBuilder.Core.SceneObjects
  nameWithType: VRBuilder.Core.SceneObjects
  fullName: VRBuilder.Core.SceneObjects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase
  commentId: T:VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase
  parent: VRBuilder.Core.SceneObjects
  name: ProcessSceneReferenceBase
  nameWithType: ProcessSceneReferenceBase
  fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase
- uid: VRBuilder.Core.SceneObjects.ProcessSceneReference{{T}}
  commentId: T:VRBuilder.Core.SceneObjects.ProcessSceneReference{`0}
  parent: VRBuilder.Core.SceneObjects
  definition: VRBuilder.Core.SceneObjects.ProcessSceneReference`1
  name: ProcessSceneReference<T>
  nameWithType: ProcessSceneReference<T>
  fullName: VRBuilder.Core.SceneObjects.ProcessSceneReference<T>
  nameWithType.vb: ProcessSceneReference(Of T)
  fullName.vb: VRBuilder.Core.SceneObjects.ProcessSceneReference(Of T)
  name.vb: ProcessSceneReference(Of T)
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReference`1
    name: ProcessSceneReference
    nameWithType: ProcessSceneReference
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReference
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReference`1
    name: ProcessSceneReference
    nameWithType: ProcessSceneReference
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReference
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Runtime.Properties.ICanBeEmpty
  commentId: T:VRBuilder.Core.Runtime.Properties.ICanBeEmpty
  parent: VRBuilder.Core.Runtime.Properties
  name: ICanBeEmpty
  nameWithType: ICanBeEmpty
  fullName: VRBuilder.Core.Runtime.Properties.ICanBeEmpty
- uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.Guids
  commentId: P:VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.Guids
  parent: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase
  name: Guids
  nameWithType: ProcessSceneReferenceBase.Guids
  fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.Guids
- uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.AddGuid(System.Guid)
  commentId: M:VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.AddGuid(System.Guid)
  parent: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase
  isExternal: true
  name: AddGuid(Guid)
  nameWithType: ProcessSceneReferenceBase.AddGuid(Guid)
  fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.AddGuid(System.Guid)
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.AddGuid(System.Guid)
    name: AddGuid
    nameWithType: ProcessSceneReferenceBase.AddGuid
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.AddGuid
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.AddGuid(System.Guid)
    name: AddGuid
    nameWithType: ProcessSceneReferenceBase.AddGuid
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.AddGuid
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.RemoveGuid(System.Guid)
  commentId: M:VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.RemoveGuid(System.Guid)
  parent: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase
  isExternal: true
  name: RemoveGuid(Guid)
  nameWithType: ProcessSceneReferenceBase.RemoveGuid(Guid)
  fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.RemoveGuid(System.Guid)
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.RemoveGuid(System.Guid)
    name: RemoveGuid
    nameWithType: ProcessSceneReferenceBase.RemoveGuid
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.RemoveGuid
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.RemoveGuid(System.Guid)
    name: RemoveGuid
    nameWithType: ProcessSceneReferenceBase.RemoveGuid
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.RemoveGuid
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.ResetGuids(System.Collections.Generic.IEnumerable{System.Guid})
  commentId: M:VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.ResetGuids(System.Collections.Generic.IEnumerable{System.Guid})
  parent: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase
  isExternal: true
  name: ResetGuids(IEnumerable<Guid>)
  nameWithType: ProcessSceneReferenceBase.ResetGuids(IEnumerable<Guid>)
  fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.ResetGuids(System.Collections.Generic.IEnumerable<System.Guid>)
  nameWithType.vb: ProcessSceneReferenceBase.ResetGuids(IEnumerable(Of Guid))
  fullName.vb: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.ResetGuids(System.Collections.Generic.IEnumerable(Of System.Guid))
  name.vb: ResetGuids(IEnumerable(Of Guid))
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.ResetGuids(System.Collections.Generic.IEnumerable{System.Guid})
    name: ResetGuids
    nameWithType: ProcessSceneReferenceBase.ResetGuids
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.ResetGuids
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.ResetGuids(System.Collections.Generic.IEnumerable{System.Guid})
    name: ResetGuids
    nameWithType: ProcessSceneReferenceBase.ResetGuids
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.ResetGuids
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.IsEmpty
  commentId: M:VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.IsEmpty
  parent: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase
  name: IsEmpty()
  nameWithType: ProcessSceneReferenceBase.IsEmpty()
  fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.IsEmpty()
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.IsEmpty
    name: IsEmpty
    nameWithType: ProcessSceneReferenceBase.IsEmpty
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.IsEmpty
    name: IsEmpty
    nameWithType: ProcessSceneReferenceBase.IsEmpty
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.Equals(System.Object)
  commentId: M:VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.Equals(System.Object)
  parent: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase
  isExternal: true
  name: Equals(Object)
  nameWithType: ProcessSceneReferenceBase.Equals(Object)
  fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.Equals(System.Object)
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.Equals(System.Object)
    name: Equals
    nameWithType: ProcessSceneReferenceBase.Equals
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.Equals(System.Object)
    name: Equals
    nameWithType: ProcessSceneReferenceBase.Equals
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.GetHashCode
  commentId: M:VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.GetHashCode
  parent: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase
  name: GetHashCode()
  nameWithType: ProcessSceneReferenceBase.GetHashCode()
  fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.GetHashCode()
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.GetHashCode
    name: GetHashCode
    nameWithType: ProcessSceneReferenceBase.GetHashCode
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.GetHashCode
    name: GetHashCode
    nameWithType: ProcessSceneReferenceBase.GetHashCode
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.SceneObjects.ProcessSceneReference`1
  commentId: T:VRBuilder.Core.SceneObjects.ProcessSceneReference`1
  name: ProcessSceneReference<T>
  nameWithType: ProcessSceneReference<T>
  fullName: VRBuilder.Core.SceneObjects.ProcessSceneReference<T>
  nameWithType.vb: ProcessSceneReference(Of T)
  fullName.vb: VRBuilder.Core.SceneObjects.ProcessSceneReference(Of T)
  name.vb: ProcessSceneReference(Of T)
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReference`1
    name: ProcessSceneReference
    nameWithType: ProcessSceneReference
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReference
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReference`1
    name: ProcessSceneReference
    nameWithType: ProcessSceneReference
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReference
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Runtime.Properties
  commentId: N:VRBuilder.Core.Runtime.Properties
  name: VRBuilder.Core.Runtime.Properties
  nameWithType: VRBuilder.Core.Runtime.Properties
  fullName: VRBuilder.Core.Runtime.Properties
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.Values*
  commentId: Overload:VRBuilder.Core.SceneObjects.MultipleSceneReference`1.Values
  name: Values
  nameWithType: MultipleSceneReference<T>.Values
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>.Values
  nameWithType.vb: MultipleSceneReference(Of T).Values
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T).Values
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.DetermineValue*
  commentId: Overload:VRBuilder.Core.SceneObjects.MultipleSceneReference`1.DetermineValue
  name: DetermineValue
  nameWithType: MultipleSceneReference<T>.DetermineValue
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>.DetermineValue
  nameWithType.vb: MultipleSceneReference(Of T).DetermineValue
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T).DetermineValue
- uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.HasValue
  commentId: M:VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.HasValue
  parent: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase
  name: HasValue()
  nameWithType: ProcessSceneReferenceBase.HasValue()
  fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.HasValue()
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.HasValue
    name: HasValue
    nameWithType: ProcessSceneReferenceBase.HasValue
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.HasValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.HasValue
    name: HasValue
    nameWithType: ProcessSceneReferenceBase.HasValue
    fullName: VRBuilder.Core.SceneObjects.ProcessSceneReferenceBase.HasValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.HasValue*
  commentId: Overload:VRBuilder.Core.SceneObjects.MultipleSceneReference`1.HasValue
  name: HasValue
  nameWithType: MultipleSceneReference<T>.HasValue
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>.HasValue
  nameWithType.vb: MultipleSceneReference(Of T).HasValue
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T).HasValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.op_Implicit*
  commentId: Overload:VRBuilder.Core.SceneObjects.MultipleSceneReference`1.op_Implicit
  name: Implicit
  nameWithType: MultipleSceneReference<T>.Implicit
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>.Implicit
  nameWithType.vb: MultipleSceneReference(Of T).Widening
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T).Widening
  name.vb: Widening
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1
  commentId: T:VRBuilder.Core.SceneObjects.MultipleSceneReference`1
  parent: VRBuilder.Core.SceneObjects
  name: MultipleSceneReference<T>
  nameWithType: MultipleSceneReference<T>
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>
  nameWithType.vb: MultipleSceneReference(Of T)
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T)
  name.vb: MultipleSceneReference(Of T)
  spec.csharp:
  - uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1
    name: MultipleSceneReference
    nameWithType: MultipleSceneReference
    fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1
    name: MultipleSceneReference
    nameWithType: MultipleSceneReference
    fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.ToString*
  commentId: Overload:VRBuilder.Core.SceneObjects.MultipleSceneReference`1.ToString
  name: ToString
  nameWithType: MultipleSceneReference<T>.ToString
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>.ToString
  nameWithType.vb: MultipleSceneReference(Of T).ToString
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VRBuilder.Core.SceneObjects.MultipleSceneReference`1.#ctor*
  commentId: Overload:VRBuilder.Core.SceneObjects.MultipleSceneReference`1.#ctor
  name: MultipleSceneReference
  nameWithType: MultipleSceneReference<T>.MultipleSceneReference
  fullName: VRBuilder.Core.SceneObjects.MultipleSceneReference<T>.MultipleSceneReference
  nameWithType.vb: MultipleSceneReference(Of T).MultipleSceneReference
  fullName.vb: VRBuilder.Core.SceneObjects.MultipleSceneReference(Of T).MultipleSceneReference
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Collections.Generic.IEnumerable{System.Guid}
  commentId: T:System.Collections.Generic.IEnumerable{System.Guid}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Guid>
  nameWithType: IEnumerable<Guid>
  fullName: System.Collections.Generic.IEnumerable<System.Guid>
  nameWithType.vb: IEnumerable(Of Guid)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Guid)
  name.vb: IEnumerable(Of Guid)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
