### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Input.InputController
  commentId: T:VRBuilder.Core.Input.InputController
  id: InputController
  parent: VRBuilder.Core.Input
  children:
  - VRBuilder.Core.Input.InputController.Awake
  - VRBuilder.Core.Input.InputController.CurrentInputFocus
  - VRBuilder.Core.Input.InputController.Focus(VRBuilder.Core.Input.IInputFocus)
  - VRBuilder.Core.Input.InputController.ListenerDictionary
  - VRBuilder.Core.Input.InputController.OnFocused
  - VRBuilder.Core.Input.InputController.OnFocusReleased
  - VRBuilder.Core.Input.InputController.RegisterEvent(VRBuilder.Core.Input.IInputActionListener,System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  - VRBuilder.Core.Input.InputController.ReleaseFocus
  - VRBuilder.Core.Input.InputController.Reset
  - VRBuilder.Core.Input.InputController.Setup
  - VRBuilder.Core.Input.InputController.UnregisterEvent(VRBuilder.Core.Input.IInputActionListener,System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  langs:
  - csharp
  - vb
  name: InputController
  nameWithType: InputController
  fullName: VRBuilder.Core.Input.InputController
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/Input/InputController.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: InputController
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputController.cs
    startLine: 13
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  summary: "\nCentral controller for input via the new Input System using C# events.\n"
  example: []
  syntax:
    content: 'public abstract class InputController : UnitySceneSingleton<InputController>'
    content.vb: >-
      Public MustInherit Class InputController
          Inherits UnitySceneSingleton(Of InputController)
  inheritance:
  - System.Object
  - VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}
  inheritedMembers:
  - VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.ConcreteType
  - VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.Instance
  - VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.Exists
  - VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.GetName
  - VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.OnDestroy
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VRBuilder.Core.Input.InputController.OnFocused
  commentId: F:VRBuilder.Core.Input.InputController.OnFocused
  id: OnFocused
  parent: VRBuilder.Core.Input.InputController
  langs:
  - csharp
  - vb
  name: OnFocused
  nameWithType: InputController.OnFocused
  fullName: VRBuilder.Core.Input.InputController.OnFocused
  type: Field
  source:
    remote:
      path: Source/Core/Runtime/Input/InputController.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: OnFocused
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputController.cs
    startLine: 53
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  summary: "\nWill be called when an object is focused.\n"
  example: []
  syntax:
    content: public EventHandler<InputController.InputFocusEventArgs> OnFocused
    return:
      type: System.EventHandler{VRBuilder.Core.Input.InputController.InputFocusEventArgs}
    content.vb: Public OnFocused As EventHandler(Of InputController.InputFocusEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.Input.InputController.OnFocusReleased
  commentId: F:VRBuilder.Core.Input.InputController.OnFocusReleased
  id: OnFocusReleased
  parent: VRBuilder.Core.Input.InputController
  langs:
  - csharp
  - vb
  name: OnFocusReleased
  nameWithType: InputController.OnFocusReleased
  fullName: VRBuilder.Core.Input.InputController.OnFocusReleased
  type: Field
  source:
    remote:
      path: Source/Core/Runtime/Input/InputController.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: OnFocusReleased
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputController.cs
    startLine: 58
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  summary: "\nWill be called when the focus on an object is released.\n"
  example: []
  syntax:
    content: public EventHandler<InputController.InputFocusEventArgs> OnFocusReleased
    return:
      type: System.EventHandler{VRBuilder.Core.Input.InputController.InputFocusEventArgs}
    content.vb: Public OnFocusReleased As EventHandler(Of InputController.InputFocusEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.Input.InputController.CurrentInputFocus
  commentId: P:VRBuilder.Core.Input.InputController.CurrentInputFocus
  id: CurrentInputFocus
  parent: VRBuilder.Core.Input.InputController
  langs:
  - csharp
  - vb
  name: CurrentInputFocus
  nameWithType: InputController.CurrentInputFocus
  fullName: VRBuilder.Core.Input.InputController.CurrentInputFocus
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Input/InputController.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CurrentInputFocus
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputController.cs
    startLine: 63
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  summary: "\nCurrently focused object.\n"
  example: []
  syntax:
    content: protected IInputFocus CurrentInputFocus { get; set; }
    parameters: []
    return:
      type: VRBuilder.Core.Input.IInputFocus
    content.vb: Protected Property CurrentInputFocus As IInputFocus
  overload: VRBuilder.Core.Input.InputController.CurrentInputFocus*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: VRBuilder.Core.Input.InputController.ListenerDictionary
  commentId: P:VRBuilder.Core.Input.InputController.ListenerDictionary
  id: ListenerDictionary
  parent: VRBuilder.Core.Input.InputController
  langs:
  - csharp
  - vb
  name: ListenerDictionary
  nameWithType: InputController.ListenerDictionary
  fullName: VRBuilder.Core.Input.InputController.ListenerDictionary
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Input/InputController.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ListenerDictionary
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputController.cs
    startLine: 68
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  summary: "\nRegistered listener.\n"
  example: []
  syntax:
    content: protected Dictionary<string, List<InputController.ListenerInfo>> ListenerDictionary { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{VRBuilder.Core.Input.InputController.ListenerInfo}}
    content.vb: Protected ReadOnly Property ListenerDictionary As Dictionary(Of String, List(Of InputController.ListenerInfo))
  overload: VRBuilder.Core.Input.InputController.ListenerDictionary*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: VRBuilder.Core.Input.InputController.RegisterEvent(VRBuilder.Core.Input.IInputActionListener,System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  commentId: M:VRBuilder.Core.Input.InputController.RegisterEvent(VRBuilder.Core.Input.IInputActionListener,System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  id: RegisterEvent(VRBuilder.Core.Input.IInputActionListener,System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  parent: VRBuilder.Core.Input.InputController
  langs:
  - csharp
  - vb
  name: RegisterEvent(IInputActionListener, Action<InputController.InputEventArgs>)
  nameWithType: InputController.RegisterEvent(IInputActionListener, Action<InputController.InputEventArgs>)
  fullName: VRBuilder.Core.Input.InputController.RegisterEvent(VRBuilder.Core.Input.IInputActionListener, System.Action<VRBuilder.Core.Input.InputController.InputEventArgs>)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Input/InputController.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: RegisterEvent
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputController.cs
    startLine: 75
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  summary: "\nRegisters an action event to input.\n"
  example: []
  syntax:
    content: public void RegisterEvent(IInputActionListener listener, Action<InputController.InputEventArgs> action)
    parameters:
    - id: listener
      type: VRBuilder.Core.Input.IInputActionListener
      description: The listener owning the action.
    - id: action
      type: System.Action{VRBuilder.Core.Input.InputController.InputEventArgs}
      description: The action method which will be called.
    content.vb: Public Sub RegisterEvent(listener As IInputActionListener, action As Action(Of InputController.InputEventArgs))
  overload: VRBuilder.Core.Input.InputController.RegisterEvent*
  nameWithType.vb: InputController.RegisterEvent(IInputActionListener, Action(Of InputController.InputEventArgs))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Input.InputController.RegisterEvent(VRBuilder.Core.Input.IInputActionListener, System.Action(Of VRBuilder.Core.Input.InputController.InputEventArgs))
  name.vb: RegisterEvent(IInputActionListener, Action(Of InputController.InputEventArgs))
- uid: VRBuilder.Core.Input.InputController.UnregisterEvent(VRBuilder.Core.Input.IInputActionListener,System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  commentId: M:VRBuilder.Core.Input.InputController.UnregisterEvent(VRBuilder.Core.Input.IInputActionListener,System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  id: UnregisterEvent(VRBuilder.Core.Input.IInputActionListener,System.Action{VRBuilder.Core.Input.InputController.InputEventArgs})
  parent: VRBuilder.Core.Input.InputController
  langs:
  - csharp
  - vb
  name: UnregisterEvent(IInputActionListener, Action<InputController.InputEventArgs>)
  nameWithType: InputController.UnregisterEvent(IInputActionListener, Action<InputController.InputEventArgs>)
  fullName: VRBuilder.Core.Input.InputController.UnregisterEvent(VRBuilder.Core.Input.IInputActionListener, System.Action<VRBuilder.Core.Input.InputController.InputEventArgs>)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Input/InputController.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: UnregisterEvent
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputController.cs
    startLine: 92
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  summary: "\nUnregisters the given listeners action.\n"
  example: []
  syntax:
    content: public void UnregisterEvent(IInputActionListener listener, Action<InputController.InputEventArgs> action)
    parameters:
    - id: listener
      type: VRBuilder.Core.Input.IInputActionListener
    - id: action
      type: System.Action{VRBuilder.Core.Input.InputController.InputEventArgs}
    content.vb: Public Sub UnregisterEvent(listener As IInputActionListener, action As Action(Of InputController.InputEventArgs))
  overload: VRBuilder.Core.Input.InputController.UnregisterEvent*
  nameWithType.vb: InputController.UnregisterEvent(IInputActionListener, Action(Of InputController.InputEventArgs))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRBuilder.Core.Input.InputController.UnregisterEvent(VRBuilder.Core.Input.IInputActionListener, System.Action(Of VRBuilder.Core.Input.InputController.InputEventArgs))
  name.vb: UnregisterEvent(IInputActionListener, Action(Of InputController.InputEventArgs))
- uid: VRBuilder.Core.Input.InputController.Focus(VRBuilder.Core.Input.IInputFocus)
  commentId: M:VRBuilder.Core.Input.InputController.Focus(VRBuilder.Core.Input.IInputFocus)
  id: Focus(VRBuilder.Core.Input.IInputFocus)
  parent: VRBuilder.Core.Input.InputController
  langs:
  - csharp
  - vb
  name: Focus(IInputFocus)
  nameWithType: InputController.Focus(IInputFocus)
  fullName: VRBuilder.Core.Input.InputController.Focus(VRBuilder.Core.Input.IInputFocus)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Input/InputController.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Focus
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputController.cs
    startLine: 102
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  summary: "\nFocus the given input focus target.\n"
  example: []
  syntax:
    content: public abstract void Focus(IInputFocus target)
    parameters:
    - id: target
      type: VRBuilder.Core.Input.IInputFocus
    content.vb: Public MustOverride Sub Focus(target As IInputFocus)
  overload: VRBuilder.Core.Input.InputController.Focus*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: VRBuilder.Core.Input.InputController.ReleaseFocus
  commentId: M:VRBuilder.Core.Input.InputController.ReleaseFocus
  id: ReleaseFocus
  parent: VRBuilder.Core.Input.InputController
  langs:
  - csharp
  - vb
  name: ReleaseFocus()
  nameWithType: InputController.ReleaseFocus()
  fullName: VRBuilder.Core.Input.InputController.ReleaseFocus()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Input/InputController.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ReleaseFocus
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputController.cs
    startLine: 107
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  summary: "\nReleases the focus, if possible.\n"
  example: []
  syntax:
    content: public abstract void ReleaseFocus()
    content.vb: Public MustOverride Sub ReleaseFocus
  overload: VRBuilder.Core.Input.InputController.ReleaseFocus*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: VRBuilder.Core.Input.InputController.Awake
  commentId: M:VRBuilder.Core.Input.InputController.Awake
  id: Awake
  parent: VRBuilder.Core.Input.InputController
  langs:
  - csharp
  - vb
  name: Awake()
  nameWithType: InputController.Awake()
  fullName: VRBuilder.Core.Input.InputController.Awake()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Input/InputController.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Awake
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputController.cs
    startLine: 110
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  syntax:
    content: protected override void Awake()
    content.vb: Protected Overrides Sub Awake
  overridden: VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.Awake
  overload: VRBuilder.Core.Input.InputController.Awake*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: VRBuilder.Core.Input.InputController.Reset
  commentId: M:VRBuilder.Core.Input.InputController.Reset
  id: Reset
  parent: VRBuilder.Core.Input.InputController
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: InputController.Reset()
  fullName: VRBuilder.Core.Input.InputController.Reset()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Input/InputController.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Reset
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputController.cs
    startLine: 116
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  syntax:
    content: protected virtual void Reset()
    content.vb: Protected Overridable Sub Reset
  overload: VRBuilder.Core.Input.InputController.Reset*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: VRBuilder.Core.Input.InputController.Setup
  commentId: M:VRBuilder.Core.Input.InputController.Setup
  id: Setup
  parent: VRBuilder.Core.Input.InputController
  langs:
  - csharp
  - vb
  name: Setup()
  nameWithType: InputController.Setup()
  fullName: VRBuilder.Core.Input.InputController.Setup()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Input/InputController.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Setup
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Input/InputController.cs
    startLine: 125
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Input
  summary: "\nwill be called on Reset (in editor time) and Awake (in play mode).\nIntended to setup the input controller properly.\n"
  example: []
  syntax:
    content: protected abstract void Setup()
    content.vb: Protected MustOverride Sub Setup
  overload: VRBuilder.Core.Input.InputController.Setup*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
references:
- uid: VRBuilder.Core.Input
  commentId: N:VRBuilder.Core.Input
  name: VRBuilder.Core.Input
  nameWithType: VRBuilder.Core.Input
  fullName: VRBuilder.Core.Input
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}
  commentId: T:VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}
  parent: VRBuilder.Unity
  definition: VRBuilder.Unity.UnitySceneSingleton`1
  name: UnitySceneSingleton<InputController>
  nameWithType: UnitySceneSingleton<InputController>
  fullName: VRBuilder.Unity.UnitySceneSingleton<VRBuilder.Core.Input.InputController>
  nameWithType.vb: UnitySceneSingleton(Of InputController)
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of VRBuilder.Core.Input.InputController)
  name.vb: UnitySceneSingleton(Of InputController)
  spec.csharp:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1
    name: UnitySceneSingleton
    nameWithType: UnitySceneSingleton
    fullName: VRBuilder.Unity.UnitySceneSingleton
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.Input.InputController
    name: InputController
    nameWithType: InputController
    fullName: VRBuilder.Core.Input.InputController
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1
    name: UnitySceneSingleton
    nameWithType: UnitySceneSingleton
    fullName: VRBuilder.Unity.UnitySceneSingleton
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.Input.InputController
    name: InputController
    nameWithType: InputController
    fullName: VRBuilder.Core.Input.InputController
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.ConcreteType
  commentId: P:VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.ConcreteType
  parent: VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}
  definition: VRBuilder.Unity.UnitySceneSingleton`1.ConcreteType
  name: ConcreteType
  nameWithType: UnitySceneSingleton<InputController>.ConcreteType
  fullName: VRBuilder.Unity.UnitySceneSingleton<VRBuilder.Core.Input.InputController>.ConcreteType
  nameWithType.vb: UnitySceneSingleton(Of InputController).ConcreteType
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of VRBuilder.Core.Input.InputController).ConcreteType
- uid: VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.Instance
  commentId: P:VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.Instance
  parent: VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}
  definition: VRBuilder.Unity.UnitySceneSingleton`1.Instance
  name: Instance
  nameWithType: UnitySceneSingleton<InputController>.Instance
  fullName: VRBuilder.Unity.UnitySceneSingleton<VRBuilder.Core.Input.InputController>.Instance
  nameWithType.vb: UnitySceneSingleton(Of InputController).Instance
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of VRBuilder.Core.Input.InputController).Instance
- uid: VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.Exists
  commentId: P:VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.Exists
  parent: VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}
  definition: VRBuilder.Unity.UnitySceneSingleton`1.Exists
  name: Exists
  nameWithType: UnitySceneSingleton<InputController>.Exists
  fullName: VRBuilder.Unity.UnitySceneSingleton<VRBuilder.Core.Input.InputController>.Exists
  nameWithType.vb: UnitySceneSingleton(Of InputController).Exists
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of VRBuilder.Core.Input.InputController).Exists
- uid: VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.GetName
  commentId: M:VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.GetName
  parent: VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}
  definition: VRBuilder.Unity.UnitySceneSingleton`1.GetName
  name: GetName()
  nameWithType: UnitySceneSingleton<InputController>.GetName()
  fullName: VRBuilder.Unity.UnitySceneSingleton<VRBuilder.Core.Input.InputController>.GetName()
  nameWithType.vb: UnitySceneSingleton(Of InputController).GetName()
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of VRBuilder.Core.Input.InputController).GetName()
  spec.csharp:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1.GetName
    name: GetName
    nameWithType: UnitySceneSingleton<InputController>.GetName
    fullName: VRBuilder.Unity.UnitySceneSingleton<VRBuilder.Core.Input.InputController>.GetName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1.GetName
    name: GetName
    nameWithType: UnitySceneSingleton(Of InputController).GetName
    fullName: VRBuilder.Unity.UnitySceneSingleton(Of VRBuilder.Core.Input.InputController).GetName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.OnDestroy
  commentId: M:VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.OnDestroy
  parent: VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}
  definition: VRBuilder.Unity.UnitySceneSingleton`1.OnDestroy
  name: OnDestroy()
  nameWithType: UnitySceneSingleton<InputController>.OnDestroy()
  fullName: VRBuilder.Unity.UnitySceneSingleton<VRBuilder.Core.Input.InputController>.OnDestroy()
  nameWithType.vb: UnitySceneSingleton(Of InputController).OnDestroy()
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of VRBuilder.Core.Input.InputController).OnDestroy()
  spec.csharp:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1.OnDestroy
    name: OnDestroy
    nameWithType: UnitySceneSingleton<InputController>.OnDestroy
    fullName: VRBuilder.Unity.UnitySceneSingleton<VRBuilder.Core.Input.InputController>.OnDestroy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1.OnDestroy
    name: OnDestroy
    nameWithType: UnitySceneSingleton(Of InputController).OnDestroy
    fullName: VRBuilder.Unity.UnitySceneSingleton(Of VRBuilder.Core.Input.InputController).OnDestroy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Unity.UnitySceneSingleton`1
  commentId: T:VRBuilder.Unity.UnitySceneSingleton`1
  name: UnitySceneSingleton<T>
  nameWithType: UnitySceneSingleton<T>
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>
  nameWithType.vb: UnitySceneSingleton(Of T)
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T)
  name.vb: UnitySceneSingleton(Of T)
  spec.csharp:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1
    name: UnitySceneSingleton
    nameWithType: UnitySceneSingleton
    fullName: VRBuilder.Unity.UnitySceneSingleton
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1
    name: UnitySceneSingleton
    nameWithType: UnitySceneSingleton
    fullName: VRBuilder.Unity.UnitySceneSingleton
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Unity
  commentId: N:VRBuilder.Unity
  name: VRBuilder.Unity
  nameWithType: VRBuilder.Unity
  fullName: VRBuilder.Unity
- uid: VRBuilder.Unity.UnitySceneSingleton`1.ConcreteType
  commentId: P:VRBuilder.Unity.UnitySceneSingleton`1.ConcreteType
  name: ConcreteType
  nameWithType: UnitySceneSingleton<T>.ConcreteType
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.ConcreteType
  nameWithType.vb: UnitySceneSingleton(Of T).ConcreteType
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).ConcreteType
- uid: VRBuilder.Unity.UnitySceneSingleton`1.Instance
  commentId: P:VRBuilder.Unity.UnitySceneSingleton`1.Instance
  name: Instance
  nameWithType: UnitySceneSingleton<T>.Instance
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.Instance
  nameWithType.vb: UnitySceneSingleton(Of T).Instance
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).Instance
- uid: VRBuilder.Unity.UnitySceneSingleton`1.Exists
  commentId: P:VRBuilder.Unity.UnitySceneSingleton`1.Exists
  name: Exists
  nameWithType: UnitySceneSingleton<T>.Exists
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.Exists
  nameWithType.vb: UnitySceneSingleton(Of T).Exists
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).Exists
- uid: VRBuilder.Unity.UnitySceneSingleton`1.GetName
  commentId: M:VRBuilder.Unity.UnitySceneSingleton`1.GetName
  name: GetName()
  nameWithType: UnitySceneSingleton<T>.GetName()
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.GetName()
  nameWithType.vb: UnitySceneSingleton(Of T).GetName()
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).GetName()
  spec.csharp:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1.GetName
    name: GetName
    nameWithType: UnitySceneSingleton<T>.GetName
    fullName: VRBuilder.Unity.UnitySceneSingleton<T>.GetName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1.GetName
    name: GetName
    nameWithType: UnitySceneSingleton(Of T).GetName
    fullName: VRBuilder.Unity.UnitySceneSingleton(Of T).GetName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Unity.UnitySceneSingleton`1.OnDestroy
  commentId: M:VRBuilder.Unity.UnitySceneSingleton`1.OnDestroy
  name: OnDestroy()
  nameWithType: UnitySceneSingleton<T>.OnDestroy()
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.OnDestroy()
  nameWithType.vb: UnitySceneSingleton(Of T).OnDestroy()
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).OnDestroy()
  spec.csharp:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1.OnDestroy
    name: OnDestroy
    nameWithType: UnitySceneSingleton<T>.OnDestroy
    fullName: VRBuilder.Unity.UnitySceneSingleton<T>.OnDestroy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1.OnDestroy
    name: OnDestroy
    nameWithType: UnitySceneSingleton(Of T).OnDestroy
    fullName: VRBuilder.Unity.UnitySceneSingleton(Of T).OnDestroy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{VRBuilder.Core.Input.InputController.InputFocusEventArgs}
  commentId: T:System.EventHandler{VRBuilder.Core.Input.InputController.InputFocusEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<InputController.InputFocusEventArgs>
  nameWithType: EventHandler<InputController.InputFocusEventArgs>
  fullName: System.EventHandler<VRBuilder.Core.Input.InputController.InputFocusEventArgs>
  nameWithType.vb: EventHandler(Of InputController.InputFocusEventArgs)
  fullName.vb: System.EventHandler(Of VRBuilder.Core.Input.InputController.InputFocusEventArgs)
  name.vb: EventHandler(Of InputController.InputFocusEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.Input.InputController.InputFocusEventArgs
    name: InputController.InputFocusEventArgs
    nameWithType: InputController.InputFocusEventArgs
    fullName: VRBuilder.Core.Input.InputController.InputFocusEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.Input.InputController.InputFocusEventArgs
    name: InputController.InputFocusEventArgs
    nameWithType: InputController.InputFocusEventArgs
    fullName: VRBuilder.Core.Input.InputController.InputFocusEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Input.InputController.CurrentInputFocus*
  commentId: Overload:VRBuilder.Core.Input.InputController.CurrentInputFocus
  name: CurrentInputFocus
  nameWithType: InputController.CurrentInputFocus
  fullName: VRBuilder.Core.Input.InputController.CurrentInputFocus
- uid: VRBuilder.Core.Input.IInputFocus
  commentId: T:VRBuilder.Core.Input.IInputFocus
  parent: VRBuilder.Core.Input
  name: IInputFocus
  nameWithType: IInputFocus
  fullName: VRBuilder.Core.Input.IInputFocus
- uid: VRBuilder.Core.Input.InputController.ListenerDictionary*
  commentId: Overload:VRBuilder.Core.Input.InputController.ListenerDictionary
  name: ListenerDictionary
  nameWithType: InputController.ListenerDictionary
  fullName: VRBuilder.Core.Input.InputController.ListenerDictionary
- uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{VRBuilder.Core.Input.InputController.ListenerInfo}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{VRBuilder.Core.Input.InputController.ListenerInfo}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, List<InputController.ListenerInfo>>
  nameWithType: Dictionary<String, List<InputController.ListenerInfo>>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<VRBuilder.Core.Input.InputController.ListenerInfo>>
  nameWithType.vb: Dictionary(Of String, List(Of InputController.ListenerInfo))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.List(Of VRBuilder.Core.Input.InputController.ListenerInfo))
  name.vb: Dictionary(Of String, List(Of InputController.ListenerInfo))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.Input.InputController.ListenerInfo
    name: InputController.ListenerInfo
    nameWithType: InputController.ListenerInfo
    fullName: VRBuilder.Core.Input.InputController.ListenerInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.Input.InputController.ListenerInfo
    name: InputController.ListenerInfo
    nameWithType: InputController.ListenerInfo
    fullName: VRBuilder.Core.Input.InputController.ListenerInfo
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VRBuilder.Core.Input.InputController.RegisterEvent*
  commentId: Overload:VRBuilder.Core.Input.InputController.RegisterEvent
  name: RegisterEvent
  nameWithType: InputController.RegisterEvent
  fullName: VRBuilder.Core.Input.InputController.RegisterEvent
- uid: VRBuilder.Core.Input.IInputActionListener
  commentId: T:VRBuilder.Core.Input.IInputActionListener
  parent: VRBuilder.Core.Input
  name: IInputActionListener
  nameWithType: IInputActionListener
  fullName: VRBuilder.Core.Input.IInputActionListener
- uid: System.Action{VRBuilder.Core.Input.InputController.InputEventArgs}
  commentId: T:System.Action{VRBuilder.Core.Input.InputController.InputEventArgs}
  parent: System
  definition: System.Action`1
  name: Action<InputController.InputEventArgs>
  nameWithType: Action<InputController.InputEventArgs>
  fullName: System.Action<VRBuilder.Core.Input.InputController.InputEventArgs>
  nameWithType.vb: Action(Of InputController.InputEventArgs)
  fullName.vb: System.Action(Of VRBuilder.Core.Input.InputController.InputEventArgs)
  name.vb: Action(Of InputController.InputEventArgs)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.Input.InputController.InputEventArgs
    name: InputController.InputEventArgs
    nameWithType: InputController.InputEventArgs
    fullName: VRBuilder.Core.Input.InputController.InputEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.Input.InputController.InputEventArgs
    name: InputController.InputEventArgs
    nameWithType: InputController.InputEventArgs
    fullName: VRBuilder.Core.Input.InputController.InputEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Input.InputController.UnregisterEvent*
  commentId: Overload:VRBuilder.Core.Input.InputController.UnregisterEvent
  name: UnregisterEvent
  nameWithType: InputController.UnregisterEvent
  fullName: VRBuilder.Core.Input.InputController.UnregisterEvent
- uid: VRBuilder.Core.Input.InputController.Focus*
  commentId: Overload:VRBuilder.Core.Input.InputController.Focus
  name: Focus
  nameWithType: InputController.Focus
  fullName: VRBuilder.Core.Input.InputController.Focus
- uid: VRBuilder.Core.Input.InputController.ReleaseFocus*
  commentId: Overload:VRBuilder.Core.Input.InputController.ReleaseFocus
  name: ReleaseFocus
  nameWithType: InputController.ReleaseFocus
  fullName: VRBuilder.Core.Input.InputController.ReleaseFocus
- uid: VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.Awake
  commentId: M:VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}.Awake
  parent: VRBuilder.Unity.UnitySceneSingleton{VRBuilder.Core.Input.InputController}
  definition: VRBuilder.Unity.UnitySceneSingleton`1.Awake
  name: Awake()
  nameWithType: UnitySceneSingleton<InputController>.Awake()
  fullName: VRBuilder.Unity.UnitySceneSingleton<VRBuilder.Core.Input.InputController>.Awake()
  nameWithType.vb: UnitySceneSingleton(Of InputController).Awake()
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of VRBuilder.Core.Input.InputController).Awake()
  spec.csharp:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1.Awake
    name: Awake
    nameWithType: UnitySceneSingleton<InputController>.Awake
    fullName: VRBuilder.Unity.UnitySceneSingleton<VRBuilder.Core.Input.InputController>.Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1.Awake
    name: Awake
    nameWithType: UnitySceneSingleton(Of InputController).Awake
    fullName: VRBuilder.Unity.UnitySceneSingleton(Of VRBuilder.Core.Input.InputController).Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Input.InputController.Awake*
  commentId: Overload:VRBuilder.Core.Input.InputController.Awake
  name: Awake
  nameWithType: InputController.Awake
  fullName: VRBuilder.Core.Input.InputController.Awake
- uid: VRBuilder.Unity.UnitySceneSingleton`1.Awake
  commentId: M:VRBuilder.Unity.UnitySceneSingleton`1.Awake
  name: Awake()
  nameWithType: UnitySceneSingleton<T>.Awake()
  fullName: VRBuilder.Unity.UnitySceneSingleton<T>.Awake()
  nameWithType.vb: UnitySceneSingleton(Of T).Awake()
  fullName.vb: VRBuilder.Unity.UnitySceneSingleton(Of T).Awake()
  spec.csharp:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1.Awake
    name: Awake
    nameWithType: UnitySceneSingleton<T>.Awake
    fullName: VRBuilder.Unity.UnitySceneSingleton<T>.Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Unity.UnitySceneSingleton`1.Awake
    name: Awake
    nameWithType: UnitySceneSingleton(Of T).Awake
    fullName: VRBuilder.Unity.UnitySceneSingleton(Of T).Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Input.InputController.Reset*
  commentId: Overload:VRBuilder.Core.Input.InputController.Reset
  name: Reset
  nameWithType: InputController.Reset
  fullName: VRBuilder.Core.Input.InputController.Reset
- uid: VRBuilder.Core.Input.InputController.Setup*
  commentId: Overload:VRBuilder.Core.Input.InputController.Setup
  name: Setup
  nameWithType: InputController.Setup
  fullName: VRBuilder.Core.Input.InputController.Setup
