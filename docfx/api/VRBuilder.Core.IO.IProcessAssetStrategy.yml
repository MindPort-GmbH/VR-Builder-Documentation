### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.IO.IProcessAssetStrategy
  commentId: T:VRBuilder.Core.IO.IProcessAssetStrategy
  id: IProcessAssetStrategy
  parent: VRBuilder.Core.IO
  children:
  - VRBuilder.Core.IO.IProcessAssetStrategy.CreateManifest
  - VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets(VRBuilder.Core.IProcess,VRBuilder.Core.Serialization.IProcessSerializer)
  - VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},VRBuilder.Core.Serialization.IProcessSerializer)
  langs:
  - csharp
  - vb
  name: IProcessAssetStrategy
  nameWithType: IProcessAssetStrategy
  fullName: VRBuilder.Core.IO.IProcessAssetStrategy
  type: Interface
  source:
    remote:
      path: Source/Core/Runtime/IO/IProcessAssetStrategy.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IProcessAssetStrategy
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/IProcessAssetStrategy.cs
    startLine: 8
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nDefines how a process asset should be saved or loaded.\n"
  example: []
  syntax:
    content: public interface IProcessAssetStrategy
    content.vb: Public Interface IProcessAssetStrategy
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VRBuilder.Core.IO.IProcessAssetStrategy.CreateManifest
  commentId: P:VRBuilder.Core.IO.IProcessAssetStrategy.CreateManifest
  id: CreateManifest
  parent: VRBuilder.Core.IO.IProcessAssetStrategy
  langs:
  - csharp
  - vb
  name: CreateManifest
  nameWithType: IProcessAssetStrategy.CreateManifest
  fullName: VRBuilder.Core.IO.IProcessAssetStrategy.CreateManifest
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/IO/IProcessAssetStrategy.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CreateManifest
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/IProcessAssetStrategy.cs
    startLine: 13
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nIf true, a manifest file will be created. The file will be read first when loading the process.\n"
  example: []
  syntax:
    content: bool CreateManifest { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CreateManifest As Boolean
  overload: VRBuilder.Core.IO.IProcessAssetStrategy.CreateManifest*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets(VRBuilder.Core.IProcess,VRBuilder.Core.Serialization.IProcessSerializer)
  commentId: M:VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets(VRBuilder.Core.IProcess,VRBuilder.Core.Serialization.IProcessSerializer)
  id: CreateSerializedProcessAssets(VRBuilder.Core.IProcess,VRBuilder.Core.Serialization.IProcessSerializer)
  parent: VRBuilder.Core.IO.IProcessAssetStrategy
  langs:
  - csharp
  - vb
  name: CreateSerializedProcessAssets(IProcess, IProcessSerializer)
  nameWithType: IProcessAssetStrategy.CreateSerializedProcessAssets(IProcess, IProcessSerializer)
  fullName: VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets(VRBuilder.Core.IProcess, VRBuilder.Core.Serialization.IProcessSerializer)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/IProcessAssetStrategy.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CreateSerializedProcessAssets
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/IProcessAssetStrategy.cs
    startLine: 19
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nReturns a number of named byte arrays containing the process data. The first key is the process file,\nsubsequent ones are additional data.\n"
  example: []
  syntax:
    content: IDictionary<string, byte[]> CreateSerializedProcessAssets(IProcess process, IProcessSerializer serializer)
    parameters:
    - id: process
      type: VRBuilder.Core.IProcess
    - id: serializer
      type: VRBuilder.Core.Serialization.IProcessSerializer
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Byte[]}
    content.vb: Function CreateSerializedProcessAssets(process As IProcess, serializer As IProcessSerializer) As IDictionary(Of String, Byte())
  overload: VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets*
- uid: VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},VRBuilder.Core.Serialization.IProcessSerializer)
  commentId: M:VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},VRBuilder.Core.Serialization.IProcessSerializer)
  id: GetProcessFromSerializedData(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},VRBuilder.Core.Serialization.IProcessSerializer)
  parent: VRBuilder.Core.IO.IProcessAssetStrategy
  langs:
  - csharp
  - vb
  name: GetProcessFromSerializedData(Byte[], IEnumerable<Byte[]>, IProcessSerializer)
  nameWithType: IProcessAssetStrategy.GetProcessFromSerializedData(Byte[], IEnumerable<Byte[]>, IProcessSerializer)
  fullName: VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData(System.Byte[], System.Collections.Generic.IEnumerable<System.Byte[]>, VRBuilder.Core.Serialization.IProcessSerializer)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/IProcessAssetStrategy.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetProcessFromSerializedData
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/IProcessAssetStrategy.cs
    startLine: 24
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nAttempts to build a process from the provided serialized data.\n"
  example: []
  syntax:
    content: IProcess GetProcessFromSerializedData(byte[] processData, IEnumerable<byte[]> additionalData, IProcessSerializer serializer)
    parameters:
    - id: processData
      type: System.Byte[]
    - id: additionalData
      type: System.Collections.Generic.IEnumerable{System.Byte[]}
    - id: serializer
      type: VRBuilder.Core.Serialization.IProcessSerializer
    return:
      type: VRBuilder.Core.IProcess
    content.vb: Function GetProcessFromSerializedData(processData As Byte(), additionalData As IEnumerable(Of Byte()), serializer As IProcessSerializer) As IProcess
  overload: VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData*
  nameWithType.vb: IProcessAssetStrategy.GetProcessFromSerializedData(Byte(), IEnumerable(Of Byte()), IProcessSerializer)
  fullName.vb: VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData(System.Byte(), System.Collections.Generic.IEnumerable(Of System.Byte()), VRBuilder.Core.Serialization.IProcessSerializer)
  name.vb: GetProcessFromSerializedData(Byte(), IEnumerable(Of Byte()), IProcessSerializer)
references:
- uid: VRBuilder.Core.IO
  commentId: N:VRBuilder.Core.IO
  name: VRBuilder.Core.IO
  nameWithType: VRBuilder.Core.IO
  fullName: VRBuilder.Core.IO
- uid: VRBuilder.Core.IO.IProcessAssetStrategy.CreateManifest*
  commentId: Overload:VRBuilder.Core.IO.IProcessAssetStrategy.CreateManifest
  name: CreateManifest
  nameWithType: IProcessAssetStrategy.CreateManifest
  fullName: VRBuilder.Core.IO.IProcessAssetStrategy.CreateManifest
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets*
  commentId: Overload:VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets
  name: CreateSerializedProcessAssets
  nameWithType: IProcessAssetStrategy.CreateSerializedProcessAssets
  fullName: VRBuilder.Core.IO.IProcessAssetStrategy.CreateSerializedProcessAssets
- uid: VRBuilder.Core.IProcess
  commentId: T:VRBuilder.Core.IProcess
  parent: VRBuilder.Core
  name: IProcess
  nameWithType: IProcess
  fullName: VRBuilder.Core.IProcess
- uid: VRBuilder.Core.Serialization.IProcessSerializer
  commentId: T:VRBuilder.Core.Serialization.IProcessSerializer
  parent: VRBuilder.Core.Serialization
  name: IProcessSerializer
  nameWithType: IProcessSerializer
  fullName: VRBuilder.Core.Serialization.IProcessSerializer
- uid: System.Collections.Generic.IDictionary{System.String,System.Byte[]}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Byte[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Byte[]>
  nameWithType: IDictionary<String, Byte[]>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Byte[]>
  nameWithType.vb: IDictionary(Of String, Byte())
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Byte())
  name.vb: IDictionary(Of String, Byte())
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core
  commentId: N:VRBuilder.Core
  name: VRBuilder.Core
  nameWithType: VRBuilder.Core
  fullName: VRBuilder.Core
- uid: VRBuilder.Core.Serialization
  commentId: N:VRBuilder.Core.Serialization
  name: VRBuilder.Core.Serialization
  nameWithType: VRBuilder.Core.Serialization
  fullName: VRBuilder.Core.Serialization
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData*
  commentId: Overload:VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData
  name: GetProcessFromSerializedData
  nameWithType: IProcessAssetStrategy.GetProcessFromSerializedData
  fullName: VRBuilder.Core.IO.IProcessAssetStrategy.GetProcessFromSerializedData
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{System.Byte[]}
  commentId: T:System.Collections.Generic.IEnumerable{System.Byte[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Byte[]>
  nameWithType: IEnumerable<Byte[]>
  fullName: System.Collections.Generic.IEnumerable<System.Byte[]>
  nameWithType.vb: IEnumerable(Of Byte())
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Byte())
  name.vb: IEnumerable(Of Byte())
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
