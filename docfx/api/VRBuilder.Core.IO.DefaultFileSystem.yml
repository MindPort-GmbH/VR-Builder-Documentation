### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.IO.DefaultFileSystem
  commentId: T:VRBuilder.Core.IO.DefaultFileSystem
  id: DefaultFileSystem
  parent: VRBuilder.Core.IO
  children:
  - VRBuilder.Core.IO.DefaultFileSystem.#ctor(System.String,System.String)
  - VRBuilder.Core.IO.DefaultFileSystem.BuildPersistentDataPath(System.String)
  - VRBuilder.Core.IO.DefaultFileSystem.Exists(System.String)
  - VRBuilder.Core.IO.DefaultFileSystem.FetchStreamingAssetsFilesAt(System.String,System.String)
  - VRBuilder.Core.IO.DefaultFileSystem.FileExistsInPersistentData(System.String)
  - VRBuilder.Core.IO.DefaultFileSystem.FileExistsInStreamingAssets(System.String)
  - VRBuilder.Core.IO.DefaultFileSystem.NormalizePath(System.String)
  - VRBuilder.Core.IO.DefaultFileSystem.PersistentDataPath
  - VRBuilder.Core.IO.DefaultFileSystem.Read(System.String)
  - VRBuilder.Core.IO.DefaultFileSystem.ReadAllText(System.String)
  - VRBuilder.Core.IO.DefaultFileSystem.ReadFromPersistentData(System.String)
  - VRBuilder.Core.IO.DefaultFileSystem.ReadFromStreamingAssets(System.String)
  - VRBuilder.Core.IO.DefaultFileSystem.StreamingAssetsPath
  - VRBuilder.Core.IO.DefaultFileSystem.Write(System.String,System.Byte[])
  langs:
  - csharp
  - vb
  name: DefaultFileSystem
  nameWithType: DefaultFileSystem
  fullName: VRBuilder.Core.IO.DefaultFileSystem
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: DefaultFileSystem
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 16
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nDefault implementation of <xref href=\"VRBuilder.Core.IO.IPlatformFileSystem\" data-throw-if-not-resolved=\"false\"></xref> based in &apos;System.IO&apos;.\n"
  remarks: It works out of the box for most of the Unity&apos;s supported platforms.
  example: []
  syntax:
    content: 'public class DefaultFileSystem : IPlatformFileSystem'
    content.vb: >-
      Public Class DefaultFileSystem
          Implements IPlatformFileSystem
  inheritance:
  - System.Object
  implements:
  - VRBuilder.Core.IO.IPlatformFileSystem
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VRBuilder.Core.IO.DefaultFileSystem.StreamingAssetsPath
  commentId: F:VRBuilder.Core.IO.DefaultFileSystem.StreamingAssetsPath
  id: StreamingAssetsPath
  parent: VRBuilder.Core.IO.DefaultFileSystem
  langs:
  - csharp
  - vb
  name: StreamingAssetsPath
  nameWithType: DefaultFileSystem.StreamingAssetsPath
  fullName: VRBuilder.Core.IO.DefaultFileSystem.StreamingAssetsPath
  type: Field
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: StreamingAssetsPath
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 21
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nThe path to the platform&apos;s StreamingAssets folder (Read Only).\n"
  example: []
  syntax:
    content: protected readonly string StreamingAssetsPath
    return:
      type: System.String
    content.vb: Protected ReadOnly StreamingAssetsPath As String
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: VRBuilder.Core.IO.DefaultFileSystem.PersistentDataPath
  commentId: F:VRBuilder.Core.IO.DefaultFileSystem.PersistentDataPath
  id: PersistentDataPath
  parent: VRBuilder.Core.IO.DefaultFileSystem
  langs:
  - csharp
  - vb
  name: PersistentDataPath
  nameWithType: DefaultFileSystem.PersistentDataPath
  fullName: VRBuilder.Core.IO.DefaultFileSystem.PersistentDataPath
  type: Field
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: PersistentDataPath
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 26
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nThe path to the platform&apos;s persistent data directory (Read Only).\n"
  example: []
  syntax:
    content: protected readonly string PersistentDataPath
    return:
      type: System.String
    content.vb: Protected ReadOnly PersistentDataPath As String
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: VRBuilder.Core.IO.DefaultFileSystem.#ctor(System.String,System.String)
  commentId: M:VRBuilder.Core.IO.DefaultFileSystem.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: VRBuilder.Core.IO.DefaultFileSystem
  langs:
  - csharp
  - vb
  name: DefaultFileSystem(String, String)
  nameWithType: DefaultFileSystem.DefaultFileSystem(String, String)
  fullName: VRBuilder.Core.IO.DefaultFileSystem.DefaultFileSystem(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 28
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  syntax:
    content: public DefaultFileSystem(string streamingAssetsPath, string persistentDataPath)
    parameters:
    - id: streamingAssetsPath
      type: System.String
    - id: persistentDataPath
      type: System.String
    content.vb: Public Sub New(streamingAssetsPath As String, persistentDataPath As String)
  overload: VRBuilder.Core.IO.DefaultFileSystem.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRBuilder.Core.IO.DefaultFileSystem.Read(System.String)
  commentId: M:VRBuilder.Core.IO.DefaultFileSystem.Read(System.String)
  id: Read(System.String)
  parent: VRBuilder.Core.IO.DefaultFileSystem
  langs:
  - csharp
  - vb
  name: Read(String)
  nameWithType: DefaultFileSystem.Read(String)
  fullName: VRBuilder.Core.IO.DefaultFileSystem.Read(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Read
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 35
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nLoads a file stored at <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code>.\n"
  remarks: <code data-dev-comment-type="paramref" class="paramref">filePath</code> must be relative to the StreamingAssets or the persistent data folder.
  example: []
  syntax:
    content: public virtual async Task<byte[]> Read(string filePath)
    parameters:
    - id: filePath
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: The contents of the file into a byte array.
    content.vb: Public Overridable Function Read(filePath As String) As Task(Of Byte())
  overload: VRBuilder.Core.IO.DefaultFileSystem.Read*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: Exception thrown if the file does not exist.
  implements:
  - VRBuilder.Core.IO.IPlatformFileSystem.Read(System.String)
  modifiers.csharp:
  - public
  - virtual
  - async
  modifiers.vb:
  - Public
  - Overridable
- uid: VRBuilder.Core.IO.DefaultFileSystem.ReadAllText(System.String)
  commentId: M:VRBuilder.Core.IO.DefaultFileSystem.ReadAllText(System.String)
  id: ReadAllText(System.String)
  parent: VRBuilder.Core.IO.DefaultFileSystem
  langs:
  - csharp
  - vb
  name: ReadAllText(String)
  nameWithType: DefaultFileSystem.ReadAllText(String)
  fullName: VRBuilder.Core.IO.DefaultFileSystem.ReadAllText(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ReadAllText
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 53
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nLoads a file stored at <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code>.\n"
  remarks: <code data-dev-comment-type="paramref" class="paramref">filePath</code> must be relative to the StreamingAssets or the persistent data folder.
  example: []
  syntax:
    content: public virtual async Task<string> ReadAllText(string filePath)
    parameters:
    - id: filePath
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Returns a `string` with the content of the file.
    content.vb: Public Overridable Function ReadAllText(filePath As String) As Task(Of String)
  overload: VRBuilder.Core.IO.DefaultFileSystem.ReadAllText*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: Exception thrown if the file does not exist.
  implements:
  - VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText(System.String)
  modifiers.csharp:
  - public
  - virtual
  - async
  modifiers.vb:
  - Public
  - Overridable
- uid: VRBuilder.Core.IO.DefaultFileSystem.Write(System.String,System.Byte[])
  commentId: M:VRBuilder.Core.IO.DefaultFileSystem.Write(System.String,System.Byte[])
  id: Write(System.String,System.Byte[])
  parent: VRBuilder.Core.IO.DefaultFileSystem
  langs:
  - csharp
  - vb
  name: Write(String, Byte[])
  nameWithType: DefaultFileSystem.Write(String, Byte[])
  fullName: VRBuilder.Core.IO.DefaultFileSystem.Write(System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Write
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 69
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nSaves given <code data-dev-comment-type=\"paramref\" class=\"paramref\">fileData</code> in provided <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code>.\n"
  remarks: <code data-dev-comment-type="paramref" class="paramref">filePath</code> must be relative to <see cref="!:PersistentDataPath"></see>.
  example: []
  syntax:
    content: public virtual async Task<bool> Write(string filePath, byte[] fileData)
    parameters:
    - id: filePath
      type: System.String
    - id: fileData
      type: System.Byte[]
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: Returns true if <code data-dev-comment-type="paramref" class="paramref">fileData</code> could be saved successfully; otherwise, false.
    content.vb: Public Overridable Function Write(filePath As String, fileData As Byte()) As Task(Of Boolean)
  overload: VRBuilder.Core.IO.DefaultFileSystem.Write*
  implements:
  - VRBuilder.Core.IO.IPlatformFileSystem.Write(System.String,System.Byte[])
  nameWithType.vb: DefaultFileSystem.Write(String, Byte())
  modifiers.csharp:
  - public
  - virtual
  - async
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: VRBuilder.Core.IO.DefaultFileSystem.Write(System.String, System.Byte())
  name.vb: Write(String, Byte())
- uid: VRBuilder.Core.IO.DefaultFileSystem.Exists(System.String)
  commentId: M:VRBuilder.Core.IO.DefaultFileSystem.Exists(System.String)
  id: Exists(System.String)
  parent: VRBuilder.Core.IO.DefaultFileSystem
  langs:
  - csharp
  - vb
  name: Exists(String)
  nameWithType: DefaultFileSystem.Exists(String)
  fullName: VRBuilder.Core.IO.DefaultFileSystem.Exists(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Exists
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 88
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nReturns true if given <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code> contains the name of an existing file under the StreamingAssets or platform persistent data folder; otherwise, false.\n"
  remarks: <code data-dev-comment-type="paramref" class="paramref">filePath</code> must be relative to the StreamingAssets or the platform persistent data folder.
  example: []
  syntax:
    content: public virtual async Task<bool> Exists(string filePath)
    parameters:
    - id: filePath
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Overridable Function Exists(filePath As String) As Task(Of Boolean)
  overload: VRBuilder.Core.IO.DefaultFileSystem.Exists*
  implements:
  - VRBuilder.Core.IO.IPlatformFileSystem.Exists(System.String)
  modifiers.csharp:
  - public
  - virtual
  - async
  modifiers.vb:
  - Public
  - Overridable
- uid: VRBuilder.Core.IO.DefaultFileSystem.FetchStreamingAssetsFilesAt(System.String,System.String)
  commentId: M:VRBuilder.Core.IO.DefaultFileSystem.FetchStreamingAssetsFilesAt(System.String,System.String)
  id: FetchStreamingAssetsFilesAt(System.String,System.String)
  parent: VRBuilder.Core.IO.DefaultFileSystem
  langs:
  - csharp
  - vb
  name: FetchStreamingAssetsFilesAt(String, String)
  nameWithType: DefaultFileSystem.FetchStreamingAssetsFilesAt(String, String)
  fullName: VRBuilder.Core.IO.DefaultFileSystem.FetchStreamingAssetsFilesAt(System.String, System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: FetchStreamingAssetsFilesAt
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 101
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nReturns the names of files (including their paths) that match the specified search pattern in the specified directory relative to the Streaming Assets folder.\n"
  remarks: "\nThe following wildcard specifiers are permitted in <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchPattern</code>:\nWildcard specifier	    Matches\n* (asterisk)	        Zero or more characters in that position.\n? (question mark)	    Zero or one character in that position.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<string> FetchStreamingAssetsFilesAt(string path, string searchPattern)
    parameters:
    - id: path
      type: System.String
      description: The relative path to the Streaming Assets folder. This string is not case-sensitive.
    - id: searchPattern
      type: System.String
      description: "\nThe search string to match against the names of files in <code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code>.\nDepending on the platform, this parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&apos;t support regular expressions.\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public Overridable Function FetchStreamingAssetsFilesAt(path As String, searchPattern As String) As IEnumerable(Of String)
  overload: VRBuilder.Core.IO.DefaultFileSystem.FetchStreamingAssetsFilesAt*
  implements:
  - VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt(System.String,System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VRBuilder.Core.IO.DefaultFileSystem.ReadFromStreamingAssets(System.String)
  commentId: M:VRBuilder.Core.IO.DefaultFileSystem.ReadFromStreamingAssets(System.String)
  id: ReadFromStreamingAssets(System.String)
  parent: VRBuilder.Core.IO.DefaultFileSystem
  langs:
  - csharp
  - vb
  name: ReadFromStreamingAssets(String)
  nameWithType: DefaultFileSystem.ReadFromStreamingAssets(String)
  fullName: VRBuilder.Core.IO.DefaultFileSystem.ReadFromStreamingAssets(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ReadFromStreamingAssets
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 114
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nLoads a file stored at <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code>.\nReturns a `FileNotFoundException` if file does not exist.\n"
  remarks: <code data-dev-comment-type="paramref" class="paramref">filePath</code> must be relative to the StreamingAssets folder.
  example: []
  syntax:
    content: protected virtual async Task<byte[]> ReadFromStreamingAssets(string filePath)
    parameters:
    - id: filePath
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: The contents of the file into a byte array.
    content.vb: Protected Overridable Function ReadFromStreamingAssets(filePath As String) As Task(Of Byte())
  overload: VRBuilder.Core.IO.DefaultFileSystem.ReadFromStreamingAssets*
  modifiers.csharp:
  - protected
  - virtual
  - async
  modifiers.vb:
  - Protected
  - Overridable
- uid: VRBuilder.Core.IO.DefaultFileSystem.ReadFromPersistentData(System.String)
  commentId: M:VRBuilder.Core.IO.DefaultFileSystem.ReadFromPersistentData(System.String)
  id: ReadFromPersistentData(System.String)
  parent: VRBuilder.Core.IO.DefaultFileSystem
  langs:
  - csharp
  - vb
  name: ReadFromPersistentData(String)
  nameWithType: DefaultFileSystem.ReadFromPersistentData(String)
  fullName: VRBuilder.Core.IO.DefaultFileSystem.ReadFromPersistentData(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ReadFromPersistentData
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 133
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nLoads a file stored at <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code>.\nReturns a `FileNotFoundException` if file does not exist.\n"
  remarks: <code data-dev-comment-type="paramref" class="paramref">filePath</code> must be relative to the platform persistent data folder.
  example: []
  syntax:
    content: protected virtual async Task<byte[]> ReadFromPersistentData(string filePath)
    parameters:
    - id: filePath
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: The contents of the file into a byte array.
    content.vb: Protected Overridable Function ReadFromPersistentData(filePath As String) As Task(Of Byte())
  overload: VRBuilder.Core.IO.DefaultFileSystem.ReadFromPersistentData*
  modifiers.csharp:
  - protected
  - virtual
  - async
  modifiers.vb:
  - Protected
  - Overridable
- uid: VRBuilder.Core.IO.DefaultFileSystem.FileExistsInStreamingAssets(System.String)
  commentId: M:VRBuilder.Core.IO.DefaultFileSystem.FileExistsInStreamingAssets(System.String)
  id: FileExistsInStreamingAssets(System.String)
  parent: VRBuilder.Core.IO.DefaultFileSystem
  langs:
  - csharp
  - vb
  name: FileExistsInStreamingAssets(String)
  nameWithType: DefaultFileSystem.FileExistsInStreamingAssets(String)
  fullName: VRBuilder.Core.IO.DefaultFileSystem.FileExistsInStreamingAssets(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: FileExistsInStreamingAssets
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 150
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nReturns true if given <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code> contains the name of an existing file under the StreamingAssets folder; otherwise, false.\n"
  remarks: <code data-dev-comment-type="paramref" class="paramref">filePath</code> must be relative to the StreamingAssets folder.
  example: []
  syntax:
    content: protected virtual async Task<bool> FileExistsInStreamingAssets(string filePath)
    parameters:
    - id: filePath
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Protected Overridable Function FileExistsInStreamingAssets(filePath As String) As Task(Of Boolean)
  overload: VRBuilder.Core.IO.DefaultFileSystem.FileExistsInStreamingAssets*
  modifiers.csharp:
  - protected
  - virtual
  - async
  modifiers.vb:
  - Protected
  - Overridable
- uid: VRBuilder.Core.IO.DefaultFileSystem.FileExistsInPersistentData(System.String)
  commentId: M:VRBuilder.Core.IO.DefaultFileSystem.FileExistsInPersistentData(System.String)
  id: FileExistsInPersistentData(System.String)
  parent: VRBuilder.Core.IO.DefaultFileSystem
  langs:
  - csharp
  - vb
  name: FileExistsInPersistentData(String)
  nameWithType: DefaultFileSystem.FileExistsInPersistentData(String)
  fullName: VRBuilder.Core.IO.DefaultFileSystem.FileExistsInPersistentData(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: FileExistsInPersistentData
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 162
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nReturns true if given <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code> contains the name of an existing file under the platform persistent data folder; otherwise, false.\n"
  remarks: <code data-dev-comment-type="paramref" class="paramref">filePath</code> must be relative to the platform persistent data folder.
  example: []
  syntax:
    content: protected virtual async Task<bool> FileExistsInPersistentData(string filePath)
    parameters:
    - id: filePath
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Protected Overridable Function FileExistsInPersistentData(filePath As String) As Task(Of Boolean)
  overload: VRBuilder.Core.IO.DefaultFileSystem.FileExistsInPersistentData*
  modifiers.csharp:
  - protected
  - virtual
  - async
  modifiers.vb:
  - Protected
  - Overridable
- uid: VRBuilder.Core.IO.DefaultFileSystem.BuildPersistentDataPath(System.String)
  commentId: M:VRBuilder.Core.IO.DefaultFileSystem.BuildPersistentDataPath(System.String)
  id: BuildPersistentDataPath(System.String)
  parent: VRBuilder.Core.IO.DefaultFileSystem
  langs:
  - csharp
  - vb
  name: BuildPersistentDataPath(String)
  nameWithType: DefaultFileSystem.BuildPersistentDataPath(String)
  fullName: VRBuilder.Core.IO.DefaultFileSystem.BuildPersistentDataPath(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: BuildPersistentDataPath
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 174
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nBuilds a directory from given <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code>.\n"
  remarks: <code data-dev-comment-type="paramref" class="paramref">filePath</code> must be relative to the platform persistent data folder.
  example: []
  syntax:
    content: protected virtual string BuildPersistentDataPath(string filePath)
    parameters:
    - id: filePath
      type: System.String
    return:
      type: System.String
      description: The created directory absolute path.
    content.vb: Protected Overridable Function BuildPersistentDataPath(filePath As String) As String
  overload: VRBuilder.Core.IO.DefaultFileSystem.BuildPersistentDataPath*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: VRBuilder.Core.IO.DefaultFileSystem.NormalizePath(System.String)
  commentId: M:VRBuilder.Core.IO.DefaultFileSystem.NormalizePath(System.String)
  id: NormalizePath(System.String)
  parent: VRBuilder.Core.IO.DefaultFileSystem
  langs:
  - csharp
  - vb
  name: NormalizePath(String)
  nameWithType: DefaultFileSystem.NormalizePath(String)
  fullName: VRBuilder.Core.IO.DefaultFileSystem.NormalizePath(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/DefaultFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: NormalizePath
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/DefaultFileSystem.cs
    startLine: 198
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nNormalizes path to platform specific.\n"
  example: []
  syntax:
    content: protected virtual string NormalizePath(string filePath)
    parameters:
    - id: filePath
      type: System.String
    return:
      type: System.String
    content.vb: Protected Overridable Function NormalizePath(filePath As String) As String
  overload: VRBuilder.Core.IO.DefaultFileSystem.NormalizePath*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: VRBuilder.Core.IO.IPlatformFileSystem
  commentId: T:VRBuilder.Core.IO.IPlatformFileSystem
  parent: VRBuilder.Core.IO
  name: IPlatformFileSystem
  nameWithType: IPlatformFileSystem
  fullName: VRBuilder.Core.IO.IPlatformFileSystem
- uid: VRBuilder.Core.IO
  commentId: N:VRBuilder.Core.IO
  name: VRBuilder.Core.IO
  nameWithType: VRBuilder.Core.IO
  fullName: VRBuilder.Core.IO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VRBuilder.Core.IO.DefaultFileSystem.#ctor*
  commentId: Overload:VRBuilder.Core.IO.DefaultFileSystem.#ctor
  name: DefaultFileSystem
  nameWithType: DefaultFileSystem.DefaultFileSystem
  fullName: VRBuilder.Core.IO.DefaultFileSystem.DefaultFileSystem
- uid: VRBuilder.Core.IO.DefaultFileSystem.Read*
  commentId: Overload:VRBuilder.Core.IO.DefaultFileSystem.Read
  name: Read
  nameWithType: DefaultFileSystem.Read
  fullName: VRBuilder.Core.IO.DefaultFileSystem.Read
- uid: VRBuilder.Core.IO.IPlatformFileSystem.Read(System.String)
  commentId: M:VRBuilder.Core.IO.IPlatformFileSystem.Read(System.String)
  parent: VRBuilder.Core.IO.IPlatformFileSystem
  isExternal: true
  name: Read(String)
  nameWithType: IPlatformFileSystem.Read(String)
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.Read(System.String)
  spec.csharp:
  - uid: VRBuilder.Core.IO.IPlatformFileSystem.Read(System.String)
    name: Read
    nameWithType: IPlatformFileSystem.Read
    fullName: VRBuilder.Core.IO.IPlatformFileSystem.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.IO.IPlatformFileSystem.Read(System.String)
    name: Read
    nameWithType: IPlatformFileSystem.Read
    fullName: VRBuilder.Core.IO.IPlatformFileSystem.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
  isExternal: true
- uid: System.Threading.Tasks.Task{System.Byte[]}
  commentId: T:System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Byte[]>
  nameWithType: Task<Byte[]>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  nameWithType.vb: Task(Of Byte())
  fullName.vb: System.Threading.Tasks.Task(Of System.Byte())
  name.vb: Task(Of Byte())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: VRBuilder.Core.IO.DefaultFileSystem.ReadAllText*
  commentId: Overload:VRBuilder.Core.IO.DefaultFileSystem.ReadAllText
  name: ReadAllText
  nameWithType: DefaultFileSystem.ReadAllText
  fullName: VRBuilder.Core.IO.DefaultFileSystem.ReadAllText
- uid: VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText(System.String)
  commentId: M:VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText(System.String)
  parent: VRBuilder.Core.IO.IPlatformFileSystem
  isExternal: true
  name: ReadAllText(String)
  nameWithType: IPlatformFileSystem.ReadAllText(String)
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText(System.String)
  spec.csharp:
  - uid: VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText(System.String)
    name: ReadAllText
    nameWithType: IPlatformFileSystem.ReadAllText
    fullName: VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText(System.String)
    name: ReadAllText
    nameWithType: IPlatformFileSystem.ReadAllText
    fullName: VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.IO.DefaultFileSystem.Write*
  commentId: Overload:VRBuilder.Core.IO.DefaultFileSystem.Write
  name: Write
  nameWithType: DefaultFileSystem.Write
  fullName: VRBuilder.Core.IO.DefaultFileSystem.Write
- uid: VRBuilder.Core.IO.IPlatformFileSystem.Write(System.String,System.Byte[])
  commentId: M:VRBuilder.Core.IO.IPlatformFileSystem.Write(System.String,System.Byte[])
  parent: VRBuilder.Core.IO.IPlatformFileSystem
  isExternal: true
  name: Write(String, Byte[])
  nameWithType: IPlatformFileSystem.Write(String, Byte[])
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.Write(System.String, System.Byte[])
  nameWithType.vb: IPlatformFileSystem.Write(String, Byte())
  fullName.vb: VRBuilder.Core.IO.IPlatformFileSystem.Write(System.String, System.Byte())
  name.vb: Write(String, Byte())
  spec.csharp:
  - uid: VRBuilder.Core.IO.IPlatformFileSystem.Write(System.String,System.Byte[])
    name: Write
    nameWithType: IPlatformFileSystem.Write
    fullName: VRBuilder.Core.IO.IPlatformFileSystem.Write
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.IO.IPlatformFileSystem.Write(System.String,System.Byte[])
    name: Write
    nameWithType: IPlatformFileSystem.Write
    fullName: VRBuilder.Core.IO.IPlatformFileSystem.Write
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.IO.DefaultFileSystem.Exists*
  commentId: Overload:VRBuilder.Core.IO.DefaultFileSystem.Exists
  name: Exists
  nameWithType: DefaultFileSystem.Exists
  fullName: VRBuilder.Core.IO.DefaultFileSystem.Exists
- uid: VRBuilder.Core.IO.IPlatformFileSystem.Exists(System.String)
  commentId: M:VRBuilder.Core.IO.IPlatformFileSystem.Exists(System.String)
  parent: VRBuilder.Core.IO.IPlatformFileSystem
  isExternal: true
  name: Exists(String)
  nameWithType: IPlatformFileSystem.Exists(String)
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.Exists(System.String)
  spec.csharp:
  - uid: VRBuilder.Core.IO.IPlatformFileSystem.Exists(System.String)
    name: Exists
    nameWithType: IPlatformFileSystem.Exists
    fullName: VRBuilder.Core.IO.IPlatformFileSystem.Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.IO.IPlatformFileSystem.Exists(System.String)
    name: Exists
    nameWithType: IPlatformFileSystem.Exists
    fullName: VRBuilder.Core.IO.IPlatformFileSystem.Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.IO.DefaultFileSystem.FetchStreamingAssetsFilesAt*
  commentId: Overload:VRBuilder.Core.IO.DefaultFileSystem.FetchStreamingAssetsFilesAt
  name: FetchStreamingAssetsFilesAt
  nameWithType: DefaultFileSystem.FetchStreamingAssetsFilesAt
  fullName: VRBuilder.Core.IO.DefaultFileSystem.FetchStreamingAssetsFilesAt
- uid: VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt(System.String,System.String)
  commentId: M:VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt(System.String,System.String)
  parent: VRBuilder.Core.IO.IPlatformFileSystem
  isExternal: true
  name: FetchStreamingAssetsFilesAt(String, String)
  nameWithType: IPlatformFileSystem.FetchStreamingAssetsFilesAt(String, String)
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt(System.String, System.String)
  spec.csharp:
  - uid: VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt(System.String,System.String)
    name: FetchStreamingAssetsFilesAt
    nameWithType: IPlatformFileSystem.FetchStreamingAssetsFilesAt
    fullName: VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt(System.String,System.String)
    name: FetchStreamingAssetsFilesAt
    nameWithType: IPlatformFileSystem.FetchStreamingAssetsFilesAt
    fullName: VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VRBuilder.Core.IO.DefaultFileSystem.ReadFromStreamingAssets*
  commentId: Overload:VRBuilder.Core.IO.DefaultFileSystem.ReadFromStreamingAssets
  name: ReadFromStreamingAssets
  nameWithType: DefaultFileSystem.ReadFromStreamingAssets
  fullName: VRBuilder.Core.IO.DefaultFileSystem.ReadFromStreamingAssets
- uid: VRBuilder.Core.IO.DefaultFileSystem.ReadFromPersistentData*
  commentId: Overload:VRBuilder.Core.IO.DefaultFileSystem.ReadFromPersistentData
  name: ReadFromPersistentData
  nameWithType: DefaultFileSystem.ReadFromPersistentData
  fullName: VRBuilder.Core.IO.DefaultFileSystem.ReadFromPersistentData
- uid: VRBuilder.Core.IO.DefaultFileSystem.FileExistsInStreamingAssets*
  commentId: Overload:VRBuilder.Core.IO.DefaultFileSystem.FileExistsInStreamingAssets
  name: FileExistsInStreamingAssets
  nameWithType: DefaultFileSystem.FileExistsInStreamingAssets
  fullName: VRBuilder.Core.IO.DefaultFileSystem.FileExistsInStreamingAssets
- uid: VRBuilder.Core.IO.DefaultFileSystem.FileExistsInPersistentData*
  commentId: Overload:VRBuilder.Core.IO.DefaultFileSystem.FileExistsInPersistentData
  name: FileExistsInPersistentData
  nameWithType: DefaultFileSystem.FileExistsInPersistentData
  fullName: VRBuilder.Core.IO.DefaultFileSystem.FileExistsInPersistentData
- uid: VRBuilder.Core.IO.DefaultFileSystem.BuildPersistentDataPath*
  commentId: Overload:VRBuilder.Core.IO.DefaultFileSystem.BuildPersistentDataPath
  name: BuildPersistentDataPath
  nameWithType: DefaultFileSystem.BuildPersistentDataPath
  fullName: VRBuilder.Core.IO.DefaultFileSystem.BuildPersistentDataPath
- uid: VRBuilder.Core.IO.DefaultFileSystem.NormalizePath*
  commentId: Overload:VRBuilder.Core.IO.DefaultFileSystem.NormalizePath
  name: NormalizePath
  nameWithType: DefaultFileSystem.NormalizePath
  fullName: VRBuilder.Core.IO.DefaultFileSystem.NormalizePath
