### YamlMime:ManagedReference
items:
- uid: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2
  commentId: T:VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2
  id: SelectableValueDrawer`2
  parent: VRBuilder.Editor.UI.Drawers
  children:
  - VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2.AddNewRectLine(UnityEngine.Rect@)
  - VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2.Draw(UnityEngine.Rect,System.Object,System.Action{System.Object},UnityEngine.GUIContent)
  langs:
  - csharp
  - vb
  name: SelectableValueDrawer<TFirst, TSecond>
  nameWithType: SelectableValueDrawer<TFirst, TSecond>
  fullName: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer<TFirst, TSecond>
  type: Class
  source:
    remote:
      path: Source/Core/Editor/UI/Drawers/SelectableValueDrawer.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: SelectableValueDrawer
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/UI/Drawers/SelectableValueDrawer.cs
    startLine: 12
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor.UI.Drawers
  summary: "\nTemplate drawer for selectable values. A concrete implementation of this drawer is required for each use case.\n"
  example: []
  syntax:
    content: 'public abstract class SelectableValueDrawer<TFirst, TSecond> : AbstractDrawer, IProcessDrawer'
    typeParameters:
    - id: TFirst
    - id: TSecond
    content.vb: >-
      Public MustInherit Class SelectableValueDrawer(Of TFirst, TSecond)

          Inherits AbstractDrawer

          Implements IProcessDrawer
  inheritance:
  - System.Object
  - VRBuilder.Editor.UI.Drawers.AbstractDrawer
  derivedClasses:
  - VRBuilder.Editor.UI.Drawers.ParticleSystemPropertySelectableValueDrawer
  - VRBuilder.Editor.UI.Drawers.ProcessVariableBoolSelectableValueDrawer
  - VRBuilder.Editor.UI.Drawers.ProcessVariableFloatSelectableValueDrawer
  - VRBuilder.Editor.UI.Drawers.ProcessVariableStringSelectableValueDrawer
  - VRBuilder.Editor.UI.Drawers.StringsSelectableValueDrawer
  implements:
  - VRBuilder.Editor.UI.Drawers.IProcessDrawer
  inheritedMembers:
  - VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(UnityEngine.Rect,System.Object,System.Action{System.Object},System.String)
  - VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Reflection.MemberInfo,System.Object)
  - VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Object,System.Type)
  - VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue(System.Func{System.Object},System.Func{System.Object},System.Action{System.Object})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: SelectableValueDrawer(Of TFirst, TSecond)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer(Of TFirst, TSecond)
  name.vb: SelectableValueDrawer(Of TFirst, TSecond)
- uid: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2.Draw(UnityEngine.Rect,System.Object,System.Action{System.Object},UnityEngine.GUIContent)
  commentId: M:VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2.Draw(UnityEngine.Rect,System.Object,System.Action{System.Object},UnityEngine.GUIContent)
  id: Draw(UnityEngine.Rect,System.Object,System.Action{System.Object},UnityEngine.GUIContent)
  parent: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2
  langs:
  - csharp
  - vb
  name: Draw(Rect, Object, Action<Object>, GUIContent)
  nameWithType: SelectableValueDrawer<TFirst, TSecond>.Draw(Rect, Object, Action<Object>, GUIContent)
  fullName: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer<TFirst, TSecond>.Draw(UnityEngine.Rect, System.Object, System.Action<System.Object>, UnityEngine.GUIContent)
  type: Method
  source:
    remote:
      path: Source/Core/Editor/UI/Drawers/SelectableValueDrawer.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Draw
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/UI/Drawers/SelectableValueDrawer.cs
    startLine: 14
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor.UI.Drawers
  syntax:
    content: public override Rect Draw(Rect rect, object currentValue, Action<object> changeValueCallback, GUIContent label)
    parameters:
    - id: rect
      type: UnityEngine.Rect
    - id: currentValue
      type: System.Object
    - id: changeValueCallback
      type: System.Action{System.Object}
    - id: label
      type: UnityEngine.GUIContent
    return:
      type: UnityEngine.Rect
    content.vb: Public Overrides Function Draw(rect As Rect, currentValue As Object, changeValueCallback As Action(Of Object), label As GUIContent) As Rect
  overridden: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(UnityEngine.Rect,System.Object,System.Action{System.Object},UnityEngine.GUIContent)
  overload: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2.Draw*
  nameWithType.vb: SelectableValueDrawer(Of TFirst, TSecond).Draw(Rect, Object, Action(Of Object), GUIContent)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer(Of TFirst, TSecond).Draw(UnityEngine.Rect, System.Object, System.Action(Of System.Object), UnityEngine.GUIContent)
  name.vb: Draw(Rect, Object, Action(Of Object), GUIContent)
- uid: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2.AddNewRectLine(UnityEngine.Rect@)
  commentId: M:VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2.AddNewRectLine(UnityEngine.Rect@)
  id: AddNewRectLine(UnityEngine.Rect@)
  parent: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2
  langs:
  - csharp
  - vb
  name: AddNewRectLine(ref Rect)
  nameWithType: SelectableValueDrawer<TFirst, TSecond>.AddNewRectLine(ref Rect)
  fullName: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer<TFirst, TSecond>.AddNewRectLine(ref UnityEngine.Rect)
  type: Method
  source:
    remote:
      path: Source/Core/Editor/UI/Drawers/SelectableValueDrawer.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: AddNewRectLine
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Editor/UI/Drawers/SelectableValueDrawer.cs
    startLine: 64
  assemblies:
  - VRBuilder.Editor
  namespace: VRBuilder.Editor.UI.Drawers
  syntax:
    content: protected Rect AddNewRectLine(ref Rect currentRect)
    parameters:
    - id: currentRect
      type: UnityEngine.Rect
    return:
      type: UnityEngine.Rect
    content.vb: Protected Function AddNewRectLine(ByRef currentRect As Rect) As Rect
  overload: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2.AddNewRectLine*
  nameWithType.vb: SelectableValueDrawer(Of TFirst, TSecond).AddNewRectLine(ByRef Rect)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer(Of TFirst, TSecond).AddNewRectLine(ByRef UnityEngine.Rect)
  name.vb: AddNewRectLine(ByRef Rect)
references:
- uid: VRBuilder.Editor.UI.Drawers
  commentId: N:VRBuilder.Editor.UI.Drawers
  name: VRBuilder.Editor.UI.Drawers
  nameWithType: VRBuilder.Editor.UI.Drawers
  fullName: VRBuilder.Editor.UI.Drawers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer
  commentId: T:VRBuilder.Editor.UI.Drawers.AbstractDrawer
  parent: VRBuilder.Editor.UI.Drawers
  name: AbstractDrawer
  nameWithType: AbstractDrawer
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer
- uid: VRBuilder.Editor.UI.Drawers.IProcessDrawer
  commentId: T:VRBuilder.Editor.UI.Drawers.IProcessDrawer
  parent: VRBuilder.Editor.UI.Drawers
  name: IProcessDrawer
  nameWithType: IProcessDrawer
  fullName: VRBuilder.Editor.UI.Drawers.IProcessDrawer
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(UnityEngine.Rect,System.Object,System.Action{System.Object},System.String)
  commentId: M:VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(UnityEngine.Rect,System.Object,System.Action{System.Object},System.String)
  parent: VRBuilder.Editor.UI.Drawers.AbstractDrawer
  isExternal: true
  name: Draw(Rect, Object, Action<Object>, String)
  nameWithType: AbstractDrawer.Draw(Rect, Object, Action<Object>, String)
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(UnityEngine.Rect, System.Object, System.Action<System.Object>, System.String)
  nameWithType.vb: AbstractDrawer.Draw(Rect, Object, Action(Of Object), String)
  fullName.vb: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(UnityEngine.Rect, System.Object, System.Action(Of System.Object), System.String)
  name.vb: Draw(Rect, Object, Action(Of Object), String)
  spec.csharp:
  - uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(UnityEngine.Rect,System.Object,System.Action{System.Object},System.String)
    name: Draw
    nameWithType: AbstractDrawer.Draw
    fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.Rect
    name: Rect
    nameWithType: Rect
    fullName: UnityEngine.Rect
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(UnityEngine.Rect,System.Object,System.Action{System.Object},System.String)
    name: Draw
    nameWithType: AbstractDrawer.Draw
    fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.Rect
    name: Rect
    nameWithType: Rect
    fullName: UnityEngine.Rect
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Reflection.MemberInfo,System.Object)
  commentId: M:VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Reflection.MemberInfo,System.Object)
  parent: VRBuilder.Editor.UI.Drawers.AbstractDrawer
  isExternal: true
  name: GetLabel(MemberInfo, Object)
  nameWithType: AbstractDrawer.GetLabel(MemberInfo, Object)
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Reflection.MemberInfo, System.Object)
  spec.csharp:
  - uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Reflection.MemberInfo,System.Object)
    name: GetLabel
    nameWithType: AbstractDrawer.GetLabel
    fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Reflection.MemberInfo,System.Object)
    name: GetLabel
    nameWithType: AbstractDrawer.GetLabel
    fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Object,System.Type)
  commentId: M:VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Object,System.Type)
  parent: VRBuilder.Editor.UI.Drawers.AbstractDrawer
  isExternal: true
  name: GetLabel(Object, Type)
  nameWithType: AbstractDrawer.GetLabel(Object, Type)
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Object, System.Type)
  spec.csharp:
  - uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Object,System.Type)
    name: GetLabel
    nameWithType: AbstractDrawer.GetLabel
    fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel(System.Object,System.Type)
    name: GetLabel
    nameWithType: AbstractDrawer.GetLabel
    fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.GetLabel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue(System.Func{System.Object},System.Func{System.Object},System.Action{System.Object})
  commentId: M:VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue(System.Func{System.Object},System.Func{System.Object},System.Action{System.Object})
  parent: VRBuilder.Editor.UI.Drawers.AbstractDrawer
  isExternal: true
  name: ChangeValue(Func<Object>, Func<Object>, Action<Object>)
  nameWithType: AbstractDrawer.ChangeValue(Func<Object>, Func<Object>, Action<Object>)
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue(System.Func<System.Object>, System.Func<System.Object>, System.Action<System.Object>)
  nameWithType.vb: AbstractDrawer.ChangeValue(Func(Of Object), Func(Of Object), Action(Of Object))
  fullName.vb: VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue(System.Func(Of System.Object), System.Func(Of System.Object), System.Action(Of System.Object))
  name.vb: ChangeValue(Func(Of Object), Func(Of Object), Action(Of Object))
  spec.csharp:
  - uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue(System.Func{System.Object},System.Func{System.Object},System.Action{System.Object})
    name: ChangeValue
    nameWithType: AbstractDrawer.ChangeValue
    fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue(System.Func{System.Object},System.Func{System.Object},System.Action{System.Object})
    name: ChangeValue
    nameWithType: AbstractDrawer.ChangeValue
    fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.ChangeValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(UnityEngine.Rect,System.Object,System.Action{System.Object},UnityEngine.GUIContent)
  commentId: M:VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(UnityEngine.Rect,System.Object,System.Action{System.Object},UnityEngine.GUIContent)
  parent: VRBuilder.Editor.UI.Drawers.AbstractDrawer
  isExternal: true
  name: Draw(Rect, Object, Action<Object>, GUIContent)
  nameWithType: AbstractDrawer.Draw(Rect, Object, Action<Object>, GUIContent)
  fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(UnityEngine.Rect, System.Object, System.Action<System.Object>, UnityEngine.GUIContent)
  nameWithType.vb: AbstractDrawer.Draw(Rect, Object, Action(Of Object), GUIContent)
  fullName.vb: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(UnityEngine.Rect, System.Object, System.Action(Of System.Object), UnityEngine.GUIContent)
  name.vb: Draw(Rect, Object, Action(Of Object), GUIContent)
  spec.csharp:
  - uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(UnityEngine.Rect,System.Object,System.Action{System.Object},UnityEngine.GUIContent)
    name: Draw
    nameWithType: AbstractDrawer.Draw
    fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.Rect
    name: Rect
    nameWithType: Rect
    fullName: UnityEngine.Rect
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UnityEngine.GUIContent
    name: GUIContent
    nameWithType: GUIContent
    fullName: UnityEngine.GUIContent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw(UnityEngine.Rect,System.Object,System.Action{System.Object},UnityEngine.GUIContent)
    name: Draw
    nameWithType: AbstractDrawer.Draw
    fullName: VRBuilder.Editor.UI.Drawers.AbstractDrawer.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.Rect
    name: Rect
    nameWithType: Rect
    fullName: UnityEngine.Rect
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UnityEngine.GUIContent
    name: GUIContent
    nameWithType: GUIContent
    fullName: UnityEngine.GUIContent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2.Draw*
  commentId: Overload:VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2.Draw
  name: Draw
  nameWithType: SelectableValueDrawer<TFirst, TSecond>.Draw
  fullName: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer<TFirst, TSecond>.Draw
  nameWithType.vb: SelectableValueDrawer(Of TFirst, TSecond).Draw
  fullName.vb: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer(Of TFirst, TSecond).Draw
- uid: UnityEngine.Rect
  commentId: T:UnityEngine.Rect
  parent: UnityEngine
  isExternal: true
  name: Rect
  nameWithType: Rect
  fullName: UnityEngine.Rect
- uid: System.Action{System.Object}
  commentId: T:System.Action{System.Object}
  parent: System
  definition: System.Action`1
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
  nameWithType.vb: Action(Of Object)
  fullName.vb: System.Action(Of System.Object)
  name.vb: Action(Of Object)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEngine.GUIContent
  commentId: T:UnityEngine.GUIContent
  parent: UnityEngine
  isExternal: true
  name: GUIContent
  nameWithType: GUIContent
  fullName: UnityEngine.GUIContent
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2.AddNewRectLine*
  commentId: Overload:VRBuilder.Editor.UI.Drawers.SelectableValueDrawer`2.AddNewRectLine
  name: AddNewRectLine
  nameWithType: SelectableValueDrawer<TFirst, TSecond>.AddNewRectLine
  fullName: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer<TFirst, TSecond>.AddNewRectLine
  nameWithType.vb: SelectableValueDrawer(Of TFirst, TSecond).AddNewRectLine
  fullName.vb: VRBuilder.Editor.UI.Drawers.SelectableValueDrawer(Of TFirst, TSecond).AddNewRectLine
