### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler
  commentId: T:VRBuilder.Core.Configuration.Modes.IModeHandler
  id: IModeHandler
  parent: VRBuilder.Core.Configuration.Modes
  children:
  - VRBuilder.Core.Configuration.Modes.IModeHandler.AvailableModes
  - VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentMode
  - VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentModeIndex
  - VRBuilder.Core.Configuration.Modes.IModeHandler.ModeChanged
  - VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
  - VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(VRBuilder.Core.Configuration.Modes.IMode)
  langs:
  - csharp
  - vb
  name: IModeHandler
  nameWithType: IModeHandler
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler
  type: Interface
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/IModeHandler.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IModeHandler
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/IModeHandler.cs
    startLine: 12
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nInterface for the ModeHandler used to configure modes during runtime.\n"
  example: []
  syntax:
    content: public interface IModeHandler
    content.vb: Public Interface IModeHandler
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.ModeChanged
  commentId: E:VRBuilder.Core.Configuration.Modes.IModeHandler.ModeChanged
  id: ModeChanged
  parent: VRBuilder.Core.Configuration.Modes.IModeHandler
  langs:
  - csharp
  - vb
  name: ModeChanged
  nameWithType: IModeHandler.ModeChanged
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.ModeChanged
  type: Event
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/IModeHandler.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ModeChanged
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/IModeHandler.cs
    startLine: 17
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nThe event that has to be invoked when the current mode changes, for example in <xref href=\"VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: event EventHandler<ModeChangedEventArgs> ModeChanged
    return:
      type: System.EventHandler{VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs}
    content.vb: Event ModeChanged As EventHandler(Of ModeChangedEventArgs)
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.AvailableModes
  commentId: P:VRBuilder.Core.Configuration.Modes.IModeHandler.AvailableModes
  id: AvailableModes
  parent: VRBuilder.Core.Configuration.Modes.IModeHandler
  langs:
  - csharp
  - vb
  name: AvailableModes
  nameWithType: IModeHandler.AvailableModes
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.AvailableModes
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/IModeHandler.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: AvailableModes
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/IModeHandler.cs
    startLine: 22
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nThe ordered collection of all available process modes.\n"
  example: []
  syntax:
    content: ReadOnlyCollection<IMode> AvailableModes { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{VRBuilder.Core.Configuration.Modes.IMode}
    content.vb: ReadOnly Property AvailableModes As ReadOnlyCollection(Of IMode)
  overload: VRBuilder.Core.Configuration.Modes.IModeHandler.AvailableModes*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentModeIndex
  commentId: P:VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentModeIndex
  id: CurrentModeIndex
  parent: VRBuilder.Core.Configuration.Modes.IModeHandler
  langs:
  - csharp
  - vb
  name: CurrentModeIndex
  nameWithType: IModeHandler.CurrentModeIndex
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentModeIndex
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/IModeHandler.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CurrentModeIndex
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/IModeHandler.cs
    startLine: 27
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nThe index of the current process mode.\n"
  example: []
  syntax:
    content: int CurrentModeIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property CurrentModeIndex As Integer
  overload: VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentModeIndex*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentMode
  commentId: P:VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentMode
  id: CurrentMode
  parent: VRBuilder.Core.Configuration.Modes.IModeHandler
  langs:
  - csharp
  - vb
  name: CurrentMode
  nameWithType: IModeHandler.CurrentMode
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentMode
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/IModeHandler.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: CurrentMode
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/IModeHandler.cs
    startLine: 32
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nThe current process mode.\n"
  example: []
  syntax:
    content: IMode CurrentMode { get; }
    parameters: []
    return:
      type: VRBuilder.Core.Configuration.Modes.IMode
    content.vb: ReadOnly Property CurrentMode As IMode
  overload: VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentMode*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
  commentId: M:VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
  id: SetMode(System.Int32)
  parent: VRBuilder.Core.Configuration.Modes.IModeHandler
  langs:
  - csharp
  - vb
  name: SetMode(Int32)
  nameWithType: IModeHandler.SetMode(Int32)
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/IModeHandler.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: SetMode
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/IModeHandler.cs
    startLine: 38
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nSet the current process mode.\n"
  example: []
  syntax:
    content: void SetMode(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The index of the desired process mode.
    content.vb: Sub SetMode(index As Integer)
  overload: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode*
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(VRBuilder.Core.Configuration.Modes.IMode)
  commentId: M:VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(VRBuilder.Core.Configuration.Modes.IMode)
  id: SetMode(VRBuilder.Core.Configuration.Modes.IMode)
  parent: VRBuilder.Core.Configuration.Modes.IModeHandler
  langs:
  - csharp
  - vb
  name: SetMode(IMode)
  nameWithType: IModeHandler.SetMode(IMode)
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(VRBuilder.Core.Configuration.Modes.IMode)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/Configuration/Modes/IModeHandler.cs
      branch: feature/mp-2811-outline-shader
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: SetMode
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/Configuration/Modes/IModeHandler.cs
    startLine: 44
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.Configuration.Modes
  summary: "\nSet the current process mode, this process mode has to be one of the available modes.\n"
  example: []
  syntax:
    content: void SetMode(IMode mode)
    parameters:
    - id: mode
      type: VRBuilder.Core.Configuration.Modes.IMode
      description: The desired process mode which should be set.
    content.vb: Sub SetMode(mode As IMode)
  overload: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode*
references:
- uid: VRBuilder.Core.Configuration.Modes
  commentId: N:VRBuilder.Core.Configuration.Modes
  name: VRBuilder.Core.Configuration.Modes
  nameWithType: VRBuilder.Core.Configuration.Modes
  fullName: VRBuilder.Core.Configuration.Modes
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
  commentId: M:VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
  parent: VRBuilder.Core.Configuration.Modes.IModeHandler
  isExternal: true
  name: SetMode(Int32)
  nameWithType: IModeHandler.SetMode(Int32)
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
  spec.csharp:
  - uid: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
    name: SetMode
    nameWithType: IModeHandler.SetMode
    fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode(System.Int32)
    name: SetMode
    nameWithType: IModeHandler.SetMode
    fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs}
  commentId: T:System.EventHandler{VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ModeChangedEventArgs>
  nameWithType: EventHandler<ModeChangedEventArgs>
  fullName: System.EventHandler<VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs>
  nameWithType.vb: EventHandler(Of ModeChangedEventArgs)
  fullName.vb: System.EventHandler(Of VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs)
  name.vb: EventHandler(Of ModeChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs
    name: ModeChangedEventArgs
    nameWithType: ModeChangedEventArgs
    fullName: VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs
    name: ModeChangedEventArgs
    nameWithType: ModeChangedEventArgs
    fullName: VRBuilder.Core.Configuration.Modes.ModeChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler
  commentId: T:VRBuilder.Core.Configuration.Modes.IModeHandler
  parent: VRBuilder.Core.Configuration.Modes
  name: IModeHandler
  nameWithType: IModeHandler
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.AvailableModes*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.IModeHandler.AvailableModes
  name: AvailableModes
  nameWithType: IModeHandler.AvailableModes
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.AvailableModes
- uid: System.Collections.ObjectModel.ReadOnlyCollection{VRBuilder.Core.Configuration.Modes.IMode}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{VRBuilder.Core.Configuration.Modes.IMode}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<IMode>
  nameWithType: ReadOnlyCollection<IMode>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<VRBuilder.Core.Configuration.Modes.IMode>
  nameWithType.vb: ReadOnlyCollection(Of IMode)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of VRBuilder.Core.Configuration.Modes.IMode)
  name.vb: ReadOnlyCollection(Of IMode)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.Configuration.Modes.IMode
    name: IMode
    nameWithType: IMode
    fullName: VRBuilder.Core.Configuration.Modes.IMode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.Configuration.Modes.IMode
    name: IMode
    nameWithType: IMode
    fullName: VRBuilder.Core.Configuration.Modes.IMode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentModeIndex*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentModeIndex
  name: CurrentModeIndex
  nameWithType: IModeHandler.CurrentModeIndex
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentModeIndex
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentMode*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentMode
  name: CurrentMode
  nameWithType: IModeHandler.CurrentMode
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.CurrentMode
- uid: VRBuilder.Core.Configuration.Modes.IMode
  commentId: T:VRBuilder.Core.Configuration.Modes.IMode
  parent: VRBuilder.Core.Configuration.Modes
  name: IMode
  nameWithType: IMode
  fullName: VRBuilder.Core.Configuration.Modes.IMode
- uid: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode*
  commentId: Overload:VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode
  name: SetMode
  nameWithType: IModeHandler.SetMode
  fullName: VRBuilder.Core.Configuration.Modes.IModeHandler.SetMode
