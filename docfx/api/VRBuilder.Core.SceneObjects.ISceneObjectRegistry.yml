### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  commentId: T:VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  id: ISceneObjectRegistry
  parent: VRBuilder.Core.SceneObjects
  children:
  - VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsGuid(System.Guid)
  - VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsName(System.String)
  - VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByGuid(System.Guid)
  - VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByName(System.String)
  - VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByTag(System.Guid)
  - VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetObjects(System.Guid)
  - VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetProperties``1(System.Guid)
  - VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetPropertyByTag``1(System.Guid)
  - VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item(System.Guid)
  - VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item(System.String)
  - VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Refresh
  - VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Register(VRBuilder.Core.SceneObjects.ISceneObject)
  - VRBuilder.Core.SceneObjects.ISceneObjectRegistry.RegisterAll
  - VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Unregister(VRBuilder.Core.SceneObjects.ISceneObject)
  langs:
  - csharp
  - vb
  name: ISceneObjectRegistry
  nameWithType: ISceneObjectRegistry
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  type: Interface
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ISceneObjectRegistry
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 10
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  syntax:
    content: public interface ISceneObjectRegistry
    content.vb: Public Interface ISceneObjectRegistry
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsGuid(System.Guid)
  commentId: M:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsGuid(System.Guid)
  id: ContainsGuid(System.Guid)
  parent: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  langs:
  - csharp
  - vb
  name: ContainsGuid(Guid)
  nameWithType: ISceneObjectRegistry.ContainsGuid(Guid)
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsGuid(System.Guid)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ContainsGuid
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 15
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nReturns if the Guid is registered in the registry.\n"
  example: []
  syntax:
    content: bool ContainsGuid(Guid guid)
    parameters:
    - id: guid
      type: System.Guid
    return:
      type: System.Boolean
    content.vb: Function ContainsGuid(guid As Guid) As Boolean
  overload: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsGuid*
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsName(System.String)
  commentId: M:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsName(System.String)
  id: ContainsName(System.String)
  parent: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  langs:
  - csharp
  - vb
  name: ContainsName(String)
  nameWithType: ISceneObjectRegistry.ContainsName(String)
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsName(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ContainsName
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 20
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nReturns if the name is registered in the registry.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use ContainsGuid instead.")]

      bool ContainsName(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Boolean
    content.vb: >-
      <Obsolete("Use ContainsGuid instead.")>

      Function ContainsName(name As String) As Boolean
  overload: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsName*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use ContainsGuid instead.
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByGuid(System.Guid)
  commentId: M:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByGuid(System.Guid)
  id: GetByGuid(System.Guid)
  parent: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  langs:
  - csharp
  - vb
  name: GetByGuid(Guid)
  nameWithType: ISceneObjectRegistry.GetByGuid(Guid)
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByGuid(System.Guid)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetByGuid
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 27
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nReturns the IProcessSceneEntity belonging to the given Guid.\nIf there is no fitting Entity found a MissingEntityException will be thrown.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetObjects instead.")]

      ISceneObject GetByGuid(Guid guid)
    parameters:
    - id: guid
      type: System.Guid
    return:
      type: VRBuilder.Core.SceneObjects.ISceneObject
    content.vb: >-
      <Obsolete("Use GetObjects instead.")>

      Function GetByGuid(guid As Guid) As ISceneObject
  overload: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByGuid*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetObjects instead.
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByName(System.String)
  commentId: M:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByName(System.String)
  id: GetByName(System.String)
  parent: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  langs:
  - csharp
  - vb
  name: GetByName(String)
  nameWithType: ISceneObjectRegistry.GetByName(String)
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByName(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetByName
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 34
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nReturns the IProcessSceneEntity belonging to the given unique name.\nIf there is no fitting Entity found a MissingEntityException will be thrown.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetObjects instead.")]

      ISceneObject GetByName(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: VRBuilder.Core.SceneObjects.ISceneObject
    content.vb: >-
      <Obsolete("Use GetObjects instead.")>

      Function GetByName(name As String) As ISceneObject
  overload: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByName*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetObjects instead.
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetObjects(System.Guid)
  commentId: M:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetObjects(System.Guid)
  id: GetObjects(System.Guid)
  parent: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  langs:
  - csharp
  - vb
  name: GetObjects(Guid)
  nameWithType: ISceneObjectRegistry.GetObjects(Guid)
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetObjects(System.Guid)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetObjects
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 40
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nReturns all registered scene objects which have the provided guid assigned to them.\n"
  example: []
  syntax:
    content: IEnumerable<ISceneObject> GetObjects(Guid guid)
    parameters:
    - id: guid
      type: System.Guid
    return:
      type: System.Collections.Generic.IEnumerable{VRBuilder.Core.SceneObjects.ISceneObject}
    content.vb: Function GetObjects(guid As Guid) As IEnumerable(Of ISceneObject)
  overload: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetObjects*
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByTag(System.Guid)
  commentId: M:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByTag(System.Guid)
  id: GetByTag(System.Guid)
  parent: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  langs:
  - csharp
  - vb
  name: GetByTag(Guid)
  nameWithType: ISceneObjectRegistry.GetByTag(Guid)
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByTag(System.Guid)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetByTag
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 42
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  syntax:
    content: >-
      [Obsolete("Use GetObjects instead.")]

      IEnumerable<ISceneObject> GetByTag(Guid tag)
    parameters:
    - id: tag
      type: System.Guid
    return:
      type: System.Collections.Generic.IEnumerable{VRBuilder.Core.SceneObjects.ISceneObject}
    content.vb: >-
      <Obsolete("Use GetObjects instead.")>

      Function GetByTag(tag As Guid) As IEnumerable(Of ISceneObject)
  overload: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByTag*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetObjects instead.
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetProperties``1(System.Guid)
  commentId: M:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetProperties``1(System.Guid)
  id: GetProperties``1(System.Guid)
  parent: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  langs:
  - csharp
  - vb
  name: GetProperties<T>(Guid)
  nameWithType: ISceneObjectRegistry.GetProperties<T>(Guid)
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetProperties<T>(System.Guid)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetProperties
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 48
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nReturns all registered scene objects with the provided guid and at least one valid property of the specified type.\n"
  example: []
  syntax:
    content: >-
      IEnumerable<T> GetProperties<T>(Guid guid)

          where T : ISceneObjectProperty
    parameters:
    - id: guid
      type: System.Guid
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Function GetProperties(Of T As ISceneObjectProperty)(guid As Guid) As IEnumerable(Of T)
  overload: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetProperties*
  nameWithType.vb: ISceneObjectRegistry.GetProperties(Of T)(Guid)
  fullName.vb: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetProperties(Of T)(System.Guid)
  name.vb: GetProperties(Of T)(Guid)
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetPropertyByTag``1(System.Guid)
  commentId: M:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetPropertyByTag``1(System.Guid)
  id: GetPropertyByTag``1(System.Guid)
  parent: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  langs:
  - csharp
  - vb
  name: GetPropertyByTag<T>(Guid)
  nameWithType: ISceneObjectRegistry.GetPropertyByTag<T>(Guid)
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetPropertyByTag<T>(System.Guid)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: GetPropertyByTag
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 50
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  syntax:
    content: >-
      [Obsolete("Use GetProperties instead.")]

      IEnumerable<T> GetPropertyByTag<T>(Guid tag)

          where T : ISceneObjectProperty
    parameters:
    - id: tag
      type: System.Guid
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: >-
      <Obsolete("Use GetProperties instead.")>

      Function GetPropertyByTag(Of T As ISceneObjectProperty)(tag As Guid) As IEnumerable(Of T)
  overload: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetPropertyByTag*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetProperties instead.
  nameWithType.vb: ISceneObjectRegistry.GetPropertyByTag(Of T)(Guid)
  fullName.vb: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetPropertyByTag(Of T)(System.Guid)
  name.vb: GetPropertyByTag(Of T)(Guid)
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Register(VRBuilder.Core.SceneObjects.ISceneObject)
  commentId: M:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Register(VRBuilder.Core.SceneObjects.ISceneObject)
  id: Register(VRBuilder.Core.SceneObjects.ISceneObject)
  parent: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  langs:
  - csharp
  - vb
  name: Register(ISceneObject)
  nameWithType: ISceneObjectRegistry.Register(ISceneObject)
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Register(VRBuilder.Core.SceneObjects.ISceneObject)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Register
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 58
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nRegisters an SceneObject in the registry. If there is an SceneObject with the same name\nalready registered, an NameNotUniqueException will be thrown. Also if the Guid\nis already known an SceneObjectAlreadyRegisteredException will be thrown.\n"
  example: []
  syntax:
    content: void Register(ISceneObject obj)
    parameters:
    - id: obj
      type: VRBuilder.Core.SceneObjects.ISceneObject
    content.vb: Sub Register(obj As ISceneObject)
  overload: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Register*
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Unregister(VRBuilder.Core.SceneObjects.ISceneObject)
  commentId: M:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Unregister(VRBuilder.Core.SceneObjects.ISceneObject)
  id: Unregister(VRBuilder.Core.SceneObjects.ISceneObject)
  parent: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  langs:
  - csharp
  - vb
  name: Unregister(ISceneObject)
  nameWithType: ISceneObjectRegistry.Unregister(ISceneObject)
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Unregister(VRBuilder.Core.SceneObjects.ISceneObject)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Unregister
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 63
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nRemoves the SceneObject completely from the Registry.\n"
  example: []
  syntax:
    content: bool Unregister(ISceneObject obj)
    parameters:
    - id: obj
      type: VRBuilder.Core.SceneObjects.ISceneObject
    return:
      type: System.Boolean
    content.vb: Function Unregister(obj As ISceneObject) As Boolean
  overload: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Unregister*
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item(System.String)
  commentId: P:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item(System.String)
  id: Item(System.String)
  parent: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: ISceneObjectRegistry.Item[String]
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item[System.String]
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: this[]
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 68
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nShortcut for GetByName(string name) method.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetObjects instead")]

      ISceneObject this[string name] { get; }
    parameters:
    - id: name
      type: System.String
    return:
      type: VRBuilder.Core.SceneObjects.ISceneObject
    content.vb: >-
      <Obsolete("Use GetObjects instead")>

      ReadOnly Property Item(name As String) As ISceneObject
  overload: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetObjects instead
  nameWithType.vb: ISceneObjectRegistry.Item(String)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item(System.String)
  name.vb: Item(String)
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item(System.Guid)
  commentId: P:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item(System.Guid)
  id: Item(System.Guid)
  parent: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  langs:
  - csharp
  - vb
  name: Item[Guid]
  nameWithType: ISceneObjectRegistry.Item[Guid]
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item[System.Guid]
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: this[]
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 74
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nShortcut for GetByGuid(Guid guid) method.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetObjects instead")]

      ISceneObject this[Guid guid] { get; }
    parameters:
    - id: guid
      type: System.Guid
    return:
      type: VRBuilder.Core.SceneObjects.ISceneObject
    content.vb: >-
      <Obsolete("Use GetObjects instead")>

      ReadOnly Property Item(guid As Guid) As ISceneObject
  overload: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetObjects instead
  nameWithType.vb: ISceneObjectRegistry.Item(Guid)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item(System.Guid)
  name.vb: Item(Guid)
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.RegisterAll
  commentId: M:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.RegisterAll
  id: RegisterAll
  parent: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  langs:
  - csharp
  - vb
  name: RegisterAll()
  nameWithType: ISceneObjectRegistry.RegisterAll()
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.RegisterAll()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: RegisterAll
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 80
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nRegisters all SceneObject in scene, independent of their state.\n"
  example: []
  syntax:
    content: void RegisterAll()
    content.vb: Sub RegisterAll
  overload: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.RegisterAll*
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Refresh
  commentId: M:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Refresh
  id: Refresh
  parent: VRBuilder.Core.SceneObjects.ISceneObjectRegistry
  langs:
  - csharp
  - vb
  name: Refresh()
  nameWithType: ISceneObjectRegistry.Refresh()
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Refresh()
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Refresh
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/ISceneObjectRegistry.cs
    startLine: 85
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nUpdates the registry by removing all <xref href=\"VRBuilder.Core.SceneObjects.ISceneObject\" data-throw-if-not-resolved=\"false\"></xref> which are not in the scene anymore and adding new ones.\n"
  example: []
  syntax:
    content: void Refresh()
    content.vb: Sub Refresh
  overload: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Refresh*
references:
- uid: VRBuilder.Core.SceneObjects
  commentId: N:VRBuilder.Core.SceneObjects
  name: VRBuilder.Core.SceneObjects
  nameWithType: VRBuilder.Core.SceneObjects
  fullName: VRBuilder.Core.SceneObjects
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsGuid*
  commentId: Overload:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsGuid
  name: ContainsGuid
  nameWithType: ISceneObjectRegistry.ContainsGuid
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsGuid
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsName*
  commentId: Overload:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsName
  name: ContainsName
  nameWithType: ISceneObjectRegistry.ContainsName
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.ContainsName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByGuid*
  commentId: Overload:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByGuid
  name: GetByGuid
  nameWithType: ISceneObjectRegistry.GetByGuid
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByGuid
- uid: VRBuilder.Core.SceneObjects.ISceneObject
  commentId: T:VRBuilder.Core.SceneObjects.ISceneObject
  parent: VRBuilder.Core.SceneObjects
  name: ISceneObject
  nameWithType: ISceneObject
  fullName: VRBuilder.Core.SceneObjects.ISceneObject
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByName*
  commentId: Overload:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByName
  name: GetByName
  nameWithType: ISceneObjectRegistry.GetByName
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByName
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetObjects*
  commentId: Overload:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetObjects
  name: GetObjects
  nameWithType: ISceneObjectRegistry.GetObjects
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetObjects
- uid: System.Collections.Generic.IEnumerable{VRBuilder.Core.SceneObjects.ISceneObject}
  commentId: T:System.Collections.Generic.IEnumerable{VRBuilder.Core.SceneObjects.ISceneObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ISceneObject>
  nameWithType: IEnumerable<ISceneObject>
  fullName: System.Collections.Generic.IEnumerable<VRBuilder.Core.SceneObjects.ISceneObject>
  nameWithType.vb: IEnumerable(Of ISceneObject)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VRBuilder.Core.SceneObjects.ISceneObject)
  name.vb: IEnumerable(Of ISceneObject)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VRBuilder.Core.SceneObjects.ISceneObject
    name: ISceneObject
    nameWithType: ISceneObject
    fullName: VRBuilder.Core.SceneObjects.ISceneObject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VRBuilder.Core.SceneObjects.ISceneObject
    name: ISceneObject
    nameWithType: ISceneObject
    fullName: VRBuilder.Core.SceneObjects.ISceneObject
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByTag*
  commentId: Overload:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByTag
  name: GetByTag
  nameWithType: ISceneObjectRegistry.GetByTag
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetByTag
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetProperties*
  commentId: Overload:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetProperties
  name: GetProperties
  nameWithType: ISceneObjectRegistry.GetProperties
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetProperties
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetPropertyByTag*
  commentId: Overload:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetPropertyByTag
  name: GetPropertyByTag
  nameWithType: ISceneObjectRegistry.GetPropertyByTag
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.GetPropertyByTag
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Register*
  commentId: Overload:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Register
  name: Register
  nameWithType: ISceneObjectRegistry.Register
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Register
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Unregister*
  commentId: Overload:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Unregister
  name: Unregister
  nameWithType: ISceneObjectRegistry.Unregister
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Unregister
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item*
  commentId: Overload:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item
  name: Item
  nameWithType: ISceneObjectRegistry.Item
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Item
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.RegisterAll*
  commentId: Overload:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.RegisterAll
  name: RegisterAll
  nameWithType: ISceneObjectRegistry.RegisterAll
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.RegisterAll
- uid: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Refresh*
  commentId: Overload:VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Refresh
  name: Refresh
  nameWithType: ISceneObjectRegistry.Refresh
  fullName: VRBuilder.Core.SceneObjects.ISceneObjectRegistry.Refresh
