### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.IO.IPlatformFileSystem
  commentId: T:VRBuilder.Core.IO.IPlatformFileSystem
  id: IPlatformFileSystem
  parent: VRBuilder.Core.IO
  children:
  - VRBuilder.Core.IO.IPlatformFileSystem.Exists(System.String)
  - VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt(System.String,System.String)
  - VRBuilder.Core.IO.IPlatformFileSystem.Read(System.String)
  - VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText(System.String)
  - VRBuilder.Core.IO.IPlatformFileSystem.Write(System.String,System.Byte[])
  langs:
  - csharp
  - vb
  name: IPlatformFileSystem
  nameWithType: IPlatformFileSystem
  fullName: VRBuilder.Core.IO.IPlatformFileSystem
  type: Interface
  source:
    remote:
      path: Source/Core/Runtime/IO/IPlatformFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: IPlatformFileSystem
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/IPlatformFileSystem.cs
    startLine: 14
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nInterface with basic platform operations for reading and saving files in Unity.\n"
  remarks: Operations are done for the StreamingAssets and platform persistent data folders.
  example: []
  syntax:
    content: public interface IPlatformFileSystem
    content.vb: Public Interface IPlatformFileSystem
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VRBuilder.Core.IO.IPlatformFileSystem.Read(System.String)
  commentId: M:VRBuilder.Core.IO.IPlatformFileSystem.Read(System.String)
  id: Read(System.String)
  parent: VRBuilder.Core.IO.IPlatformFileSystem
  langs:
  - csharp
  - vb
  name: Read(String)
  nameWithType: IPlatformFileSystem.Read(String)
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.Read(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/IPlatformFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Read
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/IPlatformFileSystem.cs
    startLine: 22
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nLoads a file stored at <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code>.\n"
  remarks: <code data-dev-comment-type="paramref" class="paramref">filePath</code> must be relative to the StreamingAssets or the persistent data folder.
  example: []
  syntax:
    content: Task<byte[]> Read(string filePath)
    parameters:
    - id: filePath
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: The contents of the file into a byte array.
    content.vb: Function Read(filePath As String) As Task(Of Byte())
  overload: VRBuilder.Core.IO.IPlatformFileSystem.Read*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: Exception thrown if the file does not exist.
- uid: VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText(System.String)
  commentId: M:VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText(System.String)
  id: ReadAllText(System.String)
  parent: VRBuilder.Core.IO.IPlatformFileSystem
  langs:
  - csharp
  - vb
  name: ReadAllText(String)
  nameWithType: IPlatformFileSystem.ReadAllText(String)
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/IPlatformFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: ReadAllText
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/IPlatformFileSystem.cs
    startLine: 30
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nLoads a file stored at <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code>.\n"
  remarks: <code data-dev-comment-type="paramref" class="paramref">filePath</code> must be relative to the StreamingAssets or the persistent data folder.
  example: []
  syntax:
    content: Task<string> ReadAllText(string filePath)
    parameters:
    - id: filePath
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Returns a `string` with the content of the file.
    content.vb: Function ReadAllText(filePath As String) As Task(Of String)
  overload: VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: Exception thrown if the file does not exist.
- uid: VRBuilder.Core.IO.IPlatformFileSystem.Write(System.String,System.Byte[])
  commentId: M:VRBuilder.Core.IO.IPlatformFileSystem.Write(System.String,System.Byte[])
  id: Write(System.String,System.Byte[])
  parent: VRBuilder.Core.IO.IPlatformFileSystem
  langs:
  - csharp
  - vb
  name: Write(String, Byte[])
  nameWithType: IPlatformFileSystem.Write(String, Byte[])
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.Write(System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/IPlatformFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Write
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/IPlatformFileSystem.cs
    startLine: 37
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nSaves given <code data-dev-comment-type=\"paramref\" class=\"paramref\">fileData</code> in provided <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code>.\n"
  remarks: <code data-dev-comment-type="paramref" class="paramref">filePath</code> must be relative to <see cref="!:PersistentDataPath"></see>.
  example: []
  syntax:
    content: Task<bool> Write(string filePath, byte[] fileData)
    parameters:
    - id: filePath
      type: System.String
    - id: fileData
      type: System.Byte[]
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: Returns true if <code data-dev-comment-type="paramref" class="paramref">fileData</code> could be saved successfully; otherwise, false.
    content.vb: Function Write(filePath As String, fileData As Byte()) As Task(Of Boolean)
  overload: VRBuilder.Core.IO.IPlatformFileSystem.Write*
  nameWithType.vb: IPlatformFileSystem.Write(String, Byte())
  fullName.vb: VRBuilder.Core.IO.IPlatformFileSystem.Write(System.String, System.Byte())
  name.vb: Write(String, Byte())
- uid: VRBuilder.Core.IO.IPlatformFileSystem.Exists(System.String)
  commentId: M:VRBuilder.Core.IO.IPlatformFileSystem.Exists(System.String)
  id: Exists(System.String)
  parent: VRBuilder.Core.IO.IPlatformFileSystem
  langs:
  - csharp
  - vb
  name: Exists(String)
  nameWithType: IPlatformFileSystem.Exists(String)
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.Exists(System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/IPlatformFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: Exists
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/IPlatformFileSystem.cs
    startLine: 43
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nReturns true if given <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code> contains the name of an existing file under the StreamingAssets or platform persistent data folder; otherwise, false.\n"
  remarks: <code data-dev-comment-type="paramref" class="paramref">filePath</code> must be relative to the StreamingAssets or the platform persistent data folder.
  example: []
  syntax:
    content: Task<bool> Exists(string filePath)
    parameters:
    - id: filePath
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function Exists(filePath As String) As Task(Of Boolean)
  overload: VRBuilder.Core.IO.IPlatformFileSystem.Exists*
- uid: VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt(System.String,System.String)
  commentId: M:VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt(System.String,System.String)
  id: FetchStreamingAssetsFilesAt(System.String,System.String)
  parent: VRBuilder.Core.IO.IPlatformFileSystem
  langs:
  - csharp
  - vb
  name: FetchStreamingAssetsFilesAt(String, String)
  nameWithType: IPlatformFileSystem.FetchStreamingAssetsFilesAt(String, String)
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt(System.String, System.String)
  type: Method
  source:
    remote:
      path: Source/Core/Runtime/IO/IPlatformFileSystem.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: FetchStreamingAssetsFilesAt
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/IO/IPlatformFileSystem.cs
    startLine: 53
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.IO
  summary: "\nReturns the names of files (including their paths) that match the specified search pattern in the specified directory relative to the Streaming Assets folder.\n"
  example: []
  syntax:
    content: IEnumerable<string> FetchStreamingAssetsFilesAt(string path, string searchPattern)
    parameters:
    - id: path
      type: System.String
      description: The relative path to the Streaming Assets folder. This string is not case-sensitive.
    - id: searchPattern
      type: System.String
      description: "\nThe search string to match against the names of files in <code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code>.\nDepending on the platform, this parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&apos;t support regular expressions.\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Function FetchStreamingAssetsFilesAt(path As String, searchPattern As String) As IEnumerable(Of String)
  overload: VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt*
references:
- uid: VRBuilder.Core.IO
  commentId: N:VRBuilder.Core.IO
  name: VRBuilder.Core.IO
  nameWithType: VRBuilder.Core.IO
  fullName: VRBuilder.Core.IO
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
  isExternal: true
- uid: VRBuilder.Core.IO.IPlatformFileSystem.Read*
  commentId: Overload:VRBuilder.Core.IO.IPlatformFileSystem.Read
  name: Read
  nameWithType: IPlatformFileSystem.Read
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.Read
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Byte[]}
  commentId: T:System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Byte[]>
  nameWithType: Task<Byte[]>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  nameWithType.vb: Task(Of Byte())
  fullName.vb: System.Threading.Tasks.Task(Of System.Byte())
  name.vb: Task(Of Byte())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText*
  commentId: Overload:VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText
  name: ReadAllText
  nameWithType: IPlatformFileSystem.ReadAllText
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.ReadAllText
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.IO.IPlatformFileSystem.Write*
  commentId: Overload:VRBuilder.Core.IO.IPlatformFileSystem.Write
  name: Write
  nameWithType: IPlatformFileSystem.Write
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.Write
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRBuilder.Core.IO.IPlatformFileSystem.Exists*
  commentId: Overload:VRBuilder.Core.IO.IPlatformFileSystem.Exists
  name: Exists
  nameWithType: IPlatformFileSystem.Exists
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.Exists
- uid: VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt*
  commentId: Overload:VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt
  name: FetchStreamingAssetsFilesAt
  nameWithType: IPlatformFileSystem.FetchStreamingAssetsFilesAt
  fullName: VRBuilder.Core.IO.IPlatformFileSystem.FetchStreamingAssetsFilesAt
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
