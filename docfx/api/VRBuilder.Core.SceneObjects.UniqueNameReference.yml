### YamlMime:ManagedReference
items:
- uid: VRBuilder.Core.SceneObjects.UniqueNameReference
  commentId: T:VRBuilder.Core.SceneObjects.UniqueNameReference
  id: UniqueNameReference
  parent: VRBuilder.Core.SceneObjects
  children:
  - VRBuilder.Core.SceneObjects.UniqueNameReference.#ctor
  - VRBuilder.Core.SceneObjects.UniqueNameReference.#ctor(System.String)
  - VRBuilder.Core.SceneObjects.UniqueNameReference.UniqueName
  langs:
  - csharp
  - vb
  name: UniqueNameReference
  nameWithType: UniqueNameReference
  fullName: VRBuilder.Core.SceneObjects.UniqueNameReference
  type: Class
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/UniqueNameReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: UniqueNameReference
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/UniqueNameReference.cs
    startLine: 12
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nSimple container for UniqueName.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use ProcessSceneReferenceBase and derived classes to store references to objects in the scene.")]

      [DataContract(IsReference = true)]

      public abstract class UniqueNameReference
    content.vb: >-
      <Obsolete("Use ProcessSceneReferenceBase and derived classes to store references to objects in the scene.")>

      <DataContract(IsReference:=True)>

      Public MustInherit Class UniqueNameReference
  inheritance:
  - System.Object
  derivedClasses:
  - VRBuilder.Core.SceneObjects.ObjectReference`1
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use ProcessSceneReferenceBase and derived classes to store references to objects in the scene.
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: IsReference
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VRBuilder.Core.SceneObjects.UniqueNameReference.UniqueName
  commentId: P:VRBuilder.Core.SceneObjects.UniqueNameReference.UniqueName
  id: UniqueName
  parent: VRBuilder.Core.SceneObjects.UniqueNameReference
  langs:
  - csharp
  - vb
  name: UniqueName
  nameWithType: UniqueNameReference.UniqueName
  fullName: VRBuilder.Core.SceneObjects.UniqueNameReference.UniqueName
  type: Property
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/UniqueNameReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: UniqueName
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/UniqueNameReference.cs
    startLine: 19
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  summary: "\nSerializable unique name of referenced object.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public virtual string UniqueName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public Overridable Property UniqueName As String
  overload: VRBuilder.Core.SceneObjects.UniqueNameReference.UniqueName*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: VRBuilder.Core.SceneObjects.UniqueNameReference.#ctor
  commentId: M:VRBuilder.Core.SceneObjects.UniqueNameReference.#ctor
  id: '#ctor'
  parent: VRBuilder.Core.SceneObjects.UniqueNameReference
  langs:
  - csharp
  - vb
  name: UniqueNameReference()
  nameWithType: UniqueNameReference.UniqueNameReference()
  fullName: VRBuilder.Core.SceneObjects.UniqueNameReference.UniqueNameReference()
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/UniqueNameReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/UniqueNameReference.cs
    startLine: 22
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  syntax:
    content: protected UniqueNameReference()
    content.vb: Protected Sub New
  overload: VRBuilder.Core.SceneObjects.UniqueNameReference.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VRBuilder.Core.SceneObjects.UniqueNameReference.#ctor(System.String)
  commentId: M:VRBuilder.Core.SceneObjects.UniqueNameReference.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: VRBuilder.Core.SceneObjects.UniqueNameReference
  langs:
  - csharp
  - vb
  name: UniqueNameReference(String)
  nameWithType: UniqueNameReference.UniqueNameReference(String)
  fullName: VRBuilder.Core.SceneObjects.UniqueNameReference.UniqueNameReference(System.String)
  type: Constructor
  source:
    remote:
      path: Source/Core/Runtime/SceneObjects/UniqueNameReference.cs
      branch: develop
      repo: git@github.com:MindPort-GmbH/VR-Builder.git
    id: .ctor
    path: ../../Assets/MindPort/VR Builder/Core/Source/Core/Runtime/SceneObjects/UniqueNameReference.cs
    startLine: 24
  assemblies:
  - VRBuilder.Core
  namespace: VRBuilder.Core.SceneObjects
  syntax:
    content: protected UniqueNameReference(string uniqueName)
    parameters:
    - id: uniqueName
      type: System.String
    content.vb: Protected Sub New(uniqueName As String)
  overload: VRBuilder.Core.SceneObjects.UniqueNameReference.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: VRBuilder.Core.SceneObjects
  commentId: N:VRBuilder.Core.SceneObjects
  name: VRBuilder.Core.SceneObjects
  nameWithType: VRBuilder.Core.SceneObjects
  fullName: VRBuilder.Core.SceneObjects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRBuilder.Core.SceneObjects.UniqueNameReference.UniqueName*
  commentId: Overload:VRBuilder.Core.SceneObjects.UniqueNameReference.UniqueName
  name: UniqueName
  nameWithType: UniqueNameReference.UniqueName
  fullName: VRBuilder.Core.SceneObjects.UniqueNameReference.UniqueName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VRBuilder.Core.SceneObjects.UniqueNameReference.#ctor*
  commentId: Overload:VRBuilder.Core.SceneObjects.UniqueNameReference.#ctor
  name: UniqueNameReference
  nameWithType: UniqueNameReference.UniqueNameReference
  fullName: VRBuilder.Core.SceneObjects.UniqueNameReference.UniqueNameReference
